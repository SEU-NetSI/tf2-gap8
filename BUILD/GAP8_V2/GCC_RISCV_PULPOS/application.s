
/home/taozhi/tf2/BUILD/GAP8_V2/GCC_RISCV_PULPOS/application：     文件格式 elf32-littleriscv

节：
Idx Name          Size      VMA       LMA       File off  Algn  标志
  0 .data_tiny_fc 00000390  00000004  1b000004  00001004  2**2  CONTENTS, ALLOC, LOAD, DATA
  1 .stack        00001038  1b000398  1b000398  00001398  2**3  CONTENTS, ALLOC, LOAD, DATA
  2 .vectors      000000a0  1c000000  1c000000  00003000  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         0000bda8  1c0000a0  1c0000a0  000030a0  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .init_array   0000003c  1c00be48  1c00be48  0000ee48  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   0000000c  1c00be84  1c00be84  0000ee84  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .init         00000000  1c00be90  1c00be90  00010084  2**0  CONTENTS, ALLOC, LOAD, CODE
  7 .fini         00000000  1c00be90  1c00be90  00010084  2**0  CONTENTS, ALLOC, LOAD, CODE
  8 .preinit_array 00000000  1c00be90  1c00be90  00010084  2**0  CONTENTS, ALLOC, LOAD, DATA
  9 .boot         00000000  1c00be90  1c00be90  00010084  2**0  CONTENTS
 10 .got          00000000  1c00be90  1c00be90  00010084  2**0  CONTENTS, ALLOC, LOAD, DATA
 11 .shbss        00000000  1c00be90  1c00be90  00010084  2**0  CONTENTS
 12 .gnu.offload_funcs 00000000  1c00be90  1c00be90  00010084  2**0  CONTENTS
 13 .gnu.offload_vars 00000000  1c00be90  1c00be90  00010084  2**0  CONTENTS
 14 .rodata       000007f4  1c00be90  1c00be90  0000ee90  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .data         0000026c  1c00c684  1c00c684  0000f684  2**2  CONTENTS, ALLOC, LOAD, DATA
 16 .bss          00000328  1c00c8f0  1c00c8f0  0000f8f0  2**2  ALLOC
 17 .data_tiny_l1 00000018  00000004  1c00cc18  00010004  2**2  CONTENTS, ALLOC, LOAD, DATA
 18 .l1cluster_g  00000068  1000001c  1c00cc30  0001001c  2**2  CONTENTS, ALLOC, LOAD, DATA
 19 .bss_l1       00000000  10000084  10000084  00010084  2**0  CONTENTS
 20 .debug_frame  0000ffd0  00000000  00000000  00010084  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_info   000e8da0  00000000  00000000  00020054  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_abbrev 0000db59  00000000  00000000  00108df4  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    00095930  00000000  00000000  0011694d  2**0  CONTENTS, READONLY, DEBUGGING
 24 .debug_aranges 00002310  00000000  00000000  001ac280  2**3  CONTENTS, READONLY, DEBUGGING
 25 .debug_ranges 00013468  00000000  00000000  001ae590  2**3  CONTENTS, READONLY, DEBUGGING
 26 .debug_line   00049a94  00000000  00000000  001c19f8  2**0  CONTENTS, READONLY, DEBUGGING
 27 .debug_str    00010c01  00000000  00000000  0020b48c  2**0  CONTENTS, READONLY, DEBUGGING
 28 .comment      0000001a  00000000  00000000  0021c08d  2**0  CONTENTS, READONLY
 29 .Pulp_Chip.Info 0000004e  00000000  00000000  0021c0a7  2**0  CONTENTS, READONLY
SYMBOL TABLE:
00000004 l    d  .data_tiny_fc	00000000 .data_tiny_fc
1b000398 l    d  .stack	00000000 .stack
1c000000 l    d  .vectors	00000000 .vectors
1c0000a0 l    d  .text	00000000 .text
1c00be48 l    d  .init_array	00000000 .init_array
1c00be84 l    d  .fini_array	00000000 .fini_array
1c00be90 l    d  .init	00000000 .init
1c00be90 l    d  .fini	00000000 .fini
1c00be90 l    d  .preinit_array	00000000 .preinit_array
1c00be90 l    d  .boot	00000000 .boot
1c00be90 l    d  .got	00000000 .got
1c00be90 l    d  .shbss	00000000 .shbss
1c00be90 l    d  .gnu.offload_funcs	00000000 .gnu.offload_funcs
1c00be90 l    d  .gnu.offload_vars	00000000 .gnu.offload_vars
1c00be90 l    d  .rodata	00000000 .rodata
1c00c684 l    d  .data	00000000 .data
1c00c8f0 l    d  .bss	00000000 .bss
00000004 l    d  .data_tiny_l1	00000000 .data_tiny_l1
1000001c l    d  .l1cluster_g	00000000 .l1cluster_g
10000084 l    d  .bss_l1	00000000 .bss_l1
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .Pulp_Chip.Info	00000000 .Pulp_Chip.Info
00000000 l    df *ABS*	00000000 bridge.c
1c008616 l     F .text	0000001c __rt_event_enqueue
1c008632 l     F .text	00000020 __rt_bridge_check_bridge_req.part.5
1c008652 l     F .text	00000046 __rt_bridge_wait
00000004 l     O .data_tiny_fc	00000004 __rt_bridge_flash_handle
00000008 l     O .data_tiny_fc	00000004 __rt_bridge_flash_type
0000000c l     O .data_tiny_fc	00000004 __rt_bridge_flash_itf
00000010 l     O .data_tiny_fc	00000004 __rt_bridge_flash_cs
00000014 l     O .data_tiny_fc	00000004 __rt_bridge_eeprom_handle
00000000 l    df *ABS*	00000000 events.c
00000000 l    df *ABS*	00000000 periph-v2.c
00000000 l    df *ABS*	00000000 hyperram-v1.c
1c009bf6 l     F .text	00000014 l2_memcpy
1c009c0a l     F .text	00000024 rt_event_enqueue
1c009c2e l     F .text	00000032 pi_task_wait_on.isra.4
1c009f1c l     F .text	00000046 __pi_hyper_copy_exec
1c00a07c l     F .text	00000296 __pi_hyper_copy_misaligned
1c009f62 l     F .text	00000056 __pi_hyper_copy
1c00a02a l     F .text	00000052 exec_pending_task
1c00a312 l     F .text	0000009e __pi_hyper_copy_2d
1c00a3d4 l     F .text	0000002e __rt_hyper_init
1c00c9e4 l     O .bss	00000080 __pi_hyper_temp_buffer
1c00c548 l     O .rodata	00000034 __hyper_pad
1c00cbac l     O .bss	00000004 __pi_hyper_cluster_reqs_first
1c00cbb0 l     O .bss	00000004 __rt_hyper_open_count
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 conf.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 utils.c
1c008436 l     F .text	0000007c __rt_fc_cluster_lock_req
1b000ba0 l     O .stack	00000018 cbsys_first
00000000 l    df *ABS*	00000000 himax.c
00000000 l    df *ABS*	00000000 io.c
1c00a628 l     F .text	0000000e __rt_io_end_of_flush
1c00a636 l     F .text	00000050 __rt_io_uart_wait_req
1c00a686 l     F .text	00000042 __rt_do_putc_host
1c00a6c8 l     F .text	0000005a __rt_io_start
1c00a722 l     F .text	00000020 rt_event_execute.isra.4.constprop.12
1c00a742 l     F .text	00000070 __rt_io_lock
1c00a7b2 l     F .text	00000034 __rt_putc_host_cluster_req
1c00a7e6 l     F .text	00000070 __rt_io_unlock
1c00a856 l     F .text	000000da __rt_io_uart_flush.constprop.11
1c00a930 l     F .text	00000092 __rt_io_uart_wait_pending
1c00a9c2 l     F .text	00000028 __rt_io_stop
1c00ab2e l     F .text	000000ac tfp_putc.isra.9
1c00cafc l     O .bss	00000080 __rt_io_event
1b000bbc l     O .stack	00000010 __rt_io_fc_lock
1c00c870 l     O .data	00000080 __rt_putc_host_buffer
1c00cbc0 l     O .bss	00000004 __rt_io_event_current
1c00cbc4 l     O .bss	00000004 __rt_io_pending_flush
1c00cbc8 l     O .bss	00000004 __rt_putc_host_buffer_index
1c00cbcc l     O .bss	00000004 _rt_io_uart
00000000 l    df *ABS*	00000000 crt0.o
1c000094 l       .vectors	00000000 __rt_no_irq_handler
00000000 l    df *ABS*	00000000 sched.o
1c000132 l       .text	00000000 __rt_handle_special_event
1c00012c l       .text	00000000 __rt_no_first
1c00012e l       .text	00000000 __rt_common
1c000130 l       .text	00000000 enqueue_end
1c000192 l       .text	00000000 __rt_remote_enqueue_event_loop_cluster
1c0001ce l       .text	00000000 __rt_remote_enqueue_event_loop_cluster_continue
1c0001b8 l       .text	00000000 __rt_cluster_pool_update_end
1c0001a0 l       .text	00000000 __rt_cluster_pool_update_loop
1c0001a8 l       .text	00000000 __rt_cluster_pool_update_loop_end
1c0001b0 l       .text	00000000 __rt_cluster_pool_update_no_current
1c0001ec l       .text	00000000 __rt_remote_enqueue_event_loop_next_cluster
00000000 l    df *ABS*	00000000 vectors.o
1c000266 l       .text	00000000 __rt_call_c_function
00000000 l    df *ABS*	00000000 udma-v2.o
1c000356 l       .text	00000000 __rt_udma_no_copy
1c00031e l       .text	00000000 repeat_transfer
1c00036e l       .text	00000000 handle_special_end
1c0002ca l       .text	00000000 resume_after_special_end
1c000308 l       .text	00000000 checkTask
1c0002de l       .text	00000000 __rt_udma_call_enqueue_callback_resume
1c000304 l       .text	00000000 transfer_resume
1c0002fc l       .text	00000000 hyper
1c0002fc l       .text	00000000 fc_tcdm
1c0002fc l       .text	00000000 dual
1c00031e l       .text	00000000 dmaCmd
1c000346 l       .text	00000000 not_last
1c0003b6 l       .text	00000000 i2c_step1
1c0003d2 l       .text	00000000 i2c_step2
1c000378 l       .text	00000000 spim_step3
1c000394 l       .text	00000000 spim_step2
00000000 l    df *ABS*	00000000 soc_event_eu.o
1c000426 l       .text	00000000 __rt_fc_socevents_not_hyper_rx
1c00042c l       .text	00000000 __rt_fc_socevents_not_hyper_tx
1c000446 l       .text	00000000 __rt_soc_evt_no_udma_channel
1c0004b4 l       .text	00000000 rtc_event_handler
1c000472 l       .text	00000000 __rt_soc_evt_pwm
1c000486 l       .text	00000000 __rt_soc_evt_store
1c00049a l       .text	00000000 socevents_set
00000000 l    df *ABS*	00000000 hyperram-v1_asm.o
1c000514 l       .text	00000000 __rt_hyper_handle_copy_end
1c0004ce l       .text	00000000 __rt_hyper_repeat_copy
1c000500 l       .text	00000000 __rt_hyper_repeat_copy_not_last
1c000526 l       .text	00000000 __rt_hyper_handle_emu_task
1c000540 l       .text	00000000 __rt_hyper_handle_pending_tasks
1c0005a2 l       .text	00000000 __rt_hyper_repeat_copy_not_last2
00000000 l    df *ABS*	00000000 gpio.o
1c0005f0 l       .text	00000000 __rt_gpio_handler_end
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 application.c
1c000c5e l     F .text	00000094 cluster
1c00c8f0 l     O .bss	0000000c cluster_dev
1c00c8fc l     O .bss	00000018 conf
1c00cb8c l     O .bss	00000004 Input_1
1c00cb90 l     O .bss	00000004 Output_1
1c00cb98 l     O .bss	00000004 task
00000000 l    df *ABS*	00000000 mnistKernels.c
1c00c914 l     O .bss	0000001c HyperFlash
00000000 l    df *ABS*	00000000 ImgIO.c
00000000 l    df *ABS*	00000000 CNN_Copy.c
00000000 l    df *ABS*	00000000 CNN_Activation_SQ8.c
1c003da4 l     F .text	00000128 KerReductIO_Compact_SQ8_1
00000000 l    df *ABS*	00000000 CNN_Bias_Linear_SQ8.c
00000000 l    df *ABS*	00000000 CNN_Conv_SQ8.c
1c00417a l     F .text	0000012e KerConv2x3from3x3Stride1_V_2Out_SQ8
1c0042a8 l     F .text	00000090 KerConv3x2from3x3Stride1_H_2Out_SQ8
1c004338 l     F .text	000000be KerConv2x3from3x3Stride1_V_SQ8
1c0043f6 l     F .text	000001cc KerConv4x5from5x5Stride1_V_SQ8
1c0045c2 l     F .text	00000116 KerConv3x3Stride1_Body_2Out_SQ8.isra.17
1c0046d8 l     F .text	00000146 KerConv3x3BorderStride1_2Out_SQ8.isra.18
1c00481e l     F .text	000000ba KerConv3x3Stride1_Body_SQ8.isra.19
1c0048d8 l     F .text	0000004e KerConv3x2from3x3Stride1_H_SQ8.isra.20
1c004926 l     F .text	00000120 KerConv3x3BorderStride1_SQ8.isra.21
1c004a46 l     F .text	000001ae KerConv5x5Stride1_Body_SQ8.isra.42
1c004bf4 l     F .text	0000019a KerConv5x4from5x5Stride1_H_SQ8.isra.43
1c004d8e l     F .text	00000296 KerConv5x5BorderStride1_SQ8.isra.44
00000000 l    df *ABS*	00000000 CNN_Pooling_SQ8.c
1c005468 l     F .text	000003a4 KerMaxPool2x2Stride2_SQ8
1c00580c l     F .text	00000258 KerAvgPool2x2Stride2_SQ8
1c005a64 l     F .text	0000011e KerParPoolActivation.constprop.11
00000000 l    df *ABS*	00000000 CNN_SoftMax_SQ8.c
10000020 l     O .l1cluster_g	00000020 Reduct.17332
10000040 l     O .l1cluster_g	00000020 Reduct.17374
10000060 l     O .l1cluster_g	00000020 Reduct.17415
1c00c3c8 l     O .rodata	00000018 FractionExpLUT
1c00c3e0 l     O .rodata	00000018 IntegerExpLUT
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 fs.c
1c006056 l     F .text	00000032 pi_task_wait_on.isra.3
00000000 l    df *ABS*	00000000 read_fs.c
1c00614c l     F .text	00000008 pi_flash_read_async
1c006154 l     F .text	0000003e __pi_read_fs_write
1c006192 l     F .text	00000010 __pi_read_fs_seek
1c0061a2 l     F .text	00000040 __pi_read_fs_direct_read_async
1c0061e2 l     F .text	00000018 __pi_read_fs_copy_async
1c0061fa l     F .text	00000018 __pi_read_fs_copy_2d_async
1c006212 l     F .text	00000024 rt_event_enqueue
1c006236 l     F .text	00000038 __pi_fs_free
1c00626e l     F .text	00000004 __pi_read_fs_unmount
1c006272 l     F .text	00000126 __pi_read_fs_open
1c006398 l     F .text	00000126 __pi_fs_mount_step
1c0064be l     F .text	0000004e __pi_read_fs_close
1c00650c l     F .text	00000098 __pi_read_fs_mount
1c0065a4 l     F .text	00000072 __pi_fs_read_cached
1c0066f6 l     F .text	00000092 __pi_read_fs_try_read
1c006788 l     F .text	00000040 __pi_read_fs_read_async
00000000 l    df *ABS*	00000000 host_fs.c
1c0067c8 l     F .text	0000000c __pi_host_fs_mount
1c0067d4 l     F .text	00000002 __pi_host_fs_unmount
1c0067d6 l     F .text	00000024 rt_event_enqueue
1c0067fa l     F .text	00000006 __pi_host_fs_seek
1c006800 l     F .text	0000007e __pi_host_fs_copy_2d_async
1c00687e l     F .text	00000028 __pi_host_fs_write_async
1c0068a6 l     F .text	00000024 __pi_host_fs_read_async
1c0068ca l     F .text	00000042 __pi_host_fs_copy_async
1c00690c l     F .text	00000002 __pi_host_fs_direct_read_async
1c00690e l     F .text	0000001c __pi_host_fs_close
1c00692a l     F .text	0000005c __pi_host_fs_open
1c00c930 l     O .bss	00000088 bsp_fs_data
00000000 l    df *ABS*	00000000 hyperflash.c
1c006986 l     F .text	0000001c __rt_event_enqueue
1c0069a2 l     F .text	0000000e hyperflash_ioctl
1c0069b0 l     F .text	0000000e hyperflash_set_reg_exec
1c0069be l     F .text	00000040 hyperflash_stall_task
1c0069fe l     F .text	00000088 hyperflash_read_2d_async
1c006c68 l     F .text	00000100 hyperflash_handle_pending_task
1c006a86 l     F .text	00000018 hyperflash_copy_2d_async
1c006a9e l     F .text	000000b0 hyperflash_erase_sector_async
1c00727e l     F .text	00000052 hyperflash_check_erase
1c006b4e l     F .text	000000a6 hyperflash_erase_chip_async
1c006bf4 l     F .text	00000074 hyperflash_read_async
1c006eca l     F .text	0000005c hyperflash_program_async
1c006dc6 l     F .text	00000054 hyperflash_reg_set_async
1c006d68 l     F .text	0000005e hyperflash_reg_get_async
1c006e1a l     F .text	000000b0 hyperflash_program_resume
1c0072d0 l     F .text	00000050 hyperflash_check_program
1c006f26 l     F .text	0000001a hyperflash_copy_async
1c006f40 l     F .text	0000001e hyperflash_close
1c006f5e l     F .text	0000008e hyperflash_open
1c006fec l     F .text	00000032 pi_task_wait_on.isra.3
1c00701e l     F .text	0000002a hyperflash_copy_2d
1c007048 l     F .text	00000022 hyperflash_erase_sector
1c00706a l     F .text	00000022 hyperflash_erase_chip
1c00708c l     F .text	00000022 hyperflash_read
1c0070ae l     F .text	00000022 hyperflash_reg_get
1c0070d0 l     F .text	00000022 hyperflash_reg_set
1c0070f2 l     F .text	00000022 hyperflash_program
1c007114 l     F .text	0000002c hyperflash_copy
1c007140 l     F .text	000000aa hyperflash_erase_resume
1c0071ea l     F .text	00000042 hyperflash_erase_async
1c00722c l     F .text	00000022 hyperflash_erase
1c00724e l     F .text	00000030 hyperflash_get_status_reg
1c00c6d4 l     O .data	00000054 hyperflash_api
00000000 l    df *ABS*	00000000 partition.c
00000000 l    df *ABS*	00000000 flash_partition.c
00000000 l    df *ABS*	00000000 md5.c
1c0075c6 l     F .text	000008d6 body
00000000 l    df *ABS*	00000000 semihost.c
1c0080a2 l     F .text	0000000e __internal_semihost
00000000 l    df *ABS*	00000000 ai_deck.c
1c008138 l     F .text	0000003c __bsp_init_pads
1c00cba0 l     O .bss	00000004 __bsp_init_pads_done
00000000 l    df *ABS*	00000000 init.c
1c00818c l     F .text	00000026 cluster_start
1c00be4c l     O .init_array	00000004 ctor_list
1c00be88 l     O .fini_array	00000004 dtor_list
00000000 l    df *ABS*	00000000 irq.c
00000000 l    df *ABS*	00000000 alloc.c
00000000 l    df *ABS*	00000000 time.c
1c008c84 l     F .text	00000018 __rt_time_poweroff
1c008c9c l     F .text	00000018 __rt_time_poweron
1c00cba4 l     O .bss	00000004 timer_count
00000000 l    df *ABS*	00000000 time_irq.c
00000000 l    df *ABS*	00000000 freq.c
00000000 l    df *ABS*	00000000 pmu_driver.c
1c009140 l     F .text	0000002c SetFllMultDivFactors
1c00916c l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c00c844 l     O .data	00000007 SystemStateToSCUFastSeq
1c00c85c l     O .data	00000003 ToHWDCDC_Pos
1c00c86c l     O .data	00000004 RetPMUStateToPMUState
00000000 l    df *ABS*	00000000 cluster.c
1c00958c l     F .text	00000062 __rt_init_cluster_data
1c0095ee l     F .text	00000064 __rt_cluster_init
1c009652 l     F .text	0000012a __rt_cluster_mount_step
00000000 l    df *ABS*	00000000 pulpos_emu.c
1c009938 l     F .text	0000003c __rt_cluster_pulpos_emu_init
1c00c9b8 l     O .bss	0000002c __rt_pulpos_emu_global_cluster_task
1c00cba8 l     O .bss	00000004 __rt_fc_cluster_device
00000000 l    df *ABS*	00000000 cluster_call.c
00000000 l    df *ABS*	00000000 pads-v1.c
00000000 l    df *ABS*	00000000 pads-v1.c
00000000 l    df *ABS*	00000000 alloc_extern.c
00000000 l    df *ABS*	00000000 gpio-v2.c
1c00ca64 l     O .bss	00000098 __rt_gpio
00000000 l    df *ABS*	00000000 i2s-v1.c
1c00a51e l     F .text	00000034 __rt_i2s_resume
1c00a552 l     F .text	0000002a __rt_i2s_setfreq_after
1c00a57c l     F .text	0000002c __rt_i2s_setfreq_before
1c00cbb4 l     O .bss	00000004 __rt_i2s_first
00000000 l    df *ABS*	00000000 spim-v2.c
1c00cbb8 l     O .bss	00000008 __rt_spim_open_count
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 prf.c
1c00ad9c l     F .text	00000092 _to_x
1c00ae2e l     F .text	00000020 _rlrshift
1c00ae4e l     F .text	00000044 _ldiv5
1c00ae92 l     F .text	00000034 _get_digit
00000000 l    df *ABS*	00000000 uart.c
1c00b9a2 l     F .text	00000024 __rt_uart_setup.isra.5
1c00b9c6 l     F .text	00000022 __rt_uart_setfreq_after
1c00b9e8 l     F .text	00000042 __rt_uart_wait_tx_done.isra.6
1c00ba2a l     F .text	0000002c __rt_uart_setfreq_before
1c00ba56 l     F .text	00000042 __rt_uart_cluster_req
1c00ba98 l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c00cb7c l     O .bss	00000010 __rt_uart
00000000 l    df *ABS*	00000000 pe-eu-v3.o
1c00bd56 l       .text	00000000 __rt_slave_start
1c00bcac l       .text	00000000 __rt_master_event
1c00bcc0 l       .text	00000000 __rt_master_loop
1c00bcb0 l       .text	00000000 __rt_push_event_to_fc_retry
1c00bd48 l       .text	00000000 __rt_push_event_to_fc_wait
1c00bd3a l       .text	00000000 __rt_master_sleep
1c00bcc8 l       .text	00000000 __rt_master_loop_update_next
1c00bd1c l       .text	00000000 __rt_no_stack_check
1c00bd28 l       .text	00000000 __rt_master_no_slave_barrier
1c00bd38 l       .text	00000000 __rt_master_loop_no_slave
1c00bd74 l       .text	00000000 __rt_fork_return
1c00bd78 l       .text	00000000 __rt_wait_for_dispatch
1c00bd8e l       .text	00000000 __rt_other_entry
1c00bd88 l       .text	00000000 __rt_fork_entry
1c00bdb6 l       .text	00000000 __rt_no_stack_check_end
1c00be28 l       .text	00000000 __rt_dma_2d_done
1c00bde6 l       .text	00000000 __rt_dma_2d_redo
1c00bdee l       .text	00000000 __rt_dma_2d_not_last
1c00be10 l       .text	00000000 __rt_dma_2d_exit
00000000 l    df *ABS*	00000000 libgcc2.c
1c009fb8 g     F .text	00000016 pi_hyper_read_async
1c00ac50 g     F .text	00000006 putchar
1c006048 g     F .text	0000000c pi_flash_open
00000000 g       *ABS*	00000000 __rt_debug_init_config_trace
00000350 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_stride
1c008c66 g     F .text	0000000e pi_l2_malloc
1c0085a8 g     F .text	00000038 __rt_fc_cluster_lock
1c009302 g     F .text	000000a4 InitOneFll
1c008c74 g     F .text	00000010 pi_l2_free
00000000 g       *ABS*	00000000 __RT_DEBUG_CONFIG
1c00cbec g     O .bss	00000004 __rt_cluster_tasks
1c00877a g     F .text	00000022 __rt_bridge_send_notif
1c0088ec g     F .text	00000076 rt_event_alloc
00000338 g     O .data_tiny_fc	00000001 __rt_hyper_pending_emu_do_memcpy
1c00a3b0 g     F .text	00000018 pi_hyper_read_2d_async
1c008102 g     F .text	0000001c semihost_write
1c0089c2 g     F .text	00000064 __rt_event_execute
1c0083e4 g     F .text	00000052 __rt_irq_init
1c008aa2 g     F .text	00000048 rt_user_alloc
00000310 g     O .data_tiny_fc	00000004 __rt_hyper_pending_hyper_addr
1c009782 g     F .text	000000d8 pi_cluster_open
1c00ad70 g     F .text	0000002c printf
ffffffff g       *ABS*	00000000 pulp__L2
1c008be2 g     F .text	00000072 __rt_allocs_init
1c00cbd0 g     O .bss	00000004 __rt_alloc_l1
1c00977c g     F .text	00000006 pi_cluster_conf_init
ffffffff g       *ABS*	00000000 pulp__PE
1c000cf2 g     F .text	000001c4 application
1c009e26 g     F .text	0000009e pi_hyper_close
1c008346 g     F .text	0000004c rt_irq_set_handler
00000314 g     O .data_tiny_fc	00000004 __rt_hyper_pending_addr
1c00609a g     F .text	0000002c pi_fs_mount
00000308 g     O .data_tiny_fc	00000004 __rt_hyper_udma_handle
1c009470 g     F .text	00000044 InitFlls
00000018 g     O .data_tiny_fc	00000004 __rt_first_free
1c007352 g     F .text	0000000a pi_partition_get_flash_offset
00000001 g       *ABS*	00000000 __ACTIVE_FC
1c008b66 g     F .text	0000002e rt_free
1c00735e g     F .text	00000004 pi_partition_table_load
00000400 g       *ABS*	00000000 __rt_cl_slave_stack_size
1c009102 g     F .text	0000003e __rt_freq_init
1c0081b2 g     F .text	00000168 __rt_init
00000001 g       *ABS*	00000000 __FC
1c009570 g     F .text	00000012 __rt_fll_init
1b0013d0 g       .stack	00000000 __fc_tcdm_end
1c00a436 g     F .text	00000058 rt_extern_alloc_init
1c008878 g     F .text	00000034 __rt_bridge_init
00000018 g     O .data_tiny_l1	00000004 __rt_cluster_nb_active_pe
0000032c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_hyper_addr
1c00be48 g       .text	00000000 _etext
0000030c g     O .data_tiny_fc	00000004 __rt_hyper_pending_base
1c00c684 g       .data	00000000 sdata
1c0080e6 g     F .text	0000001c semihost_read
1000001c g     O .l1cluster_g	00000004 mnist_L1_Memory
00000001 g       *ABS*	00000000 __rt_nb_cluster
1c00817e g     F .text	0000000e bsp_hyperflash_open
1c007320 g     F .text	00000032 pi_hyperflash_conf_init
00000390 g     O .data_tiny_fc	00000004 __rtc_handler
1c008b36 g     F .text	00000030 rt_alloc
1c00b97c g     F .text	00000026 __rt_uart_cluster_req_done
1c00831a g     F .text	00000028 __rt_deinit
1b000bb8 g     O .stack	00000001 camera_isAwaked
1c00010e g       .text	00000000 __rt_event_enqueue
1c008d2e g     F .text	00000024 rt_time_wait_us
1c00aa44 g     F .text	00000036 memcpy
1c0005da g       .text	00000000 __rt_gpio_handler
1c000246 g       .text	00000000 __rt_illegal_instr
1c008bb8 g     F .text	0000002a __rt_alloc_init_l1_for_fc
1c005b82 g     F .text	000001aa KerParPool2x2Stride2_ReLU_SQ8
1c006114 g     F .text	00000026 pi_fs_write
1c00a42a g     F .text	0000000c __rt_padframe_init
1c00be90 g       .fini_array	00000000 __DTOR_END__
0000020c g       *ABS*	00000000 __cluster_text_size
1c0004c8 g       .text	00000000 __rt_hyper_handle_copy
1c00abda g     F .text	0000002c puts
1c00c758  w    O .data	00000018 __rt_padframe_profiles
00000330 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_addr
00000344 g     O .data_tiny_fc	00000004 __rt_hyper_pending_tasks_last
1c00897c g     F .text	00000022 rt_event_get_blocking
1c00c8f0 g       .bss	00000000 _bss_start
1c00c8f0 g       .data	00000000 edata
1c008b94 g     F .text	00000024 __rt_alloc_init_l1
1c00c838  w    O .data	00000004 __rt_iodev_uart_baudrate
1c000174 g       .text	00000000 __rt_remote_enqueue_event
1c00c84c g     O .data	00000010 PMUState
1c00c684 g       .data	00000000 _sdata
10000084 g       .l1cluster_g	00000000 __l1_end
1c000560 g       .text	00000000 __rt_hyper_handle_burst
1c008ed0 g     F .text	00000134 rt_periph_copy
1c00aaf2 g     F .text	0000003c __rt_putc_uart
1b000398 g     O .stack	00000800 __rt_fc_stack
1c00163c g     F .text	000007a8 S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu
00000010 g     O .data_tiny_l1	00000004 __rt_dma_last_pending
1c00013c g       .text	00000000 __rt_bridge_enqueue_event
1c00aec6 g     F .text	00000ab6 _prf
10000084 g       .l1cluster_g	00000000 _libgomp_start
1c000930 g     F .text	0000032e .hidden __umoddi3
1c008dde g     F .text	000000f2 __rt_timer_handler
1c00402c g     F .text	0000014e KerParLinearLayerFullFeatB32_ReLU_SQ8
1c00cbd4 g     O .bss	00000004 __rt_alloc_l2
1b0013d0 g       .stack	00000000 stack
1c0005f4 g     F .text	0000033c .hidden __udivdi3
1c00acf4 g     F .text	0000000a abort
1c0060ce g     F .text	00000008 pi_fs_open
1c008962 g     F .text	0000001a rt_event_get
1c00cbe0 g     O .bss	00000008 __rt_freq_domains
00000080 g       *ABS*	00000000 _l1_preload_size
1c00010c g       .text	00000000 _init
1c0052be g     F .text	000001aa KerParConv5x5Stride1_SQ8
1c00cc18 g       .bss	00000000 _bss_end
1c00755a g     F .text	0000006c flash_partition_find_first
1c00c738  w    O .data	00000010 __rt_padframe_hyper
1c00875c g     F .text	0000001e __rt_bridge_set_available
1c00354c g     F .text	000000f6 ReadValue
1c00bdb8 g       .text	00000000 __rt_dma_2d
1c00bc3c g       .text	00000000 __rt_pe_start
1c00cbdc g     O .bss	00000004 first_delayed
0000038c g     O .data_tiny_fc	00000004 __rt_rtc_init_done
1c00c840 g     O .data	00000004 mnist_L2_Memory
00000008 g       *ABS*	00000000 __NB_ACTIVE_PE
1c003ecc g     F .text	000000ac KerParReductIO_CC_SQ8
1c009b5a g     F .text	0000004a pi_cluster_send_task_to_cl
1c0093a6 g     F .text	000000ca __rt_pmu_cluster_power_up
1b000bd0 g       .stack	00000000 stack_start
00000004 g     O .data_tiny_l1	0000000c __rt_cluster_pool
00010000 g       *ABS*	00000000 __L1Cl
1c00bace g     F .text	0000008e __rt_uart_open
1c00a008 g     F .text	00000022 pi_hyper_write
1c008520 g     F .text	00000022 __rt_utils_init
1c009a60 g     F .text	000000fa pi_cluster_send_task_to_cl_async
1c006616 g     F .text	000000e0 __pi_fs_read
1c00c728  w    O .data	00000010 __rt_padframe_default
1c00ac06 g     F .text	0000001a fputc_locked
1c008c5a g     F .text	0000000c pi_cl_l1_free
1c006144 g     F .text	00000008 pi_fs_seek
1c003c00 g     F .text	000001a4 CNN_NormBW_offset_fps
1c00bb5c g     F .text	0000004e rt_uart_close
1c0032b8 g     F .text	00000294 mnistCNN
1c009cc8 g     F .text	0000015e pi_hyper_open
1c008aea g     F .text	0000004c rt_user_free
1c0060e6 g     F .text	00000026 pi_fs_read
1c00be48 g       .init_array	00000000 __CTOR_LIST__
1c009004 g     F .text	00000056 __rt_periph_wait_event
1c0090b8 g     F .text	0000004a rt_freq_set_and_get
1c0080b0 g     F .text	00000006 semihost_write0
1c008392  w    F .text	00000002 illegal_insn_handler_c
0000033c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_task
1c00988c g     F .text	00000070 __rt_cluster_push_fc_event
00000320 g     O .data_tiny_fc	00000004 __rt_hyper_end_task
1c00bc3c g       .text	00000000 __cluster_text_start
1c009ff0 g     F .text	00000018 pi_hyper_write_async
1c000080 g       .vectors	00000000 _start
1c009fce g     F .text	00000022 pi_hyper_read
1c008a82 g     F .text	00000020 rt_user_alloc_init
00000000 g       *ABS*	00000000 __rt_config
1c007e9c g     F .text	00000032 MD5_Init
00000334 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_size
1c00a9fe g     F .text	00000020 strncmp
1c00cc18 g       .bss	00000000 _l1_preload_start_inL2
1c008542 g     F .text	00000032 __rt_fc_lock
10000084 g       .l1cluster_g	00000000 __l1_heap_start
1c0088d4 g     F .text	00000018 __rt_wait_event_prepare_blocking
1c008698 g     F .text	00000078 __rt_bridge_handle_notif
1c00045e g       .text	00000000 __rt_soc_evt_no_udma
1c0060d6 g     F .text	00000008 pi_fs_close
10000080 g     O .l1cluster_g	00000004 __rt_cluster_fc_task_lock
00000340 g     O .data_tiny_fc	00000004 __rt_hyper_pending_tasks
1c00899e g     F .text	00000024 rt_event_push
1c00879c g     F .text	00000022 __rt_bridge_clear_notif
1c007434 g     F .text	00000102 flash_partition_table_load
00000014 g     O .data_tiny_l1	00000004 __rt_dma_first_pending
1c00c770 g     O .data	000000c0 __hal_debug_struct
1c006088 g     F .text	00000012 pi_fs_conf_init
1c007f6a g     F .text	00000138 MD5_Final
1c008d52 g     F .text	0000008c __rt_time_init
1c009c8c g     F .text	0000002c __pi_hyper_pin_reset_settings
00080000 g       *ABS*	00000000 __L2
00000008 g       *ABS*	00000000 __rt_nb_pe
1c0000a0 g       .text	00000000 _entry
1c007362 g     F .text	0000005e pi_partition_find_first
1c008a26 g     F .text	0000002c __rt_wait_event
1c002b90 g     F .text	000006cc mnistCNN_Construct
1c0094b4 g     F .text	000000bc __rt_pmu_init
1c008174 g     F .text	0000000a bsp_hyperflash_conf_init
1c0060de g     F .text	00000008 pi_fs_read_async
1c008394 g     F .text	00000050 __rt_handle_illegal_instr
1c00aa34 g     F .text	00000010 memset
1c009ec4 g     F .text	00000058 __pi_hyper_copy_aligned
1c000eb6 g     F .text	00000006 main
1c009582 g     F .text	00000002 __rt_fll_deinit
1c0004a4 g       .text	00000000 udma_event_handler_end
1c00cbd8 g     O .bss	00000004 __rt_alloc_fc_tcdm
1c00a5fa g     F .text	0000000a __rt_himax_init
1c0023f4 g     F .text	0000053a S13_Op_FULLY_CONNECTED_0_6_fusion
1c0085e0 g     F .text	00000036 __rt_fc_cluster_unlock
00000318 g     O .data_tiny_fc	00000004 __rt_hyper_pending_repeat
1c00acfe g     F .text	00000072 __rt_io_init
1c00c748  w    O .data	00000010 __rt_padframe_hyper_gpio
00000000 g       *ABS*	00000000 __FETCH_ALL
1c006054 g     F .text	00000002 __flash_conf_init
1c00c83c  w    O .data	00000004 __rt_platform
1c00325c g     F .text	0000005c mnistCNN_Destruct
1c00be84 g       .init_array	00000000 __CTOR_END__
1c00c684 g     O .data	00000028 __pi_read_fs_api
1c009c60 g     F .text	0000002c __pi_hyper_pin_settings
1c00a9ea g     F .text	00000014 strcmp
1c008132 g     F .text	00000006 semihost_exit
1c00be84 g       .fini_array	00000000 __DTOR_LIST__
1c0088ac g     F .text	00000028 __rt_event_init
000002e0 g     O .data_tiny_fc	00000028 __rt_udma_extra_callback_arg
1c0005b6 g       .text	00000000 pwm_event_handler
00000348 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_size_2d
1c00ac56 g     F .text	00000028 _prf_locked
00000000 g       *ABS*	00000000 __USE_UART
1c00a3c8 g     F .text	00000008 __rt_hyper_resume_emu_task
1c009222 g     F .text	000000e0 SetFllFrequency
1c005024 g     F .text	0000029a KerParConv3x3Stride1_SQ8
1c009584 g     F .text	00000002 __rt_flls_constructor
1c008cb4 g     F .text	0000007a rt_event_push_delayed
1c00010c g       .text	00000000 _fini
1c008a52 g     F .text	0000001a rt_event_wait
1c000090 g       .vectors	00000000 __rt_debug_struct_ptr
1c00be90 g     O .rodata	00000100 .hidden __clz_tab
00000328 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_channel
1c00bd94 g       .text	00000000 __rt_set_slave_stack
1c008a80 g     F .text	00000002 pi_task_push_delayed_us
1c008c54 g     F .text	00000006 pi_cl_l1_malloc
1c00c830  w    O .data	00000004 __rt_fc_stack_size
1c0073c0 g     F .text	00000074 flash_partition_table_verify
1c0003f4 g       .text	00000000 __rt_fc_socevents_handler
000002b8 g     O .data_tiny_fc	00000028 __rt_udma_extra_callback
00000358 g     O .data_tiny_fc	00000034 dev_rtc
1c00610c g     F .text	00000008 pi_fs_write_async
1c00c6ac g     O .data	00000028 __pi_host_fs_api
1c00ac20 g     F .text	00000030 fputc
1c00a48e g     F .text	0000000a rt_extern_alloc_deinit
1c009bd8 g     F .text	0000001e pi_pad_init
1c00613a g     F .text	0000000a pi_fs_copy_async
1c000200 g       .text	00000000 __rt_call_external_c_function
1c008574 g     F .text	00000034 __rt_fc_unlock
00000004 g       .data_tiny_l1	00000000 _l1_preload_start
1c00a498 g     F .text	00000086 __pi_gpio_handler
1c000ebc g     F .text	00000780 S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu
000002b0 g     O .data_tiny_fc	00000008 __rt_socevents_status
1c0087be g     F .text	00000042 __rt_bridge_printf_flush
1c009cb8 g     F .text	00000010 pi_hyper_conf_init
1c00c834  w    O .data	00000004 __rt_iodev
0000001c g     O .data_tiny_fc	00000014 __rt_sched
1c000000 g       .vectors	00000000 __irq_vector_base
1c003642 g     F .text	000005be ReadImageFromFile
1c00c8f0 g       .data	00000000 _edata
00000000 g       *ABS*	00000000 __ZERO
1c00905a g     F .text	0000005e __rt_periph_init
1c00735c g     F .text	00000002 pi_partition_table_free
1c00a616 g     F .text	00000012 __rt_spim_init
1c008710 g     F .text	0000004c __rt_bridge_check_connection
1c009974 g     F .text	00000090 rt_cluster_call
00000800 g       *ABS*	00000000 __rt_stack_size
1c008342 g     F .text	00000004 pi_open_from_conf
ffffffff g       *ABS*	00000000 pulp__FC
1c001de4 g     F .text	00000610 S10_Op_FULLY_CONNECTED_0_5_fusion
1c00a5a8 g     F .text	00000052 __rt_i2s_init
00000003 g       *ABS*	00000000 __rt_debug_init_config
1c007536 g     F .text	00000024 flash_partition_table_free
1c00cbf0 g     O .bss	00000028 __rt_fc_cluster_data
1c00ac7e g     F .text	00000076 exit
1c008a6c g     F .text	00000014 __rt_event_sched_init
0000034c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_length
1c0002b4 g       .text	00000000 udma_event_handler
1c00985a g     F .text	00000032 pi_cluster_close
1c00a3d0 g     F .text	00000004 __rt_hyper_resume_copy
00000354 g     O .data_tiny_fc	00000004 pwmEventsStatus
1c0060c6 g     F .text	00000008 pi_fs_unmount
1c00811e g     F .text	00000014 semihost_seek
1c0084f0 g     F .text	00000030 __rt_cbsys_exec
0000ff7c g       .l1cluster_g	00000000 __l1_heap_size
1c009192 g     F .text	00000090 __rt_pmu_cluster_power_down
0000031c g     O .data_tiny_fc	00000004 __rt_hyper_pending_repeat_size
1b000b98 g     O .stack	00000004 __rt_debug_config_trace
1c003f78 g     F .text	000000b4 KerParSetBiasB32_SQ8
1c00cb9c  w    O .bss	00000004 __rt_iodev_uart_channel
1c0000a0 g       .text	00000000 _stext
1c00c860 g     O .data	00000004 PMURetentionState
ffffffff g       *ABS*	00000000 pulp__L1CL
1c00aa1e g     F .text	00000016 strlen
1c00a402 g     F .text	00000028 rt_padframe_set
1c0080e0 g     F .text	00000006 semihost_close
1c009ba4 g     F .text	00000034 pi_pad_set_function
1c00cbe8 g     O .bss	00000004 __rt_wakeup_use_fast
1c00cb94 g     O .bss	00000004 mnist_L3_Flash
00000400 g       *ABS*	00000000 __rt_cl_master_stack_size
1c00aa7a g     F .text	0000001a strchr
1c008800 g     F .text	00000078 __rt_bridge_req_shutdown
1c00babe g     F .text	00000010 rt_uart_conf_init
1c00be48 g       .text	00000000 __cluster_text_end
1c00bbde g     F .text	0000005c __rt_uart_init
1c00cc98 g       *ABS*	00000000 __l2_end
1c009a04 g     F .text	0000005c rt_cluster_mount
1c00a604 g     F .text	00000012 __rt_rtc_init
1c00bbaa g     F .text	00000034 rt_uart_cluster_write
1c000098 g       .vectors	00000000 __rt_semihosting_call
1c007ece g     F .text	0000009c MD5_Update
1b000b9c g     O .stack	00000004 __rt_debug_config
1c009586 g     F .text	00000006 __rt_fll_set_freq
1c0084b2 g     F .text	0000003e __rt_cbsys_add
1c0098fc g     F .text	0000003c __rt_cluster_new
1c00aa94 g     F .text	0000005e __rt_putc_debug_bridge
1c005d2c g     F .text	0000031c KerParSoftMax_SQ8
1c00be48 g       .text	00000000 _endtext
00000324 g     O .data_tiny_fc	00000004 __rt_hyper_current_task
1c0080b6 g     F .text	0000002a semihost_open
ffffffff g       *ABS*	00000000 pulp__L1FC
1c00c864 g     O .data	00000008 FllsFrequency
1c00292e g     F .text	00000262 S14_SoftMax
00000030 g     O .data_tiny_fc	00000280 periph_channels



Disassembly of section .vectors:

1c000000 <__irq_vector_base>:


#ifdef ARCHI_CORE_HAS_1_10
  j __rt_illegal_instr
#else
  j __rt_no_irq_handler
1c000000:	0940006f          	j	1c000094 <__rt_no_irq_handler>
#endif

  j __rt_no_irq_handler
1c000004:	0900006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000008:	08c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00000c:	0880006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000010:	0840006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000014:	0800006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000018:	07c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00001c:	0780006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000020:	0740006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000024:	0700006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000028:	06c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00002c:	0680006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000030:	0640006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000034:	0600006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000038:	05c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00003c:	0580006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000040:	0540006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000044:	0500006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000048:	04c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00004c:	0480006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000050:	0440006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000054:	0400006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000058:	03c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00005c:	0380006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000060:	0340006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000064:	0300006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000068:	02c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00006c:	0280006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000070:	0240006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000074:	0200006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000078:	01c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00007c:	0180006f          	j	1c000094 <__rt_no_irq_handler>

1c000080 <_start>:


  .org 0x80
  .global _start
_start:
  jal x0, _entry
1c000080:	0200006f          	j	1c0000a0 <_entry>


#ifndef __RT_MODE_BARE

  jal x0, __rt_illegal_instr
1c000084:	1c20006f          	j	1c000246 <__rt_illegal_instr>
	...

1c000090 <__rt_debug_struct_ptr>:
1c000090:	c770                	sw	a2,76(a4)
1c000092:	1c00                	addi	s0,sp,560

1c000094 <__rt_no_irq_handler>:
  .word __hal_debug_struct

#endif

__rt_no_irq_handler:
  j __rt_no_irq_handler
1c000094:	0000006f          	j	1c000094 <__rt_no_irq_handler>

1c000098 <__rt_semihosting_call>:

#endif

  .global __rt_semihosting_call
__rt_semihosting_call:
  ebreak
1c000098:	00100073          	ebreak
  jr          ra
1c00009c:	00008067          	ret

Disassembly of section .text:

1c0000a0 <_entry>:
  csrw    0x7A1, x0
1c0000a0:	7a101073          	csrw	pcmr,zero
  csrr    a0, 0xF14
1c0000a4:	f1402573          	csrr	a0,mhartid
  andi    a1, a0, 0x1f
1c0000a8:	01f57593          	andi	a1,a0,31
  srli    a0, a0, 5
1c0000ac:	8115                	srli	a0,a0,0x5
  li      a2, ARCHI_FC_CID
1c0000ae:	02000613          	li	a2,32
  bne     a0, a2, __rt_pe_start
1c0000b2:	00c50463          	beq	a0,a2,1c0000ba <_entry+0x1a>
1c0000b6:	3870b06f          	j	1c00bc3c <__cluster_text_start>
  la      t0, _bss_start
1c0000ba:	0000d297          	auipc	t0,0xd
1c0000be:	83628293          	addi	t0,t0,-1994 # 1c00c8f0 <_edata>
  la      t1, _bss_end
1c0000c2:	0000d317          	auipc	t1,0xd
1c0000c6:	b5630313          	addi	t1,t1,-1194 # 1c00cc18 <_bss_end>
  sw      zero,0(t0)
1c0000ca:	0002a023          	sw	zero,0(t0)
  addi    t0, t0, 4
1c0000ce:	0291                	addi	t0,t0,4
  bltu    t0, t1, 1b
1c0000d0:	fe62ede3          	bltu	t0,t1,1c0000ca <_entry+0x2a>
  la   a0, __rt_fc_stack_size
1c0000d4:	0000c517          	auipc	a0,0xc
1c0000d8:	75c50513          	addi	a0,a0,1884 # 1c00c830 <__rt_fc_stack_size>
  lw   a0, 0(a0)
1c0000dc:	4108                	lw	a0,0(a0)
  la   x2, __rt_fc_stack
1c0000de:	ff000117          	auipc	sp,0xff000
1c0000e2:	2ba10113          	addi	sp,sp,698 # 1b000398 <__rt_fc_stack>
  add  x2, x2, a0
1c0000e6:	912a                	add	sp,sp,a0
  jal  x1, __rt_init
1c0000e8:	0ca080ef          	jal	ra,1c0081b2 <__rt_init>
  addi  a0, x0, 0
1c0000ec:	00000513          	li	a0,0
  addi  a1, x0, 0
1c0000f0:	00000593          	li	a1,0
  la    t2, main
1c0000f4:	00001397          	auipc	t2,0x1
1c0000f8:	dc238393          	addi	t2,t2,-574 # 1c000eb6 <main>
  jalr  x1, t2
1c0000fc:	000380e7          	jalr	t2
  mv    s0, a0
1c000100:	842a                	mv	s0,a0
  jal  x1, __rt_deinit
1c000102:	218080ef          	jal	ra,1c00831a <__rt_deinit>
  mv   a0, s0
1c000106:	8522                	mv	a0,s0
  jal  x1, exit
1c000108:	3770a0ef          	jal	ra,1c00ac7e <exit>

1c00010c <_fini>:
  ret
1c00010c:	8082                	ret

1c00010e <__rt_event_enqueue>:
  //   x10/a0: temporary register
  //   x11/a1: the event
  //   x12/a2: temporary register

  // First check if it is a normal event
  andi    x10, x11, 0x3
1c00010e:	0035f513          	andi	a0,a1,3
  bne     x10, x0, __rt_handle_special_event
1c000112:	02051063          	bnez	a0,1c000132 <__rt_handle_special_event>

  // Enqueue normal event
  la      x10, __rt_sched
1c000116:	e4000517          	auipc	a0,0xe4000
1c00011a:	f0650513          	addi	a0,a0,-250 # 1c <__rt_sched>
  sw      x0, RT_EVENT_T_NEXT(x11)
1c00011e:	0005a023          	sw	zero,0(a1)
  lw      x12, RT_SCHED_T_FIRST(x10)
1c000122:	4110                	lw	a2,0(a0)
  beqz    x12, __rt_no_first
1c000124:	c601                	beqz	a2,1c00012c <__rt_no_first>
  lw      x12, RT_SCHED_T_LAST(x10)
1c000126:	4150                	lw	a2,4(a0)
  sw      x11, RT_EVENT_T_NEXT(x12)
1c000128:	c20c                	sw	a1,0(a2)
  j       __rt_common
1c00012a:	a011                	j	1c00012e <__rt_common>

1c00012c <__rt_no_first>:

__rt_no_first:
  sw      x11, RT_SCHED_T_FIRST(x10)
1c00012c:	c10c                	sw	a1,0(a0)

1c00012e <__rt_common>:

__rt_common:
  sw      x11, RT_SCHED_T_LAST(x10)
1c00012e:	c14c                	sw	a1,4(a0)

1c000130 <enqueue_end>:

enqueue_end:
  jr          x9
1c000130:	8482                	jr	s1

1c000132 <__rt_handle_special_event>:

__rt_handle_special_event:
  li      x10, ~0x3
1c000132:	5571                	li	a0,-4
  and     x11, x11, x10
1c000134:	8de9                	and	a1,a1,a0
  lw      x12, PI_CALLBACK_T_ENTRY(x11)
1c000136:	41d0                	lw	a2,4(a1)
  lw      x10, PI_CALLBACK_T_ARG(x11)
1c000138:	4588                	lw	a0,8(a1)
  j       __rt_call_external_c_function
1c00013a:	a0d9                	j	1c000200 <__rt_call_external_c_function>

1c00013c <__rt_bridge_enqueue_event>:
    // to enqueue an event to the FC scheduler.

    .global __rt_bridge_enqueue_event
__rt_bridge_enqueue_event:

    sw  x8, -4(sp)
1c00013c:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c000140:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c000144:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c000148:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c00014c:	fec12623          	sw	a2,-20(sp)

    // Everything is done from C code
    la      x12, __rt_bridge_handle_notif
1c000150:	00008617          	auipc	a2,0x8
1c000154:	54860613          	addi	a2,a2,1352 # 1c008698 <__rt_bridge_handle_notif>
    jal     x9, __rt_call_external_c_function
1c000158:	0a8004ef          	jal	s1,1c000200 <__rt_call_external_c_function>

    lw  x8, -4(sp)
1c00015c:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c000160:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c000164:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c000168:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c00016c:	fec12603          	lw	a2,-20(sp)

    mret
1c000170:	30200073          	mret

1c000174 <__rt_remote_enqueue_event>:
    // The FC must get it and push it to the scheduler

    .global __rt_remote_enqueue_event
__rt_remote_enqueue_event:

    sw  x8, -4(sp)
1c000174:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c000178:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c00017c:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c000180:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c000184:	fec12623          	sw	a2,-20(sp)

#ifndef ARCHI_NB_CLUSTER
    li   x8, 1
1c000188:	4405                	li	s0,1
#else
    li   x8, ARCHI_NB_CLUSTER
#endif
    la   x9, __rt_fc_cluster_data
1c00018a:	0000d497          	auipc	s1,0xd
1c00018e:	a6648493          	addi	s1,s1,-1434 # 1c00cbf0 <__rt_fc_cluster_data>

1c000192 <__rt_remote_enqueue_event_loop_cluster>:

    // Loop over the clusters to see if there is an event to push
__rt_remote_enqueue_event_loop_cluster:
    lw   a1, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c000192:	40cc                	lw	a1,4(s1)
    beq  a1, x0, __rt_remote_enqueue_event_loop_cluster_continue
1c000194:	02058d63          	beqz	a1,1c0001ce <__rt_remote_enqueue_event_loop_cluster_continue>

    // Everytime a task is finished, first check if we can update the queue head
    // as it is not updated by cluster side to avoid race conditions.
    // At least this task won t be there anymore after we update, and maybe even
    // more tasks, which is not an issue, as we compare against the head.
    lw   a1, RT_FC_CLUSTER_DATA_T_CLUSTER_POOL(x9)
1c000198:	48cc                	lw	a1,20(s1)
    lw   a0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c00019a:	41c8                	lw	a0,4(a1)

    beq  a0, x0, __rt_cluster_pool_update_end
1c00019c:	00050e63          	beqz	a0,1c0001b8 <__rt_cluster_pool_update_end>

1c0001a0 <__rt_cluster_pool_update_loop>:

__rt_cluster_pool_update_loop:
    lw    a2, RT_CLUSTER_TASK_PENDING(a0)
1c0001a0:	5150                	lw	a2,36(a0)
    bnez  a2, __rt_cluster_pool_update_loop_end
1c0001a2:	e219                	bnez	a2,1c0001a8 <__rt_cluster_pool_update_loop_end>

    lw   a0, RT_CLUSTER_TASK_NEXT(a0)
1c0001a4:	5108                	lw	a0,32(a0)
    bnez a0, __rt_cluster_pool_update_loop
1c0001a6:	fd6d                	bnez	a0,1c0001a0 <__rt_cluster_pool_update_loop>

1c0001a8 <__rt_cluster_pool_update_loop_end>:


__rt_cluster_pool_update_loop_end:
    
    beqz a0, __rt_cluster_pool_update_no_current
1c0001a8:	c501                	beqz	a0,1c0001b0 <__rt_cluster_pool_update_no_current>

    lw   a0, RT_CLUSTER_TASK_NEXT(a0)
1c0001aa:	5108                	lw	a0,32(a0)
    sw   a0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c0001ac:	c1c8                	sw	a0,4(a1)

    j    __rt_cluster_pool_update_end
1c0001ae:	a029                	j	1c0001b8 <__rt_cluster_pool_update_end>

1c0001b0 <__rt_cluster_pool_update_no_current>:

__rt_cluster_pool_update_no_current:

    sw   x0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c0001b0:	0005a223          	sw	zero,4(a1)
    sw   x0, RT_CLUSTER_CALL_POOL_T_FIRST_LAST_FC(a1)
1c0001b4:	0005a423          	sw	zero,8(a1)

1c0001b8 <__rt_cluster_pool_update_end>:




__rt_cluster_pool_update_end:
    lw   a1, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c0001b8:	40cc                	lw	a1,4(s1)

    lw   a2, RT_FC_CLUSTER_DATA_T_TRIG_ADDR(x9)
1c0001ba:	4890                	lw	a2,16(s1)
    sw   x0, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c0001bc:	0004a223          	sw	zero,4(s1)

    sw   x0, 0(a2)
1c0001c0:	00062023          	sw	zero,0(a2)

    la   x9, __rt_remote_enqueue_event_loop_cluster_continue
1c0001c4:	00000497          	auipc	s1,0x0
1c0001c8:	00a48493          	addi	s1,s1,10 # 1c0001ce <__rt_remote_enqueue_event_loop_cluster_continue>
    j    __rt_event_enqueue
1c0001cc:	b789                	j	1c00010e <__rt_event_enqueue>

1c0001ce <__rt_remote_enqueue_event_loop_cluster_continue>:

__rt_remote_enqueue_event_loop_cluster_continue:
    addi x8, x8, -1
1c0001ce:	147d                	addi	s0,s0,-1
    bgt  x8, x0, __rt_remote_enqueue_event_loop_next_cluster
1c0001d0:	00804e63          	bgtz	s0,1c0001ec <__rt_remote_enqueue_event_loop_next_cluster>



    lw  x8, -4(sp)
1c0001d4:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c0001d8:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c0001dc:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c0001e0:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c0001e4:	fec12603          	lw	a2,-20(sp)

    mret
1c0001e8:	30200073          	mret

1c0001ec <__rt_remote_enqueue_event_loop_next_cluster>:

__rt_remote_enqueue_event_loop_next_cluster:
    la   x9, __rt_fc_cluster_data
1c0001ec:	0000d497          	auipc	s1,0xd
1c0001f0:	a0448493          	addi	s1,s1,-1532 # 1c00cbf0 <__rt_fc_cluster_data>
    li   a1, RT_FC_CLUSTER_DATA_T_SIZEOF
1c0001f4:	02800593          	li	a1,40
    mul  a1, x8, a1
1c0001f8:	02b405b3          	mul	a1,s0,a1
    add  x9, x9, a1
1c0001fc:	94ae                	add	s1,s1,a1
    j __rt_remote_enqueue_event_loop_cluster
1c0001fe:	bf51                	j	1c000192 <__rt_remote_enqueue_event_loop_cluster>

1c000200 <__rt_call_external_c_function>:
#endif

  .global __rt_call_external_c_function
__rt_call_external_c_function:

    add  sp, sp, -128
1c000200:	7119                	addi	sp,sp,-128

    sw   ra, 0x00(sp)
1c000202:	c006                	sw	ra,0(sp)
    sw   gp, 0x04(sp)
1c000204:	c20e                	sw	gp,4(sp)
    sw   tp, 0x08(sp)
1c000206:	c412                	sw	tp,8(sp)
    sw   t0, 0x0C(sp)
1c000208:	c616                	sw	t0,12(sp)
    sw   t1, 0x10(sp)
1c00020a:	c81a                	sw	t1,16(sp)
    sw   t2, 0x14(sp)
1c00020c:	ca1e                	sw	t2,20(sp)
    sw   a3, 0x24(sp)
1c00020e:	d236                	sw	a3,36(sp)
    sw   a4, 0x28(sp)
1c000210:	d43a                	sw	a4,40(sp)
    sw   a5, 0x2C(sp)
1c000212:	d63e                	sw	a5,44(sp)
    sw   a6, 0x30(sp)
1c000214:	d842                	sw	a6,48(sp)
    sw   a7, 0x34(sp)
1c000216:	da46                	sw	a7,52(sp)
    sw   t3, 0x38(sp)
1c000218:	dc72                	sw	t3,56(sp)
    sw   t4, 0x3C(sp)
1c00021a:	de76                	sw	t4,60(sp)
    sw   t5, 0x40(sp)
1c00021c:	c0fa                	sw	t5,64(sp)
    sw   t6, 0x4C(sp)
1c00021e:	c6fe                	sw	t6,76(sp)

    jalr ra, a2
1c000220:	000600e7          	jalr	a2

    lw   ra, 0x00(sp)
1c000224:	4082                	lw	ra,0(sp)
    lw   gp, 0x04(sp)
1c000226:	4192                	lw	gp,4(sp)
    lw   tp, 0x08(sp)
1c000228:	4222                	lw	tp,8(sp)
    lw   t0, 0x0C(sp)
1c00022a:	42b2                	lw	t0,12(sp)
    lw   t1, 0x10(sp)
1c00022c:	4342                	lw	t1,16(sp)
    lw   t2, 0x14(sp)
1c00022e:	43d2                	lw	t2,20(sp)
    lw   a3, 0x24(sp)
1c000230:	5692                	lw	a3,36(sp)
    lw   a4, 0x28(sp)
1c000232:	5722                	lw	a4,40(sp)
    lw   a5, 0x2C(sp)
1c000234:	57b2                	lw	a5,44(sp)
    lw   a6, 0x30(sp)
1c000236:	5842                	lw	a6,48(sp)
    lw   a7, 0x34(sp)
1c000238:	58d2                	lw	a7,52(sp)
    lw   t3, 0x38(sp)
1c00023a:	5e62                	lw	t3,56(sp)
    lw   t4, 0x3C(sp)
1c00023c:	5ef2                	lw	t4,60(sp)
    lw   t5, 0x40(sp)
1c00023e:	4f06                	lw	t5,64(sp)
    lw   t6, 0x4C(sp)
1c000240:	4fb6                	lw	t6,76(sp)

    add  sp, sp, 128
1c000242:	6109                	addi	sp,sp,128

    jr   x9
1c000244:	8482                	jr	s1

1c000246 <__rt_illegal_instr>:

  .section .text
  
    .global __rt_illegal_instr
__rt_illegal_instr:
    sw   ra, -4(sp)
1c000246:	fe112e23          	sw	ra,-4(sp)
    sw   a0, -8(sp)
1c00024a:	fea12c23          	sw	a0,-8(sp)
    la   a0, __rt_handle_illegal_instr
1c00024e:	00008517          	auipc	a0,0x8
1c000252:	14650513          	addi	a0,a0,326 # 1c008394 <__rt_handle_illegal_instr>
    jal  ra, __rt_call_c_function
1c000256:	010000ef          	jal	ra,1c000266 <__rt_call_c_function>
    lw   ra, -4(sp)
1c00025a:	ffc12083          	lw	ra,-4(sp)
    lw   a0, -8(sp)
1c00025e:	ff812503          	lw	a0,-8(sp)
#if PULP_CORE == CORE_RISCV_V4
    mret
1c000262:	30200073          	mret

1c000266 <__rt_call_c_function>:
#endif


__rt_call_c_function:

    add  sp, sp, -128
1c000266:	7119                	addi	sp,sp,-128

    sw   ra, 0x00(sp)
1c000268:	c006                	sw	ra,0(sp)
    sw   gp, 0x04(sp)
1c00026a:	c20e                	sw	gp,4(sp)
    sw   tp, 0x08(sp)
1c00026c:	c412                	sw	tp,8(sp)
    sw   t0, 0x0C(sp)
1c00026e:	c616                	sw	t0,12(sp)
    sw   t1, 0x10(sp)
1c000270:	c81a                	sw	t1,16(sp)
    sw   t2, 0x14(sp)
1c000272:	ca1e                	sw	t2,20(sp)
    sw   a1, 0x1C(sp)
1c000274:	ce2e                	sw	a1,28(sp)
    sw   a2, 0x20(sp)
1c000276:	d032                	sw	a2,32(sp)
    sw   a3, 0x24(sp)
1c000278:	d236                	sw	a3,36(sp)
    sw   a4, 0x28(sp)
1c00027a:	d43a                	sw	a4,40(sp)
    sw   a5, 0x2C(sp)
1c00027c:	d63e                	sw	a5,44(sp)
    sw   a6, 0x30(sp)
1c00027e:	d842                	sw	a6,48(sp)
    sw   a7, 0x34(sp)
1c000280:	da46                	sw	a7,52(sp)
    sw   t3, 0x38(sp)
1c000282:	dc72                	sw	t3,56(sp)
    sw   t4, 0x3C(sp)
1c000284:	de76                	sw	t4,60(sp)
    sw   t5, 0x40(sp)
1c000286:	c0fa                	sw	t5,64(sp)
    sw   t6, 0x4C(sp)
1c000288:	c6fe                	sw	t6,76(sp)

    jalr ra, a0
1c00028a:	000500e7          	jalr	a0

    lw   ra, 0x00(sp)
1c00028e:	4082                	lw	ra,0(sp)
    lw   gp, 0x04(sp)
1c000290:	4192                	lw	gp,4(sp)
    lw   tp, 0x08(sp)
1c000292:	4222                	lw	tp,8(sp)
    lw   t0, 0x0C(sp)
1c000294:	42b2                	lw	t0,12(sp)
    lw   t1, 0x10(sp)
1c000296:	4342                	lw	t1,16(sp)
    lw   t2, 0x14(sp)
1c000298:	43d2                	lw	t2,20(sp)
    lw   a1, 0x1C(sp)
1c00029a:	45f2                	lw	a1,28(sp)
    lw   a2, 0x20(sp)
1c00029c:	5602                	lw	a2,32(sp)
    lw   a3, 0x24(sp)
1c00029e:	5692                	lw	a3,36(sp)
    lw   a4, 0x28(sp)
1c0002a0:	5722                	lw	a4,40(sp)
    lw   a5, 0x2C(sp)
1c0002a2:	57b2                	lw	a5,44(sp)
    lw   a6, 0x30(sp)
1c0002a4:	5842                	lw	a6,48(sp)
    lw   a7, 0x34(sp)
1c0002a6:	58d2                	lw	a7,52(sp)
    lw   t3, 0x38(sp)
1c0002a8:	5e62                	lw	t3,56(sp)
    lw   t4, 0x3C(sp)
1c0002aa:	5ef2                	lw	t4,60(sp)
    lw   t5, 0x40(sp)
1c0002ac:	4f06                	lw	t5,64(sp)
    lw   t6, 0x4C(sp)
1c0002ae:	4fb6                	lw	t6,76(sp)

    add  sp, sp, 128
1c0002b0:	6109                	addi	sp,sp,128

    jr   ra
1c0002b2:	8082                	ret

1c0002b4 <udma_event_handler>:

  .global udma_event_handler
udma_event_handler:

  // Dequeue the transfer which have just finished and mark it as done
  lw   x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0002b4:	4080                	lw	s0,0(s1)
  lw   x11, RT_PERIPH_CHANNEL_T_FIRST_TO_ENQUEUE(x9)   // This is used later on, just put here to fill the slot
1c0002b6:	448c                	lw	a1,8(s1)
  beq  x8, x0, __rt_udma_no_copy                       // Special case where there is no copy, just register the event in the bitfield
1c0002b8:	08040f63          	beqz	s0,1c000356 <__rt_udma_no_copy>
  lw   x12, RT_PERIPH_COPY_T_REPEAT(x8)
1c0002bc:	4c50                	lw	a2,28(s0)
  lw   x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0002be:	4848                	lw	a0,20(s0)
  bne  x12, x0, repeat_transfer
1c0002c0:	04061f63          	bnez	a2,1c00031e <dmaCmd>
  sw   x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0002c4:	c088                	sw	a0,0(s1)
  
  // Handle any special end-of-transfer control
  lw       x10, RT_PERIPH_COPY_T_CTRL(x8)
1c0002c6:	4448                	lw	a0,12(s0)
  bnez     x10, handle_special_end
1c0002c8:	e15d                	bnez	a0,1c00036e <handle_special_end>

1c0002ca <resume_after_special_end>:
resume_after_special_end:


  // Now check if there are some transfers enqueued in the SW FIFO to be enqueued to the UDMA
  beq x11, x0, checkTask
1c0002ca:	02058f63          	beqz	a1,1c000308 <checkTask>

  // x9 contains the pointer to the channel and x11 the first copy

  // Update the FIFO pointers and just copy from node to UDMA
  lw  x12, RT_PERIPH_COPY_T_ENQUEUE_CALLBACK(x11)
1c0002ce:	4990                	lw	a2,16(a1)
  lw  x10, RT_PERIPH_COPY_T_NEXT(x11)
1c0002d0:	49c8                	lw	a0,20(a1)
  beqz x12, __rt_udma_call_enqueue_callback_resume
1c0002d2:	c611                	beqz	a2,1c0002de <__rt_udma_call_enqueue_callback_resume>

  la  x9, __rt_udma_call_enqueue_callback_resume
1c0002d4:	00000497          	auipc	s1,0x0
1c0002d8:	00a48493          	addi	s1,s1,10 # 1c0002de <__rt_udma_call_enqueue_callback_resume>
  jr  x12
1c0002dc:	8602                	jr	a2

1c0002de <__rt_udma_call_enqueue_callback_resume>:

__rt_udma_call_enqueue_callback_resume:
  lw  x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0002de:	44d0                	lw	a2,12(s1)
  sw  x10, RT_PERIPH_CHANNEL_T_FIRST_TO_ENQUEUE(x9)
1c0002e0:	c488                	sw	a0,8(s1)
  lw  x10, RT_PERIPH_COPY_T_ADDR(x11)
1c0002e2:	4188                	lw	a0,0(a1)
  lw  x9, RT_PERIPH_COPY_T_SIZE(x11)
1c0002e4:	41c4                	lw	s1,4(a1)
  sw  x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0002e6:	c208                	sw	a0,0(a2)
  sw  x9, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0002e8:	c244                	sw	s1,4(a2)

  lw  x9, RT_PERIPH_COPY_T_CTRL(x11)
1c0002ea:	45c4                	lw	s1,12(a1)
  andi x9, x9, (1<<RT_PERIPH_COPY_CTRL_TYPE_WIDTH)-1
1c0002ec:	88bd                	andi	s1,s1,15
  li  x10, RT_PERIPH_COPY_SPECIAL_ENQUEUE_THRESHOLD
1c0002ee:	4515                	li	a0,5
  blt x9, x10, transfer_resume
1c0002f0:	00a4ca63          	blt	s1,a0,1c000304 <transfer_resume>
  li          x10, RT_PERIPH_COPY_HYPER
  beq         x9, x10, hyper
  li          x10, RT_PERIPH_COPY_FC_TCDM
  beq         x9, x10, fc_tcdm
#else
  p.beqimm      x9, RT_PERIPH_COPY_HYPER, hyper
1c0002f4:	0064a463          	p.beqimm	s1,6,1c0002fc <dual>
  p.beqimm      x9, RT_PERIPH_COPY_FC_TCDM, fc_tcdm
1c0002f8:	0074a263          	p.beqimm	s1,7,1c0002fc <dual>

1c0002fc <dual>:
#ifdef RV_ISA_RV32
  li    x10, ~(1<<UDMA_CHANNEL_SIZE_LOG2)
  and   x9, x12, x10
  lw    x10, RT_PERIPH_COPY_T_HYPER_ADDR(x11)
#else
  lw    x10, RT_PERIPH_COPY_T_HYPER_ADDR(x11)
1c0002fc:	51c8                	lw	a0,36(a1)
  p.bclr  x9, x12, 0, UDMA_CHANNEL_SIZE_LOG2
1c0002fe:	c04634b3          	p.bclr	s1,a2,0,4
#endif
  sw    x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c000302:	d088                	sw	a0,32(s1)

1c000304 <transfer_resume>:
#endif

transfer_resume:
  lw  x10, RT_PERIPH_COPY_T_CFG(x11)
1c000304:	4588                	lw	a0,8(a1)
  sw  x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c000306:	c608                	sw	a0,8(a2)

1c000308 <checkTask>:

checkTask:

  // Check if we have a DMA transfer from L2 to L1   
  //lw          x10, RT_PERIPH_COPY_T_DMACMD(x8)           // Not null if we must transfer
  lw          x11, RT_PERIPH_COPY_T_EVENT(x8)             // Read this in advance to fill the slot, it is used later on in case there is no DMA command
1c000308:	4c0c                	lw	a1,24(s0)

  //bne         x10, zero, dmaCmd
  la          x9, udma_event_handler_end
1c00030a:	00000497          	auipc	s1,0x0
1c00030e:	19a48493          	addi	s1,s1,410 # 1c0004a4 <udma_event_handler_end>
  bne         x11, zero, __rt_event_enqueue
1c000312:	00058463          	beqz	a1,1c00031a <checkTask+0x12>
1c000316:	df9ff06f          	j	1c00010e <__rt_event_enqueue>

  // Loop again in case there are still events in the FIFO
  j udma_event_handler_end
1c00031a:	18a0006f          	j	1c0004a4 <udma_event_handler_end>

1c00031e <dmaCmd>:
//   x12 : number of bytes to repeat
repeat_transfer:

#ifdef ARCHI_UDMA_HAS_HYPER

  lw      x11, RT_PERIPH_CHANNEL_T_BASE(x9)
1c00031e:	44cc                	lw	a1,12(s1)
#ifdef RV_ISA_RV32
  li      x10, ~(1<<UDMA_CHANNEL_SIZE_LOG2)
  and     x9, x11, x10
  lw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
#else
  lw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
1c000320:	5048                	lw	a0,36(s0)
  p.bclr  x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c000322:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add     x10, x10, x12
1c000326:	9532                	add	a0,a0,a2
  sw      x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c000328:	d088                	sw	a0,32(s1)
  sw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
1c00032a:	d048                	sw	a0,36(s0)

  lw      x10, RT_PERIPH_COPY_T_ADDR(x8)
1c00032c:	4008                	lw	a0,0(s0)
  lw      x9, RT_PERIPH_COPY_T_REPEAT_SIZE(x8)
1c00032e:	5004                	lw	s1,32(s0)
  add     x10, x10, x12
1c000330:	9532                	add	a0,a0,a2
  sub     x9, x9, x12
1c000332:	8c91                	sub	s1,s1,a2
  blt     x12, x9, not_last
1c000334:	00964963          	blt	a2,s1,1c000346 <not_last>
  mv      x12, x9
1c000338:	8626                	mv	a2,s1
  sw      x0, RT_PERIPH_COPY_T_REPEAT(x8)
1c00033a:	00042e23          	sw	zero,28(s0)
  beq     x12, x0, udma_event_handler_end
1c00033e:	00061463          	bnez	a2,1c000346 <not_last>
1c000342:	1620006f          	j	1c0004a4 <udma_event_handler_end>

1c000346 <not_last>:

not_last:
  sw      x10, RT_PERIPH_COPY_T_ADDR(x8)
1c000346:	c008                	sw	a0,0(s0)
  sw      x9, RT_PERIPH_COPY_T_REPEAT_SIZE(x8)
1c000348:	d004                	sw	s1,32(s0)
  sw      x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c00034a:	c188                	sw	a0,0(a1)
  sw      x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c00034c:	c1d0                	sw	a2,4(a1)

  li      x10, UDMA_CHANNEL_CFG_EN
1c00034e:	4541                	li	a0,16
  sw      x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c000350:	c588                	sw	a0,8(a1)

#endif

  j           udma_event_handler_end
1c000352:	1520006f          	j	1c0004a4 <udma_event_handler_end>

1c000356 <__rt_udma_no_copy>:




__rt_udma_no_copy:
  la      x9, __rt_socevents_status
1c000356:	e4000497          	auipc	s1,0xe4000
1c00035a:	f5a48493          	addi	s1,s1,-166 # 2b0 <__rt_socevents_status>
  lw      x8, 0(x9)
1c00035e:	4080                	lw	s0,0(s1)
  li      x11, 1
1c000360:	4585                	li	a1,1
  sll     x10, x11, x10
1c000362:	00a59533          	sll	a0,a1,a0
  or      x8, x8, x10
1c000366:	8c49                	or	s0,s0,a0
  sw      x8, 0(x9)
1c000368:	c080                	sw	s0,0(s1)
  j udma_event_handler_end
1c00036a:	13a0006f          	j	1c0004a4 <udma_event_handler_end>

1c00036e <handle_special_end>:
  li          x12, RT_PERIPH_COPY_I2C_STEP1
  beq         x10, x12, i2c_step1
  li          x12, RT_PERIPH_COPY_I2C_STEP2
  beq         x10, x12, i2c_step2
#else
  p.beqimm    x10, RT_PERIPH_COPY_I2C_STEP1, i2c_step1  
1c00036e:	04352463          	p.beqimm	a0,3,1c0003b6 <i2c_step1>
  p.beqimm    x10, RT_PERIPH_COPY_I2C_STEP2, i2c_step2
1c000372:	06452063          	p.beqimm	a0,4,1c0003d2 <i2c_step2>
#endif

  j           resume_after_special_end
1c000376:	bf91                	j	1c0002ca <resume_after_special_end>

1c000378 <spim_step3>:


spim_step3:
  // The current copy was enqueued to configure spi, cs and send command
  // now we need to reenqueue the same copy with the user buffer.
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL1(x8)
1c000378:	5408                	lw	a0,40(s0)
  sw          x10, RT_PERIPH_COPY_T_CTRL(x8)
1c00037a:	c448                	sw	a0,12(s0)

  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00037c:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c00037e:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000380:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c000382:	44d0                	lw	a2,12(s1)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL2(x8)
1c000384:	5448                	lw	a0,44(s0)
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c000386:	c208                	sw	a0,0(a2)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL0(x8)
1c000388:	5048                	lw	a0,36(s0)
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c00038a:	c248                	sw	a0,4(a2)
  lw          x10, RT_PERIPH_COPY_T_CFG(x8)
1c00038c:	4408                	lw	a0,8(s0)
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c00038e:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c000390:	1140006f          	j	1c0004a4 <udma_event_handler_end>

1c000394 <spim_step2>:

spim_step2:
  // Now that the user data has been pushed, we must push an EOT command
  sw          x0, RT_PERIPH_COPY_T_CTRL(x8)
1c000394:	00042623          	sw	zero,12(s0)
  
  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000398:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c00039a:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00039c:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  #if PULP_CHIP_FAMILY == CHIP_GAP

  lw          x8, RT_PERIPH_COPY_T_PERIPH_DATA(x8)
1c00039e:	4060                	lw	s0,68(s0)
  li          x12, SPI_CMD_EOT(0)
1c0003a0:	90000637          	lui	a2,0x90000
  sw          x12, 0(x8)
1c0003a4:	c010                	sw	a2,0(s0)
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003a6:	44d0                	lw	a2,12(s1)
  sw          x8, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0003a8:	c200                	sw	s0,0(a2)
  addi        x10, x8, RT_PERIPH_COPY_T_PERIPH_DATA
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)

  #endif

  li          x10, 4
1c0003aa:	4511                	li	a0,4
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0003ac:	c248                	sw	a0,4(a2)
  li          x10, UDMA_CHANNEL_CFG_EN
1c0003ae:	4541                	li	a0,16
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0003b0:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0003b2:	0f20006f          	j	1c0004a4 <udma_event_handler_end>

1c0003b6 <i2c_step1>:
 */

i2c_step1:
  // The current copy was enqueued to configure i2c, cs and send command
  // now we need to reenqueue the same copy with the user buffer.
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL1(x8)
1c0003b6:	5408                	lw	a0,40(s0)
  sw          x10, RT_PERIPH_COPY_T_CTRL(x8)
1c0003b8:	c448                	sw	a0,12(s0)

  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003ba:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0003bc:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003be:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003c0:	44d0                	lw	a2,12(s1)
  lw          x10, RT_PERIPH_COPY_T_ADDR(x8)
1c0003c2:	4008                	lw	a0,0(s0)
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0003c4:	c208                	sw	a0,0(a2)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL0(x8)
1c0003c6:	5048                	lw	a0,36(s0)
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0003c8:	c248                	sw	a0,4(a2)
  lw          x10, RT_PERIPH_COPY_T_CFG(x8)
1c0003ca:	4408                	lw	a0,8(s0)
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0003cc:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0003ce:	0d60006f          	j	1c0004a4 <udma_event_handler_end>

1c0003d2 <i2c_step2>:

i2c_step2:
  // Now that the user data has been pushed, we must push a STOP command
  sw          x0, RT_PERIPH_COPY_T_CTRL(x8)
1c0003d2:	00042623          	sw	zero,12(s0)
  
  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003d6:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0003d8:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003da:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  #if PULP_CHIP_FAMILY == CHIP_GAP

  lw          x8, RT_PERIPH_COPY_T_PERIPH_DATA(x8)
1c0003dc:	4060                	lw	s0,68(s0)
  li          x12, I2C_CMD_STOP
1c0003de:	02000613          	li	a2,32
  sw          x12, 0(x8)
1c0003e2:	c010                	sw	a2,0(s0)
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003e4:	44d0                	lw	a2,12(s1)
  sw          x8, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0003e6:	c200                	sw	s0,0(a2)
  addi        x10, x8, RT_PERIPH_COPY_T_PERIPH_DATA
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)

  #endif

  li          x10, 1
1c0003e8:	4505                	li	a0,1
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0003ea:	c248                	sw	a0,4(a2)
  li          x10, UDMA_CHANNEL_CFG_EN
1c0003ec:	4541                	li	a0,16
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0003ee:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0003f0:	0b40006f          	j	1c0004a4 <udma_event_handler_end>

1c0003f4 <__rt_fc_socevents_handler>:

  .global __rt_fc_socevents_handler
  .extern pwm_event_handler
__rt_fc_socevents_handler:
// The stack is first adjusted to have stack-based load/store compressed
  add sp, sp, -128
1c0003f4:	7119                	addi	sp,sp,-128
  sw  x8, 0(sp)
1c0003f6:	c022                	sw	s0,0(sp)
  sw  x9, 4(sp)
1c0003f8:	c226                	sw	s1,4(sp)
  sw  x10, 8(sp)
1c0003fa:	c42a                	sw	a0,8(sp)
  sw  x11, 12(sp)
1c0003fc:	c62e                	sw	a1,12(sp)
  sw  x12, 16(sp)
1c0003fe:	c832                	sw	a2,16(sp)


  // Pop one element from the FIFO
  li  x8, ARCHI_EU_ADDR + EU_SOC_EVENTS_AREA_OFFSET + EU_SOC_EVENTS_CURRENT_EVENT
1c000400:	00201437          	lui	s0,0x201
1c000404:	f0040413          	addi	s0,s0,-256 # 200f00 <__L2+0x180f00>
  lw  x8, 0(x8)
1c000408:	4000                	lw	s0,0(s0)

  // Now that we popped the element, we can clear the soc event FIFO event as the FIFO is generating
  // an event as soon as the FIFO is not empty
  li  x9, 1<<PULP_SOC_EVENTS_EVENT
1c00040a:	080004b7          	lui	s1,0x8000
  li  x10, ARCHI_EU_DEMUX_ADDR + EU_CORE_BUFFER_CLEAR
1c00040e:	00204537          	lui	a0,0x204
1c000412:	02850513          	addi	a0,a0,40 # 204028 <__L2+0x184028>
  sw  x9, 0(x10)
1c000416:	c104                	sw	s1,0(a0)
  // Due to a HW bug in the core on Gap, we have to load this value early
#ifdef CONFIG_NO_FC_TINY
  la    x12, __rt_hyper_udma_handle
  lw    x12, 0(x12)
#else
  lw    x12, %tiny(__rt_hyper_udma_handle)(x0)
1c000418:	30802603          	lw	a2,776(zero) # 308 <__rt_hyper_udma_handle>
#endif
#endif

  // Extract ID part
  p.extractu x10, x8, EU_SOC_EVENTS_EVENT_MASK_BITS-1, EU_SOC_EVENTS_EVENT_MASK_OFFSET
1c00041c:	ce041533          	p.extractu	a0,s0,7,0

#ifdef ARCHI_UDMA_HAS_HYPER
  p.bneimm x10, UDMA_EVENT_ID(ARCHI_UDMA_HYPER_ID(0)), __rt_fc_socevents_not_hyper_rx
1c000420:	00653363          	p.bneimm	a0,6,1c000426 <__rt_fc_socevents_not_hyper_rx>
  jr x12
1c000424:	8602                	jr	a2

1c000426 <__rt_fc_socevents_not_hyper_rx>:

__rt_fc_socevents_not_hyper_rx:
  p.bneimm x10, UDMA_EVENT_ID(ARCHI_UDMA_HYPER_ID(0))+1, __rt_fc_socevents_not_hyper_tx
1c000426:	00753363          	p.bneimm	a0,7,1c00042c <__rt_fc_socevents_not_hyper_tx>
  jr x12
1c00042a:	8602                	jr	a2

1c00042c <__rt_fc_socevents_not_hyper_tx>:
#endif

__rt_fc_socevents_not_hyper_tx:

  // UDMA CHANNEL EVENTS
  li x9, ARCHI_SOC_EVENT_UDMA_NB_EVT
1c00042c:	44cd                	li	s1,19
  bge x10, x9, __rt_soc_evt_no_udma_channel
1c00042e:	00955c63          	ble	s1,a0,1c000446 <__rt_soc_evt_no_udma_channel>
  andi   x8, x10, 1
  srli   x10, x10, 1
  or     x10, x10, x8
#endif

  la     x8, periph_channels
1c000432:	e4000417          	auipc	s0,0xe4000
1c000436:	bfe40413          	addi	s0,s0,-1026 # 30 <periph_channels>
  slli   x9, x10, RT_PERIPH_CHANNEL_T_SIZEOF_LOG2
1c00043a:	00551493          	slli	s1,a0,0x5
  add    x9, x9, x8
1c00043e:	94a2                	add	s1,s1,s0

  lw   x11, RT_PERIPH_CHANNEL_T_CALLBACK(x9)
1c000440:	4ccc                	lw	a1,28(s1)
  lw   x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000442:	4080                	lw	s0,0(s1)

  jr   x11
1c000444:	8582                	jr	a1

1c000446 <__rt_soc_evt_no_udma_channel>:


__rt_soc_evt_no_udma_channel:

  li x9, ARCHI_SOC_EVENT_UDMA_FIRST_EXTRA_EVT + ARCHI_SOC_EVENT_UDMA_NB_EXTRA_EVT
1c000446:	44f9                	li	s1,30
  bge x10, x9, __rt_soc_evt_no_udma
1c000448:	00955b63          	ble	s1,a0,1c00045e <__rt_soc_evt_no_udma>

  addi x8, x10, -ARCHI_SOC_EVENT_UDMA_FIRST_EXTRA_EVT
1c00044c:	fec50413          	addi	s0,a0,-20
  slli x11, x8, 2
1c000450:	00241593          	slli	a1,s0,0x2
  la   x12, __rt_udma_extra_callback
  p.lw x12, x12(x11)
  la   x9, __rt_udma_extra_callback_arg
  p.lw x11, x9(x11)
#else
  lw   x12, %tiny(__rt_udma_extra_callback)(x11)
1c000454:	2b85a603          	lw	a2,696(a1)
  lw   x11, %tiny(__rt_udma_extra_callback_arg)(x11)
1c000458:	2e05a583          	lw	a1,736(a1)
#endif

  jr   x12
1c00045c:	8602                	jr	a2

1c00045e <__rt_soc_evt_no_udma>:

  .global __rt_soc_evt_no_udma
__rt_soc_evt_no_udma:
#ifdef RT_CONFIG_GPIO_ENABLED
  // GPIO EVENT
  li      x9, ARCHI_SOC_EVENT_GPIO
1c00045e:	02a00493          	li	s1,42
  beq     x10, x9, __rt_gpio_handler
1c000462:	00951463          	bne	a0,s1,1c00046a <__rt_soc_evt_no_udma+0xc>
1c000466:	1740006f          	j	1c0005da <__rt_gpio_handler>
#endif

  li      x9, ARCHI_SOC_EVENT_RTC_IRQ
1c00046a:	02c00493          	li	s1,44
  beq     x9, x10, rtc_event_handler
1c00046e:	04a48363          	beq	s1,a0,1c0004b4 <rtc_event_handler>

1c000472 <__rt_soc_evt_pwm>:


// pwm event handler
//x9 : nb of event that will be used by handler
__rt_soc_evt_pwm:
  li x11, ARCHI_SOC_EVENT_ADV_TIMER_NB_EVT-1 // 3
1c000472:	458d                	li	a1,3
  addi x9, x11, ARCHI_SOC_EVENT_ADV_TIMER_FIRST_EVT //3+38=41
1c000474:	02658493          	addi	s1,a1,38
  sub x9, x9, x10 // 41 - 56
1c000478:	8c89                	sub	s1,s1,a0
  bgt x9, x11, __rt_soc_evt_store // if > 3 not for pwm
1c00047a:	0095c663          	blt	a1,s1,1c000486 <__rt_soc_evt_store>
  blt x9, x0,  __rt_soc_evt_store // if > 3 not for pwm
1c00047e:	0004c463          	bltz	s1,1c000486 <__rt_soc_evt_store>
  j pwm_event_handler
1c000482:	1340006f          	j	1c0005b6 <pwm_event_handler>

1c000486 <__rt_soc_evt_store>:


__rt_soc_evt_store:
  // If the event is not handled, store it in the soc event status mask
  la      x9, __rt_socevents_status
1c000486:	e4000497          	auipc	s1,0xe4000
1c00048a:	e2a48493          	addi	s1,s1,-470 # 2b0 <__rt_socevents_status>
  li      x11, 32
1c00048e:	02000593          	li	a1,32
  blt     x10, x11, socevents_set
1c000492:	00b54463          	blt	a0,a1,1c00049a <socevents_set>
  addi    x9, x9, 4
1c000496:	0491                	addi	s1,s1,4
  addi    x10, x10, -32
1c000498:	1501                	addi	a0,a0,-32

1c00049a <socevents_set>:

socevents_set:
  lw      x11, 0(x9)
1c00049a:	408c                	lw	a1,0(s1)
  p.bsetr x12, x11, x10
1c00049c:	80a5c633          	p.bsetr	a2,a1,a0
  sw      x12, 0(x9)
1c0004a0:	c090                	sw	a2,0(s1)
  j       udma_event_handler_end
1c0004a2:	a009                	j	1c0004a4 <udma_event_handler_end>

1c0004a4 <udma_event_handler_end>:

  .global udma_event_handler_end
udma_event_handler_end:
  lw  x8, 0(sp)
1c0004a4:	4402                	lw	s0,0(sp)
  lw  x9, 4(sp)
1c0004a6:	4492                	lw	s1,4(sp)
  lw  x10, 8(sp)
1c0004a8:	4522                	lw	a0,8(sp)
  lw  x11, 12(sp)
1c0004aa:	45b2                	lw	a1,12(sp)
  lw  x12, 16(sp)
1c0004ac:	4642                	lw	a2,16(sp)
  add sp, sp, 128
1c0004ae:	6109                	addi	sp,sp,128
  mret
1c0004b0:	30200073          	mret

1c0004b4 <rtc_event_handler>:


rtc_event_handler:
  lw    x11, __rtc_handler
1c0004b4:	e4000597          	auipc	a1,0xe4000
1c0004b8:	edc5a583          	lw	a1,-292(a1) # 390 <__rtc_handler>
  la    x9, udma_event_handler_end
1c0004bc:	00000497          	auipc	s1,0x0
1c0004c0:	fe848493          	addi	s1,s1,-24 # 1c0004a4 <udma_event_handler_end>
  j   __rt_event_enqueue
1c0004c4:	c4bff06f          	j	1c00010e <__rt_event_enqueue>

1c0004c8 <__rt_hyper_handle_copy>:

#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  lw    x12, 0(x8)
#else
  lw    x12, %tiny(__rt_hyper_pending_repeat)(x0)
1c0004c8:	31802603          	lw	a2,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beqz      x12, __rt_hyper_handle_copy_end
1c0004cc:	c621                	beqz	a2,1c000514 <__rt_hyper_handle_copy_end>

1c0004ce <__rt_hyper_repeat_copy>:

#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_base
  lw        x11, 0(x8)
#else
  lw        x11, %tiny(__rt_hyper_pending_base)(x0)
1c0004ce:	30c02583          	lw	a1,780(zero) # 30c <__rt_hyper_pending_base>
#else
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_hyper_addr
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c0004d2:	31002503          	lw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>
#endif
  p.bclr    x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c0004d6:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add       x10, x10, x12
1c0004da:	9532                	add	a0,a0,a2
  sw        x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c0004dc:	d088                	sw	a0,32(s1)
  la        x8, __rt_hyper_pending_addr
  lw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  lw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c0004de:	30a02823          	sw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>

  lw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c0004e2:	31402503          	lw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  lw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c0004e6:	31c02483          	lw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  add       x10, x10, x12
1c0004ea:	9532                	add	a0,a0,a2
  sub       x9, x9, x12
1c0004ec:	8c91                	sub	s1,s1,a2
  blt       x12, x9, __rt_hyper_repeat_copy_not_last
1c0004ee:	00964963          	blt	a2,s1,1c000500 <__rt_hyper_repeat_copy_not_last>
  mv        x12, x9
1c0004f2:	8626                	mv	a2,s1
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_pending_repeat)(x0)
1c0004f4:	30002c23          	sw	zero,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beq       x12, x0, udma_event_handler_end
1c0004f8:	00061463          	bnez	a2,1c000500 <__rt_hyper_repeat_copy_not_last>
1c0004fc:	fa9ff06f          	j	1c0004a4 <udma_event_handler_end>

1c000500 <__rt_hyper_repeat_copy_not_last>:
  la        x8, __rt_hyper_pending_addr
  sw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  sw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c000500:	30a02a23          	sw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  sw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c000504:	30902e23          	sw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  sw        x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c000508:	c188                	sw	a0,0(a1)
  sw        x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c00050a:	c1d0                	sw	a2,4(a1)

  li        x10, UDMA_CHANNEL_CFG_EN
1c00050c:	4541                	li	a0,16
  sw        x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c00050e:	c588                	sw	a0,8(a1)

  j         udma_event_handler_end
1c000510:	f95ff06f          	j	1c0004a4 <udma_event_handler_end>

1c000514 <__rt_hyper_handle_copy_end>:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_end_task
  lw        x11, 0(x8)
  sw        x0, 0(x8)
#else
  lw        x11, %tiny(__rt_hyper_end_task)(x0)
1c000514:	32002583          	lw	a1,800(zero) # 320 <__rt_hyper_end_task>
  sw        x0, %tiny(__rt_hyper_end_task)(x0)
1c000518:	32002023          	sw	zero,800(zero) # 320 <__rt_hyper_end_task>
#endif
  beqz      x11, __rt_hyper_handle_emu_task
1c00051c:	c589                	beqz	a1,1c000526 <__rt_hyper_handle_emu_task>
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_current_task
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_current_task)(x0)
1c00051e:	32002223          	sw	zero,804(zero) # 324 <__rt_hyper_current_task>
#endif
  jal       x9, __rt_event_enqueue
1c000522:	bedff4ef          	jal	s1,1c00010e <__rt_event_enqueue>

1c000526 <__rt_hyper_handle_emu_task>:
__rt_hyper_handle_emu_task:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_emu_task
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_emu_task)(x0)
1c000526:	33c02503          	lw	a0,828(zero) # 33c <__rt_hyper_pending_emu_task>
#endif
  beqz      x10, __rt_hyper_handle_pending_tasks
1c00052a:	c919                	beqz	a0,1c000540 <__rt_hyper_handle_pending_tasks>

  la      x12, __rt_hyper_resume_emu_task
1c00052c:	0000a617          	auipc	a2,0xa
1c000530:	e9c60613          	addi	a2,a2,-356 # 1c00a3c8 <__rt_hyper_resume_emu_task>
  la        x9, udma_event_handler_end
1c000534:	00000497          	auipc	s1,0x0
1c000538:	f7048493          	addi	s1,s1,-144 # 1c0004a4 <udma_event_handler_end>
  j         __rt_call_external_c_function
1c00053c:	cc5ff06f          	j	1c000200 <__rt_call_external_c_function>

1c000540 <__rt_hyper_handle_pending_tasks>:
__rt_hyper_handle_pending_tasks:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_tasks
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_tasks)(x0)
1c000540:	34002503          	lw	a0,832(zero) # 340 <__rt_hyper_pending_tasks>
#endif
  beqz      x10, udma_event_handler_end
1c000544:	00051463          	bnez	a0,1c00054c <__rt_hyper_handle_pending_tasks+0xc>
1c000548:	f5dff06f          	j	1c0004a4 <udma_event_handler_end>

  la      x12, __rt_hyper_resume_copy
1c00054c:	0000a617          	auipc	a2,0xa
1c000550:	e8460613          	addi	a2,a2,-380 # 1c00a3d0 <__rt_hyper_resume_copy>
  la        x9, udma_event_handler_end
1c000554:	00000497          	auipc	s1,0x0
1c000558:	f5048493          	addi	s1,s1,-176 # 1c0004a4 <udma_event_handler_end>
  j         __rt_call_external_c_function
1c00055c:	ca5ff06f          	j	1c000200 <__rt_call_external_c_function>

1c000560 <__rt_hyper_handle_burst>:
  la        x8, __rt_hyper_pending_repeat
  lw        x12, 0(x8)
  la        x8, __rt_hyper_pending_base
  lw        x11, 0(x8)
#else
  lw        x12, %tiny(__rt_hyper_pending_repeat)(x0)
1c000560:	31802603          	lw	a2,792(zero) # 318 <__rt_hyper_pending_repeat>

  lw        x11, %tiny(__rt_hyper_pending_base)(x0)
1c000564:	30c02583          	lw	a1,780(zero) # 30c <__rt_hyper_pending_base>
#else
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_hyper_addr
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c000568:	31002503          	lw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>
#endif
  p.bclr    x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c00056c:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add       x10, x10, x12
1c000570:	9532                	add	a0,a0,a2
  sw        x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c000572:	d088                	sw	a0,32(s1)
  la        x8, __rt_hyper_pending_addr
  lw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  lw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c000574:	30a02823          	sw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>

  lw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c000578:	31402503          	lw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  lw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c00057c:	31c02483          	lw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  add       x10, x10, x12
1c000580:	9532                	add	a0,a0,a2
  sub       x9, x9, x12
1c000582:	8c91                	sub	s1,s1,a2
  blt       x12, x9, __rt_hyper_repeat_copy_not_last2
1c000584:	00964f63          	blt	a2,s1,1c0005a2 <__rt_hyper_repeat_copy_not_last2>

  la        x12, __rt_hyper_handle_copy
1c000588:	00000617          	auipc	a2,0x0
1c00058c:	f4060613          	addi	a2,a2,-192 # 1c0004c8 <__rt_hyper_handle_copy>
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_udma_handle
  sw        x12, 0(x8)
#else
  sw        x12, %tiny(__rt_hyper_udma_handle)(x0)
1c000590:	30c02423          	sw	a2,776(zero) # 308 <__rt_hyper_udma_handle>
#endif

  mv        x12, x9
1c000594:	8626                	mv	a2,s1
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_pending_repeat)(x0)
1c000596:	30002c23          	sw	zero,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beq       x12, x0, udma_event_handler_end
1c00059a:	00061463          	bnez	a2,1c0005a2 <__rt_hyper_repeat_copy_not_last2>
1c00059e:	f07ff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005a2 <__rt_hyper_repeat_copy_not_last2>:
  la        x8, __rt_hyper_pending_addr
  sw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  sw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c0005a2:	30a02a23          	sw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  sw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c0005a6:	30902e23          	sw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  sw        x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c0005aa:	c188                	sw	a0,0(a1)
  sw        x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c0005ac:	c1d0                	sw	a2,4(a1)

  li        x10, UDMA_CHANNEL_CFG_EN
1c0005ae:	4541                	li	a0,16
  sw        x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c0005b0:	c588                	sw	a0,8(a1)

  j         udma_event_handler_end
1c0005b2:	ef3ff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005b6 <pwm_event_handler>:
#include "archi/eu/eu_v3.h"

  .global pwm_event_handler
  .extern pwmEventsStatus
pwm_event_handler:
  la   x10, pwmEventsStatus
1c0005b6:	e4000517          	auipc	a0,0xe4000
1c0005ba:	d9e50513          	addi	a0,a0,-610 # 354 <pwmEventsStatus>
  addi  x11, x0, 1
1c0005be:	00100593          	li	a1,1
  lw   x8, 0(x10)
1c0005c2:	4100                	lw	s0,0(a0)
  p.insertr x8, x11, x9
1c0005c4:	8095a433          	p.insertr	s0,a1,s1
  sw   x8, 0(x10)
1c0005c8:	c100                	sw	s0,0(a0)

  // continue with sw event raising
  li   x9, ARCHI_EU_DEMUX_ADDR + EU_SW_EVENTS_DEMUX_OFFSET + EU_CORE_TRIGG_SW_EVENT + (PLP_RT_NOTIF_EVENT << 2)
1c0005ca:	002044b7          	lui	s1,0x204
1c0005ce:	10c48493          	addi	s1,s1,268 # 20410c <__L2+0x18410c>
  li   x10, -1
1c0005d2:	557d                	li	a0,-1
  sw   x10, 0(x9)
1c0005d4:	c088                	sw	a0,0(s1)

  j udma_event_handler_end
1c0005d6:	ecfff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005da <__rt_gpio_handler>:
  bnez     x8, __rt_gpio_ff1_loop
#endif

#else
  .extern __pi_gpio_handler
  mv        x11, x8
1c0005da:	85a2                	mv	a1,s0
  la        x12, __pi_gpio_handler
1c0005dc:	0000a617          	auipc	a2,0xa
1c0005e0:	ebc60613          	addi	a2,a2,-324 # 1c00a498 <__pi_gpio_handler>
  la        x9, __rt_gpio_handler_end
1c0005e4:	00000497          	auipc	s1,0x0
1c0005e8:	00c48493          	addi	s1,s1,12 # 1c0005f0 <__rt_gpio_handler_end>
  j         __rt_call_external_c_function
1c0005ec:	c15ff06f          	j	1c000200 <__rt_call_external_c_function>

1c0005f0 <__rt_gpio_handler_end>:

  mret

#else

  j udma_event_handler_end
1c0005f0:	eb5ff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005f4 <__udivdi3>:
1c0005f4:	87b2                	mv	a5,a2
1c0005f6:	8736                	mv	a4,a3
1c0005f8:	88aa                	mv	a7,a0
1c0005fa:	882e                	mv	a6,a1
1c0005fc:	1e069d63          	bnez	a3,1c0007f6 <__udivdi3+0x202>
1c000600:	1c00c337          	lui	t1,0x1c00c
1c000604:	e9030313          	addi	t1,t1,-368 # 1c00be90 <__DTOR_END__>
1c000608:	0ac5fd63          	bleu	a2,a1,1c0006c2 <__udivdi3+0xce>
1c00060c:	6741                	lui	a4,0x10
1c00060e:	0ae67363          	bleu	a4,a2,1c0006b4 <__udivdi3+0xc0>
1c000612:	0ff00693          	li	a3,255
1c000616:	00c6b6b3          	sltu	a3,a3,a2
1c00061a:	068e                	slli	a3,a3,0x3
1c00061c:	00d65733          	srl	a4,a2,a3
1c000620:	933a                	add	t1,t1,a4
1c000622:	00034703          	lbu	a4,0(t1)
1c000626:	02000313          	li	t1,32
1c00062a:	96ba                	add	a3,a3,a4
1c00062c:	40d30333          	sub	t1,t1,a3
1c000630:	00030c63          	beqz	t1,1c000648 <__udivdi3+0x54>
1c000634:	00659733          	sll	a4,a1,t1
1c000638:	00d556b3          	srl	a3,a0,a3
1c00063c:	006617b3          	sll	a5,a2,t1
1c000640:	00e6e833          	or	a6,a3,a4
1c000644:	006518b3          	sll	a7,a0,t1
1c000648:	0107d513          	srli	a0,a5,0x10
1c00064c:	02a85733          	divu	a4,a6,a0
1c000650:	1007d5b3          	p.exthz	a1,a5
1c000654:	0108d693          	srli	a3,a7,0x10
1c000658:	02a87633          	remu	a2,a6,a0
1c00065c:	02e58833          	mul	a6,a1,a4
1c000660:	0642                	slli	a2,a2,0x10
1c000662:	8ed1                	or	a3,a3,a2
1c000664:	863a                	mv	a2,a4
1c000666:	0106fc63          	bleu	a6,a3,1c00067e <__udivdi3+0x8a>
1c00066a:	96be                	add	a3,a3,a5
1c00066c:	fff70613          	addi	a2,a4,-1 # ffff <__l1_heap_size+0x83>
1c000670:	00f6e763          	bltu	a3,a5,1c00067e <__udivdi3+0x8a>
1c000674:	0106f563          	bleu	a6,a3,1c00067e <__udivdi3+0x8a>
1c000678:	ffe70613          	addi	a2,a4,-2
1c00067c:	96be                	add	a3,a3,a5
1c00067e:	410686b3          	sub	a3,a3,a6
1c000682:	02a6f833          	remu	a6,a3,a0
1c000686:	02a6d6b3          	divu	a3,a3,a0
1c00068a:	df0828b3          	p.insert	a7,a6,15,16
1c00068e:	02d58733          	mul	a4,a1,a3
1c000692:	8536                	mv	a0,a3
1c000694:	00e8fb63          	bleu	a4,a7,1c0006aa <__udivdi3+0xb6>
1c000698:	98be                	add	a7,a7,a5
1c00069a:	fff68513          	addi	a0,a3,-1
1c00069e:	00f8e663          	bltu	a7,a5,1c0006aa <__udivdi3+0xb6>
1c0006a2:	00e8f463          	bleu	a4,a7,1c0006aa <__udivdi3+0xb6>
1c0006a6:	ffe68513          	addi	a0,a3,-2
1c0006aa:	01061793          	slli	a5,a2,0x10
1c0006ae:	8fc9                	or	a5,a5,a0
1c0006b0:	4801                	li	a6,0
1c0006b2:	a06d                	j	1c00075c <__udivdi3+0x168>
1c0006b4:	01000737          	lui	a4,0x1000
1c0006b8:	46c1                	li	a3,16
1c0006ba:	f6e661e3          	bltu	a2,a4,1c00061c <__udivdi3+0x28>
1c0006be:	46e1                	li	a3,24
1c0006c0:	bfb1                	j	1c00061c <__udivdi3+0x28>
1c0006c2:	e601                	bnez	a2,1c0006ca <__udivdi3+0xd6>
1c0006c4:	4685                	li	a3,1
1c0006c6:	02c6d7b3          	divu	a5,a3,a2
1c0006ca:	66c1                	lui	a3,0x10
1c0006cc:	08d7fb63          	bleu	a3,a5,1c000762 <__udivdi3+0x16e>
1c0006d0:	0ff00693          	li	a3,255
1c0006d4:	00f6f363          	bleu	a5,a3,1c0006da <__udivdi3+0xe6>
1c0006d8:	4721                	li	a4,8
1c0006da:	00e7d6b3          	srl	a3,a5,a4
1c0006de:	9336                	add	t1,t1,a3
1c0006e0:	00034683          	lbu	a3,0(t1)
1c0006e4:	02000613          	li	a2,32
1c0006e8:	96ba                	add	a3,a3,a4
1c0006ea:	8e15                	sub	a2,a2,a3
1c0006ec:	e251                	bnez	a2,1c000770 <__udivdi3+0x17c>
1c0006ee:	40f58733          	sub	a4,a1,a5
1c0006f2:	4805                	li	a6,1
1c0006f4:	0107d513          	srli	a0,a5,0x10
1c0006f8:	1007d5b3          	p.exthz	a1,a5
1c0006fc:	0108d693          	srli	a3,a7,0x10
1c000700:	02a77633          	remu	a2,a4,a0
1c000704:	02a75733          	divu	a4,a4,a0
1c000708:	0642                	slli	a2,a2,0x10
1c00070a:	8ed1                	or	a3,a3,a2
1c00070c:	02e58333          	mul	t1,a1,a4
1c000710:	863a                	mv	a2,a4
1c000712:	0066fc63          	bleu	t1,a3,1c00072a <__udivdi3+0x136>
1c000716:	96be                	add	a3,a3,a5
1c000718:	fff70613          	addi	a2,a4,-1 # ffffff <__L2+0xf7ffff>
1c00071c:	00f6e763          	bltu	a3,a5,1c00072a <__udivdi3+0x136>
1c000720:	0066f563          	bleu	t1,a3,1c00072a <__udivdi3+0x136>
1c000724:	ffe70613          	addi	a2,a4,-2
1c000728:	96be                	add	a3,a3,a5
1c00072a:	406686b3          	sub	a3,a3,t1
1c00072e:	02a6f333          	remu	t1,a3,a0
1c000732:	02a6d6b3          	divu	a3,a3,a0
1c000736:	df0328b3          	p.insert	a7,t1,15,16
1c00073a:	02d58733          	mul	a4,a1,a3
1c00073e:	8536                	mv	a0,a3
1c000740:	00e8fb63          	bleu	a4,a7,1c000756 <__udivdi3+0x162>
1c000744:	98be                	add	a7,a7,a5
1c000746:	fff68513          	addi	a0,a3,-1 # ffff <__l1_heap_size+0x83>
1c00074a:	00f8e663          	bltu	a7,a5,1c000756 <__udivdi3+0x162>
1c00074e:	00e8f463          	bleu	a4,a7,1c000756 <__udivdi3+0x162>
1c000752:	ffe68513          	addi	a0,a3,-2
1c000756:	01061793          	slli	a5,a2,0x10
1c00075a:	8fc9                	or	a5,a5,a0
1c00075c:	853e                	mv	a0,a5
1c00075e:	85c2                	mv	a1,a6
1c000760:	8082                	ret
1c000762:	010006b7          	lui	a3,0x1000
1c000766:	4741                	li	a4,16
1c000768:	f6d7e9e3          	bltu	a5,a3,1c0006da <__udivdi3+0xe6>
1c00076c:	4761                	li	a4,24
1c00076e:	b7b5                	j	1c0006da <__udivdi3+0xe6>
1c000770:	00c797b3          	sll	a5,a5,a2
1c000774:	00d5d333          	srl	t1,a1,a3
1c000778:	0107de13          	srli	t3,a5,0x10
1c00077c:	00c59733          	sll	a4,a1,a2
1c000780:	00c518b3          	sll	a7,a0,a2
1c000784:	00d555b3          	srl	a1,a0,a3
1c000788:	03c35533          	divu	a0,t1,t3
1c00078c:	8dd9                	or	a1,a1,a4
1c00078e:	1007d733          	p.exthz	a4,a5
1c000792:	0105d693          	srli	a3,a1,0x10
1c000796:	03c37633          	remu	a2,t1,t3
1c00079a:	882a                	mv	a6,a0
1c00079c:	02a70333          	mul	t1,a4,a0
1c0007a0:	0642                	slli	a2,a2,0x10
1c0007a2:	8ed1                	or	a3,a3,a2
1c0007a4:	0066fc63          	bleu	t1,a3,1c0007bc <__udivdi3+0x1c8>
1c0007a8:	96be                	add	a3,a3,a5
1c0007aa:	fff50813          	addi	a6,a0,-1
1c0007ae:	00f6e763          	bltu	a3,a5,1c0007bc <__udivdi3+0x1c8>
1c0007b2:	0066f563          	bleu	t1,a3,1c0007bc <__udivdi3+0x1c8>
1c0007b6:	ffe50813          	addi	a6,a0,-2
1c0007ba:	96be                	add	a3,a3,a5
1c0007bc:	406686b3          	sub	a3,a3,t1
1c0007c0:	03c6f633          	remu	a2,a3,t3
1c0007c4:	03c6d6b3          	divu	a3,a3,t3
1c0007c8:	df0625b3          	p.insert	a1,a2,15,16
1c0007cc:	02d70733          	mul	a4,a4,a3
1c0007d0:	8636                	mv	a2,a3
1c0007d2:	00e5fc63          	bleu	a4,a1,1c0007ea <__udivdi3+0x1f6>
1c0007d6:	95be                	add	a1,a1,a5
1c0007d8:	fff68613          	addi	a2,a3,-1 # ffffff <__L2+0xf7ffff>
1c0007dc:	00f5e763          	bltu	a1,a5,1c0007ea <__udivdi3+0x1f6>
1c0007e0:	00e5f563          	bleu	a4,a1,1c0007ea <__udivdi3+0x1f6>
1c0007e4:	ffe68613          	addi	a2,a3,-2
1c0007e8:	95be                	add	a1,a1,a5
1c0007ea:	0842                	slli	a6,a6,0x10
1c0007ec:	40e58733          	sub	a4,a1,a4
1c0007f0:	00c86833          	or	a6,a6,a2
1c0007f4:	b701                	j	1c0006f4 <__udivdi3+0x100>
1c0007f6:	12d5ea63          	bltu	a1,a3,1c00092a <__udivdi3+0x336>
1c0007fa:	67c1                	lui	a5,0x10
1c0007fc:	02f6fd63          	bleu	a5,a3,1c000836 <__udivdi3+0x242>
1c000800:	0ff00793          	li	a5,255
1c000804:	00d7b8b3          	sltu	a7,a5,a3
1c000808:	088e                	slli	a7,a7,0x3
1c00080a:	1c00c737          	lui	a4,0x1c00c
1c00080e:	0116d7b3          	srl	a5,a3,a7
1c000812:	e9070713          	addi	a4,a4,-368 # 1c00be90 <__DTOR_END__>
1c000816:	97ba                	add	a5,a5,a4
1c000818:	0007c783          	lbu	a5,0(a5) # 10000 <__L1Cl>
1c00081c:	02000813          	li	a6,32
1c000820:	97c6                	add	a5,a5,a7
1c000822:	40f80833          	sub	a6,a6,a5
1c000826:	00081f63          	bnez	a6,1c000844 <__udivdi3+0x250>
1c00082a:	4785                	li	a5,1
1c00082c:	f2b6e8e3          	bltu	a3,a1,1c00075c <__udivdi3+0x168>
1c000830:	04a637b3          	p.sletu	a5,a2,a0
1c000834:	b725                	j	1c00075c <__udivdi3+0x168>
1c000836:	010007b7          	lui	a5,0x1000
1c00083a:	48c1                	li	a7,16
1c00083c:	fcf6e7e3          	bltu	a3,a5,1c00080a <__udivdi3+0x216>
1c000840:	48e1                	li	a7,24
1c000842:	b7e1                	j	1c00080a <__udivdi3+0x216>
1c000844:	00f658b3          	srl	a7,a2,a5
1c000848:	010696b3          	sll	a3,a3,a6
1c00084c:	00d8e6b3          	or	a3,a7,a3
1c000850:	00f5d333          	srl	t1,a1,a5
1c000854:	0106de13          	srli	t3,a3,0x10
1c000858:	00f55733          	srl	a4,a0,a5
1c00085c:	03c377b3          	remu	a5,t1,t3
1c000860:	1006d8b3          	p.exthz	a7,a3
1c000864:	010595b3          	sll	a1,a1,a6
1c000868:	8f4d                	or	a4,a4,a1
1c00086a:	01075593          	srli	a1,a4,0x10
1c00086e:	01061633          	sll	a2,a2,a6
1c000872:	03c35333          	divu	t1,t1,t3
1c000876:	07c2                	slli	a5,a5,0x10
1c000878:	8ddd                	or	a1,a1,a5
1c00087a:	02688eb3          	mul	t4,a7,t1
1c00087e:	879a                	mv	a5,t1
1c000880:	01d5fc63          	bleu	t4,a1,1c000898 <__udivdi3+0x2a4>
1c000884:	95b6                	add	a1,a1,a3
1c000886:	fff30793          	addi	a5,t1,-1
1c00088a:	00d5e763          	bltu	a1,a3,1c000898 <__udivdi3+0x2a4>
1c00088e:	01d5f563          	bleu	t4,a1,1c000898 <__udivdi3+0x2a4>
1c000892:	ffe30793          	addi	a5,t1,-2
1c000896:	95b6                	add	a1,a1,a3
1c000898:	41d585b3          	sub	a1,a1,t4
1c00089c:	03c5f333          	remu	t1,a1,t3
1c0008a0:	03c5d5b3          	divu	a1,a1,t3
1c0008a4:	df032733          	p.insert	a4,t1,15,16
1c0008a8:	02b888b3          	mul	a7,a7,a1
1c0008ac:	832e                	mv	t1,a1
1c0008ae:	01177c63          	bleu	a7,a4,1c0008c6 <__udivdi3+0x2d2>
1c0008b2:	9736                	add	a4,a4,a3
1c0008b4:	fff58313          	addi	t1,a1,-1
1c0008b8:	00d76763          	bltu	a4,a3,1c0008c6 <__udivdi3+0x2d2>
1c0008bc:	01177563          	bleu	a7,a4,1c0008c6 <__udivdi3+0x2d2>
1c0008c0:	ffe58313          	addi	t1,a1,-2
1c0008c4:	9736                	add	a4,a4,a3
1c0008c6:	07c2                	slli	a5,a5,0x10
1c0008c8:	6e41                	lui	t3,0x10
1c0008ca:	0067e7b3          	or	a5,a5,t1
1c0008ce:	fffe0593          	addi	a1,t3,-1 # ffff <__l1_heap_size+0x83>
1c0008d2:	00b7f6b3          	and	a3,a5,a1
1c0008d6:	41170733          	sub	a4,a4,a7
1c0008da:	8df1                	and	a1,a1,a2
1c0008dc:	0107d893          	srli	a7,a5,0x10
1c0008e0:	02b68333          	mul	t1,a3,a1
1c0008e4:	8241                	srli	a2,a2,0x10
1c0008e6:	02b885b3          	mul	a1,a7,a1
1c0008ea:	8eae                	mv	t4,a1
1c0008ec:	42c68eb3          	p.mac	t4,a3,a2
1c0008f0:	01035693          	srli	a3,t1,0x10
1c0008f4:	96f6                	add	a3,a3,t4
1c0008f6:	02c888b3          	mul	a7,a7,a2
1c0008fa:	00b6f363          	bleu	a1,a3,1c000900 <__udivdi3+0x30c>
1c0008fe:	98f2                	add	a7,a7,t3
1c000900:	0106d613          	srli	a2,a3,0x10
1c000904:	98b2                	add	a7,a7,a2
1c000906:	03176063          	bltu	a4,a7,1c000926 <__udivdi3+0x332>
1c00090a:	db1713e3          	bne	a4,a7,1c0006b0 <__udivdi3+0xbc>
1c00090e:	6741                	lui	a4,0x10
1c000910:	177d                	addi	a4,a4,-1
1c000912:	8ef9                	and	a3,a3,a4
1c000914:	06c2                	slli	a3,a3,0x10
1c000916:	00e37333          	and	t1,t1,a4
1c00091a:	01051533          	sll	a0,a0,a6
1c00091e:	969a                	add	a3,a3,t1
1c000920:	4801                	li	a6,0
1c000922:	e2d57de3          	bleu	a3,a0,1c00075c <__udivdi3+0x168>
1c000926:	17fd                	addi	a5,a5,-1
1c000928:	b361                	j	1c0006b0 <__udivdi3+0xbc>
1c00092a:	4801                	li	a6,0
1c00092c:	4781                	li	a5,0
1c00092e:	b53d                	j	1c00075c <__udivdi3+0x168>

1c000930 <__umoddi3>:
1c000930:	88b2                	mv	a7,a2
1c000932:	8736                	mv	a4,a3
1c000934:	87aa                	mv	a5,a0
1c000936:	882e                	mv	a6,a1
1c000938:	1a069963          	bnez	a3,1c000aea <__umoddi3+0x1ba>
1c00093c:	1c00c6b7          	lui	a3,0x1c00c
1c000940:	e9068693          	addi	a3,a3,-368 # 1c00be90 <__DTOR_END__>
1c000944:	0ac5f463          	bleu	a2,a1,1c0009ec <__umoddi3+0xbc>
1c000948:	6341                	lui	t1,0x10
1c00094a:	08667a63          	bleu	t1,a2,1c0009de <__umoddi3+0xae>
1c00094e:	0ff00313          	li	t1,255
1c000952:	00c37363          	bleu	a2,t1,1c000958 <__umoddi3+0x28>
1c000956:	4721                	li	a4,8
1c000958:	00e65333          	srl	t1,a2,a4
1c00095c:	969a                	add	a3,a3,t1
1c00095e:	0006c683          	lbu	a3,0(a3)
1c000962:	02000313          	li	t1,32
1c000966:	9736                	add	a4,a4,a3
1c000968:	40e30333          	sub	t1,t1,a4
1c00096c:	00030c63          	beqz	t1,1c000984 <__umoddi3+0x54>
1c000970:	006595b3          	sll	a1,a1,t1
1c000974:	00e55733          	srl	a4,a0,a4
1c000978:	006618b3          	sll	a7,a2,t1
1c00097c:	00b76833          	or	a6,a4,a1
1c000980:	006517b3          	sll	a5,a0,t1
1c000984:	0108d613          	srli	a2,a7,0x10
1c000988:	02c87733          	remu	a4,a6,a2
1c00098c:	1008d533          	p.exthz	a0,a7
1c000990:	0107d693          	srli	a3,a5,0x10
1c000994:	02c85833          	divu	a6,a6,a2
1c000998:	0742                	slli	a4,a4,0x10
1c00099a:	8ed9                	or	a3,a3,a4
1c00099c:	03050833          	mul	a6,a0,a6
1c0009a0:	0106f863          	bleu	a6,a3,1c0009b0 <__umoddi3+0x80>
1c0009a4:	96c6                	add	a3,a3,a7
1c0009a6:	0116e563          	bltu	a3,a7,1c0009b0 <__umoddi3+0x80>
1c0009aa:	0106f363          	bleu	a6,a3,1c0009b0 <__umoddi3+0x80>
1c0009ae:	96c6                	add	a3,a3,a7
1c0009b0:	410686b3          	sub	a3,a3,a6
1c0009b4:	02c6f733          	remu	a4,a3,a2
1c0009b8:	02c6d6b3          	divu	a3,a3,a2
1c0009bc:	df0727b3          	p.insert	a5,a4,15,16
1c0009c0:	02d506b3          	mul	a3,a0,a3
1c0009c4:	00d7f863          	bleu	a3,a5,1c0009d4 <__umoddi3+0xa4>
1c0009c8:	97c6                	add	a5,a5,a7
1c0009ca:	0117e563          	bltu	a5,a7,1c0009d4 <__umoddi3+0xa4>
1c0009ce:	00d7f363          	bleu	a3,a5,1c0009d4 <__umoddi3+0xa4>
1c0009d2:	97c6                	add	a5,a5,a7
1c0009d4:	8f95                	sub	a5,a5,a3
1c0009d6:	0067d533          	srl	a0,a5,t1
1c0009da:	4581                	li	a1,0
1c0009dc:	8082                	ret
1c0009de:	01000337          	lui	t1,0x1000
1c0009e2:	4741                	li	a4,16
1c0009e4:	f6666ae3          	bltu	a2,t1,1c000958 <__umoddi3+0x28>
1c0009e8:	4761                	li	a4,24
1c0009ea:	b7bd                	j	1c000958 <__umoddi3+0x28>
1c0009ec:	e601                	bnez	a2,1c0009f4 <__umoddi3+0xc4>
1c0009ee:	4605                	li	a2,1
1c0009f0:	031658b3          	divu	a7,a2,a7
1c0009f4:	6641                	lui	a2,0x10
1c0009f6:	06c8ff63          	bleu	a2,a7,1c000a74 <__umoddi3+0x144>
1c0009fa:	0ff00613          	li	a2,255
1c0009fe:	01167363          	bleu	a7,a2,1c000a04 <__umoddi3+0xd4>
1c000a02:	4721                	li	a4,8
1c000a04:	00e8d633          	srl	a2,a7,a4
1c000a08:	96b2                	add	a3,a3,a2
1c000a0a:	0006c603          	lbu	a2,0(a3)
1c000a0e:	02000313          	li	t1,32
1c000a12:	963a                	add	a2,a2,a4
1c000a14:	40c30333          	sub	t1,t1,a2
1c000a18:	06031563          	bnez	t1,1c000a82 <__umoddi3+0x152>
1c000a1c:	411585b3          	sub	a1,a1,a7
1c000a20:	0108d713          	srli	a4,a7,0x10
1c000a24:	1008d533          	p.exthz	a0,a7
1c000a28:	0107d613          	srli	a2,a5,0x10
1c000a2c:	02e5f6b3          	remu	a3,a1,a4
1c000a30:	02e5d5b3          	divu	a1,a1,a4
1c000a34:	06c2                	slli	a3,a3,0x10
1c000a36:	8ed1                	or	a3,a3,a2
1c000a38:	02b505b3          	mul	a1,a0,a1
1c000a3c:	00b6f863          	bleu	a1,a3,1c000a4c <__umoddi3+0x11c>
1c000a40:	96c6                	add	a3,a3,a7
1c000a42:	0116e563          	bltu	a3,a7,1c000a4c <__umoddi3+0x11c>
1c000a46:	00b6f363          	bleu	a1,a3,1c000a4c <__umoddi3+0x11c>
1c000a4a:	96c6                	add	a3,a3,a7
1c000a4c:	40b685b3          	sub	a1,a3,a1
1c000a50:	02e5f6b3          	remu	a3,a1,a4
1c000a54:	02e5d5b3          	divu	a1,a1,a4
1c000a58:	df06a7b3          	p.insert	a5,a3,15,16
1c000a5c:	02b505b3          	mul	a1,a0,a1
1c000a60:	00b7f863          	bleu	a1,a5,1c000a70 <__umoddi3+0x140>
1c000a64:	97c6                	add	a5,a5,a7
1c000a66:	0117e563          	bltu	a5,a7,1c000a70 <__umoddi3+0x140>
1c000a6a:	00b7f363          	bleu	a1,a5,1c000a70 <__umoddi3+0x140>
1c000a6e:	97c6                	add	a5,a5,a7
1c000a70:	8f8d                	sub	a5,a5,a1
1c000a72:	b795                	j	1c0009d6 <__umoddi3+0xa6>
1c000a74:	01000637          	lui	a2,0x1000
1c000a78:	4741                	li	a4,16
1c000a7a:	f8c8e5e3          	bltu	a7,a2,1c000a04 <__umoddi3+0xd4>
1c000a7e:	4761                	li	a4,24
1c000a80:	b751                	j	1c000a04 <__umoddi3+0xd4>
1c000a82:	006898b3          	sll	a7,a7,t1
1c000a86:	00c5d733          	srl	a4,a1,a2
1c000a8a:	006517b3          	sll	a5,a0,t1
1c000a8e:	00c55633          	srl	a2,a0,a2
1c000a92:	006595b3          	sll	a1,a1,t1
1c000a96:	0108d513          	srli	a0,a7,0x10
1c000a9a:	8dd1                	or	a1,a1,a2
1c000a9c:	02a77633          	remu	a2,a4,a0
1c000aa0:	1008d833          	p.exthz	a6,a7
1c000aa4:	0105d693          	srli	a3,a1,0x10
1c000aa8:	02a75733          	divu	a4,a4,a0
1c000aac:	0642                	slli	a2,a2,0x10
1c000aae:	8ed1                	or	a3,a3,a2
1c000ab0:	02e80733          	mul	a4,a6,a4
1c000ab4:	00e6f863          	bleu	a4,a3,1c000ac4 <__umoddi3+0x194>
1c000ab8:	96c6                	add	a3,a3,a7
1c000aba:	0116e563          	bltu	a3,a7,1c000ac4 <__umoddi3+0x194>
1c000abe:	00e6f363          	bleu	a4,a3,1c000ac4 <__umoddi3+0x194>
1c000ac2:	96c6                	add	a3,a3,a7
1c000ac4:	8e99                	sub	a3,a3,a4
1c000ac6:	02a6f733          	remu	a4,a3,a0
1c000aca:	02a6d6b3          	divu	a3,a3,a0
1c000ace:	df0725b3          	p.insert	a1,a4,15,16
1c000ad2:	02d806b3          	mul	a3,a6,a3
1c000ad6:	00d5f863          	bleu	a3,a1,1c000ae6 <__umoddi3+0x1b6>
1c000ada:	95c6                	add	a1,a1,a7
1c000adc:	0115e563          	bltu	a1,a7,1c000ae6 <__umoddi3+0x1b6>
1c000ae0:	00d5f363          	bleu	a3,a1,1c000ae6 <__umoddi3+0x1b6>
1c000ae4:	95c6                	add	a1,a1,a7
1c000ae6:	8d95                	sub	a1,a1,a3
1c000ae8:	bf25                	j	1c000a20 <__umoddi3+0xf0>
1c000aea:	eed5e9e3          	bltu	a1,a3,1c0009dc <__umoddi3+0xac>
1c000aee:	6741                	lui	a4,0x10
1c000af0:	04e6f563          	bleu	a4,a3,1c000b3a <__umoddi3+0x20a>
1c000af4:	0ff00e93          	li	t4,255
1c000af8:	00deb733          	sltu	a4,t4,a3
1c000afc:	070e                	slli	a4,a4,0x3
1c000afe:	1c00c337          	lui	t1,0x1c00c
1c000b02:	00e6d8b3          	srl	a7,a3,a4
1c000b06:	e9030313          	addi	t1,t1,-368 # 1c00be90 <__DTOR_END__>
1c000b0a:	989a                	add	a7,a7,t1
1c000b0c:	0008ce83          	lbu	t4,0(a7)
1c000b10:	02000e13          	li	t3,32
1c000b14:	9eba                	add	t4,t4,a4
1c000b16:	41de0e33          	sub	t3,t3,t4
1c000b1a:	020e1763          	bnez	t3,1c000b48 <__umoddi3+0x218>
1c000b1e:	00b6e463          	bltu	a3,a1,1c000b26 <__umoddi3+0x1f6>
1c000b22:	00c56963          	bltu	a0,a2,1c000b34 <__umoddi3+0x204>
1c000b26:	40c507b3          	sub	a5,a0,a2
1c000b2a:	8d95                	sub	a1,a1,a3
1c000b2c:	00f53533          	sltu	a0,a0,a5
1c000b30:	40a58833          	sub	a6,a1,a0
1c000b34:	853e                	mv	a0,a5
1c000b36:	85c2                	mv	a1,a6
1c000b38:	b555                	j	1c0009dc <__umoddi3+0xac>
1c000b3a:	010008b7          	lui	a7,0x1000
1c000b3e:	4741                	li	a4,16
1c000b40:	fb16efe3          	bltu	a3,a7,1c000afe <__umoddi3+0x1ce>
1c000b44:	4761                	li	a4,24
1c000b46:	bf65                	j	1c000afe <__umoddi3+0x1ce>
1c000b48:	01d65733          	srl	a4,a2,t4
1c000b4c:	01c696b3          	sll	a3,a3,t3
1c000b50:	8ed9                	or	a3,a3,a4
1c000b52:	01d5d7b3          	srl	a5,a1,t4
1c000b56:	0106d813          	srli	a6,a3,0x10
1c000b5a:	0307f333          	remu	t1,a5,a6
1c000b5e:	1006d733          	p.exthz	a4,a3
1c000b62:	01d558b3          	srl	a7,a0,t4
1c000b66:	01c595b3          	sll	a1,a1,t3
1c000b6a:	00b8e5b3          	or	a1,a7,a1
1c000b6e:	0105d893          	srli	a7,a1,0x10
1c000b72:	01c61633          	sll	a2,a2,t3
1c000b76:	01c51533          	sll	a0,a0,t3
1c000b7a:	0307d7b3          	divu	a5,a5,a6
1c000b7e:	0342                	slli	t1,t1,0x10
1c000b80:	011368b3          	or	a7,t1,a7
1c000b84:	02f70f33          	mul	t5,a4,a5
1c000b88:	833e                	mv	t1,a5
1c000b8a:	01e8fc63          	bleu	t5,a7,1c000ba2 <__umoddi3+0x272>
1c000b8e:	98b6                	add	a7,a7,a3
1c000b90:	fff78313          	addi	t1,a5,-1 # ffffff <__L2+0xf7ffff>
1c000b94:	00d8e763          	bltu	a7,a3,1c000ba2 <__umoddi3+0x272>
1c000b98:	01e8f563          	bleu	t5,a7,1c000ba2 <__umoddi3+0x272>
1c000b9c:	ffe78313          	addi	t1,a5,-2
1c000ba0:	98b6                	add	a7,a7,a3
1c000ba2:	41e888b3          	sub	a7,a7,t5
1c000ba6:	0308f7b3          	remu	a5,a7,a6
1c000baa:	0308d8b3          	divu	a7,a7,a6
1c000bae:	df07a5b3          	p.insert	a1,a5,15,16
1c000bb2:	03170733          	mul	a4,a4,a7
1c000bb6:	87c6                	mv	a5,a7
1c000bb8:	00e5fc63          	bleu	a4,a1,1c000bd0 <__umoddi3+0x2a0>
1c000bbc:	95b6                	add	a1,a1,a3
1c000bbe:	fff88793          	addi	a5,a7,-1 # ffffff <__L2+0xf7ffff>
1c000bc2:	00d5e763          	bltu	a1,a3,1c000bd0 <__umoddi3+0x2a0>
1c000bc6:	00e5f563          	bleu	a4,a1,1c000bd0 <__umoddi3+0x2a0>
1c000bca:	ffe88793          	addi	a5,a7,-2
1c000bce:	95b6                	add	a1,a1,a3
1c000bd0:	0342                	slli	t1,t1,0x10
1c000bd2:	6f41                	lui	t5,0x10
1c000bd4:	00f36333          	or	t1,t1,a5
1c000bd8:	ffff0793          	addi	a5,t5,-1 # ffff <__l1_heap_size+0x83>
1c000bdc:	00f37833          	and	a6,t1,a5
1c000be0:	01035313          	srli	t1,t1,0x10
1c000be4:	8ff1                	and	a5,a5,a2
1c000be6:	02f808b3          	mul	a7,a6,a5
1c000bea:	8d99                	sub	a1,a1,a4
1c000bec:	01065713          	srli	a4,a2,0x10
1c000bf0:	02f307b3          	mul	a5,t1,a5
1c000bf4:	8fbe                	mv	t6,a5
1c000bf6:	42e80fb3          	p.mac	t6,a6,a4
1c000bfa:	0108d813          	srli	a6,a7,0x10
1c000bfe:	987e                	add	a6,a6,t6
1c000c00:	02e30333          	mul	t1,t1,a4
1c000c04:	00f87363          	bleu	a5,a6,1c000c0a <__umoddi3+0x2da>
1c000c08:	937a                	add	t1,t1,t5
1c000c0a:	01085713          	srli	a4,a6,0x10
1c000c0e:	933a                	add	t1,t1,a4
1c000c10:	6741                	lui	a4,0x10
1c000c12:	177d                	addi	a4,a4,-1
1c000c14:	00e87833          	and	a6,a6,a4
1c000c18:	0842                	slli	a6,a6,0x10
1c000c1a:	00e8f733          	and	a4,a7,a4
1c000c1e:	9742                	add	a4,a4,a6
1c000c20:	0065e663          	bltu	a1,t1,1c000c2c <__umoddi3+0x2fc>
1c000c24:	00659d63          	bne	a1,t1,1c000c3e <__umoddi3+0x30e>
1c000c28:	00e57b63          	bleu	a4,a0,1c000c3e <__umoddi3+0x30e>
1c000c2c:	40c70633          	sub	a2,a4,a2
1c000c30:	00c73733          	sltu	a4,a4,a2
1c000c34:	40d30333          	sub	t1,t1,a3
1c000c38:	40e30333          	sub	t1,t1,a4
1c000c3c:	8732                	mv	a4,a2
1c000c3e:	40e50733          	sub	a4,a0,a4
1c000c42:	00e53533          	sltu	a0,a0,a4
1c000c46:	406585b3          	sub	a1,a1,t1
1c000c4a:	8d89                	sub	a1,a1,a0
1c000c4c:	01d597b3          	sll	a5,a1,t4
1c000c50:	01c75733          	srl	a4,a4,t3
1c000c54:	00e7e533          	or	a0,a5,a4
1c000c58:	01c5d5b3          	srl	a1,a1,t3
1c000c5c:	b341                	j	1c0009dc <__umoddi3+0xac>

1c000c5e <cluster>:

AT_HYPERFLASH_FS_EXT_ADDR_TYPE __PREFIX(_L3_Flash) = 0;


static void cluster()
{
1c000c5e:	1101                	addi	sp,sp,-32
1c000c60:	c64e                	sw	s3,12(sp)
    __PREFIX(CNN)(Input_1, Output_1);
1c000c62:	1c00d9b7          	lui	s3,0x1c00d
1c000c66:	1c00d7b7          	lui	a5,0x1c00d
1c000c6a:	b9098993          	addi	s3,s3,-1136 # 1c00cb90 <Output_1>
1c000c6e:	b8c7a503          	lw	a0,-1140(a5) # 1c00cb8c <Input_1>
1c000c72:	0009a583          	lw	a1,0(s3)
{
1c000c76:	ce06                	sw	ra,28(sp)
1c000c78:	cc22                	sw	s0,24(sp)
1c000c7a:	c84a                	sw	s2,16(sp)
1c000c7c:	c452                	sw	s4,8(sp)
1c000c7e:	c256                	sw	s5,4(sp)
1c000c80:	ca26                	sw	s1,20(sp)
    __PREFIX(CNN)(Input_1, Output_1);
1c000c82:	636020ef          	jal	ra,1c0032b8 <mnistCNN>
    printf("Model Run completed\n");
1c000c86:	1c00c537          	lui	a0,0x1c00c
1c000c8a:	13050513          	addi	a0,a0,304 # 1c00c130 <__clz_tab+0x2a0>
1c000c8e:	74d090ef          	jal	ra,1c00abda <puts>

    int res = 0;
    signed short max = Output_1[0];
1c000c92:	0009a783          	lw	a5,0(s3)
    for(int i = 0;i<NUM_CLASSES;i++)
1c000c96:	4401                	li	s0,0
    int res = 0;
1c000c98:	4a81                	li	s5,0
    signed short max = Output_1[0];
1c000c9a:	00079903          	lh	s2,0(a5)
1c000c9e:	1c00ca37          	lui	s4,0x1c00c
1c000ca2:	00141493          	slli	s1,s0,0x1
    {
        printf("class %d: %ld\n", i, Output_1[i]);
1c000ca6:	97a6                	add	a5,a5,s1
1c000ca8:	00079603          	lh	a2,0(a5)
1c000cac:	85a2                	mv	a1,s0
1c000cae:	144a0513          	addi	a0,s4,324 # 1c00c144 <__clz_tab+0x2b4>
1c000cb2:	0be0a0ef          	jal	ra,1c00ad70 <printf>
        if(Output_1[i] > max)
1c000cb6:	0009a783          	lw	a5,0(s3)
1c000cba:	94be                	add	s1,s1,a5
1c000cbc:	00049703          	lh	a4,0(s1)
1c000cc0:	00e95463          	ble	a4,s2,1c000cc8 <cluster+0x6a>
1c000cc4:	8aa2                	mv	s5,s0
1c000cc6:	893a                	mv	s2,a4
    for(int i = 0;i<NUM_CLASSES;i++)
1c000cc8:	0405                	addi	s0,s0,1
1c000cca:	fca43ce3          	p.bneimm	s0,10,1c000ca2 <cluster+0x44>
        {
            max = Output_1[i];
            res = i;
        }
    }
    printf("\n");
1c000cce:	4529                	li	a0,10
1c000cd0:	781090ef          	jal	ra,1c00ac50 <putchar>
    printf("result of model: %d\n", res);
}
1c000cd4:	4462                	lw	s0,24(sp)
1c000cd6:	40f2                	lw	ra,28(sp)
1c000cd8:	44d2                	lw	s1,20(sp)
1c000cda:	4942                	lw	s2,16(sp)
1c000cdc:	49b2                	lw	s3,12(sp)
1c000cde:	4a22                	lw	s4,8(sp)
    printf("result of model: %d\n", res);
1c000ce0:	85d6                	mv	a1,s5
}
1c000ce2:	4a92                	lw	s5,4(sp)
    printf("result of model: %d\n", res);
1c000ce4:	1c00c537          	lui	a0,0x1c00c
1c000ce8:	15450513          	addi	a0,a0,340 # 1c00c154 <__clz_tab+0x2c4>
}
1c000cec:	6105                	addi	sp,sp,32
    printf("result of model: %d\n", res);
1c000cee:	0820a06f          	j	1c00ad70 <printf>

1c000cf2 <application>:


int application()
{

    printf("\n\t *** NNTOOL application *** \n\n");
1c000cf2:	1c00c537          	lui	a0,0x1c00c
{
1c000cf6:	1101                	addi	sp,sp,-32
    printf("\n\t *** NNTOOL application *** \n\n");
1c000cf8:	f9050513          	addi	a0,a0,-112 # 1c00bf90 <__clz_tab+0x100>
{
1c000cfc:	ce06                	sw	ra,28(sp)
1c000cfe:	cc22                	sw	s0,24(sp)
1c000d00:	ca26                	sw	s1,20(sp)
1c000d02:	c84a                	sw	s2,16(sp)
1c000d04:	c64e                	sw	s3,12(sp)
1c000d06:	c452                	sw	s4,8(sp)
    printf("\n\t *** NNTOOL application *** \n\n");
1c000d08:	6d3090ef          	jal	ra,1c00abda <puts>

    Input_1 = (unsigned char *)pi_l2_malloc((IMG_H*IMG_W)*sizeof(unsigned char));
1c000d0c:	31000513          	li	a0,784
1c000d10:	1c00d437          	lui	s0,0x1c00d
1c000d14:	753070ef          	jal	ra,1c008c66 <pi_l2_malloc>
1c000d18:	b8c40413          	addi	s0,s0,-1140 # 1c00cb8c <Input_1>
1c000d1c:	c008                	sw	a0,0(s0)
    if(Input_1==NULL)
1c000d1e:	c92d                	beqz	a0,1c000d90 <application+0x9e>
    {
        printf("Fail to allocate memory for image\n");
        pmsis_exit(-1);
    }
    printf("Allocate memory for image\n");
1c000d20:	1c00c537          	lui	a0,0x1c00c
1c000d24:	fd450513          	addi	a0,a0,-44 # 1c00bfd4 <__clz_tab+0x144>
1c000d28:	6b3090ef          	jal	ra,1c00abda <puts>

    Output_1 = (signed short *)pi_l2_malloc(NUM_CLASSES*sizeof(signed short));
1c000d2c:	4551                	li	a0,20
1c000d2e:	1c00d4b7          	lui	s1,0x1c00d
1c000d32:	735070ef          	jal	ra,1c008c66 <pi_l2_malloc>
1c000d36:	b9048493          	addi	s1,s1,-1136 # 1c00cb90 <Output_1>
1c000d3a:	c088                	sw	a0,0(s1)
    if(Output_1==NULL)
1c000d3c:	c129                	beqz	a0,1c000d7e <application+0x8c>
    {
        printf("Fail to allocate memory for Output_1\n");
        pmsis_exit(-2);
    }
    printf("Allocate memory for Output_1\n");
1c000d3e:	1c00c537          	lui	a0,0x1c00c
1c000d42:	01850513          	addi	a0,a0,24 # 1c00c018 <__clz_tab+0x188>
1c000d46:	695090ef          	jal	ra,1c00abda <puts>
    


    // read image from file
    char *ImageName = __XSTR(AT_IMAGE);
    if (ReadImageFromFile(ImageName, IMG_W, IMG_H, IMG_C, Input_1, sizeof(char)*(IMG_W*IMG_H), IMGIO_OUTPUT_CHAR, 0))
1c000d4a:	4018                	lw	a4,0(s0)
1c000d4c:	1c00c937          	lui	s2,0x1c00c
1c000d50:	4881                	li	a7,0
1c000d52:	4801                	li	a6,0
1c000d54:	31000793          	li	a5,784
1c000d58:	4685                	li	a3,1
1c000d5a:	4671                	li	a2,28
1c000d5c:	45f1                	li	a1,28
1c000d5e:	03890513          	addi	a0,s2,56 # 1c00c038 <__clz_tab+0x1a8>
1c000d62:	0e1020ef          	jal	ra,1c003642 <ReadImageFromFile>
1c000d66:	cd15                	beqz	a0,1c000da2 <application+0xb0>
    {
        printf("Failed to load image %s\n", ImageName);
1c000d68:	1c00c537          	lui	a0,0x1c00c
1c000d6c:	03890593          	addi	a1,s2,56
1c000d70:	05850513          	addi	a0,a0,88 # 1c00c058 <__clz_tab+0x1c8>
1c000d74:	7fd090ef          	jal	ra,1c00ad70 <printf>
  return -1;
}

static inline void pmsis_exit(int err)
{
  exit(err);
1c000d78:	5575                	li	a0,-3
1c000d7a:	705090ef          	jal	ra,1c00ac7e <exit>
        printf("Fail to allocate memory for Output_1\n");
1c000d7e:	1c00c537          	lui	a0,0x1c00c
1c000d82:	ff050513          	addi	a0,a0,-16 # 1c00bff0 <__clz_tab+0x160>
1c000d86:	655090ef          	jal	ra,1c00abda <puts>
1c000d8a:	5579                	li	a0,-2
1c000d8c:	6f3090ef          	jal	ra,1c00ac7e <exit>
        printf("Fail to allocate memory for image\n");
1c000d90:	1c00c537          	lui	a0,0x1c00c
1c000d94:	fb050513          	addi	a0,a0,-80 # 1c00bfb0 <__clz_tab+0x120>
1c000d98:	643090ef          	jal	ra,1c00abda <puts>
1c000d9c:	557d                	li	a0,-1
1c000d9e:	6e1090ef          	jal	ra,1c00ac7e <exit>
        pmsis_exit(-3);
    }
    
    /*Configure Cluster Task*/

    pi_cluster_conf_init(&conf);
1c000da2:	1c00d9b7          	lui	s3,0x1c00d
1c000da6:	8fc98513          	addi	a0,s3,-1796 # 1c00c8fc <conf>
1c000daa:	1d3080ef          	jal	ra,1c00977c <pi_cluster_conf_init>
    pi_open_from_conf(&cluster_dev, (void*)&conf);
1c000dae:	1c00d937          	lui	s2,0x1c00d
1c000db2:	8f090513          	addi	a0,s2,-1808 # 1c00c8f0 <_edata>
1c000db6:	8fc98593          	addi	a1,s3,-1796
1c000dba:	588070ef          	jal	ra,1c008342 <pi_open_from_conf>

    
    if (pi_cluster_open(&cluster_dev))
1c000dbe:	8f090513          	addi	a0,s2,-1808
1c000dc2:	1c1080ef          	jal	ra,1c009782 <pi_cluster_open>
1c000dc6:	e151                	bnez	a0,1c000e4a <application+0x158>
    {
        printf("Cluster open failed !\n");
        pmsis_exit(-4);
    }
    printf("Cluster open\n");
1c000dc8:	1c00c537          	lui	a0,0x1c00c
1c000dcc:	08c50513          	addi	a0,a0,140 # 1c00c08c <__clz_tab+0x1fc>
1c000dd0:	60b090ef          	jal	ra,1c00abda <puts>

    
    task = pi_l2_malloc(sizeof(struct pi_cluster_task));
1c000dd4:	02c00513          	li	a0,44
1c000dd8:	1c00d9b7          	lui	s3,0x1c00d
1c000ddc:	68b070ef          	jal	ra,1c008c66 <pi_l2_malloc>
1c000de0:	b9898993          	addi	s3,s3,-1128 # 1c00cb98 <task>
1c000de4:	00a9a023          	sw	a0,0(s3)
    if(task==NULL)
1c000de8:	cd55                	beqz	a0,1c000ea4 <application+0x1b2>
    {
        printf("Fail to allocate memory for cluster task !\n");
        pmsis_exit(-5);
    }
    printf("Allocate memory for cluster task\n");
1c000dea:	1c00c537          	lui	a0,0x1c00c
1c000dee:	0c850513          	addi	a0,a0,200 # 1c00c0c8 <__clz_tab+0x238>
1c000df2:	5e9090ef          	jal	ra,1c00abda <puts>
    
    
    memset(task, 0, sizeof(struct pi_cluster_task));
1c000df6:	0009aa03          	lw	s4,0(s3)
1c000dfa:	02400613          	li	a2,36
1c000dfe:	4581                	li	a1,0
1c000e00:	008a0513          	addi	a0,s4,8
1c000e04:	431090ef          	jal	ra,1c00aa34 <memset>
    task->entry = &cluster;
1c000e08:	1c0017b7          	lui	a5,0x1c001
1c000e0c:	c5e78793          	addi	a5,a5,-930 # 1c000c5e <cluster>
1c000e10:	00fa2023          	sw	a5,0(s4)
    task->stack_size = STACK_SIZE;             // defined in makefile
1c000e14:	6785                	lui	a5,0x1
1c000e16:	00fa2623          	sw	a5,12(s4)
    task->slave_stack_size = SLAVE_STACK_SIZE; // "
    task->arg = NULL;

    
    printf("Constructor\n");
1c000e1a:	1c00c537          	lui	a0,0x1c00c
    task->slave_stack_size = SLAVE_STACK_SIZE; // "
1c000e1e:	40000793          	li	a5,1024
1c000e22:	00fa2823          	sw	a5,16(s4)
    task->arg = NULL;
1c000e26:	000a2223          	sw	zero,4(s4)
    printf("Constructor\n");
1c000e2a:	0ec50513          	addi	a0,a0,236 # 1c00c0ec <__clz_tab+0x25c>
1c000e2e:	5ad090ef          	jal	ra,1c00abda <puts>
    // IMPORTANT - MUST BE CALLED AFTER THE CLUSTER IS SWITCHED ON!!!!
    if(__PREFIX(CNN_Construct)())
1c000e32:	55f010ef          	jal	ra,1c002b90 <mnistCNN_Construct>
1c000e36:	c11d                	beqz	a0,1c000e5c <application+0x16a>
    {
        printf("Graph constructor exited with an error\n");
1c000e38:	1c00c537          	lui	a0,0x1c00c
1c000e3c:	0f850513          	addi	a0,a0,248 # 1c00c0f8 <__clz_tab+0x268>
1c000e40:	59b090ef          	jal	ra,1c00abda <puts>
1c000e44:	556d                	li	a0,-5
1c000e46:	639090ef          	jal	ra,1c00ac7e <exit>
        printf("Cluster open failed !\n");
1c000e4a:	1c00c537          	lui	a0,0x1c00c
1c000e4e:	07450513          	addi	a0,a0,116 # 1c00c074 <__clz_tab+0x1e4>
1c000e52:	589090ef          	jal	ra,1c00abda <puts>
1c000e56:	5571                	li	a0,-4
1c000e58:	627090ef          	jal	ra,1c00ac7e <exit>
        pmsis_exit(-5);
    }
    
    printf("Call cluster\n");
1c000e5c:	1c00c537          	lui	a0,0x1c00c
1c000e60:	12050513          	addi	a0,a0,288 # 1c00c120 <__clz_tab+0x290>
1c000e64:	577090ef          	jal	ra,1c00abda <puts>
    pi_cluster_send_task_to_cl(&cluster_dev, task);
1c000e68:	0009a583          	lw	a1,0(s3)
1c000e6c:	8f090513          	addi	a0,s2,-1808
1c000e70:	4eb080ef          	jal	ra,1c009b5a <pi_cluster_send_task_to_cl>

    __PREFIX(CNN_Destruct)();
1c000e74:	3e8020ef          	jal	ra,1c00325c <mnistCNN_Destruct>




    // Close the cluster
    pi_cluster_close(&cluster_dev);
1c000e78:	8f090513          	addi	a0,s2,-1808
1c000e7c:	1df080ef          	jal	ra,1c00985a <pi_cluster_close>
    pi_l2_free(task, (sizeof(struct pi_cluster_task)));
1c000e80:	0009a503          	lw	a0,0(s3)
1c000e84:	02c00593          	li	a1,44
1c000e88:	5ed070ef          	jal	ra,1c008c74 <pi_l2_free>
    pi_l2_free(Output_1, (NUM_CLASSES*sizeof(signed short)));
1c000e8c:	4088                	lw	a0,0(s1)
1c000e8e:	45d1                	li	a1,20
1c000e90:	5e5070ef          	jal	ra,1c008c74 <pi_l2_free>
    pi_l2_free(Input_1, ((IMG_H*IMG_W)*sizeof(unsigned char)));
1c000e94:	4008                	lw	a0,0(s0)
1c000e96:	31000593          	li	a1,784
1c000e9a:	5db070ef          	jal	ra,1c008c74 <pi_l2_free>
1c000e9e:	4501                	li	a0,0
1c000ea0:	5df090ef          	jal	ra,1c00ac7e <exit>
        printf("Fail to allocate memory for cluster task !\n");
1c000ea4:	1c00c537          	lui	a0,0x1c00c
1c000ea8:	09c50513          	addi	a0,a0,156 # 1c00c09c <__clz_tab+0x20c>
1c000eac:	52f090ef          	jal	ra,1c00abda <puts>
1c000eb0:	556d                	li	a0,-5
1c000eb2:	5cd090ef          	jal	ra,1c00ac7e <exit>

1c000eb6 <main>:
}



int main(void)
{
1c000eb6:	1141                	addi	sp,sp,-16
1c000eb8:	c606                	sw	ra,12(sp)
  ((void (*)())arg)();
1c000eba:	3d25                	jal	1c000cf2 <application>

1c000ebc <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu>:
		signed char * __restrict__ Out,
		unsigned char * __restrict__ Scale,
		signed char * __restrict__ ScaleN,
		signed char * __restrict__ Infos)

{
1c000ebc:	7145                	addi	sp,sp,-464
1c000ebe:	ce2a                	sw	a0,28(sp)
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (mnist_L1_Memory+6496);
	KerArg0->W = (unsigned short int) (24);
	KerArg0->H = (unsigned short int) (12);
	KerArg0->Feat = (unsigned short int) (32);
1c000ec0:	02000513          	li	a0,32
{
1c000ec4:	1ba12023          	sw	s10,416(sp)
	KerArg0->Feat = (unsigned short int) (32);
1c000ec8:	02a11823          	sh	a0,48(sp)
	KerArg0->Out = (int * __restrict__) (mnist_L1_Memory+6496);
1c000ecc:	10000d37          	lui	s10,0x10000
	KerArg0->Bias = (void * __restrict__) (mnist_L1_Memory+896);
	KerArg1->W = (unsigned short int) (28);
1c000ed0:	00e06557          	pv.add.sci.h	a0,zero,28
{
1c000ed4:	1c112623          	sw	ra,460(sp)
	KerArg1->W = (unsigned short int) (28);
1c000ed8:	16a12223          	sw	a0,356(sp)
	KerArg0->Out = (int * __restrict__) (mnist_L1_Memory+6496);
1c000edc:	01cd0d13          	addi	s10,s10,28 # 1000001c <mnist_L1_Memory>
	KerArg0->W = (unsigned short int) (24);
1c000ee0:	1c00c8b7          	lui	a7,0x1c00c
	KerArg1->W = (unsigned short int) (28);
1c000ee4:	1c00c0b7          	lui	ra,0x1c00c
1c000ee8:	00806557          	pv.add.sci.h	a0,zero,16
	KerArg0->Out = (int * __restrict__) (mnist_L1_Memory+6496);
1c000eec:	000d2303          	lw	t1,0(s10)
	KerArg0->W = (unsigned short int) (24);
1c000ef0:	1788af83          	lw	t6,376(a7) # 1c00c178 <__clz_tab+0x2e8>
	KerArg1->W = (unsigned short int) (28);
1c000ef4:	16a12423          	sw	a0,360(sp)
	KerArg1->Filter = (signed char * __restrict__) (mnist_L1_Memory+1088);
	KerArg1->Out = (int * __restrict__) (mnist_L1_Memory+6496);
	KerArg1->Pad = (v4s) 0;
	KerArg2->In = (int *__restrict__) (mnist_L1_Memory+6496);
	KerArg2->Out = (void *__restrict__) (mnist_L1_Memory+6496);
	KerArg2->Feat = (unsigned short int) (32);
1c000ef8:	1c00c8b7          	lui	a7,0x1c00c
	KerArg1->W = (unsigned short int) (28);
1c000efc:	17c0a503          	lw	a0,380(ra) # 1c00c17c <__clz_tab+0x2ec>
	KerArg2->Feat = (unsigned short int) (32);
1c000f00:	1808a283          	lw	t0,384(a7) # 1c00c180 <__clz_tab+0x2f0>
	KerArg0->Out = (int * __restrict__) (mnist_L1_Memory+6496);
1c000f04:	6889                	lui	a7,0x2
1c000f06:	96088893          	addi	a7,a7,-1696 # 1960 <__rt_stack_size+0x1160>
	KerArg2->W = (unsigned short int) (24);
	KerArg2->H = (unsigned short int) (12);
	KerArg2->Scale = (unsigned char *__restrict__) (mnist_L1_Memory+1024);
	KerArg2->ScaleN = (unsigned char *__restrict__) (mnist_L1_Memory+1056);
	KerArg2->Infos = (signed char *__restrict__) (mnist_L1_Memory+43360);
1c000f0a:	6e2d                	lui	t3,0xb
	KerArg0->Out = (int * __restrict__) (mnist_L1_Memory+6496);
1c000f0c:	989a                	add	a7,a7,t1
{
1c000f0e:	1c912223          	sw	s1,452(sp)
	KerArg1->TotalInFeatures = (unsigned short int) (1);
1c000f12:	4f05                	li	t5,1
	KerArg0->Bias = (void * __restrict__) (mnist_L1_Memory+896);
1c000f14:	38030e93          	addi	t4,t1,896
	KerArg1->Filter = (signed char * __restrict__) (mnist_L1_Memory+1088);
1c000f18:	44030493          	addi	s1,t1,1088
	KerArg1->W = (unsigned short int) (28);
1c000f1c:	16a12623          	sw	a0,364(sp)
	KerArg2->Infos = (signed char *__restrict__) (mnist_L1_Memory+43360);
1c000f20:	960e0e13          	addi	t3,t3,-1696 # a960 <__rt_stack_size+0xa160>
	KerArg1->Pad = (v4s) 0;
1c000f24:	00007557          	pv.add.sci.b	a0,zero,0
	KerArg2->Infos = (signed char *__restrict__) (mnist_L1_Memory+43360);
1c000f28:	9e1a                	add	t3,t3,t1
{
1c000f2a:	1c812423          	sw	s0,456(sp)
	KerArg2->H = (unsigned short int) (12);
1c000f2e:	43b1                	li	t2,12
	KerArg2->Scale = (unsigned char *__restrict__) (mnist_L1_Memory+1024);
1c000f30:	40030413          	addi	s0,t1,1024
{
1c000f34:	1d212023          	sw	s2,448(sp)
1c000f38:	1b312e23          	sw	s3,444(sp)
1c000f3c:	1b412c23          	sw	s4,440(sp)
1c000f40:	1b512a23          	sw	s5,436(sp)
1c000f44:	1b612823          	sw	s6,432(sp)
1c000f48:	1b712623          	sw	s7,428(sp)
1c000f4c:	1b812423          	sw	s8,424(sp)
1c000f50:	1b912223          	sw	s9,420(sp)
1c000f54:	19b12e23          	sw	s11,412(sp)
	KerArg2->ScaleN = (unsigned char *__restrict__) (mnist_L1_Memory+1056);
1c000f58:	42030313          	addi	t1,t1,1056
	KerArg0->Out = (int * __restrict__) (mnist_L1_Memory+6496);
1c000f5c:	d446                	sw	a7,40(sp)
	KerArg0->W = (unsigned short int) (24);
1c000f5e:	d67e                	sw	t6,44(sp)
	KerArg0->Bias = (void * __restrict__) (mnist_L1_Memory+896);
1c000f60:	da76                	sw	t4,52(sp)
	KerArg1->TotalInFeatures = (unsigned short int) (1);
1c000f62:	17e11823          	sh	t5,368(sp)
	KerArg1->Filter = (signed char * __restrict__) (mnist_L1_Memory+1088);
1c000f66:	16912a23          	sw	s1,372(sp)
	KerArg1->Out = (int * __restrict__) (mnist_L1_Memory+6496);
1c000f6a:	17112e23          	sw	a7,380(sp)
	KerArg1->Pad = (v4s) 0;
1c000f6e:	18a12023          	sw	a0,384(sp)
	KerArg2->In = (int *__restrict__) (mnist_L1_Memory+6496);
1c000f72:	de46                	sw	a7,60(sp)
	KerArg2->Out = (void *__restrict__) (mnist_L1_Memory+6496);
1c000f74:	c0c6                	sw	a7,64(sp)
	KerArg2->Feat = (unsigned short int) (32);
1c000f76:	c296                	sw	t0,68(sp)
	KerArg2->H = (unsigned short int) (12);
1c000f78:	04711423          	sh	t2,72(sp)
	KerArg2->Scale = (unsigned char *__restrict__) (mnist_L1_Memory+1024);
1c000f7c:	c6a2                	sw	s0,76(sp)
	KerArg2->ScaleN = (unsigned char *__restrict__) (mnist_L1_Memory+1056);
1c000f7e:	c89a                	sw	t1,80(sp)
	KerArg2->Infos = (signed char *__restrict__) (mnist_L1_Memory+43360);
1c000f80:	caf2                	sw	t3,84(sp)
	KerArg3->In = (signed char * __restrict__) (mnist_L1_Memory+6496);
1c000f82:	13112c23          	sw	a7,312(sp)
	KerArg3->W = (unsigned short int) (24);
	KerArg3->UsedW = (unsigned short int) (24);
	KerArg3->H = (unsigned short int) (12);
	KerArg3->UsedH = (unsigned short int) (12);
1c000f86:	14711423          	sh	t2,328(sp)
	KerArg3->Feat = (unsigned short int) (32);
1c000f8a:	14512023          	sw	t0,320(sp)
1c000f8e:	15f12223          	sw	t6,324(sp)
	KerArg3->Pad = (v4s) 0;
1c000f92:	14a12c23          	sw	a0,344(sp)
	KerArg3->PoolMax = (unsigned char) (1);
1c000f96:	15e10523          	sb	t5,330(sp)
	KerArg3->DoScale = (unsigned char) (0);
1c000f9a:	14010aa3          	sb	zero,341(sp)
	KerArg3->Infos = (signed char * __restrict__) (mnist_L1_Memory+43360);
1c000f9e:	15c12e23          	sw	t3,348(sp)

#if defined(__OPTIMIZE__) && defined(CORE_PULP_BUILTINS) && !defined(__LLVM__)

static inline unsigned int hal_spr_read_then_clr(unsigned int reg, unsigned int val)
{
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c000fa2:	30047373          	csrrci	t1,mstatus,8
#define DMA_WRITE(value, offset) pulp_write32(ARCHI_DEMUX_PERIPHERALS_ADDR + ARCHI_MCHAN_DEMUX_OFFSET + (offset), (value))
#define DMA_READ(offset) pulp_read32(ARCHI_DEMUX_PERIPHERALS_ADDR + ARCHI_MCHAN_DEMUX_OFFSET + (offset))
#endif

static inline int plp_dma_counter_alloc() {
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c000fa6:	00204537          	lui	a0,0x204
1c000faa:	40052e03          	lw	t3,1024(a0) # 204400 <__L2+0x184400>
#if defined(__riscv__)
  unsigned int res;
  res = __builtin_bitinsert(0,  ext2loc,      1, PLP_DMA_TYPE_BIT);
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c000fae:	000b08b7          	lui	a7,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c000fb2:	08088893          	addi	a7,a7,128 # b0080 <__L2+0x30080>
static inline unsigned int plp_dma_getStrides(unsigned short stride, unsigned short len) {
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
}

static inline void plp_dma_cmd_push(unsigned int cmd, unsigned int locAddr, mchan_ext_t extAddr) {
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c000fb6:	c158c8b3          	p.bset	a7,a7,0,21
1c000fba:	41152023          	sw	a7,1024(a0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c000fbe:	41d52023          	sw	t4,1024(a0)
#if defined(ARCHI_HAS_MCHAN_64) && ARCHI_HAS_MCHAN_64 == 1
  DMA_WRITE((int)extAddr, PLP_DMA_QUEUE_OFFSET);
  DMA_WRITE((int)(extAddr>>32), PLP_DMA_QUEUE_OFFSET);
#else
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c000fc2:	40c52023          	sw	a2,1024(a0)
        unsigned int cmd = plp_dma_getCmd(dir, size, PLP_DMA_1D, PLP_DMA_TRIG_EVT, PLP_DMA_NO_TRIG_IRQ, PLP_DMA_SHARED);
        // Prevent the compiler from pushing the transfer before all previous
        // stores are done
        __asm__ __volatile__ ("" : : : "memory");
        plp_dma_cmd_push(cmd, loc, ext);
        if (!merge) copy->id = id;
1c000fc6:	ccf2                	sw	t3,88(sp)

        copy->length = 0;
1c000fc8:	d482                	sw	zero,104(sp)
  return __builtin_pulp_read_then_spr_bit_set(reg, val);
}

static inline void hal_spr_write(unsigned int reg, unsigned int val)
{
  __builtin_pulp_spr_write(reg, val);
1c000fca:	30031073          	csrw	mstatus,t1
{
#ifdef __RT_USE_PROFILE
  int trace = __rt_pe_trace[rt_core_id()];
  gv_vcd_dump_trace(trace, 5);
#endif
  if (copy->length == 0)
1c000fce:	5626                	lw	a2,104(sp)
1c000fd0:	60060a63          	beqz	a2,1c0015e4 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x728>

    rt_irq_restore(irq);
  }
  else
  {
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c000fd4:	58c6                	lw	a7,112(sp)
  This is useful when the mask must be updated before waiting for a specific event without modifying the other events (this saves a few instructions)
  \param evtMask Bit mask used to update the event mask. There is 1 bit per event, 1 means the corresponding bit is set in the event mask.
  */
static inline void eu_evt_maskSet(unsigned int evtMask)
{
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c000fd6:	02000513          	li	a0,32
1c000fda:	00204637          	lui	a2,0x204
1c000fde:	00088b63          	beqz	a7,1c000ff4 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x138>
1c000fe2:	00a62423          	sw	a0,8(a2) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c000fe6:	03c66883          	p.elw	a7,60(a2)
  This is the opposite of eu_evt_maskSet. For each bit at 1 in the new value, the corresponding bit is set to 0 in the event mask and the others remain the same.
  \param evtMask Bit mask used to update the event mask. There is 1 bit per event, 1 means the corresponding bit is cleared in the event mask.
  */
static inline void eu_evt_maskClr(unsigned int evtMask)
{
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c000fea:	00a62223          	sw	a0,4(a2)
1c000fee:	58c6                	lw	a7,112(sp)
1c000ff0:	fe0899e3          	bnez	a7,1c000fe2 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x126>
	/*================================= Read Tiles Prolog ===============================*/
	_C_Out=0; _SC_Out=2304; _LC_Out=72;
	_SP_Out=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+896), 128, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Scale+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+1024), 32, 0, &DmaR_Evt2);
1c000ff4:	000d2883          	lw	a7,0(s10)
1c000ff8:	40088893          	addi	a7,a7,1024
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c000ffc:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001000:	00204637          	lui	a2,0x204
1c001004:	40062e03          	lw	t3,1024(a2) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001008:	000b0537          	lui	a0,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00100c:	02050513          	addi	a0,a0,32 # b0020 <__L2+0x30020>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001010:	c1554533          	p.bset	a0,a0,0,21
1c001014:	40a62023          	sw	a0,1024(a2)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001018:	41162023          	sw	a7,1024(a2)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00101c:	40e62023          	sw	a4,1024(a2)
        if (!merge) copy->id = id;
1c001020:	dcf2                	sw	t3,120(sp)
        copy->length = 0;
1c001022:	c502                	sw	zero,136(sp)
  __builtin_pulp_spr_write(reg, val);
1c001024:	30031073          	csrw	mstatus,t1
  if (copy->length == 0)
1c001028:	472a                	lw	a4,136(sp)
1c00102a:	56070363          	beqz	a4,1c001590 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x6d4>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00102e:	454a                	lw	a0,144(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001030:	02000613          	li	a2,32
1c001034:	00204737          	lui	a4,0x204
1c001038:	c909                	beqz	a0,1c00104a <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x18e>
1c00103a:	00c72423          	sw	a2,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00103e:	03c76503          	p.elw	a0,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001042:	00c72223          	sw	a2,4(a4)
1c001046:	454a                	lw	a0,144(sp)
1c001048:	f96d                	bnez	a0,1c00103a <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x17e>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Scale */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) ScaleN+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+1056), 32, 0, &DmaR_Evt3);
1c00104a:	000d2503          	lw	a0,0(s10)
1c00104e:	42050513          	addi	a0,a0,1056
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001052:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001056:	00204737          	lui	a4,0x204
1c00105a:	40072303          	lw	t1,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00105e:	000b0637          	lui	a2,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001062:	02060613          	addi	a2,a2,32 # b0020 <__L2+0x30020>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001066:	c1564633          	p.bset	a2,a2,0,21
1c00106a:	40c72023          	sw	a2,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00106e:	40a72023          	sw	a0,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001072:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c001076:	cd1a                	sw	t1,152(sp)
        copy->length = 0;
1c001078:	d502                	sw	zero,168(sp)
  __builtin_pulp_spr_write(reg, val);
1c00107a:	30089073          	csrw	mstatus,a7
  if (copy->length == 0)
1c00107e:	57aa                	lw	a5,168(sp)
1c001080:	4a078e63          	beqz	a5,1c00153c <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x680>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001084:	564a                	lw	a2,176(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001086:	02000713          	li	a4,32
1c00108a:	002047b7          	lui	a5,0x204
1c00108e:	ca09                	beqz	a2,1c0010a0 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x1e4>
1c001090:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001094:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001098:	00e7a223          	sw	a4,4(a5)
1c00109c:	564a                	lw	a2,176(sp)
1c00109e:	fa6d                	bnez	a2,1c001090 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x1d4>
	AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read ScaleN */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+1088), 800, 0, &DmaR_Evt4);
1c0010a0:	000d2603          	lw	a2,0(s10)
1c0010a4:	44060613          	addi	a2,a2,1088
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0010a8:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0010ac:	002047b7          	lui	a5,0x204
1c0010b0:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0010b4:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0010b8:	32070713          	addi	a4,a4,800 # b0320 <__L2+0x30320>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0010bc:	c1574733          	p.bset	a4,a4,0,21
1c0010c0:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0010c4:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0010c8:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c0010cc:	dd46                	sw	a7,184(sp)
        copy->length = 0;
1c0010ce:	c582                	sw	zero,200(sp)
  __builtin_pulp_spr_write(reg, val);
1c0010d0:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c0010d4:	472e                	lw	a4,200(sp)
1c0010d6:	40070963          	beqz	a4,1c0014e8 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x62c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0010da:	464e                	lw	a2,208(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0010dc:	02000713          	li	a4,32
1c0010e0:	ca09                	beqz	a2,1c0010f2 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x236>
1c0010e2:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0010e6:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0010ea:	00e7a223          	sw	a4,4(a5)
1c0010ee:	464e                	lw	a2,208(sp)
1c0010f0:	fa6d                	bnez	a2,1c0010e2 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x226>
	AT_L2_WAIT(0, &DmaR_Evt4); /* Wait previous DMA read Filter */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+0+0), 448, 0, &DmaR_Evt5);
1c0010f2:	000d2883          	lw	a7,0(s10)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0010f6:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0010fa:	002047b7          	lui	a5,0x204
1c0010fe:	4007a503          	lw	a0,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c001102:	00030737          	lui	a4,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001106:	c4674633          	p.bset	a2,a4,2,6
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00110a:	c1364633          	p.bset	a2,a2,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00110e:	c1564633          	p.bset	a2,a2,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001112:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001116:	4117a023          	sw	a7,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00111a:	4672                	lw	a2,28(sp)
1c00111c:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c001120:	cdaa                	sw	a0,216(sp)
        copy->length = 0;
1c001122:	d582                	sw	zero,232(sp)
  __builtin_pulp_spr_write(reg, val);
1c001124:	30059073          	csrw	mstatus,a1
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+43360), 9, 0, &DmaR_Evt6);
1c001128:	000d2603          	lw	a2,0(s10)
1c00112c:	65ad                	lui	a1,0xb
1c00112e:	96058593          	addi	a1,a1,-1696 # a960 <__rt_stack_size+0xa160>
1c001132:	962e                	add	a2,a2,a1
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001134:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001138:	4007a503          	lw	a0,1024(a5)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00113c:	00976713          	ori	a4,a4,9
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001140:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c001144:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001148:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00114c:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001150:	4107a023          	sw	a6,1024(a5)
        if (!merge) copy->id = id;
1c001154:	ddaa                	sw	a0,248(sp)
        copy->length = 0;
1c001156:	10012423          	sw	zero,264(sp)
  __builtin_pulp_spr_write(reg, val);
1c00115a:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c00115e:	10812703          	lw	a4,264(sp)
1c001162:	32070963          	beqz	a4,1c001494 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x5d8>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001166:	11012603          	lw	a2,272(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00116a:	02000713          	li	a4,32
1c00116e:	ca11                	beqz	a2,1c001182 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x2c6>
1c001170:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001174:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001178:	00e7a223          	sw	a4,4(a5)
1c00117c:	11012603          	lw	a2,272(sp)
1c001180:	fa65                	bnez	a2,1c001170 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x2b4>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001182:	6805                	lui	a6,0x1
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c001184:	00204437          	lui	s0,0x204
1c001188:	1c004ab7          	lui	s5,0x1c004
1c00118c:	90080813          	addi	a6,a6,-1792 # 900 <__rt_stack_size+0x100>
{
1c001190:	4a01                	li	s4,0
1c001192:	76000993          	li	s3,1888
1c001196:	4301                	li	t1,0
1c001198:	4281                	li	t0,0
1c00119a:	4881                	li	a7,0
1c00119c:	02810b93          	addi	s7,sp,40
1c0011a0:	16010b13          	addi	s6,sp,352
1c0011a4:	ecca8a93          	addi	s5,s5,-308 # 1c003ecc <KerParReductIO_CC_SQ8>
1c0011a8:	03c10c13          	addi	s8,sp,60
1c0011ac:	13810c93          	addi	s9,sp,312
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0011b0:	10000d93          	li	s11,256
  return evt_read32(barAddr, EU_HW_BARR_TRIGGER_WAIT_CLEAR);
}

static inline void eu_bar_setup_mask(unsigned int barAddr, unsigned int coreMask, unsigned int targetMask)
{
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0011b4:	20040493          	addi	s1,s0,512 # 204200 <__L2+0x184200>
		int D1Ind_Last = 1;
		for (T0Ind=0; T0Ind<2; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
			int T0Ind_Last = (T0Ind==1), T0Ind_NextLast = ((T0Ind+1)==1);
			/*================================= Prepare Tiles ===================================*/
			_SN_In = 0;
			if (!(T0Ind_Last)) {
1c0011b8:	4818a063          	p.beqimm	a7,1,1c001638 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x77c>
				_N_In = _N_In + (336); _SN_In = (1*(448)); 
1c0011bc:	15030313          	addi	t1,t1,336
1c0011c0:	1c000393          	li	t2,448
  if (copy->length == 0)
1c0011c4:	57ae                	lw	a5,232(sp)
1c0011c6:	cbbd                	beqz	a5,1c00123c <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x380>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0011c8:	574e                	lw	a4,240(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0011ca:	02000793          	li	a5,32
1c0011ce:	cb41                	beqz	a4,1c00125e <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x3a2>
1c0011d0:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0011d4:	03c46703          	p.elw	a4,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0011d8:	00f42223          	sw	a5,4(s0)
1c0011dc:	574e                	lw	a4,240(sp)
1c0011de:	fb6d                	bnez	a4,1c0011d0 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x314>
1c0011e0:	000d2783          	lw	a5,0(s10)
				_N_In = _N_In + (-336); _SN_In = (1*(448)); 
			}
			/*============================= End Prepare Tiles ===================================*/
			/*================================= Read Tiles ======================================*/
			AT_L2_WAIT(0, &DmaR_Evt5); /* Wait previous DMA read In */
			if (_SN_In) {
1c0011e4:	08038163          	beqz	t2,1c001266 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x3aa>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0011e8:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0011ec:	40042503          	lw	a0,1024(s0)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0011f0:	002b00b7          	lui	ra,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0011f4:	0013e3b3          	or	t2,t2,ra
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0011f8:	40742023          	sw	t2,1024(s0)
				AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+0+448*((T0Ind_Total+1)%2)),
1c0011fc:	00188393          	addi	t2,a7,1
1c001200:	fc13b0b3          	p.bclr	ra,t2,30,1
1c001204:	00309393          	slli	t2,ra,0x3
1c001208:	401383b3          	sub	t2,t2,ra
1c00120c:	039a                	slli	t2,t2,0x6
1c00120e:	979e                	add	a5,a5,t2
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001210:	40f42023          	sw	a5,1024(s0)
1c001214:	4672                	lw	a2,28(sp)
1c001216:	006607b3          	add	a5,a2,t1
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00121a:	40f42023          	sw	a5,1024(s0)
        if (!merge) copy->id = id;
1c00121e:	cdaa                	sw	a0,216(sp)
        copy->length = 0;
1c001220:	d582                	sw	zero,232(sp)
  __builtin_pulp_spr_write(reg, val);
1c001222:	30071073          	csrw	mstatus,a4
1c001226:	000d2783          	lw	a5,0(s10)
1c00122a:	a835                	j	1c001266 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x3aa>
1c00122c:	30051073          	csrw	mstatus,a0
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001230:	01b42423          	sw	s11,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001234:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001238:	01b42223          	sw	s11,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00123c:	30047573          	csrrci	a0,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c001240:	40442783          	lw	a5,1028(s0)
1c001244:	476e                	lw	a4,216(sp)
1c001246:	40e7d7b3          	sra	a5,a5,a4
1c00124a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00124e:	fff9                	bnez	a5,1c00122c <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x370>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c001250:	4785                	li	a5,1
1c001252:	00e79733          	sll	a4,a5,a4
1c001256:	40e42223          	sw	a4,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c00125a:	30051073          	csrw	mstatus,a0
1c00125e:	000d2783          	lw	a5,0(s10)
			if (_SN_In) {
1c001262:	f80393e3          	bnez	t2,1c0011e8 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x32c>
						_SN_In, 0, &DmaR_Evt5);
			}
			/*============================= End Read Tiles ======================================*/
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			KerArg0->NormBias = (unsigned char) (((char *)(mnist_L1_Memory+43360))[5]);
1c001266:	672d                	lui	a4,0xb
1c001268:	97ba                	add	a5,a5,a4
1c00126a:	9657c703          	lbu	a4,-1691(a5)
  IP_WRITE_PTR(base, EU_DISPATCH_FIFO_ACCESS, value);
}

static inline void eu_dispatch_team_config(unsigned value)
{
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00126e:	0ff00913          	li	s2,255
1c001272:	02e10c23          	sb	a4,56(sp)
1c001276:	09242223          	sw	s2,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00127a:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00127e:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c001282:	1c0047b7          	lui	a5,0x1c004
1c001286:	f7878793          	addi	a5,a5,-136 # 1c003f78 <KerParSetBiasB32_SQ8>
1c00128a:	08f42023          	sw	a5,128(s0)
1c00128e:	09742023          	sw	s7,128(s0)
#endif

  if (nb_cores) __rt_team_config(nb_cores);
  eu_dispatch_push((int)entry);
  eu_dispatch_push((int)arg);
  entry(arg);
1c001292:	855e                	mv	a0,s7
1c001294:	c616                	sw	t0,12(sp)
1c001296:	cc1a                	sw	t1,24(sp)
1c001298:	ca36                	sw	a3,20(sp)
1c00129a:	c442                	sw	a6,8(sp)
1c00129c:	c846                	sw	a7,16(sp)
1c00129e:	4db020ef          	jal	ra,1c003f78 <KerParSetBiasB32_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0012a2:	01c4e703          	p.elw	a4,28(s1)
			AT_FORK(gap_ncore(), (void *) KerParSetBiasB32_SQ8, (void *) KerArg0);
			__CALL(KerParSetBiasB32_SQ8, KerArg0);
			{ /* Single iteration on D0 */
				int D0Ind_Last = 1;
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (signed char * __restrict__) (mnist_L1_Memory+0+448*((T0Ind_Total)%2));
1c0012a6:	000d2703          	lw	a4,0(s10)
1c0012aa:	9752                	add	a4,a4,s4
1c0012ac:	16e12023          	sw	a4,352(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0012b0:	09242223          	sw	s2,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0012b4:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0012b8:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0012bc:	1c005537          	lui	a0,0x1c005
1c0012c0:	2be50513          	addi	a0,a0,702 # 1c0052be <KerParConv5x5Stride1_SQ8>
1c0012c4:	08a42023          	sw	a0,128(s0)
1c0012c8:	09642023          	sw	s6,128(s0)
1c0012cc:	855a                	mv	a0,s6
1c0012ce:	7f1030ef          	jal	ra,1c0052be <KerParConv5x5Stride1_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0012d2:	01c4e703          	p.elw	a4,28(s1)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0012d6:	09242223          	sw	s2,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0012da:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0012de:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0012e2:	09542023          	sw	s5,128(s0)
1c0012e6:	09842023          	sw	s8,128(s0)
1c0012ea:	8562                	mv	a0,s8
1c0012ec:	3e1020ef          	jal	ra,1c003ecc <KerParReductIO_CC_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0012f0:	01c4e703          	p.elw	a4,28(s1)
				__CALL(KerParConv5x5Stride1_SQ8, KerArg1);
			} /* End iteration on D0 */
			/*====================== Call Kernel LOC_D0_EPILOG =========================*/
			AT_FORK(gap_ncore(), (void *) KerParReductIO_CC_SQ8, (void *) KerArg2);
			__CALL(KerParReductIO_CC_SQ8, KerArg2);
			KerArg3->Out = (signed char * __restrict__) (mnist_L1_Memory+1888+2304*((T0Ind_Total)%2));
1c0012f4:	000d2703          	lw	a4,0(s10)
1c0012f8:	974e                	add	a4,a4,s3
1c0012fa:	12e12e23          	sw	a4,316(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0012fe:	09242223          	sw	s2,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001302:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001306:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00130a:	1c006637          	lui	a2,0x1c006
1c00130e:	b8260613          	addi	a2,a2,-1150 # 1c005b82 <KerParPool2x2Stride2_ReLU_SQ8>
1c001312:	08c42023          	sw	a2,128(s0)
1c001316:	09942023          	sw	s9,128(s0)
1c00131a:	8566                	mv	a0,s9
1c00131c:	067040ef          	jal	ra,1c005b82 <KerParPool2x2Stride2_ReLU_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001320:	01c4e783          	p.elw	a5,28(s1)
			AT_FORK(gap_ncore(), (void *) KerParPool2x2Stride2_ReLU_SQ8, (void *) KerArg3);
			__CALL(KerParPool2x2Stride2_ReLU_SQ8, KerArg3);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c001324:	42b2                	lw	t0,12(sp)
1c001326:	4362                	lw	t1,24(sp)
1c001328:	46d2                	lw	a3,20(sp)
1c00132a:	4822                	lw	a6,8(sp)
1c00132c:	48c2                	lw	a7,16(sp)
1c00132e:	0a029a63          	bnez	t0,1c0013e2 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x526>
			AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) Out+_C_Out), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+1888+2304*((T0Ind_Total)%2)),
1c001332:	000d2783          	lw	a5,0(s10)
1c001336:	97ce                	add	a5,a5,s3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001338:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00133c:	40042503          	lw	a0,1024(s0)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001340:	002e1637          	lui	a2,0x2e1
1c001344:	90060613          	addi	a2,a2,-1792 # 2e0900 <__L2+0x260900>
1c001348:	40c42023          	sw	a2,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00134c:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001350:	40d42023          	sw	a3,1024(s0)
#endif
}

static inline void plp_dma_cmd_push_2d(unsigned int cmd, unsigned int locAddr, mchan_ext_t extAddr, unsigned int stride, unsigned int length) {
  plp_dma_cmd_push(cmd, locAddr, extAddr);
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c001354:	009007b7          	lui	a5,0x900
1c001358:	04878793          	addi	a5,a5,72 # 900048 <__L2+0x880048>
1c00135c:	40f42023          	sw	a5,1024(s0)
        if (!merge) copy->id = id;
1c001360:	10a12c23          	sw	a0,280(sp)
        copy->length = 0;
1c001364:	12012423          	sw	zero,296(sp)
  __builtin_pulp_spr_write(reg, val);
1c001368:	30071073          	csrw	mstatus,a4
			/*================================= Update Arg Pipeline =============================*/
			_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(T0Ind_Last)) {
1c00136c:	1c000513          	li	a0,448
1c001370:	00aa0a63          	beq	s4,a0,1c001384 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x4c8>
		for (T0Ind=0; T0Ind<2; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c001374:	0885                	addi	a7,a7,1
1c001376:	99c2                	add	s3,s3,a6
1c001378:	04868693          	addi	a3,a3,72
1c00137c:	1c0a0a13          	addi	s4,s4,448
1c001380:	82c2                	mv	t0,a6
1c001382:	bd1d                	j	1c0011b8 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x2fc>
  if (copy->length == 0)
1c001384:	12812783          	lw	a5,296(sp)
1c001388:	cbd5                	beqz	a5,1c00143c <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x580>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00138a:	13012683          	lw	a3,304(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00138e:	02000713          	li	a4,32
1c001392:	002047b7          	lui	a5,0x204
1c001396:	ca91                	beqz	a3,1c0013aa <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x4ee>
1c001398:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00139c:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0013a0:	00e7a223          	sw	a4,4(a5)
1c0013a4:	13012683          	lw	a3,304(sp)
1c0013a8:	fae5                	bnez	a3,1c001398 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x4dc>
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0013aa:	1cc12083          	lw	ra,460(sp)
1c0013ae:	1c812403          	lw	s0,456(sp)
1c0013b2:	1c412483          	lw	s1,452(sp)
1c0013b6:	1c012903          	lw	s2,448(sp)
1c0013ba:	1bc12983          	lw	s3,444(sp)
1c0013be:	1b812a03          	lw	s4,440(sp)
1c0013c2:	1b412a83          	lw	s5,436(sp)
1c0013c6:	1b012b03          	lw	s6,432(sp)
1c0013ca:	1ac12b83          	lw	s7,428(sp)
1c0013ce:	1a812c03          	lw	s8,424(sp)
1c0013d2:	1a412c83          	lw	s9,420(sp)
1c0013d6:	1a012d03          	lw	s10,416(sp)
1c0013da:	19c12d83          	lw	s11,412(sp)
1c0013de:	6179                	addi	sp,sp,464
1c0013e0:	8082                	ret
  if (copy->length == 0)
1c0013e2:	12812783          	lw	a5,296(sp)
1c0013e6:	cb85                	beqz	a5,1c001416 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x55a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0013e8:	13012703          	lw	a4,304(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0013ec:	02000793          	li	a5,32
1c0013f0:	d329                	beqz	a4,1c001332 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x476>
1c0013f2:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0013f6:	03c46703          	p.elw	a4,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0013fa:	00f42223          	sw	a5,4(s0)
1c0013fe:	13012703          	lw	a4,304(sp)
1c001402:	fb65                	bnez	a4,1c0013f2 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x536>
1c001404:	b73d                	j	1c001332 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x476>
1c001406:	30051073          	csrw	mstatus,a0
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00140a:	01b42423          	sw	s11,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00140e:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001412:	01b42223          	sw	s11,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001416:	30047573          	csrrci	a0,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00141a:	40442783          	lw	a5,1028(s0)
1c00141e:	11812703          	lw	a4,280(sp)
1c001422:	40e7d7b3          	sra	a5,a5,a4
1c001426:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00142a:	fff1                	bnez	a5,1c001406 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x54a>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00142c:	4785                	li	a5,1
1c00142e:	00e79733          	sll	a4,a5,a4
1c001432:	40e42223          	sw	a4,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c001436:	30051073          	csrw	mstatus,a0
1c00143a:	bde5                	j	1c001332 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x476>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00143c:	30047673          	csrrci	a2,mstatus,8
1c001440:	40442403          	lw	s0,1028(s0)
1c001444:	11812683          	lw	a3,280(sp)
1c001448:	40d45433          	sra	s0,s0,a3
1c00144c:	fc143433          	p.bclr	s0,s0,30,1
1c001450:	c805                	beqz	s0,1c001480 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x5c4>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001452:	10000593          	li	a1,256
1c001456:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00145a:	30061073          	csrw	mstatus,a2
1c00145e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001462:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001466:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00146a:	30047673          	csrrci	a2,mstatus,8
1c00146e:	40472783          	lw	a5,1028(a4)
1c001472:	11812683          	lw	a3,280(sp)
1c001476:	40d7d7b3          	sra	a5,a5,a3
1c00147a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00147e:	fff1                	bnez	a5,1c00145a <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x59e>
1c001480:	4785                	li	a5,1
1c001482:	00d796b3          	sll	a3,a5,a3
1c001486:	002047b7          	lui	a5,0x204
1c00148a:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00148e:	30061073          	csrw	mstatus,a2
1c001492:	bf21                	j	1c0013aa <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x4ee>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001494:	300475f3          	csrrci	a1,mstatus,8
1c001498:	4047a783          	lw	a5,1028(a5)
1c00149c:	566e                	lw	a2,248(sp)
1c00149e:	40c7d7b3          	sra	a5,a5,a2
1c0014a2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0014a6:	c79d                	beqz	a5,1c0014d4 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x618>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0014a8:	10000513          	li	a0,256
1c0014ac:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0014b0:	30059073          	csrw	mstatus,a1
1c0014b4:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0014b8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0014bc:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0014c0:	300475f3          	csrrci	a1,mstatus,8
1c0014c4:	40472783          	lw	a5,1028(a4)
1c0014c8:	566e                	lw	a2,248(sp)
1c0014ca:	40c7d7b3          	sra	a5,a5,a2
1c0014ce:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0014d2:	fff9                	bnez	a5,1c0014b0 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x5f4>
1c0014d4:	4785                	li	a5,1
1c0014d6:	00c79633          	sll	a2,a5,a2
1c0014da:	002047b7          	lui	a5,0x204
1c0014de:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0014e2:	30059073          	csrw	mstatus,a1
1c0014e6:	b971                	j	1c001182 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x2c6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0014e8:	300475f3          	csrrci	a1,mstatus,8
1c0014ec:	4047a783          	lw	a5,1028(a5)
1c0014f0:	566a                	lw	a2,184(sp)
1c0014f2:	40c7d7b3          	sra	a5,a5,a2
1c0014f6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0014fa:	c79d                	beqz	a5,1c001528 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x66c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0014fc:	10000513          	li	a0,256
1c001500:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c001504:	30059073          	csrw	mstatus,a1
1c001508:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00150c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001510:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001514:	300475f3          	csrrci	a1,mstatus,8
1c001518:	40472783          	lw	a5,1028(a4)
1c00151c:	566a                	lw	a2,184(sp)
1c00151e:	40c7d7b3          	sra	a5,a5,a2
1c001522:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001526:	fff9                	bnez	a5,1c001504 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x648>
1c001528:	4785                	li	a5,1
1c00152a:	00c79633          	sll	a2,a5,a2
1c00152e:	002047b7          	lui	a5,0x204
1c001532:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c001536:	30059073          	csrw	mstatus,a1
1c00153a:	be65                	j	1c0010f2 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x236>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00153c:	30047573          	csrrci	a0,mstatus,8
1c001540:	40472703          	lw	a4,1028(a4)
1c001544:	466a                	lw	a2,152(sp)
1c001546:	40c75733          	sra	a4,a4,a2
1c00154a:	fc173733          	p.bclr	a4,a4,30,1
1c00154e:	c71d                	beqz	a4,1c00157c <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x6c0>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001550:	10000893          	li	a7,256
1c001554:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c001558:	30051073          	csrw	mstatus,a0
1c00155c:	01172423          	sw	a7,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001560:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001564:	01172223          	sw	a7,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001568:	30047573          	csrrci	a0,mstatus,8
1c00156c:	40472783          	lw	a5,1028(a4)
1c001570:	466a                	lw	a2,152(sp)
1c001572:	40c7d7b3          	sra	a5,a5,a2
1c001576:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00157a:	fff9                	bnez	a5,1c001558 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x69c>
1c00157c:	4785                	li	a5,1
1c00157e:	00c79633          	sll	a2,a5,a2
1c001582:	002047b7          	lui	a5,0x204
1c001586:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00158a:	30051073          	csrw	mstatus,a0
1c00158e:	be09                	j	1c0010a0 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x1e4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001590:	300478f3          	csrrci	a7,mstatus,8
1c001594:	40462603          	lw	a2,1028(a2)
1c001598:	5566                	lw	a0,120(sp)
1c00159a:	40a65633          	sra	a2,a2,a0
1c00159e:	fc163633          	p.bclr	a2,a2,30,1
1c0015a2:	c61d                	beqz	a2,1c0015d0 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x714>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0015a4:	10000313          	li	t1,256
1c0015a8:	00204637          	lui	a2,0x204
  __builtin_pulp_spr_write(reg, val);
1c0015ac:	30089073          	csrw	mstatus,a7
1c0015b0:	00662423          	sw	t1,8(a2) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0015b4:	03c66703          	p.elw	a4,60(a2)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0015b8:	00662223          	sw	t1,4(a2)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0015bc:	300478f3          	csrrci	a7,mstatus,8
1c0015c0:	40462703          	lw	a4,1028(a2)
1c0015c4:	5566                	lw	a0,120(sp)
1c0015c6:	40a75733          	sra	a4,a4,a0
1c0015ca:	fc173733          	p.bclr	a4,a4,30,1
1c0015ce:	ff79                	bnez	a4,1c0015ac <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x6f0>
1c0015d0:	4705                	li	a4,1
1c0015d2:	00a71533          	sll	a0,a4,a0
1c0015d6:	00204737          	lui	a4,0x204
1c0015da:	40a72223          	sw	a0,1028(a4) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0015de:	30089073          	csrw	mstatus,a7
1c0015e2:	b4a5                	j	1c00104a <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x18e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0015e4:	30047373          	csrrci	t1,mstatus,8
1c0015e8:	40452503          	lw	a0,1028(a0)
1c0015ec:	48e6                	lw	a7,88(sp)
1c0015ee:	41155533          	sra	a0,a0,a7
1c0015f2:	fc153533          	p.bclr	a0,a0,30,1
1c0015f6:	c51d                	beqz	a0,1c001624 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x768>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0015f8:	10000e13          	li	t3,256
1c0015fc:	00204537          	lui	a0,0x204
  __builtin_pulp_spr_write(reg, val);
1c001600:	30031073          	csrw	mstatus,t1
1c001604:	01c52423          	sw	t3,8(a0) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001608:	03c56603          	p.elw	a2,60(a0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00160c:	01c52223          	sw	t3,4(a0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001610:	30047373          	csrrci	t1,mstatus,8
1c001614:	40452603          	lw	a2,1028(a0)
1c001618:	48e6                	lw	a7,88(sp)
1c00161a:	41165633          	sra	a2,a2,a7
1c00161e:	fc163633          	p.bclr	a2,a2,30,1
1c001622:	fe79                	bnez	a2,1c001600 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x744>
1c001624:	4605                	li	a2,1
1c001626:	011618b3          	sll	a7,a2,a7
1c00162a:	00204637          	lui	a2,0x204
1c00162e:	41162223          	sw	a7,1028(a2) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c001632:	30031073          	csrw	mstatus,t1
1c001636:	ba7d                	j	1c000ff4 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x138>
			_SN_In = 0;
1c001638:	4381                	li	t2,0
1c00163a:	b669                	j	1c0011c4 <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu+0x308>

1c00163c <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu>:
		signed char * __restrict__ Out,
		unsigned char * __restrict__ Scale,
		signed char * __restrict__ ScaleN,
		signed char * __restrict__ Infos)

{
1c00163c:	7121                	addi	sp,sp,-448
1c00163e:	19912a23          	sw	s9,404(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[9x1], 1]
		Tile0: [0, 9, 9], Tile1: [0, 9, 9], Tile2; [0, 9, 9]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (mnist_L1_Memory+19264);
1c001642:	10000cb7          	lui	s9,0x10000
1c001646:	01cc8c93          	addi	s9,s9,28 # 1000001c <mnist_L1_Memory>
1c00164a:	000ca303          	lw	t1,0(s9)
	KerArg1->OutFeatures = (unsigned short int) (64);
	KerArg1->Out = (int * __restrict__) (mnist_L1_Memory+19264);
	KerArg1->Pad = (v4s) 0;
	KerArg2->In = (int *__restrict__) (mnist_L1_Memory+19264);
	KerArg2->Out = (void *__restrict__) (mnist_L1_Memory+19264);
	KerArg2->Feat = (unsigned short int) (64);
1c00164e:	1c00c8b7          	lui	a7,0x1c00c
{
1c001652:	1a812c23          	sw	s0,440(sp)
	KerArg0->Bias = (void * __restrict__) (mnist_L1_Memory+3456);
1c001656:	6e05                	lui	t3,0x1
	KerArg2->Feat = (unsigned short int) (64);
1c001658:	1848a403          	lw	s0,388(a7) # 1c00c184 <__clz_tab+0x2f4>
	KerArg0->Out = (int * __restrict__) (mnist_L1_Memory+19264);
1c00165c:	6895                	lui	a7,0x5
	KerArg0->Bias = (void * __restrict__) (mnist_L1_Memory+3456);
1c00165e:	d80e0293          	addi	t0,t3,-640 # d80 <__rt_stack_size+0x580>
	KerArg2->W = (unsigned short int) (10);
	KerArg2->H = (unsigned short int) (10);
	KerArg2->Scale = (unsigned char *__restrict__) (mnist_L1_Memory+3712);
1c001662:	e80e0f93          	addi	t6,t3,-384
	KerArg0->Out = (int * __restrict__) (mnist_L1_Memory+19264);
1c001666:	b4088893          	addi	a7,a7,-1216 # 4b40 <__rt_stack_size+0x4340>
	KerArg2->ScaleN = (unsigned char *__restrict__) (mnist_L1_Memory+3776);
1c00166a:	ec0e0e13          	addi	t3,t3,-320
	KerArg2->Infos = (signed char *__restrict__) (mnist_L1_Memory+44864);
1c00166e:	6ead                	lui	t4,0xb
	KerArg3->W = (unsigned short int) (10);
	KerArg3->UsedW = (unsigned short int) (10);
	KerArg3->H = (unsigned short int) (10);
	KerArg3->UsedH = (unsigned short int) (10);
	KerArg3->Feat = (unsigned short int) (64);
	KerArg3->Out = (signed char * __restrict__) (mnist_L1_Memory+17664);
1c001670:	6f11                	lui	t5,0x4
	KerArg0->Out = (int * __restrict__) (mnist_L1_Memory+19264);
1c001672:	989a                	add	a7,a7,t1
{
1c001674:	1a912a23          	sw	s1,436(sp)
1c001678:	1b212823          	sw	s2,432(sp)
1c00167c:	1b312623          	sw	s3,428(sp)
1c001680:	1b512223          	sw	s5,420(sp)
1c001684:	1b612023          	sw	s6,416(sp)
	KerArg0->W = (unsigned short int) (10);
1c001688:	005063d7          	pv.add.sci.h	t2,zero,10
	KerArg0->Feat = (unsigned short int) (64);
1c00168c:	04000913          	li	s2,64
	KerArg1->W = (unsigned short int) (12);
1c001690:	006069d7          	pv.add.sci.h	s3,zero,12
	KerArg2->H = (unsigned short int) (10);
1c001694:	44a9                	li	s1,10
	KerArg0->Bias = (void * __restrict__) (mnist_L1_Memory+3456);
1c001696:	00530b33          	add	s6,t1,t0
	KerArg2->Scale = (unsigned char *__restrict__) (mnist_L1_Memory+3712);
1c00169a:	9f9a                	add	t6,t6,t1
	KerArg2->ScaleN = (unsigned char *__restrict__) (mnist_L1_Memory+3776);
1c00169c:	9e1a                	add	t3,t3,t1
{
1c00169e:	8aae                	mv	s5,a1
	KerArg2->Infos = (signed char *__restrict__) (mnist_L1_Memory+44864);
1c0016a0:	f40e8e93          	addi	t4,t4,-192 # af40 <__rt_stack_size+0xa740>
	KerArg1->Pad = (v4s) 0;
1c0016a4:	000075d7          	pv.add.sci.b	a1,zero,0
	KerArg3->Out = (signed char * __restrict__) (mnist_L1_Memory+17664);
1c0016a8:	500f0f13          	addi	t5,t5,1280 # 4500 <__rt_stack_size+0x3d00>
	KerArg2->Infos = (signed char *__restrict__) (mnist_L1_Memory+44864);
1c0016ac:	9e9a                	add	t4,t4,t1
{
1c0016ae:	c636                	sw	a3,12(sp)
1c0016b0:	1a112e23          	sw	ra,444(sp)
1c0016b4:	1b412423          	sw	s4,424(sp)
1c0016b8:	19712e23          	sw	s7,412(sp)
1c0016bc:	19812c23          	sw	s8,408(sp)
1c0016c0:	19a12823          	sw	s10,400(sp)
1c0016c4:	19b12623          	sw	s11,396(sp)
	KerArg3->Out = (signed char * __restrict__) (mnist_L1_Memory+17664);
1c0016c8:	9f1a                	add	t5,t5,t1
{
1c0016ca:	c42a                	sw	a0,8(sp)
	KerArg0->Out = (int * __restrict__) (mnist_L1_Memory+19264);
1c0016cc:	cc46                	sw	a7,24(sp)
	KerArg0->W = (unsigned short int) (10);
1c0016ce:	ce1e                	sw	t2,28(sp)
	KerArg0->Feat = (unsigned short int) (64);
1c0016d0:	03211023          	sh	s2,32(sp)
	KerArg0->Bias = (void * __restrict__) (mnist_L1_Memory+3456);
1c0016d4:	d25a                	sw	s6,36(sp)
	KerArg1->W = (unsigned short int) (12);
1c0016d6:	15312a23          	sw	s3,340(sp)
1c0016da:	15312c23          	sw	s3,344(sp)
	KerArg1->OutFeatures = (unsigned short int) (64);
1c0016de:	15211f23          	sh	s2,350(sp)
	KerArg1->Out = (int * __restrict__) (mnist_L1_Memory+19264);
1c0016e2:	17112623          	sw	a7,364(sp)
	KerArg1->Pad = (v4s) 0;
1c0016e6:	16b12823          	sw	a1,368(sp)
	KerArg2->In = (int *__restrict__) (mnist_L1_Memory+19264);
1c0016ea:	d646                	sw	a7,44(sp)
	KerArg2->Out = (void *__restrict__) (mnist_L1_Memory+19264);
1c0016ec:	d846                	sw	a7,48(sp)
	KerArg2->Feat = (unsigned short int) (64);
1c0016ee:	da22                	sw	s0,52(sp)
	KerArg2->H = (unsigned short int) (10);
1c0016f0:	02911c23          	sh	s1,56(sp)
	KerArg2->Scale = (unsigned char *__restrict__) (mnist_L1_Memory+3712);
1c0016f4:	de7e                	sw	t6,60(sp)
	KerArg2->ScaleN = (unsigned char *__restrict__) (mnist_L1_Memory+3776);
1c0016f6:	c0f2                	sw	t3,64(sp)
	KerArg3->Pad = (v4s) 0;
	KerArg3->PoolMax = (unsigned char) (1);
1c0016f8:	4685                	li	a3,1
	KerArg2->Infos = (signed char *__restrict__) (mnist_L1_Memory+44864);
1c0016fa:	c2f6                	sw	t4,68(sp)
	KerArg3->In = (signed char * __restrict__) (mnist_L1_Memory+19264);
1c0016fc:	13112423          	sw	a7,296(sp)
	KerArg3->UsedH = (unsigned short int) (10);
1c001700:	12911c23          	sh	s1,312(sp)
	KerArg3->Feat = (unsigned short int) (64);
1c001704:	12812823          	sw	s0,304(sp)
1c001708:	12712a23          	sw	t2,308(sp)
	KerArg3->Out = (signed char * __restrict__) (mnist_L1_Memory+17664);
1c00170c:	13e12623          	sw	t5,300(sp)
	KerArg3->Pad = (v4s) 0;
1c001710:	14b12423          	sw	a1,328(sp)
	KerArg3->PoolMax = (unsigned char) (1);
1c001714:	12d10d23          	sb	a3,314(sp)
	KerArg3->DoScale = (unsigned char) (0);
1c001718:	140102a3          	sb	zero,325(sp)
	KerArg3->Infos = (signed char * __restrict__) (mnist_L1_Memory+44864);
1c00171c:	15d12623          	sw	t4,332(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001720:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001724:	002046b7          	lui	a3,0x204
1c001728:	4006a883          	lw	a7,1024(a3) # 204400 <__L2+0x184400>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00172c:	002f05b7          	lui	a1,0x2f0
1c001730:	6c058593          	addi	a1,a1,1728 # 2f06c0 <__L2+0x2706c0>
1c001734:	40b6a023          	sw	a1,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001738:	4066a023          	sw	t1,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00173c:	45a2                	lw	a1,8(sp)
1c00173e:	40b6a023          	sw	a1,1024(a3)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c001742:	009005b7          	lui	a1,0x900
1c001746:	09058593          	addi	a1,a1,144 # 900090 <__L2+0x880090>
1c00174a:	40b6a023          	sw	a1,1024(a3)
        if (!merge) copy->id = id;
1c00174e:	c4c6                	sw	a7,72(sp)
        copy->length = 0;
1c001750:	cc82                	sw	zero,88(sp)
  __builtin_pulp_spr_write(reg, val);
1c001752:	30051073          	csrw	mstatus,a0
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+0+0), 1728, 144, 144, 0, &DmaR_Evt1);
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+3456), 256, 0, &DmaR_Evt2);
1c001756:	000ca583          	lw	a1,0(s9)
1c00175a:	92ae                	add	t0,t0,a1
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00175c:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001760:	4006a883          	lw	a7,1024(a3)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001764:	000305b7          	lui	a1,0x30
1c001768:	c085c5b3          	p.bset	a1,a1,0,8
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00176c:	c135c5b3          	p.bset	a1,a1,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001770:	c155c5b3          	p.bset	a1,a1,0,21
1c001774:	40b6a023          	sw	a1,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001778:	4056a023          	sw	t0,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00177c:	40c6a023          	sw	a2,1024(a3)
        if (!merge) copy->id = id;
1c001780:	d4c6                	sw	a7,104(sp)
        copy->length = 0;
1c001782:	dc82                	sw	zero,120(sp)
  __builtin_pulp_spr_write(reg, val);
1c001784:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c001788:	5666                	lw	a2,120(sp)
1c00178a:	5e060763          	beqz	a2,1c001d78 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x73c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00178e:	458a                	lw	a1,128(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001790:	02000613          	li	a2,32
1c001794:	c989                	beqz	a1,1c0017a6 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x16a>
1c001796:	00c6a423          	sw	a2,8(a3)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00179a:	03c6e583          	p.elw	a1,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00179e:	00c6a223          	sw	a2,4(a3)
1c0017a2:	458a                	lw	a1,128(sp)
1c0017a4:	f9ed                	bnez	a1,1c001796 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x15a>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Scale+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+3712), 64, 0, &DmaR_Evt3);
1c0017a6:	000ca583          	lw	a1,0(s9)
1c0017aa:	6685                	lui	a3,0x1
1c0017ac:	e8068693          	addi	a3,a3,-384 # e80 <__rt_stack_size+0x680>
1c0017b0:	95b6                	add	a1,a1,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0017b2:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0017b6:	002046b7          	lui	a3,0x204
1c0017ba:	4006a883          	lw	a7,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0017be:	000b0637          	lui	a2,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0017c2:	04060613          	addi	a2,a2,64 # b0040 <__L2+0x30040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0017c6:	c1564633          	p.bset	a2,a2,0,21
1c0017ca:	40c6a023          	sw	a2,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0017ce:	40b6a023          	sw	a1,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0017d2:	40e6a023          	sw	a4,1024(a3)
        if (!merge) copy->id = id;
1c0017d6:	c546                	sw	a7,136(sp)
        copy->length = 0;
1c0017d8:	cd02                	sw	zero,152(sp)
  __builtin_pulp_spr_write(reg, val);
1c0017da:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c0017de:	476a                	lw	a4,152(sp)
1c0017e0:	54070263          	beqz	a4,1c001d24 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6e8>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0017e4:	560a                	lw	a2,160(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0017e6:	02000693          	li	a3,32
1c0017ea:	00204737          	lui	a4,0x204
1c0017ee:	ca09                	beqz	a2,1c001800 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x1c4>
1c0017f0:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0017f4:	03c76603          	p.elw	a2,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0017f8:	00d72223          	sw	a3,4(a4)
1c0017fc:	560a                	lw	a2,160(sp)
1c0017fe:	fa6d                	bnez	a2,1c0017f0 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x1b4>
	AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read Scale */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) ScaleN+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+3776), 64, 0, &DmaR_Evt4);
1c001800:	000ca603          	lw	a2,0(s9)
1c001804:	6705                	lui	a4,0x1
1c001806:	ec070713          	addi	a4,a4,-320 # ec0 <__rt_stack_size+0x6c0>
1c00180a:	963a                	add	a2,a2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00180c:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001810:	00204737          	lui	a4,0x204
1c001814:	40072503          	lw	a0,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001818:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00181c:	04068693          	addi	a3,a3,64 # b0040 <__L2+0x30040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001820:	c156c6b3          	p.bset	a3,a3,0,21
1c001824:	40d72023          	sw	a3,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001828:	40c72023          	sw	a2,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00182c:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c001830:	d52a                	sw	a0,168(sp)
        copy->length = 0;
1c001832:	dd02                	sw	zero,184(sp)
  __builtin_pulp_spr_write(reg, val);
1c001834:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c001838:	57ea                	lw	a5,184(sp)
1c00183a:	48078b63          	beqz	a5,1c001cd0 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x694>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00183e:	468e                	lw	a3,192(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001840:	02000713          	li	a4,32
1c001844:	002047b7          	lui	a5,0x204
1c001848:	ca89                	beqz	a3,1c00185a <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x21e>
1c00184a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00184e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001852:	00e7a223          	sw	a4,4(a5)
1c001856:	468e                	lw	a3,192(sp)
1c001858:	faed                	bnez	a3,1c00184a <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x20e>
	AT_L2_WAIT(0, &DmaR_Evt4); /* Wait previous DMA read ScaleN */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+3840+0), 6912, 0, &DmaR_Evt5);
1c00185a:	000ca603          	lw	a2,0(s9)
1c00185e:	6785                	lui	a5,0x1
1c001860:	f0078793          	addi	a5,a5,-256 # f00 <__rt_stack_size+0x700>
1c001864:	963e                	add	a2,a2,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001866:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00186a:	002047b7          	lui	a5,0x204
1c00186e:	4007a503          	lw	a0,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c001872:	00030737          	lui	a4,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001876:	6689                	lui	a3,0x2
1c001878:	b0068693          	addi	a3,a3,-1280 # 1b00 <__rt_stack_size+0x1300>
1c00187c:	88ba                	mv	a7,a4
1c00187e:	de06a8b3          	p.insert	a7,a3,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001882:	c138c6b3          	p.bset	a3,a7,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c001886:	c156c6b3          	p.bset	a3,a3,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00188a:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00188e:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001892:	4157a023          	sw	s5,1024(a5)
        if (!merge) copy->id = id;
1c001896:	c5aa                	sw	a0,200(sp)
        copy->length = 0;
1c001898:	cd82                	sw	zero,216(sp)
  __builtin_pulp_spr_write(reg, val);
1c00189a:	30059073          	csrw	mstatus,a1
	_N_Filter=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+44864), 9, 0, &DmaR_Evt6);
1c00189e:	000ca683          	lw	a3,0(s9)
1c0018a2:	662d                	lui	a2,0xb
1c0018a4:	f4060613          	addi	a2,a2,-192 # af40 <__rt_stack_size+0xa740>
1c0018a8:	96b2                	add	a3,a3,a2
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0018aa:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0018ae:	4007a583          	lw	a1,1024(a5)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0018b2:	00976713          	ori	a4,a4,9
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0018b6:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0018ba:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0018be:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0018c2:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0018c6:	4107a023          	sw	a6,1024(a5)
        if (!merge) copy->id = id;
1c0018ca:	d5ae                	sw	a1,232(sp)
        copy->length = 0;
1c0018cc:	dd82                	sw	zero,248(sp)
  __builtin_pulp_spr_write(reg, val);
1c0018ce:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c0018d2:	576e                	lw	a4,248(sp)
1c0018d4:	3a070463          	beqz	a4,1c001c7c <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x640>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0018d8:	10012683          	lw	a3,256(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0018dc:	02000713          	li	a4,32
1c0018e0:	ca91                	beqz	a3,1c0018f4 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x2b8>
1c0018e2:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0018e6:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0018ea:	00e7a223          	sw	a4,4(a5)
1c0018ee:	10012683          	lw	a3,256(sp)
1c0018f2:	fae5                	bnez	a3,1c0018e2 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x2a6>
	{ /* Single iteration on D1 */
		int D1Ind_Last = 1, D1Ind_NextLast = 1;
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1, T0Ind_NextLast = 1;
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			KerArg0->NormBias = (unsigned char) (((char *)(mnist_L1_Memory+44864))[5]);
1c0018f4:	000ca783          	lw	a5,0(s9)
1c0018f8:	66ad                	lui	a3,0xb
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0018fa:	0ff00713          	li	a4,255
1c0018fe:	97b6                	add	a5,a5,a3
1c001900:	f457c683          	lbu	a3,-187(a5)
1c001904:	002047b7          	lui	a5,0x204
1c001908:	02d10423          	sb	a3,40(sp)
1c00190c:	08e7a223          	sw	a4,132(a5) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001910:	20078c13          	addi	s8,a5,512
1c001914:	00ec2023          	sw	a4,0(s8)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001918:	00ec2623          	sw	a4,12(s8)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00191c:	1c004737          	lui	a4,0x1c004
1c001920:	f7870713          	addi	a4,a4,-136 # 1c003f78 <KerParSetBiasB32_SQ8>
1c001924:	08e7a023          	sw	a4,128(a5)
1c001928:	0828                	addi	a0,sp,24
1c00192a:	08a7a023          	sw	a0,128(a5)
1c00192e:	64a020ef          	jal	ra,1c003f78 <KerParSetBiasB32_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001932:	01cc6783          	p.elw	a5,28(s8)
1c001936:	1c0054b7          	lui	s1,0x1c005
				} else if (!(1)) {
					_N_In = _N_In + (-3456); _LN_In = (144); _SN_In = (12*_LN_In); 
				}
				_SN_Filter = 0;
				if (!(D0Ind_Last)) {
					_N_Filter = _N_Filter + ((6912)); _SN_Filter = (((1)?(((D0Ind_NextLast)?4608:6912)):(((D0Ind_NextLast)?4608:6912)))); 
1c00193a:	6d09                	lui	s10,0x2
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+0+1728*((D0Ind_Total+1)%2)),
							_SN_In, 144, _LN_In, 0, &DmaR_Evt1);
				}
				AT_L2_WAIT(0, &DmaR_Evt5); /* Wait previous DMA read Filter */
				if (_SN_Filter) {
					AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+3840+6912*((D0Ind_Total+1)%2)),
1c00193c:	6585                	lui	a1,0x1
	_N_Filter=0;
1c00193e:	4b01                	li	s6,0
	_N_In=0;
1c001940:	4d81                	li	s11,0
			for (D0Ind=0; D0Ind<3; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c001942:	4701                	li	a4,0
1c001944:	02448493          	addi	s1,s1,36 # 1c005024 <KerParConv3x3Stride1_SQ8>
1c001948:	15010b93          	addi	s7,sp,336
					_N_Filter = _N_Filter + ((6912)); _SN_Filter = (((1)?(((D0Ind_NextLast)?4608:6912)):(((D0Ind_NextLast)?4608:6912)))); 
1c00194c:	b00d0d13          	addi	s10,s10,-1280 # 1b00 <__rt_stack_size+0x1300>
1c001950:	6c000993          	li	s3,1728
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c001954:	00204437          	lui	s0,0x204
					AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+3840+6912*((D0Ind_Total+1)%2)),
1c001958:	f0058913          	addi	s2,a1,-256 # f00 <__rt_stack_size+0x700>
				if (!(D0Ind_Last)) {
1c00195c:	48272163          	p.beqimm	a4,2,1c001dde <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x7a2>
					_N_In = _N_In + (1728); _LN_In = (144); _SN_In = (((D0Ind_NextLast)?8:12)*_LN_In); 
1c001960:	6c0d8d93          	addi	s11,s11,1728
1c001964:	46172663          	p.beqimm	a4,1,1c001dd0 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x794>
					_N_Filter = _N_Filter + ((6912)); _SN_Filter = (((1)?(((D0Ind_NextLast)?4608:6912)):(((D0Ind_NextLast)?4608:6912)))); 
1c001968:	9b6a                	add	s6,s6,s10
1c00196a:	6c000e13          	li	t3,1728
1c00196e:	856a                	mv	a0,s10
  if (copy->length == 0)
1c001970:	47e6                	lw	a5,88(sp)
1c001972:	20078e63          	beqz	a5,1c001b8e <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x552>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001976:	5686                	lw	a3,96(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001978:	02000793          	li	a5,32
1c00197c:	ca89                	beqz	a3,1c00198e <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x352>
1c00197e:	00f42423          	sw	a5,8(s0) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001982:	03c46683          	p.elw	a3,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001986:	00f42223          	sw	a5,4(s0)
1c00198a:	5686                	lw	a3,96(sp)
1c00198c:	faed                	bnez	a3,1c00197e <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x342>
1c00198e:	00170a13          	addi	s4,a4,1
				if (_SN_In) {
1c001992:	240e1763          	bnez	t3,1c001be0 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x5a4>
  if (copy->length == 0)
1c001996:	47ee                	lw	a5,216(sp)
1c001998:	16078163          	beqz	a5,1c001afa <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x4be>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00199c:	568e                	lw	a3,224(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00199e:	02000793          	li	a5,32
1c0019a2:	ca89                	beqz	a3,1c0019b4 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x378>
1c0019a4:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0019a8:	03c46683          	p.elw	a3,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0019ac:	00f42223          	sw	a5,4(s0)
1c0019b0:	568e                	lw	a3,224(sp)
1c0019b2:	faed                	bnez	a3,1c0019a4 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x368>
1c0019b4:	000ca783          	lw	a5,0(s9)
				if (_SN_Filter) {
1c0019b8:	18051a63          	bnez	a0,1c001b4c <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x510>
							_SN_Filter, 0, &DmaR_Evt5);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (signed char * __restrict__) (mnist_L1_Memory+0+1728*((D0Ind_Total)%2));
1c0019bc:	fc173733          	p.bclr	a4,a4,30,1
1c0019c0:	86be                	mv	a3,a5
1c0019c2:	433706b3          	p.mac	a3,a4,s3
1c0019c6:	14d12823          	sw	a3,336(sp)
				KerArg1->InFeatures = (unsigned short int) ((D0Ind_Last)?8:12);
1c0019ca:	403a2163          	p.beqimm	s4,3,1c001dcc <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x790>
1c0019ce:	46b1                	li	a3,12
				KerArg1->TotalInFeatures = (unsigned short int) ((D0Ind_Last)?8:12);
				KerArg1->Filter = (signed char * __restrict__) (mnist_L1_Memory+3840+6912*((D0Ind_Total)%2));
1c0019d0:	864a                	mv	a2,s2
1c0019d2:	43a70633          	p.mac	a2,a4,s10
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0019d6:	0ff00713          	li	a4,255
				KerArg1->InFeatures = (unsigned short int) ((D0Ind_Last)?8:12);
1c0019da:	14d11e23          	sh	a3,348(sp)
				KerArg1->TotalInFeatures = (unsigned short int) ((D0Ind_Last)?8:12);
1c0019de:	16d11023          	sh	a3,352(sp)
				KerArg1->Filter = (signed char * __restrict__) (mnist_L1_Memory+3840+6912*((D0Ind_Total)%2));
1c0019e2:	97b2                	add	a5,a5,a2
1c0019e4:	16f12223          	sw	a5,356(sp)
1c0019e8:	08e42223          	sw	a4,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0019ec:	00ec2023          	sw	a4,0(s8)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0019f0:	00ec2623          	sw	a4,12(s8)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0019f4:	08942023          	sw	s1,128(s0)
1c0019f8:	09742023          	sw	s7,128(s0)
1c0019fc:	855e                	mv	a0,s7
1c0019fe:	626030ef          	jal	ra,1c005024 <KerParConv3x3Stride1_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001a02:	01cc6783          	p.elw	a5,28(s8)
1c001a06:	8752                	mv	a4,s4
			for (D0Ind=0; D0Ind<3; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c001a08:	f43a3ae3          	p.bneimm	s4,3,1c00195c <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x320>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001a0c:	0ff00913          	li	s2,255
1c001a10:	002044b7          	lui	s1,0x204
1c001a14:	0924a223          	sw	s2,132(s1) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001a18:	012c2023          	sw	s2,0(s8)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001a1c:	012c2623          	sw	s2,12(s8)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c001a20:	1c0047b7          	lui	a5,0x1c004
1c001a24:	ecc78793          	addi	a5,a5,-308 # 1c003ecc <KerParReductIO_CC_SQ8>
1c001a28:	08f4a023          	sw	a5,128(s1)
1c001a2c:	1068                	addi	a0,sp,44
1c001a2e:	08a4a023          	sw	a0,128(s1)
1c001a32:	49a020ef          	jal	ra,1c003ecc <KerParReductIO_CC_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001a36:	01cc6783          	p.elw	a5,28(s8)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001a3a:	0924a223          	sw	s2,132(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001a3e:	012c2023          	sw	s2,0(s8)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001a42:	012c2623          	sw	s2,12(s8)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c001a46:	1c0067b7          	lui	a5,0x1c006
1c001a4a:	b8278793          	addi	a5,a5,-1150 # 1c005b82 <KerParPool2x2Stride2_ReLU_SQ8>
1c001a4e:	08f4a023          	sw	a5,128(s1)
1c001a52:	1228                	addi	a0,sp,296
1c001a54:	08a4a023          	sw	a0,128(s1)
1c001a58:	12a040ef          	jal	ra,1c005b82 <KerParPool2x2Stride2_ReLU_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001a5c:	01cc6783          	p.elw	a5,28(s8)
			AT_FORK(gap_ncore(), (void *) KerParPool2x2Stride2_ReLU_SQ8, (void *) KerArg3);
			__CALL(KerParPool2x2Stride2_ReLU_SQ8, KerArg3);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+17664), 1600, 1, &DmaW_Evt1);
1c001a60:	6791                	lui	a5,0x4
1c001a62:	000ca703          	lw	a4,0(s9)
1c001a66:	50078793          	addi	a5,a5,1280 # 4500 <__rt_stack_size+0x3d00>
1c001a6a:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001a6c:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001a70:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001a74:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001a78:	64078793          	addi	a5,a5,1600 # a0640 <__L2+0x20640>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001a7c:	c157c7b3          	p.bset	a5,a5,0,21
1c001a80:	40f4a023          	sw	a5,1024(s1)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001a84:	40e4a023          	sw	a4,1024(s1)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001a88:	48b2                	lw	a7,12(sp)
1c001a8a:	4114a023          	sw	a7,1024(s1)
        if (!merge) copy->id = id;
1c001a8e:	10c12423          	sw	a2,264(sp)
        copy->length = 0;
1c001a92:	10012c23          	sw	zero,280(sp)
  __builtin_pulp_spr_write(reg, val);
1c001a96:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c001a9a:	11812783          	lw	a5,280(sp)
1c001a9e:	18078363          	beqz	a5,1c001c24 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x5e8>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001aa2:	12012683          	lw	a3,288(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001aa6:	02000713          	li	a4,32
1c001aaa:	002047b7          	lui	a5,0x204
1c001aae:	ca91                	beqz	a3,1c001ac2 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x486>
1c001ab0:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001ab4:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001ab8:	00e7a223          	sw	a4,4(a5)
1c001abc:	12012683          	lw	a3,288(sp)
1c001ac0:	fae5                	bnez	a3,1c001ab0 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x474>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c001ac2:	1bc12083          	lw	ra,444(sp)
1c001ac6:	1b812403          	lw	s0,440(sp)
1c001aca:	1b412483          	lw	s1,436(sp)
1c001ace:	1b012903          	lw	s2,432(sp)
1c001ad2:	1ac12983          	lw	s3,428(sp)
1c001ad6:	1a812a03          	lw	s4,424(sp)
1c001ada:	1a412a83          	lw	s5,420(sp)
1c001ade:	1a012b03          	lw	s6,416(sp)
1c001ae2:	19c12b83          	lw	s7,412(sp)
1c001ae6:	19812c03          	lw	s8,408(sp)
1c001aea:	19412c83          	lw	s9,404(sp)
1c001aee:	19012d03          	lw	s10,400(sp)
1c001af2:	18c12d83          	lw	s11,396(sp)
1c001af6:	6139                	addi	sp,sp,448
1c001af8:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001afa:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c001afe:	40442783          	lw	a5,1028(s0)
1c001b02:	46ae                	lw	a3,200(sp)
1c001b04:	40d7d7b3          	sra	a5,a5,a3
1c001b08:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001b0c:	c78d                	beqz	a5,1c001b36 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x4fa>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001b0e:	10000893          	li	a7,256
  __builtin_pulp_spr_write(reg, val);
1c001b12:	30061073          	csrw	mstatus,a2
1c001b16:	01142423          	sw	a7,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001b1a:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001b1e:	01142223          	sw	a7,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001b22:	30047673          	csrrci	a2,mstatus,8
1c001b26:	40442783          	lw	a5,1028(s0)
1c001b2a:	46ae                	lw	a3,200(sp)
1c001b2c:	40d7d7b3          	sra	a5,a5,a3
1c001b30:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001b34:	fff9                	bnez	a5,1c001b12 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x4d6>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c001b36:	4785                	li	a5,1
1c001b38:	00d796b3          	sll	a3,a5,a3
1c001b3c:	40d42223          	sw	a3,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c001b40:	30061073          	csrw	mstatus,a2
1c001b44:	000ca783          	lw	a5,0(s9)
				if (_SN_Filter) {
1c001b48:	e6050ae3          	beqz	a0,1c0019bc <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x380>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001b4c:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001b50:	40042883          	lw	a7,1024(s0)
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c001b54:	000306b7          	lui	a3,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001b58:	de0526b3          	p.insert	a3,a0,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c001b5c:	c136c6b3          	p.bset	a3,a3,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c001b60:	c156c6b3          	p.bset	a3,a3,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001b64:	40d42023          	sw	a3,1024(s0)
					AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+3840+6912*((D0Ind_Total+1)%2)),
1c001b68:	fc1a36b3          	p.bclr	a3,s4,30,1
1c001b6c:	85ca                	mv	a1,s2
1c001b6e:	43a685b3          	p.mac	a1,a3,s10
1c001b72:	97ae                	add	a5,a5,a1
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001b74:	40f42023          	sw	a5,1024(s0)
1c001b78:	016a87b3          	add	a5,s5,s6
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001b7c:	40f42023          	sw	a5,1024(s0)
        if (!merge) copy->id = id;
1c001b80:	c5c6                	sw	a7,200(sp)
        copy->length = 0;
1c001b82:	cd82                	sw	zero,216(sp)
  __builtin_pulp_spr_write(reg, val);
1c001b84:	30061073          	csrw	mstatus,a2
1c001b88:	000ca783          	lw	a5,0(s9)
1c001b8c:	bd05                	j	1c0019bc <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x380>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001b8e:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c001b92:	40442783          	lw	a5,1028(s0)
1c001b96:	46a6                	lw	a3,72(sp)
1c001b98:	40d7d7b3          	sra	a5,a5,a3
1c001b9c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001ba0:	c78d                	beqz	a5,1c001bca <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x58e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001ba2:	10000893          	li	a7,256
  __builtin_pulp_spr_write(reg, val);
1c001ba6:	30061073          	csrw	mstatus,a2
1c001baa:	01142423          	sw	a7,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001bae:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001bb2:	01142223          	sw	a7,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001bb6:	30047673          	csrrci	a2,mstatus,8
1c001bba:	40442783          	lw	a5,1028(s0)
1c001bbe:	46a6                	lw	a3,72(sp)
1c001bc0:	40d7d7b3          	sra	a5,a5,a3
1c001bc4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001bc8:	fff9                	bnez	a5,1c001ba6 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x56a>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c001bca:	4785                	li	a5,1
1c001bcc:	00d796b3          	sll	a3,a5,a3
1c001bd0:	40d42223          	sw	a3,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c001bd4:	30061073          	csrw	mstatus,a2
1c001bd8:	00170a13          	addi	s4,a4,1
				if (_SN_In) {
1c001bdc:	da0e0de3          	beqz	t3,1c001996 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x35a>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+0+1728*((D0Ind_Total+1)%2)),
1c001be0:	000ca783          	lw	a5,0(s9)
1c001be4:	fc1a36b3          	p.bclr	a3,s4,30,1
1c001be8:	433687b3          	p.mac	a5,a3,s3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001bec:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001bf0:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c001bf4:	c70e4e33          	p.bset	t3,t3,3,16
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c001bf8:	c15e4e33          	p.bset	t3,t3,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001bfc:	41c42023          	sw	t3,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001c00:	40f42023          	sw	a5,1024(s0)
1c001c04:	48a2                	lw	a7,8(sp)
1c001c06:	01b887b3          	add	a5,a7,s11
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001c0a:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c001c0e:	009007b7          	lui	a5,0x900
1c001c12:	09078793          	addi	a5,a5,144 # 900090 <__L2+0x880090>
1c001c16:	40f42023          	sw	a5,1024(s0)
        if (!merge) copy->id = id;
1c001c1a:	c4b2                	sw	a2,72(sp)
        copy->length = 0;
1c001c1c:	cc82                	sw	zero,88(sp)
  __builtin_pulp_spr_write(reg, val);
1c001c1e:	30069073          	csrw	mstatus,a3
1c001c22:	bb95                	j	1c001996 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x35a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001c24:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c001c28:	40442783          	lw	a5,1028(s0)
1c001c2c:	10812683          	lw	a3,264(sp)
1c001c30:	40d7d7b3          	sra	a5,a5,a3
1c001c34:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001c38:	cb85                	beqz	a5,1c001c68 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x62c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001c3a:	10000593          	li	a1,256
1c001c3e:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c001c42:	30061073          	csrw	mstatus,a2
1c001c46:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001c4a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001c4e:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001c52:	30047673          	csrrci	a2,mstatus,8
1c001c56:	40472783          	lw	a5,1028(a4)
1c001c5a:	10812683          	lw	a3,264(sp)
1c001c5e:	40d7d7b3          	sra	a5,a5,a3
1c001c62:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001c66:	fff1                	bnez	a5,1c001c42 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x606>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c001c68:	4785                	li	a5,1
1c001c6a:	00d796b3          	sll	a3,a5,a3
1c001c6e:	002047b7          	lui	a5,0x204
1c001c72:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c001c76:	30061073          	csrw	mstatus,a2
1c001c7a:	b5a1                	j	1c001ac2 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x486>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001c7c:	30047673          	csrrci	a2,mstatus,8
1c001c80:	4047a783          	lw	a5,1028(a5)
1c001c84:	56ae                	lw	a3,232(sp)
1c001c86:	40d7d7b3          	sra	a5,a5,a3
1c001c8a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001c8e:	c79d                	beqz	a5,1c001cbc <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x680>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001c90:	10000593          	li	a1,256
1c001c94:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c001c98:	30061073          	csrw	mstatus,a2
1c001c9c:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001ca0:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001ca4:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001ca8:	30047673          	csrrci	a2,mstatus,8
1c001cac:	40472783          	lw	a5,1028(a4)
1c001cb0:	56ae                	lw	a3,232(sp)
1c001cb2:	40d7d7b3          	sra	a5,a5,a3
1c001cb6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001cba:	fff9                	bnez	a5,1c001c98 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x65c>
1c001cbc:	4785                	li	a5,1
1c001cbe:	00d796b3          	sll	a3,a5,a3
1c001cc2:	002047b7          	lui	a5,0x204
1c001cc6:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c001cca:	30061073          	csrw	mstatus,a2
1c001cce:	b11d                	j	1c0018f4 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x2b8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001cd0:	30047673          	csrrci	a2,mstatus,8
1c001cd4:	40472783          	lw	a5,1028(a4)
1c001cd8:	56aa                	lw	a3,168(sp)
1c001cda:	40d7d7b3          	sra	a5,a5,a3
1c001cde:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001ce2:	c79d                	beqz	a5,1c001d10 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6d4>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001ce4:	10000593          	li	a1,256
1c001ce8:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c001cec:	30061073          	csrw	mstatus,a2
1c001cf0:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001cf4:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001cf8:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001cfc:	30047673          	csrrci	a2,mstatus,8
1c001d00:	40472783          	lw	a5,1028(a4)
1c001d04:	56aa                	lw	a3,168(sp)
1c001d06:	40d7d7b3          	sra	a5,a5,a3
1c001d0a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001d0e:	fff9                	bnez	a5,1c001cec <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x6b0>
1c001d10:	4785                	li	a5,1
1c001d12:	00d796b3          	sll	a3,a5,a3
1c001d16:	002047b7          	lui	a5,0x204
1c001d1a:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c001d1e:	30061073          	csrw	mstatus,a2
1c001d22:	be25                	j	1c00185a <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x21e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001d24:	300475f3          	csrrci	a1,mstatus,8
1c001d28:	4046a703          	lw	a4,1028(a3) # 30404 <__L1Cl+0x20404>
1c001d2c:	462a                	lw	a2,136(sp)
1c001d2e:	40c75733          	sra	a4,a4,a2
1c001d32:	fc173733          	p.bclr	a4,a4,30,1
1c001d36:	c71d                	beqz	a4,1c001d64 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x728>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001d38:	10000513          	li	a0,256
1c001d3c:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c001d40:	30059073          	csrw	mstatus,a1
1c001d44:	00a6a423          	sw	a0,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001d48:	03c6e703          	p.elw	a4,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001d4c:	00a6a223          	sw	a0,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001d50:	300475f3          	csrrci	a1,mstatus,8
1c001d54:	4046a703          	lw	a4,1028(a3)
1c001d58:	462a                	lw	a2,136(sp)
1c001d5a:	40c75733          	sra	a4,a4,a2
1c001d5e:	fc173733          	p.bclr	a4,a4,30,1
1c001d62:	ff79                	bnez	a4,1c001d40 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x704>
1c001d64:	4705                	li	a4,1
1c001d66:	00c71633          	sll	a2,a4,a2
1c001d6a:	00204737          	lui	a4,0x204
1c001d6e:	40c72223          	sw	a2,1028(a4) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c001d72:	30059073          	csrw	mstatus,a1
1c001d76:	b469                	j	1c001800 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x1c4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001d78:	30047573          	csrrci	a0,mstatus,8
1c001d7c:	4046a683          	lw	a3,1028(a3)
1c001d80:	55a6                	lw	a1,104(sp)
1c001d82:	40b6d6b3          	sra	a3,a3,a1
1c001d86:	fc16b6b3          	p.bclr	a3,a3,30,1
1c001d8a:	c69d                	beqz	a3,1c001db8 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x77c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001d8c:	10000893          	li	a7,256
1c001d90:	00204637          	lui	a2,0x204
  __builtin_pulp_spr_write(reg, val);
1c001d94:	30051073          	csrw	mstatus,a0
1c001d98:	01162423          	sw	a7,8(a2) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001d9c:	03c66683          	p.elw	a3,60(a2)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001da0:	01162223          	sw	a7,4(a2)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001da4:	30047573          	csrrci	a0,mstatus,8
1c001da8:	40462683          	lw	a3,1028(a2)
1c001dac:	55a6                	lw	a1,104(sp)
1c001dae:	40b6d6b3          	sra	a3,a3,a1
1c001db2:	fc16b6b3          	p.bclr	a3,a3,30,1
1c001db6:	fef9                	bnez	a3,1c001d94 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x758>
1c001db8:	4685                	li	a3,1
1c001dba:	00b695b3          	sll	a1,a3,a1
1c001dbe:	002046b7          	lui	a3,0x204
1c001dc2:	40b6a223          	sw	a1,1028(a3) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c001dc6:	30051073          	csrw	mstatus,a0
1c001dca:	baf1                	j	1c0017a6 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x16a>
				KerArg1->InFeatures = (unsigned short int) ((D0Ind_Last)?8:12);
1c001dcc:	46a1                	li	a3,8
1c001dce:	b109                	j	1c0019d0 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x394>
					_N_Filter = _N_Filter + ((6912)); _SN_Filter = (((1)?(((D0Ind_NextLast)?4608:6912)):(((D0Ind_NextLast)?4608:6912)))); 
1c001dd0:	6585                	lui	a1,0x1
1c001dd2:	9b6a                	add	s6,s6,s10
1c001dd4:	48000e13          	li	t3,1152
1c001dd8:	20058513          	addi	a0,a1,512 # 1200 <__rt_stack_size+0xa00>
1c001ddc:	be51                	j	1c001970 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x334>
				_SN_In = 0;
1c001dde:	4e01                	li	t3,0
				_SN_Filter = 0;
1c001de0:	4501                	li	a0,0
1c001de2:	b679                	j	1c001970 <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu+0x334>

1c001de4 <S10_Op_FULLY_CONNECTED_0_5_fusion>:
		signed char * __restrict__ Out,
		unsigned char * __restrict__ Scale,
		signed char * __restrict__ ScaleN,
		signed char * __restrict__ Infos)

{
1c001de4:	710d                	addi	sp,sp,-352
1c001de6:	13712e23          	sw	s7,316(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[1x1], 9]
		Tile0: [0, 9, 9], Tile1: [0, 9, 9], Tile2; [0, 9, 9]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In = (signed char * __restrict__) (mnist_L1_Memory+0);
1c001dea:	10000bb7          	lui	s7,0x10000
1c001dee:	01cb8b93          	addi	s7,s7,28 # 1000001c <mnist_L1_Memory>
	KerArg0->InDim = (unsigned short int) (1600);
1c001df2:	1c00ce37          	lui	t3,0x1c00c
	KerArg0->In = (signed char * __restrict__) (mnist_L1_Memory+0);
1c001df6:	000ba303          	lw	t1,0(s7)
{
1c001dfa:	c636                	sw	a3,12(sp)
	KerArg0->InDim = (unsigned short int) (1600);
1c001dfc:	16ce2683          	lw	a3,364(t3) # 1c00c16c <__clz_tab+0x2dc>
	KerArg0->TotalInDim = (unsigned short int) (1600);
	KerArg0->OutDim = (unsigned short int) (8);
	KerArg0->Infos = (signed char *__restrict__) (mnist_L1_Memory+27648);
1c001e00:	689d                	lui	a7,0x7
1c001e02:	c0088893          	addi	a7,a7,-1024 # 6c00 <__rt_stack_size+0x6400>
1c001e06:	989a                	add	a7,a7,t1
	KerArg0->InDim = (unsigned short int) (1600);
1c001e08:	10d12623          	sw	a3,268(sp)
	KerArg0->OutDim = (unsigned short int) (8);
1c001e0c:	46a1                	li	a3,8
{
1c001e0e:	14112e23          	sw	ra,348(sp)
1c001e12:	14812c23          	sw	s0,344(sp)
1c001e16:	14912a23          	sw	s1,340(sp)
1c001e1a:	15212823          	sw	s2,336(sp)
1c001e1e:	15312623          	sw	s3,332(sp)
1c001e22:	15412423          	sw	s4,328(sp)
1c001e26:	15512223          	sw	s5,324(sp)
1c001e2a:	15612023          	sw	s6,320(sp)
1c001e2e:	13812c23          	sw	s8,312(sp)
1c001e32:	13912a23          	sw	s9,308(sp)
1c001e36:	13a12823          	sw	s10,304(sp)
1c001e3a:	13b12623          	sw	s11,300(sp)
1c001e3e:	c42e                	sw	a1,8(sp)
	KerArg0->In = (signed char * __restrict__) (mnist_L1_Memory+0);
1c001e40:	df9a                	sw	t1,252(sp)
	KerArg0->OutDim = (unsigned short int) (8);
1c001e42:	10d11823          	sh	a3,272(sp)
	KerArg0->Infos = (signed char *__restrict__) (mnist_L1_Memory+27648);
1c001e46:	11112e23          	sw	a7,284(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001e4a:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001e4e:	002046b7          	lui	a3,0x204
1c001e52:	4006ae03          	lw	t3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001e56:	000b05b7          	lui	a1,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001e5a:	64058593          	addi	a1,a1,1600 # b0640 <__L2+0x30640>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001e5e:	c155c5b3          	p.bset	a1,a1,0,21
1c001e62:	40b6a023          	sw	a1,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001e66:	4066a023          	sw	t1,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001e6a:	40a6a023          	sw	a0,1024(a3)
        if (!merge) copy->id = id;
1c001e6e:	ce72                	sw	t3,28(sp)
        copy->length = 0;
1c001e70:	d602                	sw	zero,44(sp)
  __builtin_pulp_spr_write(reg, val);
1c001e72:	30089073          	csrw	mstatus,a7
  if (copy->length == 0)
1c001e76:	55b2                	lw	a1,44(sp)
1c001e78:	52058263          	beqz	a1,1c00239c <S10_Op_FULLY_CONNECTED_0_5_fusion+0x5b8>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001e7c:	5552                	lw	a0,52(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001e7e:	02000593          	li	a1,32
1c001e82:	c909                	beqz	a0,1c001e94 <S10_Op_FULLY_CONNECTED_0_5_fusion+0xb0>
1c001e84:	00b6a423          	sw	a1,8(a3)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001e88:	03c6e503          	p.elw	a0,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001e8c:	00b6a223          	sw	a1,4(a3)
1c001e90:	5552                	lw	a0,52(sp)
1c001e92:	f96d                	bnez	a0,1c001e84 <S10_Op_FULLY_CONNECTED_0_5_fusion+0xa0>
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+0), 1600, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+1600+0), 12800, 0, &DmaR_Evt2);
1c001e94:	000ba883          	lw	a7,0(s7)
1c001e98:	64088893          	addi	a7,a7,1600
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001e9c:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001ea0:	002046b7          	lui	a3,0x204
1c001ea4:	4006ae03          	lw	t3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c001ea8:	000305b7          	lui	a1,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001eac:	650d                	lui	a0,0x3
1c001eae:	20050513          	addi	a0,a0,512 # 3200 <__rt_stack_size+0x2a00>
1c001eb2:	8eae                	mv	t4,a1
1c001eb4:	de052eb3          	p.insert	t4,a0,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001eb8:	c13ec533          	p.bset	a0,t4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c001ebc:	c1554533          	p.bset	a0,a0,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001ec0:	40a6a023          	sw	a0,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001ec4:	4116a023          	sw	a7,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001ec8:	4ea2                	lw	t4,8(sp)
1c001eca:	41d6a023          	sw	t4,1024(a3)
        if (!merge) copy->id = id;
1c001ece:	de72                	sw	t3,60(sp)
        copy->length = 0;
1c001ed0:	c682                	sw	zero,76(sp)
  __builtin_pulp_spr_write(reg, val);
1c001ed2:	30031073          	csrw	mstatus,t1
	_N_Filter=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+27200), 256, 0, &DmaR_Evt3);
1c001ed6:	000ba503          	lw	a0,0(s7)
1c001eda:	689d                	lui	a7,0x7
1c001edc:	a4088893          	addi	a7,a7,-1472 # 6a40 <__rt_stack_size+0x6240>
1c001ee0:	9546                	add	a0,a0,a7
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001ee2:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001ee6:	4006a303          	lw	t1,1024(a3)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001eea:	c085c5b3          	p.bset	a1,a1,0,8
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001eee:	c135c5b3          	p.bset	a1,a1,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c001ef2:	c155c5b3          	p.bset	a1,a1,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001ef6:	40b6a023          	sw	a1,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001efa:	40a6a023          	sw	a0,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001efe:	40c6a023          	sw	a2,1024(a3)
        if (!merge) copy->id = id;
1c001f02:	ce9a                	sw	t1,92(sp)
        copy->length = 0;
1c001f04:	d682                	sw	zero,108(sp)
  __builtin_pulp_spr_write(reg, val);
1c001f06:	30089073          	csrw	mstatus,a7
  if (copy->length == 0)
1c001f0a:	5636                	lw	a2,108(sp)
1c001f0c:	42060e63          	beqz	a2,1c002348 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x564>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001f10:	55d6                	lw	a1,116(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001f12:	02000613          	li	a2,32
1c001f16:	c989                	beqz	a1,1c001f28 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x144>
1c001f18:	00c6a423          	sw	a2,8(a3)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001f1c:	03c6e583          	p.elw	a1,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001f20:	00c6a223          	sw	a2,4(a3)
1c001f24:	55d6                	lw	a1,116(sp)
1c001f26:	f9ed                	bnez	a1,1c001f18 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x134>
	AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Scale+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+27520), 64, 0, &DmaR_Evt4);
1c001f28:	000ba583          	lw	a1,0(s7)
1c001f2c:	669d                	lui	a3,0x7
1c001f2e:	b8068693          	addi	a3,a3,-1152 # 6b80 <__rt_stack_size+0x6380>
1c001f32:	95b6                	add	a1,a1,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001f34:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001f38:	002046b7          	lui	a3,0x204
1c001f3c:	4006a883          	lw	a7,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001f40:	000b0637          	lui	a2,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001f44:	04060613          	addi	a2,a2,64 # b0040 <__L2+0x30040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001f48:	c1564633          	p.bset	a2,a2,0,21
1c001f4c:	40c6a023          	sw	a2,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001f50:	40b6a023          	sw	a1,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001f54:	40e6a023          	sw	a4,1024(a3)
        if (!merge) copy->id = id;
1c001f58:	dec6                	sw	a7,124(sp)
        copy->length = 0;
1c001f5a:	c702                	sw	zero,140(sp)
  __builtin_pulp_spr_write(reg, val);
1c001f5c:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c001f60:	473a                	lw	a4,140(sp)
1c001f62:	38070963          	beqz	a4,1c0022f4 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x510>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001f66:	465a                	lw	a2,148(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001f68:	02000693          	li	a3,32
1c001f6c:	00204737          	lui	a4,0x204
1c001f70:	ca09                	beqz	a2,1c001f82 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x19e>
1c001f72:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001f76:	03c76603          	p.elw	a2,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001f7a:	00d72223          	sw	a3,4(a4)
1c001f7e:	465a                	lw	a2,148(sp)
1c001f80:	fa6d                	bnez	a2,1c001f72 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x18e>
	AT_L2_WAIT(0, &DmaR_Evt4); /* Wait previous DMA read Scale */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) ScaleN+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+27584), 64, 0, &DmaR_Evt5);
1c001f82:	000ba603          	lw	a2,0(s7)
1c001f86:	671d                	lui	a4,0x7
1c001f88:	bc070713          	addi	a4,a4,-1088 # 6bc0 <__rt_stack_size+0x63c0>
1c001f8c:	963a                	add	a2,a2,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001f8e:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001f92:	00204737          	lui	a4,0x204
1c001f96:	40072503          	lw	a0,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001f9a:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001f9e:	04068693          	addi	a3,a3,64 # b0040 <__L2+0x30040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001fa2:	c156c6b3          	p.bset	a3,a3,0,21
1c001fa6:	40d72023          	sw	a3,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001faa:	40c72023          	sw	a2,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001fae:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c001fb2:	cf2a                	sw	a0,156(sp)
        copy->length = 0;
1c001fb4:	d702                	sw	zero,172(sp)
  __builtin_pulp_spr_write(reg, val);
1c001fb6:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c001fba:	57ba                	lw	a5,172(sp)
1c001fbc:	2e078263          	beqz	a5,1c0022a0 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x4bc>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001fc0:	56da                	lw	a3,180(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001fc2:	02000713          	li	a4,32
1c001fc6:	002047b7          	lui	a5,0x204
1c001fca:	ca89                	beqz	a3,1c001fdc <S10_Op_FULLY_CONNECTED_0_5_fusion+0x1f8>
1c001fcc:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001fd0:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001fd4:	00e7a223          	sw	a4,4(a5)
1c001fd8:	56da                	lw	a3,180(sp)
1c001fda:	faed                	bnez	a3,1c001fcc <S10_Op_FULLY_CONNECTED_0_5_fusion+0x1e8>
	AT_L2_WAIT(0, &DmaR_Evt5); /* Wait previous DMA read ScaleN */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+27648), 9, 0, &DmaR_Evt6);
1c001fdc:	000ba683          	lw	a3,0(s7)
1c001fe0:	679d                	lui	a5,0x7
1c001fe2:	c0078793          	addi	a5,a5,-1024 # 6c00 <__rt_stack_size+0x6400>
1c001fe6:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001fe8:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001fec:	002047b7          	lui	a5,0x204
1c001ff0:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001ff4:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001ff8:	0725                	addi	a4,a4,9
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001ffa:	c1574733          	p.bset	a4,a4,0,21
1c001ffe:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002002:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002006:	4107a023          	sw	a6,1024(a5)
        if (!merge) copy->id = id;
1c00200a:	df2e                	sw	a1,188(sp)
        copy->length = 0;
1c00200c:	c782                	sw	zero,204(sp)
  __builtin_pulp_spr_write(reg, val);
1c00200e:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c002012:	473e                	lw	a4,204(sp)
1c002014:	22070c63          	beqz	a4,1c00224c <S10_Op_FULLY_CONNECTED_0_5_fusion+0x468>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002018:	46de                	lw	a3,212(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00201a:	02000713          	li	a4,32
1c00201e:	ca89                	beqz	a3,1c002030 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x24c>
1c002020:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002024:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002028:	00e7a223          	sw	a4,4(a5)
1c00202c:	46de                	lw	a3,212(sp)
1c00202e:	faed                	bnez	a3,1c002020 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x23c>
{
1c002030:	6c9d                	lui	s9,0x7
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002032:	00204437          	lui	s0,0x204
1c002036:	1c0044b7          	lui	s1,0x1c004
	for (D0Ind=0; D0Ind<8; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
		int D0Ind_Last = (D0Ind==7), D0Ind_NextLast = ((D0Ind+1)==7);
		/*================================= Prepare Tiles ===================================*/
		_SN_Filter = 0;
		if (!(D0Ind_Last)) {
			_N_Filter = _N_Filter + (12800); _SN_Filter = (12800); 
1c00203a:	6c0d                	lui	s8,0x3
{
1c00203c:	b40c8b13          	addi	s6,s9,-1216 # 6b40 <__rt_stack_size+0x6340>
1c002040:	4d81                	li	s11,0
1c002042:	a40c8c93          	addi	s9,s9,-1472
1c002046:	4681                	li	a3,0
1c002048:	02c48493          	addi	s1,s1,44 # 1c00402c <KerParLinearLayerFullFeatB32_ReLU_SQ8>
1c00204c:	0fc10a13          	addi	s4,sp,252
			_N_Filter = _N_Filter + (12800); _SN_Filter = (12800); 
1c002050:	200c0c13          	addi	s8,s8,512 # 3200 <__rt_stack_size+0x2a00>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002054:	10000a93          	li	s5,256
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c002058:	4905                	li	s2,1
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00205a:	20040d13          	addi	s10,s0,512 # 204200 <__L2+0x184200>
		if (!(D0Ind_Last)) {
1c00205e:	3876a963          	p.beqimm	a3,7,1c0023f0 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x60c>
			_N_Filter = _N_Filter + (12800); _SN_Filter = (12800); 
1c002062:	9de2                	add	s11,s11,s8
1c002064:	8562                	mv	a0,s8
  if (copy->length == 0)
1c002066:	47b6                	lw	a5,76(sp)
1c002068:	cba5                	beqz	a5,1c0020d8 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x2f4>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00206a:	4756                	lw	a4,84(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00206c:	02000793          	li	a5,32
1c002070:	c741                	beqz	a4,1c0020f8 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x314>
1c002072:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002076:	03c46703          	p.elw	a4,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00207a:	00f42223          	sw	a5,4(s0)
1c00207e:	4756                	lw	a4,84(sp)
1c002080:	fb6d                	bnez	a4,1c002072 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x28e>
1c002082:	000ba783          	lw	a5,0(s7)
1c002086:	00168993          	addi	s3,a3,1
		}
		/*============================= End Prepare Tiles ===================================*/
		/*================================= Read Tiles ======================================*/
		AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Filter */
		if (_SN_Filter) {
1c00208a:	cd25                	beqz	a0,1c002102 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x31e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00208c:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002090:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c002094:	002b08b7          	lui	a7,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002098:	01156533          	or	a0,a0,a7
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00209c:	40a42023          	sw	a0,1024(s0)
			AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+1600+12800*((D0Ind_Total+1)%2)),
1c0020a0:	fc19b533          	p.bclr	a0,s3,30,1
1c0020a4:	438507b3          	p.mac	a5,a0,s8
1c0020a8:	64078793          	addi	a5,a5,1600
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0020ac:	40f42023          	sw	a5,1024(s0)
1c0020b0:	45a2                	lw	a1,8(sp)
1c0020b2:	01b587b3          	add	a5,a1,s11
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0020b6:	40f42023          	sw	a5,1024(s0)
        if (!merge) copy->id = id;
1c0020ba:	de32                	sw	a2,60(sp)
        copy->length = 0;
1c0020bc:	c682                	sw	zero,76(sp)
  __builtin_pulp_spr_write(reg, val);
1c0020be:	30071073          	csrw	mstatus,a4
1c0020c2:	000ba783          	lw	a5,0(s7)
1c0020c6:	a835                	j	1c002102 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x31e>
1c0020c8:	30061073          	csrw	mstatus,a2
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0020cc:	01542423          	sw	s5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0020d0:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0020d4:	01542223          	sw	s5,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0020d8:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0020dc:	40442783          	lw	a5,1028(s0)
1c0020e0:	5772                	lw	a4,60(sp)
1c0020e2:	40e7d7b3          	sra	a5,a5,a4
1c0020e6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0020ea:	fff9                	bnez	a5,1c0020c8 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x2e4>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0020ec:	00e91733          	sll	a4,s2,a4
1c0020f0:	40e42223          	sw	a4,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c0020f4:	30061073          	csrw	mstatus,a2
1c0020f8:	000ba783          	lw	a5,0(s7)
1c0020fc:	00168993          	addi	s3,a3,1
		if (_SN_Filter) {
1c002100:	f551                	bnez	a0,1c00208c <S10_Op_FULLY_CONNECTED_0_5_fusion+0x2a8>
		}
		/*============================= End Read Tiles ======================================*/
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1;
			/*====================== Call Kernel LOC_LOOP =========================*/
			KerArg0->Weights = (signed char * __restrict__) (mnist_L1_Memory+1600+12800*((D0Ind_Total)%2));
1c002102:	fc16b6b3          	p.bclr	a3,a3,30,1
1c002106:	863e                	mv	a2,a5
1c002108:	43868633          	p.mac	a2,a3,s8
			KerArg0->Bias = (void * __restrict__) (mnist_L1_Memory+27200+((D0Ind)*32));
			KerArg0->Out = (void * __restrict__) (mnist_L1_Memory+27456+((D0Ind)*8));
			KerArg0->Scale = (unsigned char *__restrict__) (mnist_L1_Memory+27520+((D0Ind)*8));
			KerArg0->ScaleN = (unsigned char *__restrict__) (mnist_L1_Memory+27584+((D0Ind)*8));
1c00210c:	080b0713          	addi	a4,s6,128
			KerArg0->Scale = (unsigned char *__restrict__) (mnist_L1_Memory+27520+((D0Ind)*8));
1c002110:	040b0693          	addi	a3,s6,64
			KerArg0->Bias = (void * __restrict__) (mnist_L1_Memory+27200+((D0Ind)*32));
1c002114:	019788b3          	add	a7,a5,s9
			KerArg0->Out = (void * __restrict__) (mnist_L1_Memory+27456+((D0Ind)*8));
1c002118:	01678533          	add	a0,a5,s6
			KerArg0->Scale = (unsigned char *__restrict__) (mnist_L1_Memory+27520+((D0Ind)*8));
1c00211c:	96be                	add	a3,a3,a5
			KerArg0->ScaleN = (unsigned char *__restrict__) (mnist_L1_Memory+27584+((D0Ind)*8));
1c00211e:	97ba                	add	a5,a5,a4
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c002120:	0ff00713          	li	a4,255
			KerArg0->Bias = (void * __restrict__) (mnist_L1_Memory+27200+((D0Ind)*32));
1c002124:	11112223          	sw	a7,260(sp)
			KerArg0->Out = (void * __restrict__) (mnist_L1_Memory+27456+((D0Ind)*8));
1c002128:	10a12423          	sw	a0,264(sp)
			KerArg0->Weights = (signed char * __restrict__) (mnist_L1_Memory+1600+12800*((D0Ind_Total)%2));
1c00212c:	64060613          	addi	a2,a2,1600
1c002130:	10c12023          	sw	a2,256(sp)
			KerArg0->Scale = (unsigned char *__restrict__) (mnist_L1_Memory+27520+((D0Ind)*8));
1c002134:	10d12a23          	sw	a3,276(sp)
			KerArg0->ScaleN = (unsigned char *__restrict__) (mnist_L1_Memory+27584+((D0Ind)*8));
1c002138:	10f12c23          	sw	a5,280(sp)
1c00213c:	08e42223          	sw	a4,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002140:	00ed2023          	sw	a4,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c002144:	00ed2623          	sw	a4,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c002148:	08942023          	sw	s1,128(s0)
1c00214c:	09442023          	sw	s4,128(s0)
1c002150:	8552                	mv	a0,s4
1c002152:	6db010ef          	jal	ra,1c00402c <KerParLinearLayerFullFeatB32_ReLU_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002156:	01cd6783          	p.elw	a5,28(s10)
1c00215a:	020c8c93          	addi	s9,s9,32
1c00215e:	0b21                	addi	s6,s6,8
1c002160:	86ce                	mv	a3,s3
	for (D0Ind=0; D0Ind<8; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c002162:	ee89bee3          	p.bneimm	s3,8,1c00205e <S10_Op_FULLY_CONNECTED_0_5_fusion+0x27a>
		} /* End iteration on Tile0 */
		/*================================= Update Arg Pipeline =============================*/
		/*============================= End Update Arg Pipeline =============================*/
	} /* End iteration on D0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+27456), 64, 1, &DmaW_Evt1);
1c002166:	000ba683          	lw	a3,0(s7)
1c00216a:	679d                	lui	a5,0x7
1c00216c:	b4078793          	addi	a5,a5,-1216 # 6b40 <__rt_stack_size+0x6340>
1c002170:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002172:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002176:	40042583          	lw	a1,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00217a:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00217e:	04078793          	addi	a5,a5,64 # a0040 <__L2+0x20040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002182:	00204737          	lui	a4,0x204
1c002186:	c157c7b3          	p.bset	a5,a5,0,21
1c00218a:	40f72023          	sw	a5,1024(a4) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00218e:	40d72023          	sw	a3,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002192:	4eb2                	lw	t4,12(sp)
1c002194:	41d72023          	sw	t4,1024(a4)
        if (!merge) copy->id = id;
1c002198:	cfae                	sw	a1,220(sp)
        copy->length = 0;
1c00219a:	d782                	sw	zero,236(sp)
  __builtin_pulp_spr_write(reg, val);
1c00219c:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c0021a0:	57be                	lw	a5,236(sp)
1c0021a2:	cbb9                	beqz	a5,1c0021f8 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x414>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0021a4:	56de                	lw	a3,244(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0021a6:	02000713          	li	a4,32
1c0021aa:	002047b7          	lui	a5,0x204
1c0021ae:	ca89                	beqz	a3,1c0021c0 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x3dc>
1c0021b0:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0021b4:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0021b8:	00e7a223          	sw	a4,4(a5)
1c0021bc:	56de                	lw	a3,244(sp)
1c0021be:	faed                	bnez	a3,1c0021b0 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x3cc>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0021c0:	15c12083          	lw	ra,348(sp)
1c0021c4:	15812403          	lw	s0,344(sp)
1c0021c8:	15412483          	lw	s1,340(sp)
1c0021cc:	15012903          	lw	s2,336(sp)
1c0021d0:	14c12983          	lw	s3,332(sp)
1c0021d4:	14812a03          	lw	s4,328(sp)
1c0021d8:	14412a83          	lw	s5,324(sp)
1c0021dc:	14012b03          	lw	s6,320(sp)
1c0021e0:	13c12b83          	lw	s7,316(sp)
1c0021e4:	13812c03          	lw	s8,312(sp)
1c0021e8:	13412c83          	lw	s9,308(sp)
1c0021ec:	13012d03          	lw	s10,304(sp)
1c0021f0:	12c12d83          	lw	s11,300(sp)
1c0021f4:	6135                	addi	sp,sp,352
1c0021f6:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0021f8:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0021fc:	40442783          	lw	a5,1028(s0)
1c002200:	46fe                	lw	a3,220(sp)
1c002202:	40d7d7b3          	sra	a5,a5,a3
1c002206:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00220a:	c79d                	beqz	a5,1c002238 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x454>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00220c:	10000593          	li	a1,256
1c002210:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002214:	30061073          	csrw	mstatus,a2
1c002218:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00221c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002220:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002224:	30047673          	csrrci	a2,mstatus,8
1c002228:	40472783          	lw	a5,1028(a4)
1c00222c:	46fe                	lw	a3,220(sp)
1c00222e:	40d7d7b3          	sra	a5,a5,a3
1c002232:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002236:	fff9                	bnez	a5,1c002214 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x430>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c002238:	4785                	li	a5,1
1c00223a:	00d796b3          	sll	a3,a5,a3
1c00223e:	002047b7          	lui	a5,0x204
1c002242:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002246:	30061073          	csrw	mstatus,a2
1c00224a:	bf9d                	j	1c0021c0 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x3dc>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00224c:	30047673          	csrrci	a2,mstatus,8
1c002250:	4047a783          	lw	a5,1028(a5)
1c002254:	56fa                	lw	a3,188(sp)
1c002256:	40d7d7b3          	sra	a5,a5,a3
1c00225a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00225e:	c79d                	beqz	a5,1c00228c <S10_Op_FULLY_CONNECTED_0_5_fusion+0x4a8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002260:	10000593          	li	a1,256
1c002264:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002268:	30061073          	csrw	mstatus,a2
1c00226c:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002270:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002274:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002278:	30047673          	csrrci	a2,mstatus,8
1c00227c:	40472783          	lw	a5,1028(a4)
1c002280:	56fa                	lw	a3,188(sp)
1c002282:	40d7d7b3          	sra	a5,a5,a3
1c002286:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00228a:	fff9                	bnez	a5,1c002268 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x484>
1c00228c:	4785                	li	a5,1
1c00228e:	00d796b3          	sll	a3,a5,a3
1c002292:	002047b7          	lui	a5,0x204
1c002296:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00229a:	30061073          	csrw	mstatus,a2
1c00229e:	bb49                	j	1c002030 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x24c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0022a0:	30047673          	csrrci	a2,mstatus,8
1c0022a4:	40472783          	lw	a5,1028(a4)
1c0022a8:	46fa                	lw	a3,156(sp)
1c0022aa:	40d7d7b3          	sra	a5,a5,a3
1c0022ae:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0022b2:	c79d                	beqz	a5,1c0022e0 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x4fc>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0022b4:	10000593          	li	a1,256
1c0022b8:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0022bc:	30061073          	csrw	mstatus,a2
1c0022c0:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0022c4:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0022c8:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0022cc:	30047673          	csrrci	a2,mstatus,8
1c0022d0:	40472783          	lw	a5,1028(a4)
1c0022d4:	46fa                	lw	a3,156(sp)
1c0022d6:	40d7d7b3          	sra	a5,a5,a3
1c0022da:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0022de:	fff9                	bnez	a5,1c0022bc <S10_Op_FULLY_CONNECTED_0_5_fusion+0x4d8>
1c0022e0:	4785                	li	a5,1
1c0022e2:	00d796b3          	sll	a3,a5,a3
1c0022e6:	002047b7          	lui	a5,0x204
1c0022ea:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0022ee:	30061073          	csrw	mstatus,a2
1c0022f2:	b1ed                	j	1c001fdc <S10_Op_FULLY_CONNECTED_0_5_fusion+0x1f8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0022f4:	300475f3          	csrrci	a1,mstatus,8
1c0022f8:	4046a703          	lw	a4,1028(a3)
1c0022fc:	5676                	lw	a2,124(sp)
1c0022fe:	40c75733          	sra	a4,a4,a2
1c002302:	fc173733          	p.bclr	a4,a4,30,1
1c002306:	c71d                	beqz	a4,1c002334 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x550>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002308:	10000513          	li	a0,256
1c00230c:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c002310:	30059073          	csrw	mstatus,a1
1c002314:	00a6a423          	sw	a0,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002318:	03c6e703          	p.elw	a4,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00231c:	00a6a223          	sw	a0,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002320:	300475f3          	csrrci	a1,mstatus,8
1c002324:	4046a703          	lw	a4,1028(a3)
1c002328:	5676                	lw	a2,124(sp)
1c00232a:	40c75733          	sra	a4,a4,a2
1c00232e:	fc173733          	p.bclr	a4,a4,30,1
1c002332:	ff79                	bnez	a4,1c002310 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x52c>
1c002334:	4705                	li	a4,1
1c002336:	00c71633          	sll	a2,a4,a2
1c00233a:	00204737          	lui	a4,0x204
1c00233e:	40c72223          	sw	a2,1028(a4) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002342:	30059073          	csrw	mstatus,a1
1c002346:	b935                	j	1c001f82 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x19e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002348:	30047573          	csrrci	a0,mstatus,8
1c00234c:	4046a683          	lw	a3,1028(a3)
1c002350:	45f6                	lw	a1,92(sp)
1c002352:	40b6d6b3          	sra	a3,a3,a1
1c002356:	fc16b6b3          	p.bclr	a3,a3,30,1
1c00235a:	c69d                	beqz	a3,1c002388 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x5a4>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00235c:	10000893          	li	a7,256
1c002360:	00204637          	lui	a2,0x204
  __builtin_pulp_spr_write(reg, val);
1c002364:	30051073          	csrw	mstatus,a0
1c002368:	01162423          	sw	a7,8(a2) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00236c:	03c66683          	p.elw	a3,60(a2)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002370:	01162223          	sw	a7,4(a2)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002374:	30047573          	csrrci	a0,mstatus,8
1c002378:	40462683          	lw	a3,1028(a2)
1c00237c:	45f6                	lw	a1,92(sp)
1c00237e:	40b6d6b3          	sra	a3,a3,a1
1c002382:	fc16b6b3          	p.bclr	a3,a3,30,1
1c002386:	fef9                	bnez	a3,1c002364 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x580>
1c002388:	4685                	li	a3,1
1c00238a:	00b695b3          	sll	a1,a3,a1
1c00238e:	002046b7          	lui	a3,0x204
1c002392:	40b6a223          	sw	a1,1028(a3) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002396:	30051073          	csrw	mstatus,a0
1c00239a:	b679                	j	1c001f28 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x144>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00239c:	300478f3          	csrrci	a7,mstatus,8
1c0023a0:	4046a683          	lw	a3,1028(a3)
1c0023a4:	4572                	lw	a0,28(sp)
1c0023a6:	40a6d6b3          	sra	a3,a3,a0
1c0023aa:	fc16b6b3          	p.bclr	a3,a3,30,1
1c0023ae:	c69d                	beqz	a3,1c0023dc <S10_Op_FULLY_CONNECTED_0_5_fusion+0x5f8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0023b0:	10000313          	li	t1,256
1c0023b4:	002045b7          	lui	a1,0x204
  __builtin_pulp_spr_write(reg, val);
1c0023b8:	30089073          	csrw	mstatus,a7
1c0023bc:	0065a423          	sw	t1,8(a1) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0023c0:	03c5e683          	p.elw	a3,60(a1)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0023c4:	0065a223          	sw	t1,4(a1)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0023c8:	300478f3          	csrrci	a7,mstatus,8
1c0023cc:	4045a683          	lw	a3,1028(a1)
1c0023d0:	4572                	lw	a0,28(sp)
1c0023d2:	40a6d6b3          	sra	a3,a3,a0
1c0023d6:	fc16b6b3          	p.bclr	a3,a3,30,1
1c0023da:	fef9                	bnez	a3,1c0023b8 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x5d4>
1c0023dc:	4685                	li	a3,1
1c0023de:	00a69533          	sll	a0,a3,a0
1c0023e2:	002046b7          	lui	a3,0x204
1c0023e6:	40a6a223          	sw	a0,1028(a3) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0023ea:	30089073          	csrw	mstatus,a7
1c0023ee:	b45d                	j	1c001e94 <S10_Op_FULLY_CONNECTED_0_5_fusion+0xb0>
		_SN_Filter = 0;
1c0023f0:	4501                	li	a0,0
1c0023f2:	b995                	j	1c002066 <S10_Op_FULLY_CONNECTED_0_5_fusion+0x282>

1c0023f4 <S13_Op_FULLY_CONNECTED_0_6_fusion>:
		signed char * __restrict__ Out,
		unsigned char * __restrict__ Scale,
		signed char * __restrict__ ScaleN,
		signed char * __restrict__ Infos)

{
1c0023f4:	7169                	addi	sp,sp,-304
1c0023f6:	12912223          	sw	s1,292(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[1x1], 9]
		Tile0: [0, 9, 9], Tile1: [0, 9, 9], Tile2; [0, 9, 9]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In = (signed char * __restrict__) (mnist_L1_Memory+0);
1c0023fa:	100004b7          	lui	s1,0x10000
1c0023fe:	01c48493          	addi	s1,s1,28 # 1000001c <mnist_L1_Memory>
	KerArg0->Weights = (signed char * __restrict__) (mnist_L1_Memory+64);
	KerArg0->Bias = (void * __restrict__) (mnist_L1_Memory+704);
	KerArg0->Out = (void * __restrict__) (mnist_L1_Memory+744);
	KerArg0->InDim = (unsigned short int) (64);
1c002402:	1c00cf37          	lui	t5,0x1c00c
	KerArg0->In = (signed char * __restrict__) (mnist_L1_Memory+0);
1c002406:	0004a883          	lw	a7,0(s1)
{
1c00240a:	13212023          	sw	s2,288(sp)
1c00240e:	8936                	mv	s2,a3
	KerArg0->InDim = (unsigned short int) (64);
1c002410:	170f2683          	lw	a3,368(t5) # 1c00c170 <__clz_tab+0x2e0>
	KerArg0->Weights = (signed char * __restrict__) (mnist_L1_Memory+64);
1c002414:	04088393          	addi	t2,a7,64 # 2b0040 <__L2+0x230040>
	KerArg0->Bias = (void * __restrict__) (mnist_L1_Memory+704);
1c002418:	2c088293          	addi	t0,a7,704
	KerArg0->Out = (void * __restrict__) (mnist_L1_Memory+744);
1c00241c:	2e888f93          	addi	t6,a7,744
	KerArg0->TotalInDim = (unsigned short int) (64);
	KerArg0->OutDim = (unsigned short int) (10);
	KerArg0->Scale = (unsigned char *__restrict__) (mnist_L1_Memory+756);
1c002420:	2f488e93          	addi	t4,a7,756
	KerArg0->ScaleN = (unsigned char *__restrict__) (mnist_L1_Memory+768);
1c002424:	30088e13          	addi	t3,a7,768
	KerArg0->Infos = (signed char *__restrict__) (mnist_L1_Memory+780);
1c002428:	30c88313          	addi	t1,a7,780
	KerArg0->InDim = (unsigned short int) (64);
1c00242c:	dfb6                	sw	a3,252(sp)
	KerArg0->OutDim = (unsigned short int) (10);
1c00242e:	46a9                	li	a3,10
{
1c002430:	12112623          	sw	ra,300(sp)
1c002434:	12812423          	sw	s0,296(sp)
1c002438:	11312e23          	sw	s3,284(sp)
	KerArg0->In = (signed char * __restrict__) (mnist_L1_Memory+0);
1c00243c:	d7c6                	sw	a7,236(sp)
	KerArg0->Weights = (signed char * __restrict__) (mnist_L1_Memory+64);
1c00243e:	d99e                	sw	t2,240(sp)
	KerArg0->Bias = (void * __restrict__) (mnist_L1_Memory+704);
1c002440:	db96                	sw	t0,244(sp)
	KerArg0->Out = (void * __restrict__) (mnist_L1_Memory+744);
1c002442:	ddfe                	sw	t6,248(sp)
	KerArg0->OutDim = (unsigned short int) (10);
1c002444:	10d11023          	sh	a3,256(sp)
	KerArg0->Scale = (unsigned char *__restrict__) (mnist_L1_Memory+756);
1c002448:	11d12223          	sw	t4,260(sp)
	KerArg0->ScaleN = (unsigned char *__restrict__) (mnist_L1_Memory+768);
1c00244c:	11c12423          	sw	t3,264(sp)
	KerArg0->Infos = (signed char *__restrict__) (mnist_L1_Memory+780);
1c002450:	10612623          	sw	t1,268(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002454:	30047e73          	csrrci	t3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002458:	002046b7          	lui	a3,0x204
1c00245c:	4006ae83          	lw	t4,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002460:	000b0337          	lui	t1,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002464:	04030313          	addi	t1,t1,64 # b0040 <__L2+0x30040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002468:	c1534333          	p.bset	t1,t1,0,21
1c00246c:	4066a023          	sw	t1,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002470:	4116a023          	sw	a7,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002474:	40a6a023          	sw	a0,1024(a3)
        if (!merge) copy->id = id;
1c002478:	c676                	sw	t4,12(sp)
        copy->length = 0;
1c00247a:	ce02                	sw	zero,28(sp)
  __builtin_pulp_spr_write(reg, val);
1c00247c:	300e1073          	csrw	mstatus,t3
  if (copy->length == 0)
1c002480:	4572                	lw	a0,28(sp)
1c002482:	44050c63          	beqz	a0,1c0028da <S13_Op_FULLY_CONNECTED_0_6_fusion+0x4e6>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002486:	5892                	lw	a7,36(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002488:	02000513          	li	a0,32
1c00248c:	00088b63          	beqz	a7,1c0024a2 <S13_Op_FULLY_CONNECTED_0_6_fusion+0xae>
1c002490:	00a6a423          	sw	a0,8(a3)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002494:	03c6e883          	p.elw	a7,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002498:	00a6a223          	sw	a0,4(a3)
1c00249c:	5892                	lw	a7,36(sp)
1c00249e:	fe0899e3          	bnez	a7,1c002490 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x9c>
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+0), 64, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+64), 640, 0, &DmaR_Evt2);
1c0024a2:	0004a883          	lw	a7,0(s1)
1c0024a6:	04088893          	addi	a7,a7,64
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0024aa:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0024ae:	002046b7          	lui	a3,0x204
1c0024b2:	4006ae03          	lw	t3,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0024b6:	000b0537          	lui	a0,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0024ba:	28050513          	addi	a0,a0,640 # b0280 <__L2+0x30280>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0024be:	c1554533          	p.bset	a0,a0,0,21
1c0024c2:	40a6a023          	sw	a0,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0024c6:	4116a023          	sw	a7,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0024ca:	40b6a023          	sw	a1,1024(a3)
        if (!merge) copy->id = id;
1c0024ce:	d672                	sw	t3,44(sp)
        copy->length = 0;
1c0024d0:	de02                	sw	zero,60(sp)
  __builtin_pulp_spr_write(reg, val);
1c0024d2:	30031073          	csrw	mstatus,t1
  if (copy->length == 0)
1c0024d6:	55f2                	lw	a1,60(sp)
1c0024d8:	3a058763          	beqz	a1,1c002886 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x492>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0024dc:	4516                	lw	a0,68(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0024de:	02000593          	li	a1,32
1c0024e2:	c909                	beqz	a0,1c0024f4 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x100>
1c0024e4:	00b6a423          	sw	a1,8(a3)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0024e8:	03c6e503          	p.elw	a0,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0024ec:	00b6a223          	sw	a1,4(a3)
1c0024f0:	4516                	lw	a0,68(sp)
1c0024f2:	f96d                	bnez	a0,1c0024e4 <S13_Op_FULLY_CONNECTED_0_6_fusion+0xf0>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Filter */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+704), 40, 0, &DmaR_Evt3);
1c0024f4:	4088                	lw	a0,0(s1)
1c0024f6:	2c050513          	addi	a0,a0,704
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0024fa:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0024fe:	002046b7          	lui	a3,0x204
1c002502:	4006a303          	lw	t1,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002506:	000b05b7          	lui	a1,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00250a:	02858593          	addi	a1,a1,40 # b0028 <__L2+0x30028>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00250e:	c155c5b3          	p.bset	a1,a1,0,21
1c002512:	40b6a023          	sw	a1,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002516:	40a6a023          	sw	a0,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00251a:	40c6a023          	sw	a2,1024(a3)
        if (!merge) copy->id = id;
1c00251e:	c69a                	sw	t1,76(sp)
        copy->length = 0;
1c002520:	ce82                	sw	zero,92(sp)
  __builtin_pulp_spr_write(reg, val);
1c002522:	30089073          	csrw	mstatus,a7
  if (copy->length == 0)
1c002526:	4676                	lw	a2,92(sp)
1c002528:	30060563          	beqz	a2,1c002832 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x43e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00252c:	5596                	lw	a1,100(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00252e:	02000613          	li	a2,32
1c002532:	c989                	beqz	a1,1c002544 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x150>
1c002534:	00c6a423          	sw	a2,8(a3)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002538:	03c6e583          	p.elw	a1,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00253c:	00c6a223          	sw	a2,4(a3)
1c002540:	5596                	lw	a1,100(sp)
1c002542:	f9ed                	bnez	a1,1c002534 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x140>
	AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Scale+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+756), 10, 0, &DmaR_Evt4);
1c002544:	408c                	lw	a1,0(s1)
1c002546:	2f458593          	addi	a1,a1,756
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00254a:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00254e:	002046b7          	lui	a3,0x204
1c002552:	4006a883          	lw	a7,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002556:	000b0637          	lui	a2,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00255a:	0629                	addi	a2,a2,10
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00255c:	c1564633          	p.bset	a2,a2,0,21
1c002560:	40c6a023          	sw	a2,1024(a3)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002564:	40b6a023          	sw	a1,1024(a3)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002568:	40e6a023          	sw	a4,1024(a3)
        if (!merge) copy->id = id;
1c00256c:	d6c6                	sw	a7,108(sp)
        copy->length = 0;
1c00256e:	de82                	sw	zero,124(sp)
  __builtin_pulp_spr_write(reg, val);
1c002570:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c002574:	5776                	lw	a4,124(sp)
1c002576:	26070463          	beqz	a4,1c0027de <S13_Op_FULLY_CONNECTED_0_6_fusion+0x3ea>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00257a:	461a                	lw	a2,132(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00257c:	02000693          	li	a3,32
1c002580:	00204737          	lui	a4,0x204
1c002584:	ca09                	beqz	a2,1c002596 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x1a2>
1c002586:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00258a:	03c76603          	p.elw	a2,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00258e:	00d72223          	sw	a3,4(a4)
1c002592:	461a                	lw	a2,132(sp)
1c002594:	fa6d                	bnez	a2,1c002586 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x192>
	AT_L2_WAIT(0, &DmaR_Evt4); /* Wait previous DMA read Scale */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) ScaleN+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+768), 10, 0, &DmaR_Evt5);
1c002596:	4090                	lw	a2,0(s1)
1c002598:	30060613          	addi	a2,a2,768 # b0300 <__L2+0x30300>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00259c:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0025a0:	00204737          	lui	a4,0x204
1c0025a4:	40072503          	lw	a0,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0025a8:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0025ac:	06a9                	addi	a3,a3,10
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0025ae:	c156c6b3          	p.bset	a3,a3,0,21
1c0025b2:	40d72023          	sw	a3,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0025b6:	40c72023          	sw	a2,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0025ba:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c0025be:	c72a                	sw	a0,140(sp)
        copy->length = 0;
1c0025c0:	cf02                	sw	zero,156(sp)
  __builtin_pulp_spr_write(reg, val);
1c0025c2:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c0025c6:	47fa                	lw	a5,156(sp)
1c0025c8:	1c078163          	beqz	a5,1c00278a <S13_Op_FULLY_CONNECTED_0_6_fusion+0x396>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0025cc:	569a                	lw	a3,164(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0025ce:	02000713          	li	a4,32
1c0025d2:	002047b7          	lui	a5,0x204
1c0025d6:	ca89                	beqz	a3,1c0025e8 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x1f4>
1c0025d8:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0025dc:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0025e0:	00e7a223          	sw	a4,4(a5)
1c0025e4:	569a                	lw	a3,164(sp)
1c0025e6:	faed                	bnez	a3,1c0025d8 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x1e4>
	AT_L2_WAIT(0, &DmaR_Evt5); /* Wait previous DMA read ScaleN */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+780), 9, 0, &DmaR_Evt6);
1c0025e8:	4094                	lw	a3,0(s1)
1c0025ea:	30c68693          	addi	a3,a3,780 # b030c <__L2+0x3030c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0025ee:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0025f2:	002047b7          	lui	a5,0x204
1c0025f6:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0025fa:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0025fe:	0725                	addi	a4,a4,9
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002600:	c1574733          	p.bset	a4,a4,0,21
1c002604:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002608:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00260c:	4107a023          	sw	a6,1024(a5)
        if (!merge) copy->id = id;
1c002610:	d72e                	sw	a1,172(sp)
        copy->length = 0;
1c002612:	df02                	sw	zero,188(sp)
  __builtin_pulp_spr_write(reg, val);
1c002614:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c002618:	577a                	lw	a4,188(sp)
1c00261a:	10070e63          	beqz	a4,1c002736 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x342>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00261e:	469e                	lw	a3,196(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002620:	02000713          	li	a4,32
1c002624:	ca89                	beqz	a3,1c002636 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x242>
1c002626:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00262a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00262e:	00e7a223          	sw	a4,4(a5)
1c002632:	469e                	lw	a3,196(sp)
1c002634:	faed                	bnez	a3,1c002626 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x232>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c002636:	0ff00793          	li	a5,255
1c00263a:	00204437          	lui	s0,0x204
1c00263e:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002642:	20040993          	addi	s3,s0,512
1c002646:	00f9a023          	sw	a5,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00264a:	00f9a623          	sw	a5,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00264e:	1c0047b7          	lui	a5,0x1c004
1c002652:	02c78793          	addi	a5,a5,44 # 1c00402c <KerParLinearLayerFullFeatB32_ReLU_SQ8>
1c002656:	08f42023          	sw	a5,128(s0)
1c00265a:	11e8                	addi	a0,sp,236
1c00265c:	08a42023          	sw	a0,128(s0)
1c002660:	1cd010ef          	jal	ra,1c00402c <KerParLinearLayerFullFeatB32_ReLU_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002664:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParLinearLayerFullFeatB32_ReLU_SQ8, (void *) KerArg0);
			__CALL(KerParLinearLayerFullFeatB32_ReLU_SQ8, KerArg0);
		} /* End iteration on Tile0 */
	} /* End iteration on D0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+744), 10, 1, &DmaW_Evt1);
1c002668:	4098                	lw	a4,0(s1)
1c00266a:	2e870713          	addi	a4,a4,744 # b02e8 <__L2+0x302e8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00266e:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002672:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002676:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00267a:	07a9                	addi	a5,a5,10
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00267c:	c157c7b3          	p.bset	a5,a5,0,21
1c002680:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002684:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002688:	41242023          	sw	s2,1024(s0)
        if (!merge) copy->id = id;
1c00268c:	c7b2                	sw	a2,204(sp)
        copy->length = 0;
1c00268e:	cf82                	sw	zero,220(sp)
  __builtin_pulp_spr_write(reg, val);
1c002690:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c002694:	47fe                	lw	a5,220(sp)
1c002696:	cb9d                	beqz	a5,1c0026cc <S13_Op_FULLY_CONNECTED_0_6_fusion+0x2d8>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002698:	569e                	lw	a3,228(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00269a:	02000713          	li	a4,32
1c00269e:	002047b7          	lui	a5,0x204
1c0026a2:	ca89                	beqz	a3,1c0026b4 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x2c0>
1c0026a4:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0026a8:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0026ac:	00e7a223          	sw	a4,4(a5)
1c0026b0:	569e                	lw	a3,228(sp)
1c0026b2:	faed                	bnez	a3,1c0026a4 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x2b0>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0026b4:	12c12083          	lw	ra,300(sp)
1c0026b8:	12812403          	lw	s0,296(sp)
1c0026bc:	12412483          	lw	s1,292(sp)
1c0026c0:	12012903          	lw	s2,288(sp)
1c0026c4:	11c12983          	lw	s3,284(sp)
1c0026c8:	6155                	addi	sp,sp,304
1c0026ca:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0026cc:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0026d0:	40442403          	lw	s0,1028(s0)
1c0026d4:	46be                	lw	a3,204(sp)
1c0026d6:	40d45433          	sra	s0,s0,a3
1c0026da:	fc143433          	p.bclr	s0,s0,30,1
1c0026de:	c41d                	beqz	s0,1c00270c <S13_Op_FULLY_CONNECTED_0_6_fusion+0x318>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0026e0:	10000593          	li	a1,256
1c0026e4:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0026e8:	30061073          	csrw	mstatus,a2
1c0026ec:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0026f0:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0026f4:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0026f8:	30047673          	csrrci	a2,mstatus,8
1c0026fc:	40472783          	lw	a5,1028(a4)
1c002700:	46be                	lw	a3,204(sp)
1c002702:	40d7d7b3          	sra	a5,a5,a3
1c002706:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00270a:	fff9                	bnez	a5,1c0026e8 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x2f4>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00270c:	4785                	li	a5,1
1c00270e:	00d796b3          	sll	a3,a5,a3
1c002712:	002047b7          	lui	a5,0x204
1c002716:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00271a:	30061073          	csrw	mstatus,a2
1c00271e:	12c12083          	lw	ra,300(sp)
1c002722:	12812403          	lw	s0,296(sp)
1c002726:	12412483          	lw	s1,292(sp)
1c00272a:	12012903          	lw	s2,288(sp)
1c00272e:	11c12983          	lw	s3,284(sp)
1c002732:	6155                	addi	sp,sp,304
1c002734:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002736:	30047673          	csrrci	a2,mstatus,8
1c00273a:	4047a783          	lw	a5,1028(a5)
1c00273e:	56ba                	lw	a3,172(sp)
1c002740:	40d7d7b3          	sra	a5,a5,a3
1c002744:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002748:	c79d                	beqz	a5,1c002776 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x382>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00274a:	10000593          	li	a1,256
1c00274e:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002752:	30061073          	csrw	mstatus,a2
1c002756:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00275a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00275e:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002762:	30047673          	csrrci	a2,mstatus,8
1c002766:	40472783          	lw	a5,1028(a4)
1c00276a:	56ba                	lw	a3,172(sp)
1c00276c:	40d7d7b3          	sra	a5,a5,a3
1c002770:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002774:	fff9                	bnez	a5,1c002752 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x35e>
1c002776:	4785                	li	a5,1
1c002778:	00d796b3          	sll	a3,a5,a3
1c00277c:	002047b7          	lui	a5,0x204
1c002780:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002784:	30061073          	csrw	mstatus,a2
1c002788:	b57d                	j	1c002636 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x242>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00278a:	30047673          	csrrci	a2,mstatus,8
1c00278e:	40472703          	lw	a4,1028(a4)
1c002792:	46ba                	lw	a3,140(sp)
1c002794:	40d75733          	sra	a4,a4,a3
1c002798:	fc173733          	p.bclr	a4,a4,30,1
1c00279c:	c71d                	beqz	a4,1c0027ca <S13_Op_FULLY_CONNECTED_0_6_fusion+0x3d6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00279e:	10000593          	li	a1,256
1c0027a2:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0027a6:	30061073          	csrw	mstatus,a2
1c0027aa:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0027ae:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0027b2:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0027b6:	30047673          	csrrci	a2,mstatus,8
1c0027ba:	40472783          	lw	a5,1028(a4)
1c0027be:	46ba                	lw	a3,140(sp)
1c0027c0:	40d7d7b3          	sra	a5,a5,a3
1c0027c4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0027c8:	fff9                	bnez	a5,1c0027a6 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x3b2>
1c0027ca:	4785                	li	a5,1
1c0027cc:	00d796b3          	sll	a3,a5,a3
1c0027d0:	002047b7          	lui	a5,0x204
1c0027d4:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0027d8:	30061073          	csrw	mstatus,a2
1c0027dc:	b531                	j	1c0025e8 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x1f4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0027de:	300475f3          	csrrci	a1,mstatus,8
1c0027e2:	4046a683          	lw	a3,1028(a3)
1c0027e6:	5636                	lw	a2,108(sp)
1c0027e8:	40c6d6b3          	sra	a3,a3,a2
1c0027ec:	fc16b6b3          	p.bclr	a3,a3,30,1
1c0027f0:	c69d                	beqz	a3,1c00281e <S13_Op_FULLY_CONNECTED_0_6_fusion+0x42a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0027f2:	10000513          	li	a0,256
1c0027f6:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c0027fa:	30059073          	csrw	mstatus,a1
1c0027fe:	00a6a423          	sw	a0,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002802:	03c6e703          	p.elw	a4,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002806:	00a6a223          	sw	a0,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00280a:	300475f3          	csrrci	a1,mstatus,8
1c00280e:	4046a703          	lw	a4,1028(a3)
1c002812:	5636                	lw	a2,108(sp)
1c002814:	40c75733          	sra	a4,a4,a2
1c002818:	fc173733          	p.bclr	a4,a4,30,1
1c00281c:	ff79                	bnez	a4,1c0027fa <S13_Op_FULLY_CONNECTED_0_6_fusion+0x406>
1c00281e:	4705                	li	a4,1
1c002820:	00c71633          	sll	a2,a4,a2
1c002824:	00204737          	lui	a4,0x204
1c002828:	40c72223          	sw	a2,1028(a4) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00282c:	30059073          	csrw	mstatus,a1
1c002830:	b39d                	j	1c002596 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x1a2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002832:	30047573          	csrrci	a0,mstatus,8
1c002836:	4046a683          	lw	a3,1028(a3)
1c00283a:	45b6                	lw	a1,76(sp)
1c00283c:	40b6d6b3          	sra	a3,a3,a1
1c002840:	fc16b6b3          	p.bclr	a3,a3,30,1
1c002844:	c69d                	beqz	a3,1c002872 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x47e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002846:	10000893          	li	a7,256
1c00284a:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c00284e:	30051073          	csrw	mstatus,a0
1c002852:	0116a423          	sw	a7,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002856:	03c6e603          	p.elw	a2,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00285a:	0116a223          	sw	a7,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00285e:	30047573          	csrrci	a0,mstatus,8
1c002862:	4046a603          	lw	a2,1028(a3)
1c002866:	45b6                	lw	a1,76(sp)
1c002868:	40b65633          	sra	a2,a2,a1
1c00286c:	fc163633          	p.bclr	a2,a2,30,1
1c002870:	fe79                	bnez	a2,1c00284e <S13_Op_FULLY_CONNECTED_0_6_fusion+0x45a>
1c002872:	4685                	li	a3,1
1c002874:	00b695b3          	sll	a1,a3,a1
1c002878:	002046b7          	lui	a3,0x204
1c00287c:	40b6a223          	sw	a1,1028(a3) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002880:	30051073          	csrw	mstatus,a0
1c002884:	b1c1                	j	1c002544 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x150>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002886:	300478f3          	csrrci	a7,mstatus,8
1c00288a:	4046a683          	lw	a3,1028(a3)
1c00288e:	5532                	lw	a0,44(sp)
1c002890:	40a6d6b3          	sra	a3,a3,a0
1c002894:	fc16b6b3          	p.bclr	a3,a3,30,1
1c002898:	c69d                	beqz	a3,1c0028c6 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x4d2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00289a:	10000313          	li	t1,256
1c00289e:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c0028a2:	30089073          	csrw	mstatus,a7
1c0028a6:	0066a423          	sw	t1,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0028aa:	03c6e583          	p.elw	a1,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0028ae:	0066a223          	sw	t1,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0028b2:	300478f3          	csrrci	a7,mstatus,8
1c0028b6:	4046a583          	lw	a1,1028(a3)
1c0028ba:	5532                	lw	a0,44(sp)
1c0028bc:	40a5d5b3          	sra	a1,a1,a0
1c0028c0:	fc15b5b3          	p.bclr	a1,a1,30,1
1c0028c4:	fdf9                	bnez	a1,1c0028a2 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x4ae>
1c0028c6:	4685                	li	a3,1
1c0028c8:	00a69533          	sll	a0,a3,a0
1c0028cc:	002046b7          	lui	a3,0x204
1c0028d0:	40a6a223          	sw	a0,1028(a3) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0028d4:	30089073          	csrw	mstatus,a7
1c0028d8:	b931                	j	1c0024f4 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x100>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0028da:	30047373          	csrrci	t1,mstatus,8
1c0028de:	4046a683          	lw	a3,1028(a3)
1c0028e2:	48b2                	lw	a7,12(sp)
1c0028e4:	4116d6b3          	sra	a3,a3,a7
1c0028e8:	fc16b6b3          	p.bclr	a3,a3,30,1
1c0028ec:	c69d                	beqz	a3,1c00291a <S13_Op_FULLY_CONNECTED_0_6_fusion+0x526>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0028ee:	10000e13          	li	t3,256
1c0028f2:	002046b7          	lui	a3,0x204
  __builtin_pulp_spr_write(reg, val);
1c0028f6:	30031073          	csrw	mstatus,t1
1c0028fa:	01c6a423          	sw	t3,8(a3) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0028fe:	03c6e503          	p.elw	a0,60(a3)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002902:	01c6a223          	sw	t3,4(a3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002906:	30047373          	csrrci	t1,mstatus,8
1c00290a:	4046a503          	lw	a0,1028(a3)
1c00290e:	48b2                	lw	a7,12(sp)
1c002910:	41155533          	sra	a0,a0,a7
1c002914:	fc153533          	p.bclr	a0,a0,30,1
1c002918:	fd79                	bnez	a0,1c0028f6 <S13_Op_FULLY_CONNECTED_0_6_fusion+0x502>
1c00291a:	4685                	li	a3,1
1c00291c:	011698b3          	sll	a7,a3,a7
1c002920:	002046b7          	lui	a3,0x204
1c002924:	4116a223          	sw	a7,1028(a3) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002928:	30031073          	csrw	mstatus,t1
1c00292c:	be9d                	j	1c0024a2 <S13_Op_FULLY_CONNECTED_0_6_fusion+0xae>

1c00292e <S14_SoftMax>:
void S14_SoftMax(
		signed char * __restrict__ In,
		short int * __restrict__ Out,
		signed char * __restrict__ Infos)

{
1c00292e:	7135                	addi	sp,sp,-160
1c002930:	cb26                	sw	s1,148(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[9x1], 1]
		Tile0: [0, 9, 9], Tile1: [0, 9, 9], Tile2; [0, 9, 9]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In = (signed char *__restrict__) (mnist_L1_Memory+0);
1c002932:	100004b7          	lui	s1,0x10000
1c002936:	01c48493          	addi	s1,s1,28 # 1000001c <mnist_L1_Memory>
1c00293a:	4094                	lw	a3,0(s1)
	KerArg0->Feat = (unsigned short int) (1);
1c00293c:	1c00c837          	lui	a6,0x1c00c
{
1c002940:	c94a                	sw	s2,144(sp)
1c002942:	892e                	mv	s2,a1
	KerArg0->Feat = (unsigned short int) (1);
1c002944:	17482583          	lw	a1,372(a6) # 1c00c174 <__clz_tab+0x2e4>
	KerArg0->N = (unsigned short int) (10);
	KerArg0->Out = (short int *__restrict__) (mnist_L1_Memory+12);
1c002948:	00c68713          	addi	a4,a3,12
	KerArg0->Infos = (signed char *__restrict__) (mnist_L1_Memory+32);
1c00294c:	02068793          	addi	a5,a3,32
{
1c002950:	cf06                	sw	ra,156(sp)
1c002952:	cd22                	sw	s0,152(sp)
1c002954:	c74e                	sw	s3,140(sp)
	KerArg0->In = (signed char *__restrict__) (mnist_L1_Memory+0);
1c002956:	c636                	sw	a3,12(sp)
	KerArg0->Feat = (unsigned short int) (1);
1c002958:	c82e                	sw	a1,16(sp)
	KerArg0->Out = (short int *__restrict__) (mnist_L1_Memory+12);
1c00295a:	cc3a                	sw	a4,24(sp)
	KerArg0->Infos = (signed char *__restrict__) (mnist_L1_Memory+32);
1c00295c:	ce3e                	sw	a5,28(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00295e:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002962:	002047b7          	lui	a5,0x204
1c002966:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00296a:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00296e:	0729                	addi	a4,a4,10
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002970:	c1574733          	p.bset	a4,a4,0,21
1c002974:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002978:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00297c:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c002980:	d042                	sw	a6,32(sp)
        copy->length = 0;
1c002982:	d802                	sw	zero,48(sp)
  __builtin_pulp_spr_write(reg, val);
1c002984:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c002988:	5742                	lw	a4,48(sp)
1c00298a:	1a070963          	beqz	a4,1c002b3c <S14_SoftMax+0x20e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00298e:	56e2                	lw	a3,56(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002990:	02000713          	li	a4,32
1c002994:	ca89                	beqz	a3,1c0029a6 <S14_SoftMax+0x78>
1c002996:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00299a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00299e:	00e7a223          	sw	a4,4(a5)
1c0029a2:	56e2                	lw	a3,56(sp)
1c0029a4:	faed                	bnez	a3,1c002996 <S14_SoftMax+0x68>
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+0), 10, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Infos+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+32), 9, 0, &DmaR_Evt2);
1c0029a6:	4094                	lw	a3,0(s1)
1c0029a8:	02068693          	addi	a3,a3,32
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0029ac:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0029b0:	002047b7          	lui	a5,0x204
1c0029b4:	4007a503          	lw	a0,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0029b8:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0029bc:	0725                	addi	a4,a4,9
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0029be:	c1574733          	p.bset	a4,a4,0,21
1c0029c2:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0029c6:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0029ca:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c0029ce:	c0aa                	sw	a0,64(sp)
        copy->length = 0;
1c0029d0:	c882                	sw	zero,80(sp)
  __builtin_pulp_spr_write(reg, val);
1c0029d2:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c0029d6:	4746                	lw	a4,80(sp)
1c0029d8:	10070863          	beqz	a4,1c002ae8 <S14_SoftMax+0x1ba>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0029dc:	46e6                	lw	a3,88(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0029de:	02000713          	li	a4,32
1c0029e2:	ca89                	beqz	a3,1c0029f4 <S14_SoftMax+0xc6>
1c0029e4:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0029e8:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0029ec:	00e7a223          	sw	a4,4(a5)
1c0029f0:	46e6                	lw	a3,88(sp)
1c0029f2:	faed                	bnez	a3,1c0029e4 <S14_SoftMax+0xb6>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Infos */
	/*============================= End Read Tiles Prolog ===============================*/
	{ /* Single iteration on Tile0 */
		int T0Ind_Last = 1;
		/*====================== Call Kernel LOC_LOOP =========================*/
		KerArg0->Norm = (unsigned short int) (((char *)(mnist_L1_Memory+32))[0]);
1c0029f4:	4098                	lw	a4,0(s1)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0029f6:	0ff00793          	li	a5,255
1c0029fa:	00204437          	lui	s0,0x204
1c0029fe:	02074703          	lbu	a4,32(a4) # b0020 <__L2+0x30020>
1c002a02:	00e11a23          	sh	a4,20(sp)
1c002a06:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002a0a:	20040993          	addi	s3,s0,512
1c002a0e:	00f9a023          	sw	a5,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c002a12:	00f9a623          	sw	a5,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c002a16:	1c0067b7          	lui	a5,0x1c006
1c002a1a:	d2c78793          	addi	a5,a5,-724 # 1c005d2c <KerParSoftMax_SQ8>
1c002a1e:	08f42023          	sw	a5,128(s0)
1c002a22:	0068                	addi	a0,sp,12
1c002a24:	08a42023          	sw	a0,128(s0)
1c002a28:	304030ef          	jal	ra,1c005d2c <KerParSoftMax_SQ8>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002a2c:	01c9e783          	p.elw	a5,28(s3)
		AT_FORK(gap_ncore(), (void *) KerParSoftMax_SQ8, (void *) KerArg0);
		__CALL(KerParSoftMax_SQ8, KerArg0);
	} /* End iteration on Tile0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+12), 20, 1, &DmaW_Evt1);
1c002a30:	4098                	lw	a4,0(s1)
1c002a32:	0731                	addi	a4,a4,12
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002a34:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002a38:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002a3c:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002a40:	07d1                	addi	a5,a5,20
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002a42:	c157c7b3          	p.bset	a5,a5,0,21
1c002a46:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002a4a:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002a4e:	41242023          	sw	s2,1024(s0)
        if (!merge) copy->id = id;
1c002a52:	d0b2                	sw	a2,96(sp)
        copy->length = 0;
1c002a54:	d882                	sw	zero,112(sp)
  __builtin_pulp_spr_write(reg, val);
1c002a56:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c002a5a:	57c6                	lw	a5,112(sp)
1c002a5c:	c795                	beqz	a5,1c002a88 <S14_SoftMax+0x15a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002a5e:	56e6                	lw	a3,120(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002a60:	02000713          	li	a4,32
1c002a64:	002047b7          	lui	a5,0x204
1c002a68:	ca89                	beqz	a3,1c002a7a <S14_SoftMax+0x14c>
1c002a6a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002a6e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002a72:	00e7a223          	sw	a4,4(a5)
1c002a76:	56e6                	lw	a3,120(sp)
1c002a78:	faed                	bnez	a3,1c002a6a <S14_SoftMax+0x13c>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c002a7a:	40fa                	lw	ra,156(sp)
1c002a7c:	446a                	lw	s0,152(sp)
1c002a7e:	44da                	lw	s1,148(sp)
1c002a80:	494a                	lw	s2,144(sp)
1c002a82:	49ba                	lw	s3,140(sp)
1c002a84:	610d                	addi	sp,sp,160
1c002a86:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002a88:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002a8c:	40442403          	lw	s0,1028(s0)
1c002a90:	5686                	lw	a3,96(sp)
1c002a92:	40d45433          	sra	s0,s0,a3
1c002a96:	fc143433          	p.bclr	s0,s0,30,1
1c002a9a:	c41d                	beqz	s0,1c002ac8 <S14_SoftMax+0x19a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002a9c:	10000593          	li	a1,256
1c002aa0:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002aa4:	30061073          	csrw	mstatus,a2
1c002aa8:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002aac:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002ab0:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002ab4:	30047673          	csrrci	a2,mstatus,8
1c002ab8:	40472783          	lw	a5,1028(a4)
1c002abc:	5686                	lw	a3,96(sp)
1c002abe:	40d7d7b3          	sra	a5,a5,a3
1c002ac2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002ac6:	fff9                	bnez	a5,1c002aa4 <S14_SoftMax+0x176>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c002ac8:	4785                	li	a5,1
1c002aca:	00d796b3          	sll	a3,a5,a3
1c002ace:	002047b7          	lui	a5,0x204
1c002ad2:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002ad6:	30061073          	csrw	mstatus,a2
1c002ada:	40fa                	lw	ra,156(sp)
1c002adc:	446a                	lw	s0,152(sp)
1c002ade:	44da                	lw	s1,148(sp)
1c002ae0:	494a                	lw	s2,144(sp)
1c002ae2:	49ba                	lw	s3,140(sp)
1c002ae4:	610d                	addi	sp,sp,160
1c002ae6:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002ae8:	30047673          	csrrci	a2,mstatus,8
1c002aec:	4047a783          	lw	a5,1028(a5)
1c002af0:	4686                	lw	a3,64(sp)
1c002af2:	40d7d7b3          	sra	a5,a5,a3
1c002af6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002afa:	c79d                	beqz	a5,1c002b28 <S14_SoftMax+0x1fa>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002afc:	10000593          	li	a1,256
1c002b00:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002b04:	30061073          	csrw	mstatus,a2
1c002b08:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002b0c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002b10:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002b14:	30047673          	csrrci	a2,mstatus,8
1c002b18:	40472783          	lw	a5,1028(a4)
1c002b1c:	4686                	lw	a3,64(sp)
1c002b1e:	40d7d7b3          	sra	a5,a5,a3
1c002b22:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002b26:	fff9                	bnez	a5,1c002b04 <S14_SoftMax+0x1d6>
1c002b28:	4785                	li	a5,1
1c002b2a:	00d796b3          	sll	a3,a5,a3
1c002b2e:	002047b7          	lui	a5,0x204
1c002b32:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002b36:	30061073          	csrw	mstatus,a2
1c002b3a:	bd6d                	j	1c0029f4 <S14_SoftMax+0xc6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002b3c:	30047573          	csrrci	a0,mstatus,8
1c002b40:	4047a783          	lw	a5,1028(a5)
1c002b44:	5682                	lw	a3,32(sp)
1c002b46:	40d7d7b3          	sra	a5,a5,a3
1c002b4a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002b4e:	c79d                	beqz	a5,1c002b7c <S14_SoftMax+0x24e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002b50:	10000593          	li	a1,256
1c002b54:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002b58:	30051073          	csrw	mstatus,a0
1c002b5c:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002b60:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002b64:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002b68:	30047573          	csrrci	a0,mstatus,8
1c002b6c:	40472783          	lw	a5,1028(a4)
1c002b70:	5682                	lw	a3,32(sp)
1c002b72:	40d7d7b3          	sra	a5,a5,a3
1c002b76:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002b7a:	fff9                	bnez	a5,1c002b58 <S14_SoftMax+0x22a>
1c002b7c:	4785                	li	a5,1
1c002b7e:	00d796b3          	sll	a3,a5,a3
1c002b82:	002047b7          	lui	a5,0x204
1c002b86:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002b8a:	30051073          	csrw	mstatus,a0
1c002b8e:	bd21                	j	1c0029a6 <S14_SoftMax+0x78>

1c002b90 <mnistCNN_Construct>:
int mnistCNN_Construct()

{
1c002b90:	7131                	addi	sp,sp,-192
	AT_HYPERFLASH_FS_FC_EVENT UchanHF1;
	AT_HYPERFLASH_FS_CONF_T HyperFlashConf;
	int Error;
	AT_HYPERFLASH_FS_CONF_INIT(&HyperFlashConf, AT_MEM_L3_HFLASH, 0);
1c002b92:	0068                	addi	a0,sp,12
{
1c002b94:	df06                	sw	ra,188(sp)
1c002b96:	dd22                	sw	s0,184(sp)
1c002b98:	db26                	sw	s1,180(sp)
1c002b9a:	d94a                	sw	s2,176(sp)
1c002b9c:	d74e                	sw	s3,172(sp)
1c002b9e:	d552                	sw	s4,168(sp)
1c002ba0:	d356                	sw	s5,164(sp)

static inline void __at_hyperflash_fs_open(AT_HYPERFLASH_FS_T *file, int is_write, struct pi_fs_conf *conf, const char *filename, int *err)
{
  struct pi_hyperflash_conf hyperflash_conf;
  pi_hyperflash_conf_init(&hyperflash_conf);
  pi_open_from_conf(&file->hyperflash, &hyperflash_conf);
1c002ba2:	1c00d937          	lui	s2,0x1c00d
	AT_HYPERFLASH_FS_CONF_INIT(&HyperFlashConf, AT_MEM_L3_HFLASH, 0);
1c002ba6:	4e2030ef          	jal	ra,1c006088 <pi_fs_conf_init>
  pi_hyperflash_conf_init(&hyperflash_conf);
1c002baa:	1008                	addi	a0,sp,32
  pi_open_from_conf(&file->hyperflash, &hyperflash_conf);
1c002bac:	91490493          	addi	s1,s2,-1772 # 1c00c914 <HyperFlash>
  pi_hyperflash_conf_init(&hyperflash_conf);
1c002bb0:	770040ef          	jal	ra,1c007320 <pi_hyperflash_conf_init>
  pi_open_from_conf(&file->hyperflash, &hyperflash_conf);
1c002bb4:	00c48413          	addi	s0,s1,12
1c002bb8:	8522                	mv	a0,s0
1c002bba:	100c                	addi	a1,sp,32
1c002bbc:	786050ef          	jal	ra,1c008342 <pi_open_from_conf>
  if (pi_flash_open(&file->hyperflash))
1c002bc0:	8522                	mv	a0,s0
1c002bc2:	486030ef          	jal	ra,1c006048 <pi_flash_open>
1c002bc6:	e115                	bnez	a0,1c002bea <mnistCNN_Construct+0x5a>
1c002bc8:	8a2a                	mv	s4,a0

#ifdef __FLASH_FS_SEMIHOST__
  conf->type = PI_FS_HOST;
#endif

  pi_open_from_conf(&file->fs, conf);
1c002bca:	006c                	addi	a1,sp,12
1c002bcc:	91490513          	addi	a0,s2,-1772
  conf->flash = &file->hyperflash;
1c002bd0:	c822                	sw	s0,16(sp)
    conf->type = PI_FS_READ_ONLY;
1c002bd2:	c602                	sw	zero,12(sp)
  pi_open_from_conf(&file->fs, conf);
1c002bd4:	76e050ef          	jal	ra,1c008342 <pi_open_from_conf>
  if (pi_fs_mount(&file->fs))
1c002bd8:	91490513          	addi	a0,s2,-1772
1c002bdc:	4be030ef          	jal	ra,1c00609a <pi_fs_mount>
1c002be0:	c105                	beqz	a0,1c002c00 <mnistCNN_Construct+0x70>


static inline void pi_flash_close(struct pi_device *device)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->close(device);
1c002be2:	44dc                	lw	a5,12(s1)
1c002be4:	8522                	mv	a0,s0
1c002be6:	43dc                	lw	a5,4(a5)
1c002be8:	9782                	jalr	a5
	AT_HYPERFLASH_FS_OPEN(&HyperFlash, &HyperFlashConf, "mnist_L3_Flash_Const.dat", &Error);
	if (Error) return 1;
1c002bea:	4a05                	li	s4,1
	AT_HYPERFLASH_FS_FC_WAIT(&HyperFlash, &UchanHF1);
	/* Moving S14_Infos, size 9 from HyperFlash at 123344 to (size 9) L2 at 123344..123352 */
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 123344), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 123344), 9, 0, &UchanHF1);
	AT_HYPERFLASH_FS_FC_WAIT(&HyperFlash, &UchanHF1);
	return 0;
}
1c002bec:	50fa                	lw	ra,188(sp)
1c002bee:	546a                	lw	s0,184(sp)
1c002bf0:	8552                	mv	a0,s4
1c002bf2:	54da                	lw	s1,180(sp)
1c002bf4:	594a                	lw	s2,176(sp)
1c002bf6:	59ba                	lw	s3,172(sp)
1c002bf8:	5a2a                	lw	s4,168(sp)
1c002bfa:	5a9a                	lw	s5,164(sp)
1c002bfc:	6129                	addi	sp,sp,192
1c002bfe:	8082                	ret
  {
    pi_flash_close(&file->hyperflash);
    *err = -1;
    return;
  }
  file->file = pi_fs_open(&file->fs, filename, is_write ? PI_FS_FLAGS_WRITE : 0);
1c002c00:	1c00c5b7          	lui	a1,0x1c00c
1c002c04:	4601                	li	a2,0
1c002c06:	18858593          	addi	a1,a1,392 # 1c00c188 <__clz_tab+0x2f8>
1c002c0a:	91490513          	addi	a0,s2,-1772
1c002c0e:	4c0030ef          	jal	ra,1c0060ce <pi_fs_open>
1c002c12:	cc88                	sw	a0,24(s1)
  if (file->file == NULL)
1c002c14:	62050f63          	beqz	a0,1c003252 <mnistCNN_Construct+0x6c2>
	mnist_L2_Memory = (AT_L2_POINTER) AT_L2_ALLOC(0, 129564);
1c002c18:	00020537          	lui	a0,0x20
1c002c1c:	a1c50513          	addi	a0,a0,-1508 # 1fa1c <__L1Cl+0xfa1c>
1c002c20:	1c00d937          	lui	s2,0x1c00d
1c002c24:	042060ef          	jal	ra,1c008c66 <pi_l2_malloc>
1c002c28:	84090913          	addi	s2,s2,-1984 # 1c00c840 <mnist_L2_Memory>
1c002c2c:	00a92023          	sw	a0,0(s2)
	if (mnist_L2_Memory == 0) return 3;
1c002c30:	60050d63          	beqz	a0,1c00324a <mnistCNN_Construct+0x6ba>
	mnist_L1_Memory = (AT_L1_POINTER) AT_L1_ALLOC(0, 44876);
1c002c34:	65ad                	lui	a1,0xb
1c002c36:	f4c58593          	addi	a1,a1,-180 # af4c <__rt_stack_size+0xa74c>
1c002c3a:	4501                	li	a0,0
1c002c3c:	018060ef          	jal	ra,1c008c54 <pi_cl_l1_malloc>
1c002c40:	100007b7          	lui	a5,0x10000
1c002c44:	00a7ae23          	sw	a0,28(a5) # 1000001c <mnist_L1_Memory>
	if (mnist_L1_Memory == 0) return 4;
1c002c48:	60050363          	beqz	a0,1c00324e <mnistCNN_Construct+0x6be>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 120832), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 120832), 800, 0, &UchanHF1);
1c002c4c:	1c00d9b7          	lui	s3,0x1c00d
1c002c50:	b949a503          	lw	a0,-1132(s3) # 1c00cb94 <mnist_L3_Flash>
1c002c54:	00092603          	lw	a2,0(s2)
1c002c58:	65f9                	lui	a1,0x1e
1c002c5a:	80058593          	addi	a1,a1,-2048 # 1d800 <__L1Cl+0xd800>
1c002c5e:	962e                	add	a2,a2,a1
1c002c60:	95aa                	add	a1,a1,a0
1c002c62:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c002c64:	4805                	li	a6,1
1c002c66:	101c                	addi	a5,sp,32
1c002c68:	4705                	li	a4,1
1c002c6a:	32000693          	li	a3,800
1c002c6e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c002c70:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c002c72:	c4c2                	sw	a6,72(sp)

void __rt_event_sched_init();

static inline void __rt_task_init(pi_task_t *task)
{
  task->done = 0;
1c002c74:	02010a23          	sb	zero,52(sp)
1c002c78:	4c2030ef          	jal	ra,1c00613a <pi_fs_copy_async>

#endif

static inline void pi_task_wait_on(struct pi_task *task)
{
  while(!task->done)
1c002c7c:	03410783          	lb	a5,52(sp)
1c002c80:	ef89                	bnez	a5,1c002c9a <mnistCNN_Construct+0x10a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002c82:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c002c86:	4585                	li	a1,1
1c002c88:	01c00513          	li	a0,28
1c002c8c:	537050ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c002c90:	300a9073          	csrw	mstatus,s5
1c002c94:	03410783          	lb	a5,52(sp)
1c002c98:	d7ed                	beqz	a5,1c002c82 <mnistCNN_Construct+0xf2>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 122784), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 122784), 128, 0, &UchanHF1);
1c002c9a:	b949a503          	lw	a0,-1132(s3)
1c002c9e:	00092603          	lw	a2,0(s2)
1c002ca2:	65f9                	lui	a1,0x1e
1c002ca4:	fa058593          	addi	a1,a1,-96 # 1dfa0 <__L1Cl+0xdfa0>
1c002ca8:	962e                	add	a2,a2,a1
1c002caa:	95aa                	add	a1,a1,a0
1c002cac:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c002cae:	4805                	li	a6,1
1c002cb0:	101c                	addi	a5,sp,32
1c002cb2:	4705                	li	a4,1
1c002cb4:	08000693          	li	a3,128
1c002cb8:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c002cba:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c002cbc:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c002cbe:	02010a23          	sb	zero,52(sp)
1c002cc2:	478030ef          	jal	ra,1c00613a <pi_fs_copy_async>
1c002cc6:	03410783          	lb	a5,52(sp)
1c002cca:	ef89                	bnez	a5,1c002ce4 <mnistCNN_Construct+0x154>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002ccc:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c002cd0:	4585                	li	a1,1
1c002cd2:	01c00513          	li	a0,28
1c002cd6:	4ed050ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c002cda:	300a9073          	csrw	mstatus,s5
1c002cde:	03410783          	lb	a5,52(sp)
1c002ce2:	d7ed                	beqz	a5,1c002ccc <mnistCNN_Construct+0x13c>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 123208), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 123208), 32, 0, &UchanHF1);
1c002ce4:	b949a503          	lw	a0,-1132(s3)
1c002ce8:	00092603          	lw	a2,0(s2)
1c002cec:	65f9                	lui	a1,0x1e
1c002cee:	14858593          	addi	a1,a1,328 # 1e148 <__L1Cl+0xe148>
1c002cf2:	962e                	add	a2,a2,a1
1c002cf4:	95aa                	add	a1,a1,a0
1c002cf6:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c002cf8:	4805                	li	a6,1
1c002cfa:	101c                	addi	a5,sp,32
1c002cfc:	4705                	li	a4,1
1c002cfe:	02000693          	li	a3,32
1c002d02:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c002d04:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c002d06:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c002d08:	02010a23          	sb	zero,52(sp)
1c002d0c:	42e030ef          	jal	ra,1c00613a <pi_fs_copy_async>
1c002d10:	03410783          	lb	a5,52(sp)
1c002d14:	ef89                	bnez	a5,1c002d2e <mnistCNN_Construct+0x19e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002d16:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c002d1a:	4585                	li	a1,1
1c002d1c:	01c00513          	li	a0,28
1c002d20:	4a3050ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c002d24:	300a9073          	csrw	mstatus,s5
1c002d28:	03410783          	lb	a5,52(sp)
1c002d2c:	d7ed                	beqz	a5,1c002d16 <mnistCNN_Construct+0x186>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 123240), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 123240), 32, 0, &UchanHF1);
1c002d2e:	b949a503          	lw	a0,-1132(s3)
1c002d32:	00092603          	lw	a2,0(s2)
1c002d36:	65f9                	lui	a1,0x1e
1c002d38:	16858593          	addi	a1,a1,360 # 1e168 <__L1Cl+0xe168>
1c002d3c:	962e                	add	a2,a2,a1
1c002d3e:	95aa                	add	a1,a1,a0
1c002d40:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c002d42:	4805                	li	a6,1
1c002d44:	101c                	addi	a5,sp,32
1c002d46:	4705                	li	a4,1
1c002d48:	02000693          	li	a3,32
1c002d4c:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c002d4e:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c002d50:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c002d52:	02010a23          	sb	zero,52(sp)
1c002d56:	3e4030ef          	jal	ra,1c00613a <pi_fs_copy_async>
1c002d5a:	03410783          	lb	a5,52(sp)
1c002d5e:	ef89                	bnez	a5,1c002d78 <mnistCNN_Construct+0x1e8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002d60:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c002d64:	4585                	li	a1,1
1c002d66:	01c00513          	li	a0,28
1c002d6a:	459050ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c002d6e:	300a9073          	csrw	mstatus,s5
1c002d72:	03410783          	lb	a5,52(sp)
1c002d76:	d7ed                	beqz	a5,1c002d60 <mnistCNN_Construct+0x1d0>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 123272), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 123272), 9, 0, &UchanHF1);
1c002d78:	b949a503          	lw	a0,-1132(s3)
1c002d7c:	00092603          	lw	a2,0(s2)
1c002d80:	65f9                	lui	a1,0x1e
1c002d82:	18858593          	addi	a1,a1,392 # 1e188 <__L1Cl+0xe188>
1c002d86:	962e                	add	a2,a2,a1
1c002d88:	95aa                	add	a1,a1,a0
1c002d8a:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c002d8c:	4805                	li	a6,1
1c002d8e:	101c                	addi	a5,sp,32
1c002d90:	4705                	li	a4,1
1c002d92:	46a5                	li	a3,9
1c002d94:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c002d96:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c002d98:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c002d9a:	02010a23          	sb	zero,52(sp)
1c002d9e:	39c030ef          	jal	ra,1c00613a <pi_fs_copy_async>
1c002da2:	03410783          	lb	a5,52(sp)
1c002da6:	ef89                	bnez	a5,1c002dc0 <mnistCNN_Construct+0x230>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002da8:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c002dac:	4585                	li	a1,1
1c002dae:	01c00513          	li	a0,28
1c002db2:	411050ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c002db6:	300a9073          	csrw	mstatus,s5
1c002dba:	03410783          	lb	a5,52(sp)
1c002dbe:	d7ed                	beqz	a5,1c002da8 <mnistCNN_Construct+0x218>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 102400), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 102400), 18432, 0, &UchanHF1);
1c002dc0:	b949a503          	lw	a0,-1132(s3)
1c002dc4:	00092603          	lw	a2,0(s2)
1c002dc8:	65e5                	lui	a1,0x19
1c002dca:	6695                	lui	a3,0x5
1c002dcc:	962e                	add	a2,a2,a1
1c002dce:	95aa                	add	a1,a1,a0
1c002dd0:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c002dd2:	4805                	li	a6,1
1c002dd4:	101c                	addi	a5,sp,32
1c002dd6:	4705                	li	a4,1
1c002dd8:	80068693          	addi	a3,a3,-2048 # 4800 <__rt_stack_size+0x4000>
1c002ddc:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c002dde:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c002de0:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c002de2:	02010a23          	sb	zero,52(sp)
1c002de6:	354030ef          	jal	ra,1c00613a <pi_fs_copy_async>
1c002dea:	03410783          	lb	a5,52(sp)
1c002dee:	ef89                	bnez	a5,1c002e08 <mnistCNN_Construct+0x278>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002df0:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c002df4:	4585                	li	a1,1
1c002df6:	01c00513          	li	a0,28
1c002dfa:	3c9050ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c002dfe:	300a9073          	csrw	mstatus,s5
1c002e02:	03410783          	lb	a5,52(sp)
1c002e06:	d7ed                	beqz	a5,1c002df0 <mnistCNN_Construct+0x260>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 122272), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 122272), 256, 0, &UchanHF1);
1c002e08:	b949a503          	lw	a0,-1132(s3)
1c002e0c:	00092603          	lw	a2,0(s2)
1c002e10:	65f9                	lui	a1,0x1e
1c002e12:	da058593          	addi	a1,a1,-608 # 1dda0 <__L1Cl+0xdda0>
1c002e16:	962e                	add	a2,a2,a1
1c002e18:	95aa                	add	a1,a1,a0
1c002e1a:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c002e1c:	4805                	li	a6,1
1c002e1e:	101c                	addi	a5,sp,32
1c002e20:	4705                	li	a4,1
1c002e22:	10000693          	li	a3,256
1c002e26:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c002e28:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c002e2a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c002e2c:	02010a23          	sb	zero,52(sp)
1c002e30:	30a030ef          	jal	ra,1c00613a <pi_fs_copy_async>
1c002e34:	03410783          	lb	a5,52(sp)
1c002e38:	ef89                	bnez	a5,1c002e52 <mnistCNN_Construct+0x2c2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002e3a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c002e3e:	4585                	li	a1,1
1c002e40:	01c00513          	li	a0,28
1c002e44:	37f050ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c002e48:	300a9073          	csrw	mstatus,s5
1c002e4c:	03410783          	lb	a5,52(sp)
1c002e50:	d7ed                	beqz	a5,1c002e3a <mnistCNN_Construct+0x2aa>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 122912), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 122912), 64, 0, &UchanHF1);
1c002e52:	b949a503          	lw	a0,-1132(s3)
1c002e56:	00092603          	lw	a2,0(s2)
1c002e5a:	65f9                	lui	a1,0x1e
1c002e5c:	02058593          	addi	a1,a1,32 # 1e020 <__L1Cl+0xe020>
1c002e60:	962e                	add	a2,a2,a1
1c002e62:	95aa                	add	a1,a1,a0
1c002e64:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c002e66:	4805                	li	a6,1
1c002e68:	101c                	addi	a5,sp,32
1c002e6a:	4705                	li	a4,1
1c002e6c:	04000693          	li	a3,64
1c002e70:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c002e72:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c002e74:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c002e76:	02010a23          	sb	zero,52(sp)
1c002e7a:	2c0030ef          	jal	ra,1c00613a <pi_fs_copy_async>
1c002e7e:	03410783          	lb	a5,52(sp)
1c002e82:	ef89                	bnez	a5,1c002e9c <mnistCNN_Construct+0x30c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002e84:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c002e88:	4585                	li	a1,1
1c002e8a:	01c00513          	li	a0,28
1c002e8e:	335050ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c002e92:	300a9073          	csrw	mstatus,s5
1c002e96:	03410783          	lb	a5,52(sp)
1c002e9a:	d7ed                	beqz	a5,1c002e84 <mnistCNN_Construct+0x2f4>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 122976), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 122976), 64, 0, &UchanHF1);
1c002e9c:	b949a503          	lw	a0,-1132(s3)
1c002ea0:	00092603          	lw	a2,0(s2)
1c002ea4:	65f9                	lui	a1,0x1e
1c002ea6:	06058593          	addi	a1,a1,96 # 1e060 <__L1Cl+0xe060>
1c002eaa:	962e                	add	a2,a2,a1
1c002eac:	95aa                	add	a1,a1,a0
1c002eae:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c002eb0:	4805                	li	a6,1
1c002eb2:	101c                	addi	a5,sp,32
1c002eb4:	4705                	li	a4,1
1c002eb6:	04000693          	li	a3,64
1c002eba:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c002ebc:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c002ebe:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c002ec0:	02010a23          	sb	zero,52(sp)
1c002ec4:	276030ef          	jal	ra,1c00613a <pi_fs_copy_async>
1c002ec8:	03410783          	lb	a5,52(sp)
1c002ecc:	ef89                	bnez	a5,1c002ee6 <mnistCNN_Construct+0x356>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002ece:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c002ed2:	4585                	li	a1,1
1c002ed4:	01c00513          	li	a0,28
1c002ed8:	2eb050ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c002edc:	300a9073          	csrw	mstatus,s5
1c002ee0:	03410783          	lb	a5,52(sp)
1c002ee4:	d7ed                	beqz	a5,1c002ece <mnistCNN_Construct+0x33e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 123284), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 123284), 9, 0, &UchanHF1);
1c002ee6:	b949a503          	lw	a0,-1132(s3)
1c002eea:	00092603          	lw	a2,0(s2)
1c002eee:	65f9                	lui	a1,0x1e
1c002ef0:	19458593          	addi	a1,a1,404 # 1e194 <__L1Cl+0xe194>
1c002ef4:	962e                	add	a2,a2,a1
1c002ef6:	95aa                	add	a1,a1,a0
1c002ef8:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c002efa:	4805                	li	a6,1
1c002efc:	101c                	addi	a5,sp,32
1c002efe:	4705                	li	a4,1
1c002f00:	46a5                	li	a3,9
1c002f02:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c002f04:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c002f06:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c002f08:	02010a23          	sb	zero,52(sp)
1c002f0c:	22e030ef          	jal	ra,1c00613a <pi_fs_copy_async>
1c002f10:	03410783          	lb	a5,52(sp)
1c002f14:	ef89                	bnez	a5,1c002f2e <mnistCNN_Construct+0x39e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002f16:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c002f1a:	4585                	li	a1,1
1c002f1c:	01c00513          	li	a0,28
1c002f20:	2a3050ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c002f24:	300a9073          	csrw	mstatus,s5
1c002f28:	03410783          	lb	a5,52(sp)
1c002f2c:	d7ed                	beqz	a5,1c002f16 <mnistCNN_Construct+0x386>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 0), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 0), 102400, 0, &UchanHF1);
1c002f2e:	00092603          	lw	a2,0(s2)
1c002f32:	b949a583          	lw	a1,-1132(s3)
1c002f36:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c002f38:	4805                	li	a6,1
1c002f3a:	101c                	addi	a5,sp,32
1c002f3c:	4705                	li	a4,1
1c002f3e:	66e5                	lui	a3,0x19
1c002f40:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c002f42:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c002f44:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c002f46:	02010a23          	sb	zero,52(sp)
1c002f4a:	1f0030ef          	jal	ra,1c00613a <pi_fs_copy_async>
1c002f4e:	03410783          	lb	a5,52(sp)
1c002f52:	ef89                	bnez	a5,1c002f6c <mnistCNN_Construct+0x3dc>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002f54:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c002f58:	4585                	li	a1,1
1c002f5a:	01c00513          	li	a0,28
1c002f5e:	265050ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c002f62:	300a9073          	csrw	mstatus,s5
1c002f66:	03410783          	lb	a5,52(sp)
1c002f6a:	d7ed                	beqz	a5,1c002f54 <mnistCNN_Construct+0x3c4>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 122528), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 122528), 256, 0, &UchanHF1);
1c002f6c:	b949a503          	lw	a0,-1132(s3)
1c002f70:	00092603          	lw	a2,0(s2)
1c002f74:	65f9                	lui	a1,0x1e
1c002f76:	ea058593          	addi	a1,a1,-352 # 1dea0 <__L1Cl+0xdea0>
1c002f7a:	962e                	add	a2,a2,a1
1c002f7c:	95aa                	add	a1,a1,a0
1c002f7e:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c002f80:	4805                	li	a6,1
1c002f82:	101c                	addi	a5,sp,32
1c002f84:	4705                	li	a4,1
1c002f86:	10000693          	li	a3,256
1c002f8a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c002f8c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c002f8e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c002f90:	02010a23          	sb	zero,52(sp)
1c002f94:	1a6030ef          	jal	ra,1c00613a <pi_fs_copy_async>
1c002f98:	03410783          	lb	a5,52(sp)
1c002f9c:	ef89                	bnez	a5,1c002fb6 <mnistCNN_Construct+0x426>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002f9e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c002fa2:	4585                	li	a1,1
1c002fa4:	01c00513          	li	a0,28
1c002fa8:	21b050ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c002fac:	300a9073          	csrw	mstatus,s5
1c002fb0:	03410783          	lb	a5,52(sp)
1c002fb4:	d7ed                	beqz	a5,1c002f9e <mnistCNN_Construct+0x40e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 123040), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 123040), 64, 0, &UchanHF1);
1c002fb6:	b949a503          	lw	a0,-1132(s3)
1c002fba:	00092603          	lw	a2,0(s2)
1c002fbe:	65f9                	lui	a1,0x1e
1c002fc0:	0a058593          	addi	a1,a1,160 # 1e0a0 <__L1Cl+0xe0a0>
1c002fc4:	962e                	add	a2,a2,a1
1c002fc6:	95aa                	add	a1,a1,a0
1c002fc8:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c002fca:	4805                	li	a6,1
1c002fcc:	101c                	addi	a5,sp,32
1c002fce:	4705                	li	a4,1
1c002fd0:	04000693          	li	a3,64
1c002fd4:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c002fd6:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c002fd8:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c002fda:	02010a23          	sb	zero,52(sp)
1c002fde:	15c030ef          	jal	ra,1c00613a <pi_fs_copy_async>
1c002fe2:	03410783          	lb	a5,52(sp)
1c002fe6:	ef89                	bnez	a5,1c003000 <mnistCNN_Construct+0x470>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002fe8:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c002fec:	4585                	li	a1,1
1c002fee:	01c00513          	li	a0,28
1c002ff2:	1d1050ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c002ff6:	300a9073          	csrw	mstatus,s5
1c002ffa:	03410783          	lb	a5,52(sp)
1c002ffe:	d7ed                	beqz	a5,1c002fe8 <mnistCNN_Construct+0x458>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 123104), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 123104), 64, 0, &UchanHF1);
1c003000:	b949a503          	lw	a0,-1132(s3)
1c003004:	00092603          	lw	a2,0(s2)
1c003008:	65f9                	lui	a1,0x1e
1c00300a:	0e058593          	addi	a1,a1,224 # 1e0e0 <__L1Cl+0xe0e0>
1c00300e:	962e                	add	a2,a2,a1
1c003010:	95aa                	add	a1,a1,a0
1c003012:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c003014:	4805                	li	a6,1
1c003016:	101c                	addi	a5,sp,32
1c003018:	4705                	li	a4,1
1c00301a:	04000693          	li	a3,64
1c00301e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c003020:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c003022:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c003024:	02010a23          	sb	zero,52(sp)
1c003028:	112030ef          	jal	ra,1c00613a <pi_fs_copy_async>
1c00302c:	03410783          	lb	a5,52(sp)
1c003030:	ef89                	bnez	a5,1c00304a <mnistCNN_Construct+0x4ba>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003032:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c003036:	4585                	li	a1,1
1c003038:	01c00513          	li	a0,28
1c00303c:	187050ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c003040:	300a9073          	csrw	mstatus,s5
1c003044:	03410783          	lb	a5,52(sp)
1c003048:	d7ed                	beqz	a5,1c003032 <mnistCNN_Construct+0x4a2>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 123296), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 123296), 9, 0, &UchanHF1);
1c00304a:	b949a503          	lw	a0,-1132(s3)
1c00304e:	00092603          	lw	a2,0(s2)
1c003052:	65f9                	lui	a1,0x1e
1c003054:	1a058593          	addi	a1,a1,416 # 1e1a0 <__L1Cl+0xe1a0>
1c003058:	962e                	add	a2,a2,a1
1c00305a:	95aa                	add	a1,a1,a0
1c00305c:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00305e:	4805                	li	a6,1
1c003060:	101c                	addi	a5,sp,32
1c003062:	4705                	li	a4,1
1c003064:	46a5                	li	a3,9
1c003066:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c003068:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00306a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00306c:	02010a23          	sb	zero,52(sp)
1c003070:	0ca030ef          	jal	ra,1c00613a <pi_fs_copy_async>
1c003074:	03410783          	lb	a5,52(sp)
1c003078:	ef89                	bnez	a5,1c003092 <mnistCNN_Construct+0x502>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00307a:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00307e:	4585                	li	a1,1
1c003080:	01c00513          	li	a0,28
1c003084:	13f050ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c003088:	300a9073          	csrw	mstatus,s5
1c00308c:	03410783          	lb	a5,52(sp)
1c003090:	d7ed                	beqz	a5,1c00307a <mnistCNN_Construct+0x4ea>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 121632), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 121632), 640, 0, &UchanHF1);
1c003092:	b949a503          	lw	a0,-1132(s3)
1c003096:	00092603          	lw	a2,0(s2)
1c00309a:	65f9                	lui	a1,0x1e
1c00309c:	b2058593          	addi	a1,a1,-1248 # 1db20 <__L1Cl+0xdb20>
1c0030a0:	962e                	add	a2,a2,a1
1c0030a2:	95aa                	add	a1,a1,a0
1c0030a4:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0030a6:	4805                	li	a6,1
1c0030a8:	101c                	addi	a5,sp,32
1c0030aa:	4705                	li	a4,1
1c0030ac:	28000693          	li	a3,640
1c0030b0:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0030b2:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0030b4:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0030b6:	02010a23          	sb	zero,52(sp)
1c0030ba:	080030ef          	jal	ra,1c00613a <pi_fs_copy_async>
1c0030be:	03410783          	lb	a5,52(sp)
1c0030c2:	ef89                	bnez	a5,1c0030dc <mnistCNN_Construct+0x54c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0030c4:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0030c8:	4585                	li	a1,1
1c0030ca:	01c00513          	li	a0,28
1c0030ce:	0f5050ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0030d2:	300a9073          	csrw	mstatus,s5
1c0030d6:	03410783          	lb	a5,52(sp)
1c0030da:	d7ed                	beqz	a5,1c0030c4 <mnistCNN_Construct+0x534>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 123168), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 123168), 40, 0, &UchanHF1);
1c0030dc:	b949a503          	lw	a0,-1132(s3)
1c0030e0:	00092603          	lw	a2,0(s2)
1c0030e4:	65f9                	lui	a1,0x1e
1c0030e6:	12058593          	addi	a1,a1,288 # 1e120 <__L1Cl+0xe120>
1c0030ea:	962e                	add	a2,a2,a1
1c0030ec:	95aa                	add	a1,a1,a0
1c0030ee:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0030f0:	4805                	li	a6,1
1c0030f2:	101c                	addi	a5,sp,32
1c0030f4:	4705                	li	a4,1
1c0030f6:	02800693          	li	a3,40
1c0030fa:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0030fc:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0030fe:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c003100:	02010a23          	sb	zero,52(sp)
1c003104:	036030ef          	jal	ra,1c00613a <pi_fs_copy_async>
1c003108:	03410783          	lb	a5,52(sp)
1c00310c:	ef89                	bnez	a5,1c003126 <mnistCNN_Construct+0x596>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00310e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c003112:	4585                	li	a1,1
1c003114:	01c00513          	li	a0,28
1c003118:	0ab050ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00311c:	300a9073          	csrw	mstatus,s5
1c003120:	03410783          	lb	a5,52(sp)
1c003124:	d7ed                	beqz	a5,1c00310e <mnistCNN_Construct+0x57e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 123308), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 123308), 10, 0, &UchanHF1);
1c003126:	b949a503          	lw	a0,-1132(s3)
1c00312a:	00092603          	lw	a2,0(s2)
1c00312e:	65f9                	lui	a1,0x1e
1c003130:	1ac58593          	addi	a1,a1,428 # 1e1ac <__L1Cl+0xe1ac>
1c003134:	962e                	add	a2,a2,a1
1c003136:	95aa                	add	a1,a1,a0
1c003138:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c00313a:	4805                	li	a6,1
1c00313c:	101c                	addi	a5,sp,32
1c00313e:	4705                	li	a4,1
1c003140:	46a9                	li	a3,10
1c003142:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c003144:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c003146:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c003148:	02010a23          	sb	zero,52(sp)
1c00314c:	7ef020ef          	jal	ra,1c00613a <pi_fs_copy_async>
1c003150:	03410783          	lb	a5,52(sp)
1c003154:	ef89                	bnez	a5,1c00316e <mnistCNN_Construct+0x5de>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003156:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00315a:	4585                	li	a1,1
1c00315c:	01c00513          	li	a0,28
1c003160:	063050ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c003164:	300a9073          	csrw	mstatus,s5
1c003168:	03410783          	lb	a5,52(sp)
1c00316c:	d7ed                	beqz	a5,1c003156 <mnistCNN_Construct+0x5c6>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 123320), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 123320), 10, 0, &UchanHF1);
1c00316e:	b949a503          	lw	a0,-1132(s3)
1c003172:	00092603          	lw	a2,0(s2)
1c003176:	65f9                	lui	a1,0x1e
1c003178:	1b858593          	addi	a1,a1,440 # 1e1b8 <__L1Cl+0xe1b8>
1c00317c:	962e                	add	a2,a2,a1
1c00317e:	95aa                	add	a1,a1,a0
1c003180:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c003182:	4805                	li	a6,1
1c003184:	101c                	addi	a5,sp,32
1c003186:	4705                	li	a4,1
1c003188:	46a9                	li	a3,10
1c00318a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00318c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00318e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c003190:	02010a23          	sb	zero,52(sp)
1c003194:	7a7020ef          	jal	ra,1c00613a <pi_fs_copy_async>
1c003198:	03410783          	lb	a5,52(sp)
1c00319c:	ef89                	bnez	a5,1c0031b6 <mnistCNN_Construct+0x626>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00319e:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0031a2:	4585                	li	a1,1
1c0031a4:	01c00513          	li	a0,28
1c0031a8:	01b050ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0031ac:	300a9073          	csrw	mstatus,s5
1c0031b0:	03410783          	lb	a5,52(sp)
1c0031b4:	d7ed                	beqz	a5,1c00319e <mnistCNN_Construct+0x60e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 123332), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 123332), 9, 0, &UchanHF1);
1c0031b6:	b949a503          	lw	a0,-1132(s3)
1c0031ba:	00092603          	lw	a2,0(s2)
1c0031be:	65f9                	lui	a1,0x1e
1c0031c0:	1c458593          	addi	a1,a1,452 # 1e1c4 <__L1Cl+0xe1c4>
1c0031c4:	962e                	add	a2,a2,a1
1c0031c6:	95aa                	add	a1,a1,a0
1c0031c8:	4c88                	lw	a0,24(s1)
  task->id = PI_TASK_NONE_ID;
1c0031ca:	4805                	li	a6,1
1c0031cc:	101c                	addi	a5,sp,32
1c0031ce:	4705                	li	a4,1
1c0031d0:	46a5                	li	a3,9
1c0031d2:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c0031d4:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c0031d6:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c0031d8:	02010a23          	sb	zero,52(sp)
1c0031dc:	75f020ef          	jal	ra,1c00613a <pi_fs_copy_async>
1c0031e0:	03410783          	lb	a5,52(sp)
1c0031e4:	ef89                	bnez	a5,1c0031fe <mnistCNN_Construct+0x66e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0031e6:	30047af3          	csrrci	s5,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c0031ea:	4585                	li	a1,1
1c0031ec:	01c00513          	li	a0,28
1c0031f0:	7d2050ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c0031f4:	300a9073          	csrw	mstatus,s5
1c0031f8:	03410783          	lb	a5,52(sp)
1c0031fc:	d7ed                	beqz	a5,1c0031e6 <mnistCNN_Construct+0x656>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) mnist_L3_Flash + 123344), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) mnist_L2_Memory + 123344), 9, 0, &UchanHF1);
1c0031fe:	b949a883          	lw	a7,-1132(s3)
1c003202:	00092603          	lw	a2,0(s2)
1c003206:	4c88                	lw	a0,24(s1)
1c003208:	65f9                	lui	a1,0x1e
1c00320a:	1d058593          	addi	a1,a1,464 # 1e1d0 <__L1Cl+0xe1d0>
  task->id = PI_TASK_NONE_ID;
1c00320e:	4805                	li	a6,1
1c003210:	101c                	addi	a5,sp,32
1c003212:	962e                	add	a2,a2,a1
1c003214:	4705                	li	a4,1
1c003216:	46a5                	li	a3,9
1c003218:	95c6                	add	a1,a1,a7
1c00321a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00321c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00321e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c003220:	02010a23          	sb	zero,52(sp)
1c003224:	717020ef          	jal	ra,1c00613a <pi_fs_copy_async>
1c003228:	03410783          	lb	a5,52(sp)
1c00322c:	9c0790e3          	bnez	a5,1c002bec <mnistCNN_Construct+0x5c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003230:	300474f3          	csrrci	s1,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c003234:	4585                	li	a1,1
1c003236:	01c00513          	li	a0,28
1c00323a:	788050ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00323e:	30049073          	csrw	mstatus,s1
1c003242:	03410783          	lb	a5,52(sp)
1c003246:	d7ed                	beqz	a5,1c003230 <mnistCNN_Construct+0x6a0>
1c003248:	b255                	j	1c002bec <mnistCNN_Construct+0x5c>
	if (mnist_L2_Memory == 0) return 3;
1c00324a:	4a0d                	li	s4,3
1c00324c:	b245                	j	1c002bec <mnistCNN_Construct+0x5c>
	if (mnist_L1_Memory == 0) return 4;
1c00324e:	4a11                	li	s4,4
1c003250:	ba71                	j	1c002bec <mnistCNN_Construct+0x5c>
  {
    pi_fs_unmount(&file->fs);
1c003252:	91490513          	addi	a0,s2,-1772
1c003256:	671020ef          	jal	ra,1c0060c6 <pi_fs_unmount>
1c00325a:	b261                	j	1c002be2 <mnistCNN_Construct+0x52>

1c00325c <mnistCNN_Destruct>:
int mnistCNN_Destruct()

{
	AT_L2_FREE(0, mnist_L2_Memory, 129564);
1c00325c:	1c00d7b7          	lui	a5,0x1c00d
1c003260:	8407a503          	lw	a0,-1984(a5) # 1c00c840 <mnist_L2_Memory>
1c003264:	000205b7          	lui	a1,0x20
{
1c003268:	1141                	addi	sp,sp,-16
	AT_L2_FREE(0, mnist_L2_Memory, 129564);
1c00326a:	a1c58593          	addi	a1,a1,-1508 # 1fa1c <__L1Cl+0xfa1c>
{
1c00326e:	c606                	sw	ra,12(sp)
1c003270:	c422                	sw	s0,8(sp)
1c003272:	c226                	sw	s1,4(sp)
	AT_L2_FREE(0, mnist_L2_Memory, 129564);
1c003274:	201050ef          	jal	ra,1c008c74 <pi_l2_free>
	AT_L1_FREE(0, mnist_L1_Memory, 44876);
1c003278:	100007b7          	lui	a5,0x10000
1c00327c:	01c7a583          	lw	a1,28(a5) # 1000001c <mnist_L1_Memory>
1c003280:	662d                	lui	a2,0xb
1c003282:	f4c60613          	addi	a2,a2,-180 # af4c <__rt_stack_size+0xa74c>
    file->file->size = 4*1024*1024;
}

static inline void __at_hyperflash_fs_close(AT_HYPERFLASH_FS_T *file)
{
  pi_fs_close(file->file);
1c003286:	1c00d4b7          	lui	s1,0x1c00d
1c00328a:	4501                	li	a0,0
1c00328c:	1cf050ef          	jal	ra,1c008c5a <pi_cl_l1_free>
1c003290:	91448413          	addi	s0,s1,-1772 # 1c00c914 <HyperFlash>
1c003294:	4c08                	lw	a0,24(s0)
1c003296:	641020ef          	jal	ra,1c0060d6 <pi_fs_close>
  pi_fs_unmount(&file->fs);
1c00329a:	91448513          	addi	a0,s1,-1772
1c00329e:	629020ef          	jal	ra,1c0060c6 <pi_fs_unmount>
1c0032a2:	445c                	lw	a5,12(s0)
1c0032a4:	00c40513          	addi	a0,s0,12
1c0032a8:	43dc                	lw	a5,4(a5)
1c0032aa:	9782                	jalr	a5
	AT_HYPERFLASH_FS_CLOSE(&HyperFlash);
	return 0;
}
1c0032ac:	40b2                	lw	ra,12(sp)
1c0032ae:	4422                	lw	s0,8(sp)
1c0032b0:	4492                	lw	s1,4(sp)
1c0032b2:	4501                	li	a0,0
1c0032b4:	0141                	addi	sp,sp,16
1c0032b6:	8082                	ret

1c0032b8 <mnistCNN>:
int mnistCNN(
		unsigned char * __restrict__ Input_1,
		signed short * __restrict__ Output_1)

{
1c0032b8:	7159                	addi	sp,sp,-112
1c0032ba:	d0ca                	sw	s2,96(sp)
1c0032bc:	cece                	sw	s3,92(sp)
	S1_Op_input_1_formatter(
1c0032be:	1c00d937          	lui	s2,0x1c00d
	KerArg0->In = (unsigned char *__restrict__) (mnist_L1_Memory+0);
1c0032c2:	100009b7          	lui	s3,0x10000
	S1_Op_input_1_formatter(
1c0032c6:	84090913          	addi	s2,s2,-1984 # 1c00c840 <mnist_L2_Memory>
	KerArg0->In = (unsigned char *__restrict__) (mnist_L1_Memory+0);
1c0032ca:	01c98993          	addi	s3,s3,28 # 1000001c <mnist_L1_Memory>
1c0032ce:	0009a683          	lw	a3,0(s3)
{
1c0032d2:	ccd2                	sw	s4,88(sp)
		((unsigned char * __restrict__) Input_1), /* In */
		((signed char * __restrict__) (mnist_L2_Memory+123356)) /* Out */
1c0032d4:	00092a03          	lw	s4,0(s2)
1c0032d8:	67f9                	lui	a5,0x1e
1c0032da:	1dc78793          	addi	a5,a5,476 # 1e1dc <__L1Cl+0xe1dc>
	KerArg0->W = (unsigned short int) (28);
1c0032de:	4771                	li	a4,28
{
1c0032e0:	d2a6                	sw	s1,100(sp)
	KerArg0->Out = (signed char *__restrict__) (mnist_L1_Memory+784);
1c0032e2:	31068613          	addi	a2,a3,784 # 19310 <__L1Cl+0x9310>
{
1c0032e6:	84ae                	mv	s1,a1
		((signed char * __restrict__) (mnist_L2_Memory+123356)) /* Out */
1c0032e8:	9a3e                	add	s4,s4,a5
{
1c0032ea:	d686                	sw	ra,108(sp)
1c0032ec:	d4a2                	sw	s0,104(sp)
1c0032ee:	cad6                	sw	s5,84(sp)
	KerArg0->In = (unsigned char *__restrict__) (mnist_L1_Memory+0);
1c0032f0:	c036                	sw	a3,0(sp)
	KerArg0->Out = (signed char *__restrict__) (mnist_L1_Memory+784);
1c0032f2:	c232                	sw	a2,4(sp)
	KerArg0->W = (unsigned short int) (28);
1c0032f4:	c43a                	sw	a4,8(sp)
	KerArg0->H = (unsigned short int) (28);
1c0032f6:	c63a                	sw	a4,12(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0032f8:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0032fc:	002047b7          	lui	a5,0x204
1c003300:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003304:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003308:	31070713          	addi	a4,a4,784 # b0310 <__L2+0x30310>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00330c:	c1574733          	p.bset	a4,a4,0,21
1c003310:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003314:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003318:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c00331c:	c82e                	sw	a1,16(sp)
        copy->length = 0;
1c00331e:	d002                	sw	zero,32(sp)
  __builtin_pulp_spr_write(reg, val);
1c003320:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c003324:	5702                	lw	a4,32(sp)
1c003326:	1c070963          	beqz	a4,1c0034f8 <mnistCNN+0x240>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00332a:	56a2                	lw	a3,40(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00332c:	02000713          	li	a4,32
1c003330:	ca89                	beqz	a3,1c003342 <mnistCNN+0x8a>
1c003332:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003336:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00333a:	00e7a223          	sw	a4,4(a5)
1c00333e:	56a2                	lw	a3,40(sp)
1c003340:	faed                	bnez	a3,1c003332 <mnistCNN+0x7a>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003342:	0ff00793          	li	a5,255
1c003346:	00204437          	lui	s0,0x204
1c00334a:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00334e:	20040a93          	addi	s5,s0,512
1c003352:	00faa023          	sw	a5,0(s5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c003356:	00faa623          	sw	a5,12(s5)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00335a:	1c0047b7          	lui	a5,0x1c004
1c00335e:	c0078793          	addi	a5,a5,-1024 # 1c003c00 <CNN_NormBW_offset_fps>
1c003362:	08f42023          	sw	a5,128(s0)
1c003366:	850a                	mv	a0,sp
1c003368:	08a42023          	sw	a0,128(s0)
1c00336c:	095000ef          	jal	ra,1c003c00 <CNN_NormBW_offset_fps>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003370:	01cae783          	p.elw	a5,28(s5)
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) mnist_L1_Memory+784), 784, 1, &DmaW_Evt1);
1c003374:	0009a703          	lw	a4,0(s3)
1c003378:	31070713          	addi	a4,a4,784
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00337c:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003380:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003384:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003388:	31078793          	addi	a5,a5,784 # a0310 <__L2+0x20310>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00338c:	c157c7b3          	p.bset	a5,a5,0,21
1c003390:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003394:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003398:	41442023          	sw	s4,1024(s0)
        if (!merge) copy->id = id;
1c00339c:	d832                	sw	a2,48(sp)
        copy->length = 0;
1c00339e:	c082                	sw	zero,64(sp)
  __builtin_pulp_spr_write(reg, val);
1c0033a0:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c0033a4:	4786                	lw	a5,64(sp)
1c0033a6:	0e078f63          	beqz	a5,1c0034a4 <mnistCNN+0x1ec>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0033aa:	46a6                	lw	a3,72(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0033ac:	02000713          	li	a4,32
1c0033b0:	002047b7          	lui	a5,0x204
1c0033b4:	ca89                	beqz	a3,1c0033c6 <mnistCNN+0x10e>
1c0033b6:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0033ba:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0033be:	00e7a223          	sw	a4,4(a5)
1c0033c2:	46a6                	lw	a3,72(sp)
1c0033c4:	faed                	bnez	a3,1c0033b6 <mnistCNN+0xfe>
	);
	S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu(
1c0033c6:	00092503          	lw	a0,0(s2)
		((signed char * __restrict__) (mnist_L2_Memory+120832)), /* Filter */
		((signed int * __restrict__) (mnist_L2_Memory+122784)), /* Bias */
		((signed char * __restrict__) (mnist_L2_Memory+124956)), /* Out */
		((unsigned char * __restrict__) (mnist_L2_Memory+123208)), /* Scale */
		((signed char * __restrict__) (mnist_L2_Memory+123240)), /* ScaleN */
		((signed char * __restrict__) (mnist_L2_Memory+123272)) /* Infos */
1c0033ca:	6479                	lui	s0,0x1e
		((signed char * __restrict__) (mnist_L2_Memory+124956)), /* Out */
1c0033cc:	69fd                	lui	s3,0x1f
		((signed char * __restrict__) (mnist_L2_Memory+123356)), /* In */
1c0033ce:	1dc40a13          	addi	s4,s0,476 # 1e1dc <__L1Cl+0xe1dc>
		((signed char * __restrict__) (mnist_L2_Memory+124956)), /* Out */
1c0033d2:	81c98993          	addi	s3,s3,-2020 # 1e81c <__L1Cl+0xe81c>
		((signed char * __restrict__) (mnist_L2_Memory+123272)) /* Infos */
1c0033d6:	18840813          	addi	a6,s0,392
		((signed char * __restrict__) (mnist_L2_Memory+123240)), /* ScaleN */
1c0033da:	16840793          	addi	a5,s0,360
		((unsigned char * __restrict__) (mnist_L2_Memory+123208)), /* Scale */
1c0033de:	14840713          	addi	a4,s0,328
		((signed int * __restrict__) (mnist_L2_Memory+122784)), /* Bias */
1c0033e2:	fa040613          	addi	a2,s0,-96
		((signed char * __restrict__) (mnist_L2_Memory+120832)), /* Filter */
1c0033e6:	80040593          	addi	a1,s0,-2048
	S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu(
1c0033ea:	013506b3          	add	a3,a0,s3
1c0033ee:	982a                	add	a6,a6,a0
1c0033f0:	97aa                	add	a5,a5,a0
1c0033f2:	972a                	add	a4,a4,a0
1c0033f4:	962a                	add	a2,a2,a0
1c0033f6:	95aa                	add	a1,a1,a0
1c0033f8:	9552                	add	a0,a0,s4
1c0033fa:	ac3fd0ef          	jal	ra,1c000ebc <S4_Conv2d_32x1x5x5_MaxPool_2x2_Relu>
	);
	S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu(
1c0033fe:	00092503          	lw	a0,0(s2)
		((signed char * __restrict__) (mnist_L2_Memory+102400)), /* Filter */
		((signed int * __restrict__) (mnist_L2_Memory+122272)), /* Bias */
		((signed char * __restrict__) (mnist_L2_Memory+123356)), /* Out */
		((unsigned char * __restrict__) (mnist_L2_Memory+122912)), /* Scale */
		((signed char * __restrict__) (mnist_L2_Memory+122976)), /* ScaleN */
		((signed char * __restrict__) (mnist_L2_Memory+123284)) /* Infos */
1c003402:	19440813          	addi	a6,s0,404
		((signed char * __restrict__) (mnist_L2_Memory+122976)), /* ScaleN */
1c003406:	06040793          	addi	a5,s0,96
		((unsigned char * __restrict__) (mnist_L2_Memory+122912)), /* Scale */
1c00340a:	02040713          	addi	a4,s0,32
		((signed int * __restrict__) (mnist_L2_Memory+122272)), /* Bias */
1c00340e:	da040613          	addi	a2,s0,-608
	S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu(
1c003412:	65e5                	lui	a1,0x19
1c003414:	014506b3          	add	a3,a0,s4
1c003418:	982a                	add	a6,a6,a0
1c00341a:	97aa                	add	a5,a5,a0
1c00341c:	972a                	add	a4,a4,a0
1c00341e:	962a                	add	a2,a2,a0
1c003420:	95aa                	add	a1,a1,a0
1c003422:	954e                	add	a0,a0,s3
1c003424:	a18fe0ef          	jal	ra,1c00163c <S7_Conv2d_64x32x3x3_MaxPool_2x2_Relu>
	);
	S10_Op_FULLY_CONNECTED_0_5_fusion(
1c003428:	00092583          	lw	a1,0(s2)
		((signed char * __restrict__) (mnist_L2_Memory+0)), /* Filter */
		((signed int * __restrict__) (mnist_L2_Memory+122528)), /* Bias */
		((signed char * __restrict__) (mnist_L2_Memory+124956)), /* Out */
		((unsigned char * __restrict__) (mnist_L2_Memory+123040)), /* Scale */
		((signed char * __restrict__) (mnist_L2_Memory+123104)), /* ScaleN */
		((signed char * __restrict__) (mnist_L2_Memory+123296)) /* Infos */
1c00342c:	1a040813          	addi	a6,s0,416
		((signed char * __restrict__) (mnist_L2_Memory+123104)), /* ScaleN */
1c003430:	0e040793          	addi	a5,s0,224
		((unsigned char * __restrict__) (mnist_L2_Memory+123040)), /* Scale */
1c003434:	0a040713          	addi	a4,s0,160
		((signed int * __restrict__) (mnist_L2_Memory+122528)), /* Bias */
1c003438:	ea040613          	addi	a2,s0,-352
	S10_Op_FULLY_CONNECTED_0_5_fusion(
1c00343c:	013586b3          	add	a3,a1,s3
1c003440:	01458533          	add	a0,a1,s4
1c003444:	982e                	add	a6,a6,a1
1c003446:	97ae                	add	a5,a5,a1
1c003448:	972e                	add	a4,a4,a1
1c00344a:	962e                	add	a2,a2,a1
1c00344c:	999fe0ef          	jal	ra,1c001de4 <S10_Op_FULLY_CONNECTED_0_5_fusion>
	);
	S13_Op_FULLY_CONNECTED_0_6_fusion(
1c003450:	00092503          	lw	a0,0(s2)
		((signed char * __restrict__) (mnist_L2_Memory+121632)), /* Filter */
		((signed int * __restrict__) (mnist_L2_Memory+123168)), /* Bias */
		((signed char * __restrict__) (mnist_L2_Memory+123356)), /* Out */
		((unsigned char * __restrict__) (mnist_L2_Memory+123308)), /* Scale */
		((signed char * __restrict__) (mnist_L2_Memory+123320)), /* ScaleN */
		((signed char * __restrict__) (mnist_L2_Memory+123332)) /* Infos */
1c003454:	1c440813          	addi	a6,s0,452
		((signed char * __restrict__) (mnist_L2_Memory+123320)), /* ScaleN */
1c003458:	1b840793          	addi	a5,s0,440
		((unsigned char * __restrict__) (mnist_L2_Memory+123308)), /* Scale */
1c00345c:	1ac40713          	addi	a4,s0,428
		((signed int * __restrict__) (mnist_L2_Memory+123168)), /* Bias */
1c003460:	12040613          	addi	a2,s0,288
		((signed char * __restrict__) (mnist_L2_Memory+121632)), /* Filter */
1c003464:	b2040593          	addi	a1,s0,-1248
	S13_Op_FULLY_CONNECTED_0_6_fusion(
1c003468:	014506b3          	add	a3,a0,s4
1c00346c:	982a                	add	a6,a6,a0
1c00346e:	97aa                	add	a5,a5,a0
1c003470:	972a                	add	a4,a4,a0
1c003472:	962a                	add	a2,a2,a0
1c003474:	95aa                	add	a1,a1,a0
1c003476:	954e                	add	a0,a0,s3
1c003478:	f7dfe0ef          	jal	ra,1c0023f4 <S13_Op_FULLY_CONNECTED_0_6_fusion>
	);
	S14_SoftMax(
1c00347c:	00092603          	lw	a2,0(s2)
		((signed char * __restrict__) (mnist_L2_Memory+123356)), /* In */
		((signed short * __restrict__) Output_1), /* Out */
		((signed char * __restrict__) (mnist_L2_Memory+123344)) /* Infos */
1c003480:	1d040413          	addi	s0,s0,464
	S14_SoftMax(
1c003484:	85a6                	mv	a1,s1
1c003486:	01460533          	add	a0,a2,s4
1c00348a:	9622                	add	a2,a2,s0
1c00348c:	ca2ff0ef          	jal	ra,1c00292e <S14_SoftMax>
	);
	return 0;
}
1c003490:	50b6                	lw	ra,108(sp)
1c003492:	5426                	lw	s0,104(sp)
1c003494:	5496                	lw	s1,100(sp)
1c003496:	5906                	lw	s2,96(sp)
1c003498:	49f6                	lw	s3,92(sp)
1c00349a:	4a66                	lw	s4,88(sp)
1c00349c:	4ad6                	lw	s5,84(sp)
1c00349e:	4501                	li	a0,0
1c0034a0:	6165                	addi	sp,sp,112
1c0034a2:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0034a4:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0034a8:	40442403          	lw	s0,1028(s0)
1c0034ac:	56c2                	lw	a3,48(sp)
1c0034ae:	40d45433          	sra	s0,s0,a3
1c0034b2:	fc143433          	p.bclr	s0,s0,30,1
1c0034b6:	c41d                	beqz	s0,1c0034e4 <mnistCNN+0x22c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0034b8:	10000593          	li	a1,256
1c0034bc:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0034c0:	30061073          	csrw	mstatus,a2
1c0034c4:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0034c8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0034cc:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0034d0:	30047673          	csrrci	a2,mstatus,8
1c0034d4:	40472783          	lw	a5,1028(a4)
1c0034d8:	56c2                	lw	a3,48(sp)
1c0034da:	40d7d7b3          	sra	a5,a5,a3
1c0034de:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0034e2:	fff9                	bnez	a5,1c0034c0 <mnistCNN+0x208>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0034e4:	4785                	li	a5,1
1c0034e6:	00d796b3          	sll	a3,a5,a3
1c0034ea:	002047b7          	lui	a5,0x204
1c0034ee:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0034f2:	30061073          	csrw	mstatus,a2
1c0034f6:	bdc1                	j	1c0033c6 <mnistCNN+0x10e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0034f8:	30047673          	csrrci	a2,mstatus,8
1c0034fc:	4047a783          	lw	a5,1028(a5)
1c003500:	46c2                	lw	a3,16(sp)
1c003502:	40d7d7b3          	sra	a5,a5,a3
1c003506:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00350a:	c79d                	beqz	a5,1c003538 <mnistCNN+0x280>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00350c:	10000593          	li	a1,256
1c003510:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003514:	30061073          	csrw	mstatus,a2
1c003518:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00351c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003520:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003524:	30047673          	csrrci	a2,mstatus,8
1c003528:	40472783          	lw	a5,1028(a4)
1c00352c:	46c2                	lw	a3,16(sp)
1c00352e:	40d7d7b3          	sra	a5,a5,a3
1c003532:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003536:	fff9                	bnez	a5,1c003514 <mnistCNN+0x25c>
1c003538:	4785                	li	a5,1
1c00353a:	00d796b3          	sll	a3,a5,a3
1c00353e:	002047b7          	lui	a5,0x204
1c003542:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003546:	30061073          	csrw	mstatus,a2
1c00354a:	bbe5                	j	1c003342 <mnistCNN+0x8a>

1c00354c <ReadValue>:
}

void SkipCommentAndWhiteSpace(unsigned char *pImg, int buf_len, int *i)
{
	int saw_nl = 1;
	while (*i < buf_len && (pImg[*i] == '#'||pImg[*i] == ' '||pImg[*i] == '\t'||pImg[*i] == '\r'||pImg[*i] == '\n')) {
1c00354c:	421c                	lw	a5,0(a2)
	int saw_nl = 1;
1c00354e:	4885                	li	a7,1
	while (*i < buf_len && (pImg[*i] == '#'||pImg[*i] == ' '||pImg[*i] == '\t'||pImg[*i] == '\r'||pImg[*i] == '\n')) {
1c003550:	06b7d363          	ble	a1,a5,1c0035b6 <ReadValue+0x6a>
1c003554:	00f506b3          	add	a3,a0,a5
1c003558:	0006c703          	lbu	a4,0(a3)
1c00355c:	00800e37          	lui	t3,0x800
1c003560:	02300813          	li	a6,35
1c003564:	00a58333          	add	t1,a1,a0
1c003568:	4edd                	li	t4,23
1c00356a:	0e4d                	addi	t3,t3,19
1c00356c:	07070963          	beq	a4,a6,1c0035de <ReadValue+0x92>
1c003570:	ff770693          	addi	a3,a4,-9
1c003574:	0ff6f693          	andi	a3,a3,255
1c003578:	04def163          	bleu	a3,t4,1c0035ba <ReadValue+0x6e>
unsigned int ReadValue(unsigned char *pImg, int buf_len, int *i)
{
#define IS_DIGIT(C) (((C) >= '0') && ((C) <= '9'))
	unsigned int val = 0;
	SkipCommentAndWhiteSpace(pImg, buf_len, i);
	while (*i < buf_len && !IS_DIGIT(pImg[*i])) {
1c00357c:	02b7dd63          	ble	a1,a5,1c0035b6 <ReadValue+0x6a>
1c003580:	fd070693          	addi	a3,a4,-48
1c003584:	0ff6f693          	andi	a3,a3,255
1c003588:	4825                	li	a6,9
1c00358a:	08d87163          	bleu	a3,a6,1c00360c <ReadValue+0xc0>
1c00358e:	0785                	addi	a5,a5,1
1c003590:	00f506b3          	add	a3,a0,a5
1c003594:	00a588b3          	add	a7,a1,a0
1c003598:	4325                	li	t1,9
1c00359a:	a809                	j	1c0035ac <ReadValue+0x60>
1c00359c:	0016c70b          	p.lbu	a4,1(a3!)
1c0035a0:	fd070813          	addi	a6,a4,-48
1c0035a4:	0ff87813          	andi	a6,a6,255
1c0035a8:	07037263          	bleu	a6,t1,1c00360c <ReadValue+0xc0>
1c0035ac:	40a687b3          	sub	a5,a3,a0
		(*i)++;
1c0035b0:	c21c                	sw	a5,0(a2)
	while (*i < buf_len && !IS_DIGIT(pImg[*i])) {
1c0035b2:	fed895e3          	bne	a7,a3,1c00359c <ReadValue+0x50>
	int saw_nl = 1;
1c0035b6:	4501                	li	a0,0
	}
	while (*i < buf_len && IS_DIGIT(pImg[*i])) {
		val = val * 10 + (pImg[*i] - 0x30);
		(*i)++;
	}
	return val;
1c0035b8:	8082                	ret
	while (*i < buf_len && (pImg[*i] == '#'||pImg[*i] == ' '||pImg[*i] == '\t'||pImg[*i] == '\r'||pImg[*i] == '\n')) {
1c0035ba:	00de56b3          	srl	a3,t3,a3
1c0035be:	c00696b3          	p.extractu	a3,a3,0,0
1c0035c2:	decd                	beqz	a3,1c00357c <ReadValue+0x30>
		(*i)++;
1c0035c4:	0785                	addi	a5,a5,1
		saw_nl = (pImg[*i] == '\n');
1c0035c6:	1759                	addi	a4,a4,-10
		(*i)++;
1c0035c8:	c21c                	sw	a5,0(a2)
		saw_nl = (pImg[*i] == '\n');
1c0035ca:	00173893          	seqz	a7,a4
	while (*i < buf_len && (pImg[*i] == '#'||pImg[*i] == ' '||pImg[*i] == '\t'||pImg[*i] == '\r'||pImg[*i] == '\n')) {
1c0035ce:	feb7d4e3          	ble	a1,a5,1c0035b6 <ReadValue+0x6a>
1c0035d2:	00f506b3          	add	a3,a0,a5
1c0035d6:	0006c703          	lbu	a4,0(a3)
1c0035da:	f9071be3          	bne	a4,a6,1c003570 <ReadValue+0x24>
1c0035de:	8742                	mv	a4,a6
		if (saw_nl && pImg[*i] == '#') {
1c0035e0:	fe0882e3          	beqz	a7,1c0035c4 <ReadValue+0x78>
			while (*i < buf_len && pImg[*i] != '\n') {
1c0035e4:	feb7d0e3          	ble	a1,a5,1c0035c4 <ReadValue+0x78>
1c0035e8:	fca82ee3          	p.beqimm	a6,10,1c0035c4 <ReadValue+0x78>
1c0035ec:	0785                	addi	a5,a5,1
1c0035ee:	00f506b3          	add	a3,a0,a5
1c0035f2:	a029                	j	1c0035fc <ReadValue+0xb0>
1c0035f4:	0016c70b          	p.lbu	a4,1(a3!)
1c0035f8:	fca726e3          	p.beqimm	a4,10,1c0035c4 <ReadValue+0x78>
1c0035fc:	40a687b3          	sub	a5,a3,a0
				(*i)++;
1c003600:	c21c                	sw	a5,0(a2)
			while (*i < buf_len && pImg[*i] != '\n') {
1c003602:	fed319e3          	bne	t1,a3,1c0035f4 <ReadValue+0xa8>
1c003606:	00034703          	lbu	a4,0(t1)
1c00360a:	bf6d                	j	1c0035c4 <ReadValue+0x78>
1c00360c:	0785                	addi	a5,a5,1
1c00360e:	00f50833          	add	a6,a0,a5
	while (*i < buf_len && IS_DIGIT(pImg[*i])) {
1c003612:	48a5                	li	a7,9
	int saw_nl = 1;
1c003614:	4501                	li	a0,0
1c003616:	a811                	j	1c00362a <ReadValue+0xde>
	while (*i < buf_len && IS_DIGIT(pImg[*i])) {
1c003618:	0018470b          	p.lbu	a4,1(a6!)
1c00361c:	0785                	addi	a5,a5,1
1c00361e:	fd070693          	addi	a3,a4,-48
1c003622:	0ff6f693          	andi	a3,a3,255
1c003626:	00d8ed63          	bltu	a7,a3,1c003640 <ReadValue+0xf4>
		val = val * 10 + (pImg[*i] - 0x30);
1c00362a:	00251693          	slli	a3,a0,0x2
1c00362e:	9536                	add	a0,a0,a3
1c003630:	0506                	slli	a0,a0,0x1
1c003632:	972a                	add	a4,a4,a0
		(*i)++;
1c003634:	c21c                	sw	a5,0(a2)
		val = val * 10 + (pImg[*i] - 0x30);
1c003636:	fd070513          	addi	a0,a4,-48
	while (*i < buf_len && IS_DIGIT(pImg[*i])) {
1c00363a:	fcb7cfe3          	blt	a5,a1,1c003618 <ReadValue+0xcc>
#undef IS_DIGIT
}
1c00363e:	8082                	ret
1c003640:	8082                	ret

1c003642 <ReadImageFromFile>:
	__FREE_L2(InputBuf, RowSize);
	return 0;
}

int ReadImageFromFile(char *ImageName, unsigned int DesiredW, unsigned int DesiredH, unsigned int DesiredBytesPerPixel, void *InBuffer, unsigned int BuffSize, img_io_out_t out_type, int Transpose2CHW) 
{
1c003642:	7119                	addi	sp,sp,-128
1c003644:	dca2                	sw	s0,120(sp)
1c003646:	842a                	mv	s0,a0
	__FS_INIT(fs);
1c003648:	1008                	addi	a0,sp,32
{
1c00364a:	de86                	sw	ra,124(sp)
1c00364c:	d4d2                	sw	s4,104(sp)
1c00364e:	d2d6                	sw	s5,100(sp)
1c003650:	d0da                	sw	s6,96(sp)
1c003652:	8ab2                	mv	s5,a2
1c003654:	cae6                	sw	s9,84(sp)
1c003656:	c8ea                	sw	s10,80(sp)
1c003658:	c6ee                	sw	s11,76(sp)
1c00365a:	8a36                	mv	s4,a3
1c00365c:	8cba                	mv	s9,a4
1c00365e:	8d42                	mv	s10,a6
1c003660:	c246                	sw	a7,4(sp)
1c003662:	daa6                	sw	s1,116(sp)
1c003664:	d8ca                	sw	s2,112(sp)
1c003666:	d6ce                	sw	s3,108(sp)
1c003668:	cede                	sw	s7,92(sp)
1c00366a:	cce2                	sw	s8,88(sp)
1c00366c:	8dbe                	mv	s11,a5
1c00366e:	8b2e                	mv	s6,a1
	__FS_INIT(fs);
1c003670:	219020ef          	jal	ra,1c006088 <pi_fs_conf_init>
1c003674:	100c                	addi	a1,sp,32
1c003676:	4785                	li	a5,1
1c003678:	1848                	addi	a0,sp,52
1c00367a:	d03e                	sw	a5,32(sp)
1c00367c:	4c7040ef          	jal	ra,1c008342 <pi_open_from_conf>
1c003680:	1848                	addi	a0,sp,52
1c003682:	219020ef          	jal	ra,1c00609a <pi_fs_mount>
	switch_file_t File = __OPEN_READ(fs, Name);
1c003686:	4601                	li	a2,0
1c003688:	85a2                	mv	a1,s0
1c00368a:	1848                	addi	a0,sp,52
1c00368c:	243020ef          	jal	ra,1c0060ce <pi_fs_open>
	if (!File) {
1c003690:	c555                	beqz	a0,1c00373c <ReadImageFromFile+0xfa>
1c003692:	84aa                	mv	s1,a0
	unsigned char *Header = (unsigned char *) __ALLOC_L2(256);
1c003694:	10000513          	li	a0,256
1c003698:	5ce050ef          	jal	ra,1c008c66 <pi_l2_malloc>
	if (__READ(File, Header, 256) == 256) {
1c00369c:	85aa                	mv	a1,a0
	unsigned char *Header = (unsigned char *) __ALLOC_L2(256);
1c00369e:	892a                	mv	s2,a0
	if (__READ(File, Header, 256) == 256) {
1c0036a0:	10000613          	li	a2,256
1c0036a4:	8526                	mv	a0,s1
1c0036a6:	241020ef          	jal	ra,1c0060e6 <pi_fs_read>
1c0036aa:	10000793          	li	a5,256
1c0036ae:	06f50963          	beq	a0,a5,1c003720 <ReadImageFromFile+0xde>
		printf("Unable to read header %s", Name);
1c0036b2:	1c00c537          	lui	a0,0x1c00c
1c0036b6:	85a2                	mv	a1,s0
1c0036b8:	21850513          	addi	a0,a0,536 # 1c00c218 <__clz_tab+0x388>
1c0036bc:	6b4070ef          	jal	ra,1c00ad70 <printf>
	__FREE_L2(Header, 256);
1c0036c0:	10000593          	li	a1,256
1c0036c4:	854a                	mv	a0,s2
1c0036c6:	5ae050ef          	jal	ra,1c008c74 <pi_l2_free>
	__CLOSE(File);
1c0036ca:	8526                	mv	a0,s1
1c0036cc:	20b020ef          	jal	ra,1c0060d6 <pi_fs_close>
	__FS_DEINIT(fs);
1c0036d0:	1848                	addi	a0,sp,52
1c0036d2:	1f5020ef          	jal	ra,1c0060c6 <pi_fs_unmount>
	switch_file_t File = (switch_file_t) 0;
	unsigned int BytesPerPixel, W, H, HeaderSize, Size, ReadSize=0;
	unsigned int ImageShort;

	if (GetInputImageInfos(ImageName, &W, &H, &BytesPerPixel, &HeaderSize, &ImageShort)) {
		printf("Failed to get input images infos, %s\n", ImageName); goto Fail;
1c0036d6:	1c00c537          	lui	a0,0x1c00c
1c0036da:	85a2                	mv	a1,s0
1c0036dc:	23450513          	addi	a0,a0,564 # 1c00c234 <__clz_tab+0x3a4>
1c0036e0:	690070ef          	jal	ra,1c00ad70 <printf>
	switch_file_t File = (switch_file_t) 0;
1c0036e4:	4481                	li	s1,0
	__FS_DEINIT(fs);
	PRINTF("Image %s, [W: %d, H: %d], Bytes per pixel %d, Size: %d bytes, Loaded successfully\n", ImageName, W, H, BytesPerPixel, Size);

	return 0;
Fail:
	__CLOSE(File);
1c0036e6:	8526                	mv	a0,s1
1c0036e8:	1ef020ef          	jal	ra,1c0060d6 <pi_fs_close>
	__FS_DEINIT(fs);
1c0036ec:	1848                	addi	a0,sp,52
1c0036ee:	1d9020ef          	jal	ra,1c0060c6 <pi_fs_unmount>
	printf("Failed to load image %s from flash\n", ImageName);
1c0036f2:	1c00c537          	lui	a0,0x1c00c
1c0036f6:	85a2                	mv	a1,s0
1c0036f8:	38c50513          	addi	a0,a0,908 # 1c00c38c <__clz_tab+0x4fc>
1c0036fc:	674070ef          	jal	ra,1c00ad70 <printf>
	return 1;
1c003700:	4505                	li	a0,1
}
1c003702:	50f6                	lw	ra,124(sp)
1c003704:	5466                	lw	s0,120(sp)
1c003706:	54d6                	lw	s1,116(sp)
1c003708:	5946                	lw	s2,112(sp)
1c00370a:	59b6                	lw	s3,108(sp)
1c00370c:	5a26                	lw	s4,104(sp)
1c00370e:	5a96                	lw	s5,100(sp)
1c003710:	5b06                	lw	s6,96(sp)
1c003712:	4bf6                	lw	s7,92(sp)
1c003714:	4c66                	lw	s8,88(sp)
1c003716:	4cd6                	lw	s9,84(sp)
1c003718:	4d46                	lw	s10,80(sp)
1c00371a:	4db6                	lw	s11,76(sp)
1c00371c:	6109                	addi	sp,sp,128
1c00371e:	8082                	ret
	if      (ImgIn[0] == 'P' && ImgIn[1] == '5' && ImgIn[2] == '\n') *BytesPerPixel = 1;
1c003720:	00094703          	lbu	a4,0(s2)
1c003724:	05000793          	li	a5,80
1c003728:	02f70263          	beq	a4,a5,1c00374c <ReadImageFromFile+0x10a>
			printf("Unable to load header %s", Name);
1c00372c:	1c00c537          	lui	a0,0x1c00c
1c003730:	85a2                	mv	a1,s0
1c003732:	1bc50513          	addi	a0,a0,444 # 1c00c1bc <__clz_tab+0x32c>
1c003736:	63a070ef          	jal	ra,1c00ad70 <printf>
1c00373a:	b759                	j	1c0036c0 <ReadImageFromFile+0x7e>
		printf("Unable to open file %s\n", Name);
1c00373c:	1c00c537          	lui	a0,0x1c00c
1c003740:	85a2                	mv	a1,s0
1c003742:	1a450513          	addi	a0,a0,420 # 1c00c1a4 <__clz_tab+0x314>
1c003746:	62a070ef          	jal	ra,1c00ad70 <printf>
1c00374a:	b771                	j	1c0036d6 <ReadImageFromFile+0x94>
	if      (ImgIn[0] == 'P' && ImgIn[1] == '5' && ImgIn[2] == '\n') *BytesPerPixel = 1;
1c00374c:	00194783          	lbu	a5,1(s2)
1c003750:	03500713          	li	a4,53
1c003754:	18e78063          	beq	a5,a4,1c0038d4 <ReadImageFromFile+0x292>
	else if (ImgIn[0] == 'P' && ImgIn[1] == '6' && ImgIn[2] == '\n') *BytesPerPixel = 3;
1c003758:	03600713          	li	a4,54
1c00375c:	fce798e3          	bne	a5,a4,1c00372c <ReadImageFromFile+0xea>
1c003760:	00294783          	lbu	a5,2(s2)
1c003764:	498d                	li	s3,3
1c003766:	fca7b3e3          	p.bneimm	a5,10,1c00372c <ReadImageFromFile+0xea>
	int i = 3;
1c00376a:	478d                	li	a5,3
	*W = ReadValue(ImgIn, buf_len, &i);
1c00376c:	10000593          	li	a1,256
1c003770:	0870                	addi	a2,sp,28
1c003772:	854a                	mv	a0,s2
	int i = 3;
1c003774:	ce3e                	sw	a5,28(sp)
	*W = ReadValue(ImgIn, buf_len, &i);
1c003776:	3bd9                	jal	1c00354c <ReadValue>
	*H = ReadValue(ImgIn, buf_len, &i);
1c003778:	0870                	addi	a2,sp,28
1c00377a:	10000593          	li	a1,256
	*W = ReadValue(ImgIn, buf_len, &i);
1c00377e:	8c2a                	mv	s8,a0
	*H = ReadValue(ImgIn, buf_len, &i);
1c003780:	854a                	mv	a0,s2
1c003782:	33e9                	jal	1c00354c <ReadValue>
1c003784:	8baa                	mv	s7,a0
	unsigned int Val = ReadValue(ImgIn, buf_len, &i);
1c003786:	0870                	addi	a2,sp,28
1c003788:	10000593          	li	a1,256
1c00378c:	854a                	mv	a0,s2
1c00378e:	3b7d                	jal	1c00354c <ReadValue>
	if (Val != 255 && Val != 65535) return 1;
1c003790:	0ff00793          	li	a5,255
1c003794:	1af50763          	beq	a0,a5,1c003942 <ReadImageFromFile+0x300>
1c003798:	67c1                	lui	a5,0x10
1c00379a:	17fd                	addi	a5,a5,-1
1c00379c:	f8f518e3          	bne	a0,a5,1c00372c <ReadImageFromFile+0xea>
	if (Val == 65535) *InputShort = 1;
1c0037a0:	4705                	li	a4,1
1c0037a2:	c63a                	sw	a4,12(sp)
1c0037a4:	4785                	li	a5,1
1c0037a6:	412786b3          	sub	a3,a5,s2
1c0037aa:	47f2                	lw	a5,28(sp)
1c0037ac:	97ca                	add	a5,a5,s2
1c0037ae:	00f68733          	add	a4,a3,a5
	while (ImgIn[i++] != 0xA) {};
1c0037b2:	ce3a                	sw	a4,28(sp)
1c0037b4:	c43a                	sw	a4,8(sp)
1c0037b6:	0017c70b          	p.lbu	a4,1(a5!) # 10001 <__L1Cl+0x1>
1c0037ba:	fea73ae3          	p.bneimm	a4,10,1c0037ae <ReadImageFromFile+0x16c>
			PRINTF("Image %s:  [W: %d, H: %d] Bytes per pixel %d, HeaderSize: %d\n", Name, *W, *H, *BytesPerPixel, *HeaderSize);
1c0037be:	47a2                	lw	a5,8(sp)
1c0037c0:	1c00c537          	lui	a0,0x1c00c
1c0037c4:	874e                	mv	a4,s3
1c0037c6:	86de                	mv	a3,s7
1c0037c8:	8662                	mv	a2,s8
1c0037ca:	85a2                	mv	a1,s0
1c0037cc:	1d850513          	addi	a0,a0,472 # 1c00c1d8 <__clz_tab+0x348>
1c0037d0:	5a0070ef          	jal	ra,1c00ad70 <printf>
	__FREE_L2(Header, 256);
1c0037d4:	10000593          	li	a1,256
1c0037d8:	854a                	mv	a0,s2
1c0037da:	49a050ef          	jal	ra,1c008c74 <pi_l2_free>
	__CLOSE(File);
1c0037de:	8526                	mv	a0,s1
1c0037e0:	0f7020ef          	jal	ra,1c0060d6 <pi_fs_close>
	__FS_DEINIT(fs);
1c0037e4:	1848                	addi	a0,sp,52
1c0037e6:	0e1020ef          	jal	ra,1c0060c6 <pi_fs_unmount>
	if (BytesPerPixel != DesiredBytesPerPixel) {
1c0037ea:	013a0c63          	beq	s4,s3,1c003802 <ReadImageFromFile+0x1c0>
		printf("Expecting %d bytes per pixel image, %s\n", BytesPerPixel, ImageName); goto Fail;
1c0037ee:	1c00c537          	lui	a0,0x1c00c
1c0037f2:	8622                	mv	a2,s0
1c0037f4:	85ce                	mv	a1,s3
1c0037f6:	25c50513          	addi	a0,a0,604 # 1c00c25c <__clz_tab+0x3cc>
1c0037fa:	576070ef          	jal	ra,1c00ad70 <printf>
	switch_file_t File = (switch_file_t) 0;
1c0037fe:	4481                	li	s1,0
		printf("Expecting %d bytes per pixel image, %s\n", BytesPerPixel, ImageName); goto Fail;
1c003800:	b5dd                	j	1c0036e6 <ReadImageFromFile+0xa4>
	if (DesiredH != H || DesiredW != W) {
1c003802:	017a9463          	bne	s5,s7,1c00380a <ReadImageFromFile+0x1c8>
1c003806:	018b0f63          	beq	s6,s8,1c003824 <ReadImageFromFile+0x1e2>
		printf("Expecting [%dx%d] image, got [%dx%d] %s\n", DesiredW, DesiredH, W, H, ImageName); goto Fail;
1c00380a:	1c00c537          	lui	a0,0x1c00c
1c00380e:	87a2                	mv	a5,s0
1c003810:	875e                	mv	a4,s7
1c003812:	86e2                	mv	a3,s8
1c003814:	8656                	mv	a2,s5
1c003816:	85da                	mv	a1,s6
1c003818:	28450513          	addi	a0,a0,644 # 1c00c284 <__clz_tab+0x3f4>
1c00381c:	554070ef          	jal	ra,1c00ad70 <printf>
	switch_file_t File = (switch_file_t) 0;
1c003820:	4481                	li	s1,0
		printf("Expecting [%dx%d] image, got [%dx%d] %s\n", DesiredW, DesiredH, W, H, ImageName); goto Fail;
1c003822:	b5d1                	j	1c0036e6 <ReadImageFromFile+0xa4>
	__FS_INIT(fs);
1c003824:	1008                	addi	a0,sp,32
1c003826:	063020ef          	jal	ra,1c006088 <pi_fs_conf_init>
1c00382a:	4785                	li	a5,1
1c00382c:	100c                	addi	a1,sp,32
1c00382e:	1848                	addi	a0,sp,52
1c003830:	d03e                	sw	a5,32(sp)
1c003832:	311040ef          	jal	ra,1c008342 <pi_open_from_conf>
1c003836:	1848                	addi	a0,sp,52
1c003838:	063020ef          	jal	ra,1c00609a <pi_fs_mount>
	File = __OPEN_READ(fs, ImageName);
1c00383c:	4601                	li	a2,0
1c00383e:	85a2                	mv	a1,s0
1c003840:	1848                	addi	a0,sp,52
1c003842:	08d020ef          	jal	ra,1c0060ce <pi_fs_open>
1c003846:	84aa                	mv	s1,a0
	if (File == 0) {
1c003848:	14050163          	beqz	a0,1c00398a <ReadImageFromFile+0x348>
	Size = W*H*BytesPerPixel*(ImageShort?sizeof(short int):sizeof(unsigned char));
1c00384c:	037c0b33          	mul	s6,s8,s7
1c003850:	4732                	lw	a4,12(sp)
1c003852:	033b0933          	mul	s2,s6,s3
1c003856:	c311                	beqz	a4,1c00385a <ReadImageFromFile+0x218>
1c003858:	0906                	slli	s2,s2,0x1
	if (out_type == IMGIO_OUTPUT_RGB565) {
1c00385a:	082d2363          	p.beqimm	s10,2,1c0038e0 <ReadImageFromFile+0x29e>
		if (BuffSize < Size) {
1c00385e:	0d2dea63          	bltu	s11,s2,1c003932 <ReadImageFromFile+0x2f0>
	__SEEK(File, HeaderSize);
1c003862:	45a2                	lw	a1,8(sp)
1c003864:	8526                	mv	a0,s1
1c003866:	0df020ef          	jal	ra,1c006144 <pi_fs_seek>
	if (ImageShort){
1c00386a:	47b2                	lw	a5,12(sp)
1c00386c:	efe9                	bnez	a5,1c003946 <ReadImageFromFile+0x304>
		switch (out_type) {
1c00386e:	180d0763          	beqz	s10,1c0039fc <ReadImageFromFile+0x3ba>
1c003872:	041d3963          	p.bneimm	s10,1,1c0038c4 <ReadImageFromFile+0x282>
1c003876:	03898a33          	mul	s4,s3,s8
				if (Transpose2CHW){
1c00387a:	4792                	lw	a5,4(sp)
    unsigned char *InputBuf = (unsigned char *) __ALLOC_L2(RowSize * sizeof(unsigned char));
1c00387c:	8552                	mv	a0,s4
				if (Transpose2CHW){
1c00387e:	24078063          	beqz	a5,1c003abe <ReadImageFromFile+0x47c>
    unsigned char *InputBuf = (unsigned char *) __ALLOC_L2(RowSize * sizeof(unsigned char));
1c003882:	3e4050ef          	jal	ra,1c008c66 <pi_l2_malloc>
1c003886:	8aaa                	mv	s5,a0
    if(InputBuf == NULL)
1c003888:	36050563          	beqz	a0,1c003bf2 <ReadImageFromFile+0x5b0>
	for (int CurRow=0; CurRow < H; CurRow++) {
1c00388c:	1f705b63          	blez	s7,1c003a82 <ReadImageFromFile+0x440>
1c003890:	418007b3          	neg	a5,s8
1c003894:	001c1713          	slli	a4,s8,0x1
1c003898:	0786                	slli	a5,a5,0x1
1c00389a:	c43a                	sw	a4,8(sp)
1c00389c:	9cba                	add	s9,s9,a4
1c00389e:	c63e                	sw	a5,12(sp)
1c0038a0:	0b06                	slli	s6,s6,0x1
1c0038a2:	c202                	sw	zero,4(sp)
		while (RemainBytes > 0) {
1c0038a4:	8dd6                	mv	s11,s5
1c0038a6:	8d52                	mv	s10,s4
1c0038a8:	01404663          	bgtz	s4,1c0038b4 <ReadImageFromFile+0x272>
1c0038ac:	a4e1                	j	1c003b74 <ReadImageFromFile+0x532>
			pInpBuf += len;
1c0038ae:	9daa                	add	s11,s11,a0
		while (RemainBytes > 0) {
1c0038b0:	2da05263          	blez	s10,1c003b74 <ReadImageFromFile+0x532>
			__int_ssize_t len = __READ(File, pInpBuf, RemainBytes);
1c0038b4:	866a                	mv	a2,s10
1c0038b6:	85ee                	mv	a1,s11
1c0038b8:	8526                	mv	a0,s1
1c0038ba:	02d020ef          	jal	ra,1c0060e6 <pi_fs_read>
			RemainBytes -= len;
1c0038be:	40ad0d33          	sub	s10,s10,a0
			if (!len) return 1;
1c0038c2:	f575                	bnez	a0,1c0038ae <ReadImageFromFile+0x26c>
		printf("Input ended unexpectedly or bad format, %s\n", ImageName); goto Fail;
1c0038c4:	1c00c537          	lui	a0,0x1c00c
1c0038c8:	85a2                	mv	a1,s0
1c0038ca:	30c50513          	addi	a0,a0,780 # 1c00c30c <__clz_tab+0x47c>
1c0038ce:	4a2070ef          	jal	ra,1c00ad70 <printf>
1c0038d2:	bd11                	j	1c0036e6 <ReadImageFromFile+0xa4>
	if      (ImgIn[0] == 'P' && ImgIn[1] == '5' && ImgIn[2] == '\n') *BytesPerPixel = 1;
1c0038d4:	00294783          	lbu	a5,2(s2)
1c0038d8:	e4a7bae3          	p.bneimm	a5,10,1c00372c <ReadImageFromFile+0xea>
1c0038dc:	4985                	li	s3,1
1c0038de:	b571                	j	1c00376a <ReadImageFromFile+0x128>
		if (BuffSize < W*H*2) {
1c0038e0:	001b1813          	slli	a6,s6,0x1
1c0038e4:	050de763          	bltu	s11,a6,1c003932 <ReadImageFromFile+0x2f0>
	__SEEK(File, HeaderSize);
1c0038e8:	45a2                	lw	a1,8(sp)
1c0038ea:	8526                	mv	a0,s1
1c0038ec:	059020ef          	jal	ra,1c006144 <pi_fs_seek>
	if (ImageShort){
1c0038f0:	47b2                	lw	a5,12(sp)
1c0038f2:	ebb1                	bnez	a5,1c003946 <ReadImageFromFile+0x304>
	unsigned int RowSize = W*3;
1c0038f4:	001c1713          	slli	a4,s8,0x1
1c0038f8:	01870a33          	add	s4,a4,s8
    unsigned char *InputBuf = (unsigned char *) __ALLOC_L2(RowSize * sizeof(unsigned char));
1c0038fc:	8552                	mv	a0,s4
	unsigned int RowSize = W*3;
1c0038fe:	c23a                	sw	a4,4(sp)
    unsigned char *InputBuf = (unsigned char *) __ALLOC_L2(RowSize * sizeof(unsigned char));
1c003900:	366050ef          	jal	ra,1c008c66 <pi_l2_malloc>
1c003904:	8aaa                	mv	s5,a0
    if(InputBuf == NULL)
1c003906:	2e050663          	beqz	a0,1c003bf2 <ReadImageFromFile+0x5b0>
	for (int CurRow=0; CurRow < H; CurRow++) {
1c00390a:	17705c63          	blez	s7,1c003a82 <ReadImageFromFile+0x440>
1c00390e:	4d01                	li	s10,0
		while (RemainBytes > 0) {
1c003910:	8b56                	mv	s6,s5
1c003912:	8dd2                	mv	s11,s4
1c003914:	01404663          	bgtz	s4,1c003920 <ReadImageFromFile+0x2de>
1c003918:	a20d                	j	1c003a3a <ReadImageFromFile+0x3f8>
			pInpBuf += len;
1c00391a:	9b2a                	add	s6,s6,a0
		while (RemainBytes > 0) {
1c00391c:	11b05f63          	blez	s11,1c003a3a <ReadImageFromFile+0x3f8>
			__int_ssize_t len = __READ(File, pInpBuf, RemainBytes);
1c003920:	866e                	mv	a2,s11
1c003922:	85da                	mv	a1,s6
1c003924:	8526                	mv	a0,s1
1c003926:	7c0020ef          	jal	ra,1c0060e6 <pi_fs_read>
			RemainBytes -= len;
1c00392a:	40ad8db3          	sub	s11,s11,a0
			if (!len) return 1;
1c00392e:	f575                	bnez	a0,1c00391a <ReadImageFromFile+0x2d8>
1c003930:	bf51                	j	1c0038c4 <ReadImageFromFile+0x282>
			printf("Buffer is too small, %s\n", ImageName); goto Fail;
1c003932:	1c00c537          	lui	a0,0x1c00c
1c003936:	85a2                	mv	a1,s0
1c003938:	2cc50513          	addi	a0,a0,716 # 1c00c2cc <__clz_tab+0x43c>
1c00393c:	434070ef          	jal	ra,1c00ad70 <printf>
1c003940:	b35d                	j	1c0036e6 <ReadImageFromFile+0xa4>
	else *InputShort = 0;
1c003942:	c602                	sw	zero,12(sp)
1c003944:	b585                	j	1c0037a4 <ReadImageFromFile+0x162>
	unsigned int RowSize = W*BytesPerPixel, ChannelSize = W * H;
1c003946:	03898733          	mul	a4,s3,s8
    unsigned char *InputBuf = (unsigned char *) __ALLOC_L2(RowSize * sizeof(unsigned char));
1c00394a:	853a                	mv	a0,a4
	unsigned int RowSize = W*BytesPerPixel, ChannelSize = W * H;
1c00394c:	c43a                	sw	a4,8(sp)
    unsigned char *InputBuf = (unsigned char *) __ALLOC_L2(RowSize * sizeof(unsigned char));
1c00394e:	318050ef          	jal	ra,1c008c66 <pi_l2_malloc>
1c003952:	8b2a                	mv	s6,a0
    if(InputBuf == NULL)
1c003954:	28050f63          	beqz	a0,1c003bf2 <ReadImageFromFile+0x5b0>
	for (int CurRow=0; CurRow < H; CurRow++) {
1c003958:	07705b63          	blez	s7,1c0039ce <ReadImageFromFile+0x38c>
		int RemainBytes = RowSize*2;
1c00395c:	47a2                	lw	a5,8(sp)
1c00395e:	00199a13          	slli	s4,s3,0x1
	for (int CurRow=0; CurRow < H; CurRow++) {
1c003962:	c202                	sw	zero,4(sp)
		int RemainBytes = RowSize*2;
1c003964:	00179a93          	slli	s5,a5,0x1
		while (RemainBytes > 0) {
1c003968:	03505963          	blez	s5,1c00399a <ReadImageFromFile+0x358>
1c00396c:	8d5a                	mv	s10,s6
1c00396e:	8dd6                	mv	s11,s5
1c003970:	a021                	j	1c003978 <ReadImageFromFile+0x336>
			pInpBuf += len;
1c003972:	9d2a                	add	s10,s10,a0
		while (RemainBytes > 0) {
1c003974:	03b05363          	blez	s11,1c00399a <ReadImageFromFile+0x358>
			__int_ssize_t len = __READ(File, pInpBuf, RemainBytes);
1c003978:	866e                	mv	a2,s11
1c00397a:	85ea                	mv	a1,s10
1c00397c:	8526                	mv	a0,s1
1c00397e:	768020ef          	jal	ra,1c0060e6 <pi_fs_read>
			RemainBytes -= len;
1c003982:	40ad8db3          	sub	s11,s11,a0
			if (!len) return 1;
1c003986:	f575                	bnez	a0,1c003972 <ReadImageFromFile+0x330>
1c003988:	bf35                	j	1c0038c4 <ReadImageFromFile+0x282>
		printf("Failed to open file, %s\n", ImageName); goto Fail;
1c00398a:	1c00c537          	lui	a0,0x1c00c
1c00398e:	85a2                	mv	a1,s0
1c003990:	2b050513          	addi	a0,a0,688 # 1c00c2b0 <__clz_tab+0x420>
1c003994:	3dc070ef          	jal	ra,1c00ad70 <printf>
1c003998:	b3b9                	j	1c0036e6 <ReadImageFromFile+0xa4>
		for (int i=0; i < W; i++) {
1c00399a:	03805463          	blez	s8,1c0039c2 <ReadImageFromFile+0x380>
1c00399e:	875a                	mv	a4,s6
1c0039a0:	8566                	mv	a0,s9
1c0039a2:	85e2                	mv	a1,s8
1c0039a4:	00e5c07b          	lp.setup	x0,a1,1c0039c0 <ReadImageFromFile+0x37e>
1c0039a8:	00e98833          	add	a6,s3,a4
		while (RemainBytes > 0) {
1c0039ac:	86aa                	mv	a3,a0
1c0039ae:	40e807b3          	sub	a5,a6,a4
1c0039b2:	0047c0fb          	lp.setup	x1,a5,1c0039ba <ReadImageFromFile+0x378>
				pInBuffer[RowSize * CurRow + i * BytesPerPixel + j] = (short int) (InputBuf[i * BytesPerPixel + j]);
1c0039b6:	0017460b          	p.lbu	a2,1(a4!)
1c0039ba:	00c6912b          	p.sh	a2,2(a3!)
1c0039be:	8742                	mv	a4,a6
1c0039c0:	9552                	add	a0,a0,s4
	for (int CurRow=0; CurRow < H; CurRow++) {
1c0039c2:	4712                	lw	a4,4(sp)
1c0039c4:	9cd6                	add	s9,s9,s5
1c0039c6:	0705                	addi	a4,a4,1
1c0039c8:	c23a                	sw	a4,4(sp)
1c0039ca:	f8eb9fe3          	bne	s7,a4,1c003968 <ReadImageFromFile+0x326>
	__FREE_L2(InputBuf, RowSize);
1c0039ce:	45a2                	lw	a1,8(sp)
1c0039d0:	855a                	mv	a0,s6
1c0039d2:	2a2050ef          	jal	ra,1c008c74 <pi_l2_free>
	__CLOSE(File);
1c0039d6:	8526                	mv	a0,s1
1c0039d8:	6fe020ef          	jal	ra,1c0060d6 <pi_fs_close>
	__FS_DEINIT(fs);
1c0039dc:	1848                	addi	a0,sp,52
1c0039de:	6e8020ef          	jal	ra,1c0060c6 <pi_fs_unmount>
	PRINTF("Image %s, [W: %d, H: %d], Bytes per pixel %d, Size: %d bytes, Loaded successfully\n", ImageName, W, H, BytesPerPixel, Size);
1c0039e2:	1c00c537          	lui	a0,0x1c00c
1c0039e6:	87ca                	mv	a5,s2
1c0039e8:	874e                	mv	a4,s3
1c0039ea:	86de                	mv	a3,s7
1c0039ec:	8662                	mv	a2,s8
1c0039ee:	85a2                	mv	a1,s0
1c0039f0:	33850513          	addi	a0,a0,824 # 1c00c338 <__clz_tab+0x4a8>
1c0039f4:	37c070ef          	jal	ra,1c00ad70 <printf>
	return 0;
1c0039f8:	4501                	li	a0,0
1c0039fa:	b321                	j	1c003702 <ReadImageFromFile+0xc0>
1c0039fc:	03898a33          	mul	s4,s3,s8
				if (Transpose2CHW){
1c003a00:	4792                	lw	a5,4(sp)
    unsigned char *InputBuf = (unsigned char *) __ALLOC_L2(RowSize * sizeof(unsigned char));
1c003a02:	8552                	mv	a0,s4
				if (Transpose2CHW){
1c003a04:	c7c1                	beqz	a5,1c003a8c <ReadImageFromFile+0x44a>
    unsigned char *InputBuf = (unsigned char *) __ALLOC_L2(RowSize * sizeof(unsigned char));
1c003a06:	260050ef          	jal	ra,1c008c66 <pi_l2_malloc>
1c003a0a:	8aaa                	mv	s5,a0
    if(InputBuf == NULL)
1c003a0c:	1e050363          	beqz	a0,1c003bf2 <ReadImageFromFile+0x5b0>
	for (int CurRow=0; CurRow < H; CurRow++) {
1c003a10:	07705963          	blez	s7,1c003a82 <ReadImageFromFile+0x440>
1c003a14:	9ce2                	add	s9,s9,s8
1c003a16:	c202                	sw	zero,4(sp)
		while (RemainBytes > 0) {
1c003a18:	8dd6                	mv	s11,s5
1c003a1a:	8d52                	mv	s10,s4
1c003a1c:	01404663          	bgtz	s4,1c003a28 <ReadImageFromFile+0x3e6>
1c003a20:	a8e9                	j	1c003afa <ReadImageFromFile+0x4b8>
			pInpBuf += len;
1c003a22:	9daa                	add	s11,s11,a0
		while (RemainBytes > 0) {
1c003a24:	0da05b63          	blez	s10,1c003afa <ReadImageFromFile+0x4b8>
			__int_ssize_t len = __READ(File, pInpBuf, RemainBytes);
1c003a28:	866a                	mv	a2,s10
1c003a2a:	85ee                	mv	a1,s11
1c003a2c:	8526                	mv	a0,s1
1c003a2e:	6b8020ef          	jal	ra,1c0060e6 <pi_fs_read>
			RemainBytes -= len;
1c003a32:	40ad0d33          	sub	s10,s10,a0
			if (!len) return 1;
1c003a36:	f575                	bnez	a0,1c003a22 <ReadImageFromFile+0x3e0>
1c003a38:	b571                	j	1c0038c4 <ReadImageFromFile+0x282>
		for (int j=0, i=0; i < W; i++) {
1c003a3a:	1b805863          	blez	s8,1c003bea <ReadImageFromFile+0x5a8>
1c003a3e:	4712                	lw	a4,4(sp)
1c003a40:	86d6                	mv	a3,s5
1c003a42:	01970533          	add	a0,a4,s9
1c003a46:	419505b3          	sub	a1,a0,s9
1c003a4a:	15f9                	addi	a1,a1,-2
1c003a4c:	8185                	srli	a1,a1,0x1
1c003a4e:	0585                	addi	a1,a1,1
1c003a50:	0145c0fb          	lp.setup	x1,a1,1c003a78 <ReadImageFromFile+0x436>
			pInBuffer[W * CurRow + i] = ((((uint16_t)InputBuf[j]&0xf8)<<8)|(((uint16_t)InputBuf[j+1]&0xfc)<<3)|(((uint16_t)InputBuf[j+2]&0xf8)>>3));
1c003a54:	0006c783          	lbu	a5,0(a3)
1c003a58:	0016c703          	lbu	a4,1(a3)
1c003a5c:	0026c603          	lbu	a2,2(a3)
1c003a60:	07a2                	slli	a5,a5,0x8
1c003a62:	070e                	slli	a4,a4,0x3
1c003a64:	7e077713          	andi	a4,a4,2016
1c003a68:	d407b7b3          	p.bclr	a5,a5,10,0
1c003a6c:	8fd9                	or	a5,a5,a4
1c003a6e:	00365713          	srli	a4,a2,0x3
1c003a72:	8fd9                	or	a5,a5,a4
1c003a74:	00fc912b          	p.sh	a5,2(s9!)
1c003a78:	068d                	addi	a3,a3,3
	for (int CurRow=0; CurRow < H; CurRow++) {
1c003a7a:	0d05                	addi	s10,s10,1
1c003a7c:	8caa                	mv	s9,a0
1c003a7e:	e9ab99e3          	bne	s7,s10,1c003910 <ReadImageFromFile+0x2ce>
	__FREE_L2(InputBuf, RowSize);
1c003a82:	85d2                	mv	a1,s4
1c003a84:	8556                	mv	a0,s5
1c003a86:	1ee050ef          	jal	ra,1c008c74 <pi_l2_free>
1c003a8a:	b7b1                	j	1c0039d6 <ReadImageFromFile+0x394>
    unsigned char *InputBuf = (unsigned char *) __ALLOC_L2(RowSize * sizeof(unsigned char));
1c003a8c:	1da050ef          	jal	ra,1c008c66 <pi_l2_malloc>
1c003a90:	8b2a                	mv	s6,a0
    if(InputBuf == NULL)
1c003a92:	16050063          	beqz	a0,1c003bf2 <ReadImageFromFile+0x5b0>
	for (int CurRow=0; CurRow < H; CurRow++) {
1c003a96:	0d705a63          	blez	s7,1c003b6a <ReadImageFromFile+0x528>
1c003a9a:	4d01                	li	s10,0
		while (RemainBytes > 0) {
1c003a9c:	8dda                	mv	s11,s6
1c003a9e:	8ad2                	mv	s5,s4
1c003aa0:	01404663          	bgtz	s4,1c003aac <ReadImageFromFile+0x46a>
1c003aa4:	aa11                	j	1c003bb8 <ReadImageFromFile+0x576>
			pInpBuf += len;
1c003aa6:	9daa                	add	s11,s11,a0
		while (RemainBytes > 0) {
1c003aa8:	11505863          	blez	s5,1c003bb8 <ReadImageFromFile+0x576>
			__int_ssize_t len = __READ(File, pInpBuf, RemainBytes);
1c003aac:	8656                	mv	a2,s5
1c003aae:	85ee                	mv	a1,s11
1c003ab0:	8526                	mv	a0,s1
1c003ab2:	634020ef          	jal	ra,1c0060e6 <pi_fs_read>
			RemainBytes -= len;
1c003ab6:	40aa8ab3          	sub	s5,s5,a0
			if (!len) return 1;
1c003aba:	f575                	bnez	a0,1c003aa6 <ReadImageFromFile+0x464>
1c003abc:	b521                	j	1c0038c4 <ReadImageFromFile+0x282>
    unsigned char *InputBuf = (unsigned char *) __ALLOC_L2(RowSize * sizeof(unsigned char));
1c003abe:	1a8050ef          	jal	ra,1c008c66 <pi_l2_malloc>
1c003ac2:	8b2a                	mv	s6,a0
    if(InputBuf == NULL)
1c003ac4:	12050763          	beqz	a0,1c003bf2 <ReadImageFromFile+0x5b0>
	for (int CurRow=0; CurRow < H; CurRow++) {
1c003ac8:	0b705163          	blez	s7,1c003b6a <ReadImageFromFile+0x528>
1c003acc:	001a1793          	slli	a5,s4,0x1
1c003ad0:	c43e                	sw	a5,8(sp)
1c003ad2:	00199a93          	slli	s5,s3,0x1
1c003ad6:	c202                	sw	zero,4(sp)
		while (RemainBytes > 0) {
1c003ad8:	8d5a                	mv	s10,s6
1c003ada:	8dd2                	mv	s11,s4
1c003adc:	01404663          	bgtz	s4,1c003ae8 <ReadImageFromFile+0x4a6>
1c003ae0:	a891                	j	1c003b34 <ReadImageFromFile+0x4f2>
			pInpBuf += len;
1c003ae2:	9d2a                	add	s10,s10,a0
		while (RemainBytes > 0) {
1c003ae4:	05b05863          	blez	s11,1c003b34 <ReadImageFromFile+0x4f2>
			__int_ssize_t len = __READ(File, pInpBuf, RemainBytes);
1c003ae8:	866e                	mv	a2,s11
1c003aea:	85ea                	mv	a1,s10
1c003aec:	8526                	mv	a0,s1
1c003aee:	5f8020ef          	jal	ra,1c0060e6 <pi_fs_read>
			RemainBytes -= len;
1c003af2:	40ad8db3          	sub	s11,s11,a0
			if (!len) return 1;
1c003af6:	f575                	bnez	a0,1c003ae2 <ReadImageFromFile+0x4a0>
1c003af8:	b3f1                	j	1c0038c4 <ReadImageFromFile+0x282>
1c003afa:	418c85b3          	sub	a1,s9,s8
1c003afe:	8756                	mv	a4,s5
1c003b00:	40bc8533          	sub	a0,s9,a1
		for (int i=0; i < W; i++) {
1c003b04:	03805163          	blez	s8,1c003b26 <ReadImageFromFile+0x4e4>
1c003b08:	00e5407b          	lp.setup	x0,a0,1c003b24 <ReadImageFromFile+0x4e2>
1c003b0c:	013708b3          	add	a7,a4,s3
		while (RemainBytes > 0) {
1c003b10:	86ae                	mv	a3,a1
1c003b12:	40e887b3          	sub	a5,a7,a4
1c003b16:	0047c0fb          	lp.setup	x1,a5,1c003b1e <ReadImageFromFile+0x4dc>
				pInBuffer[ChannelSize * j + W * CurRow + i] = InputBuf[i * BytesPerPixel + j];
1c003b1a:	0017460b          	p.lbu	a2,1(a4!)
1c003b1e:	00c6cb2b          	p.sb	a2,s6(a3!)
1c003b22:	8746                	mv	a4,a7
1c003b24:	0585                	addi	a1,a1,1
	for (int CurRow=0; CurRow < H; CurRow++) {
1c003b26:	4712                	lw	a4,4(sp)
1c003b28:	9ce2                	add	s9,s9,s8
1c003b2a:	0705                	addi	a4,a4,1
1c003b2c:	c23a                	sw	a4,4(sp)
1c003b2e:	ef7715e3          	bne	a4,s7,1c003a18 <ReadImageFromFile+0x3d6>
1c003b32:	bf81                	j	1c003a82 <ReadImageFromFile+0x440>
		for (int i=0; i < W; i++) {
1c003b34:	03805463          	blez	s8,1c003b5c <ReadImageFromFile+0x51a>
1c003b38:	875a                	mv	a4,s6
1c003b3a:	8566                	mv	a0,s9
1c003b3c:	85e2                	mv	a1,s8
1c003b3e:	00e5c07b          	lp.setup	x0,a1,1c003b5a <ReadImageFromFile+0x518>
1c003b42:	00e98833          	add	a6,s3,a4
		while (RemainBytes > 0) {
1c003b46:	86aa                	mv	a3,a0
1c003b48:	40e807b3          	sub	a5,a6,a4
1c003b4c:	0047c0fb          	lp.setup	x1,a5,1c003b54 <ReadImageFromFile+0x512>
				pInBuffer[RowSize * CurRow + i * BytesPerPixel + j] = (short int) (InputBuf[i * BytesPerPixel + j]);
1c003b50:	0017460b          	p.lbu	a2,1(a4!)
1c003b54:	00c6912b          	p.sh	a2,2(a3!)
1c003b58:	8742                	mv	a4,a6
1c003b5a:	9556                	add	a0,a0,s5
	for (int CurRow=0; CurRow < H; CurRow++) {
1c003b5c:	4712                	lw	a4,4(sp)
1c003b5e:	47a2                	lw	a5,8(sp)
1c003b60:	0705                	addi	a4,a4,1
1c003b62:	c23a                	sw	a4,4(sp)
1c003b64:	9cbe                	add	s9,s9,a5
1c003b66:	f77719e3          	bne	a4,s7,1c003ad8 <ReadImageFromFile+0x496>
	__FREE_L2(InputBuf, RowSize);
1c003b6a:	85d2                	mv	a1,s4
1c003b6c:	855a                	mv	a0,s6
1c003b6e:	106050ef          	jal	ra,1c008c74 <pi_l2_free>
1c003b72:	b595                	j	1c0039d6 <ReadImageFromFile+0x394>
1c003b74:	47b2                	lw	a5,12(sp)
1c003b76:	8756                	mv	a4,s5
1c003b78:	00fc8533          	add	a0,s9,a5
		for (int i=0; i < W; i++) {
1c003b7c:	03805663          	blez	s8,1c003ba8 <ReadImageFromFile+0x566>
1c003b80:	40ac85b3          	sub	a1,s9,a0
1c003b84:	15f9                	addi	a1,a1,-2
1c003b86:	8185                	srli	a1,a1,0x1
1c003b88:	0585                	addi	a1,a1,1
1c003b8a:	00e5c07b          	lp.setup	x0,a1,1c003ba6 <ReadImageFromFile+0x564>
1c003b8e:	013708b3          	add	a7,a4,s3
		while (RemainBytes > 0) {
1c003b92:	86aa                	mv	a3,a0
1c003b94:	40e887b3          	sub	a5,a7,a4
1c003b98:	0047c0fb          	lp.setup	x1,a5,1c003ba0 <ReadImageFromFile+0x55e>
				pInBuffer[ChannelSize * j + W * CurRow + i] = (short int) (InputBuf[i * BytesPerPixel + j]);
1c003b9c:	0017460b          	p.lbu	a2,1(a4!)
1c003ba0:	00c6db2b          	p.sh	a2,s6(a3!)
1c003ba4:	8746                	mv	a4,a7
1c003ba6:	0509                	addi	a0,a0,2
	for (int CurRow=0; CurRow < H; CurRow++) {
1c003ba8:	4792                	lw	a5,4(sp)
1c003baa:	4722                	lw	a4,8(sp)
1c003bac:	0785                	addi	a5,a5,1
1c003bae:	c23e                	sw	a5,4(sp)
1c003bb0:	9cba                	add	s9,s9,a4
1c003bb2:	cf7799e3          	bne	a5,s7,1c0038a4 <ReadImageFromFile+0x262>
1c003bb6:	b5f1                	j	1c003a82 <ReadImageFromFile+0x440>
		for (int i=0; i < W; i++) {
1c003bb8:	03805463          	blez	s8,1c003be0 <ReadImageFromFile+0x59e>
1c003bbc:	87da                	mv	a5,s6
1c003bbe:	85e6                	mv	a1,s9
1c003bc0:	8662                	mv	a2,s8
1c003bc2:	00e6407b          	lp.setup	x0,a2,1c003bde <ReadImageFromFile+0x59c>
1c003bc6:	01378533          	add	a0,a5,s3
		while (RemainBytes > 0) {
1c003bca:	86ae                	mv	a3,a1
1c003bcc:	40f50733          	sub	a4,a0,a5
1c003bd0:	004740fb          	lp.setup	x1,a4,1c003bd8 <ReadImageFromFile+0x596>
				pInBuffer[RowSize * CurRow + i * BytesPerPixel + j] = InputBuf[i * BytesPerPixel + j];
1c003bd4:	0017c80b          	p.lbu	a6,1(a5!)
1c003bd8:	010680ab          	p.sb	a6,1(a3!)
1c003bdc:	87aa                	mv	a5,a0
1c003bde:	95ce                	add	a1,a1,s3
	for (int CurRow=0; CurRow < H; CurRow++) {
1c003be0:	0d05                	addi	s10,s10,1
1c003be2:	9cd2                	add	s9,s9,s4
1c003be4:	eb7d1ce3          	bne	s10,s7,1c003a9c <ReadImageFromFile+0x45a>
1c003be8:	b749                	j	1c003b6a <ReadImageFromFile+0x528>
1c003bea:	4792                	lw	a5,4(sp)
1c003bec:	01978533          	add	a0,a5,s9
1c003bf0:	b569                	j	1c003a7a <ReadImageFromFile+0x438>
        printf("Malloc failed when loading image\n");
1c003bf2:	1c00c537          	lui	a0,0x1c00c
1c003bf6:	2e850513          	addi	a0,a0,744 # 1c00c2e8 <__clz_tab+0x458>
1c003bfa:	7e1060ef          	jal	ra,1c00abda <puts>
1c003bfe:	b1d9                	j	1c0038c4 <ReadImageFromFile+0x282>

1c003c00 <CNN_NormBW_offset_fps>:
{
	unsigned char *__restrict__ In = Arg->In;
	signed char *__restrict__ Out = Arg->Out;
	unsigned int W = Arg->W;
	unsigned int H = Arg->H;
	unsigned int Sz = W * H;
1c003c00:	4558                	lw	a4,12(a0)
1c003c02:	4514                	lw	a3,8(a0)
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Sz), First = Chunk*CoreId, Last = Min(First+Chunk, Sz);
1c003c04:	f14027f3          	csrr	a5,mhartid
	unsigned char *__restrict__ In = Arg->In;
1c003c08:	410c                	lw	a1,0(a0)
	unsigned int Sz = W * H;
1c003c0a:	02e686b3          	mul	a3,a3,a4
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Sz), First = Chunk*CoreId, Last = Min(First+Chunk, Sz);
1c003c0e:	c80797b3          	p.extractu	a5,a5,4,0
	signed char *__restrict__ Out = Arg->Out;
1c003c12:	00452803          	lw	a6,4(a0)
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c003c16:	f836b733          	p.bclr	a4,a3,28,3
1c003c1a:	0036d613          	srli	a2,a3,0x3
1c003c1e:	00e03733          	snez	a4,a4
1c003c22:	9732                	add	a4,a4,a2
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Sz), First = Chunk*CoreId, Last = Min(First+Chunk, Sz);
1c003c24:	02e787b3          	mul	a5,a5,a4
1c003c28:	973e                	add	a4,a4,a5
1c003c2a:	04d746b3          	p.min	a3,a4,a3

	for (int Idx=First; Idx<Last; Idx++) {
1c003c2e:	8e3e                	mv	t3,a5
1c003c30:	12d7fd63          	bleu	a3,a5,1c003d6a <CNN_NormBW_offset_fps+0x16a>
1c003c34:	00478713          	addi	a4,a5,4
1c003c38:	00e58633          	add	a2,a1,a4
1c003c3c:	00f80333          	add	t1,a6,a5
1c003c40:	00f58533          	add	a0,a1,a5
1c003c44:	9742                	add	a4,a4,a6
1c003c46:	04663633          	p.sletu	a2,a2,t1
1c003c4a:	04a73733          	p.sletu	a4,a4,a0
1c003c4e:	8f51                	or	a4,a4,a2
1c003c50:	0ff77713          	andi	a4,a4,255
1c003c54:	40f688b3          	sub	a7,a3,a5
1c003c58:	12070263          	beqz	a4,1c003d7c <CNN_NormBW_offset_fps+0x17c>
1c003c5c:	0078b713          	sltiu	a4,a7,7
1c003c60:	00174713          	xori	a4,a4,1
1c003c64:	0ff77713          	andi	a4,a4,255
1c003c68:	10070a63          	beqz	a4,1c003d7c <CNN_NormBW_offset_fps+0x17c>
1c003c6c:	40a00733          	neg	a4,a0
1c003c70:	fa273733          	p.bclr	a4,a4,29,2
1c003c74:	fff68613          	addi	a2,a3,-1
1c003c78:	8e1d                	sub	a2,a2,a5
1c003c7a:	00370e93          	addi	t4,a4,3
1c003c7e:	07d66e63          	bltu	a2,t4,1c003cfa <CNN_NormBW_offset_fps+0xfa>
1c003c82:	cb7d                	beqz	a4,1c003d78 <CNN_NormBW_offset_fps+0x178>
		Out[Idx] = In[Idx] - 128;
1c003c84:	00054603          	lbu	a2,0(a0)
	for (int Idx=First; Idx<Last; Idx++) {
1c003c88:	00178e13          	addi	t3,a5,1
1c003c8c:	8ef2                	mv	t4,t3
		Out[Idx] = In[Idx] - 128;
1c003c8e:	f8060613          	addi	a2,a2,-128
1c003c92:	00c30023          	sb	a2,0(t1)
1c003c96:	02172663          	p.beqimm	a4,1,1c003cc2 <CNN_NormBW_offset_fps+0xc2>
1c003c9a:	41c5f603          	p.lbu	a2,t3(a1)
1c003c9e:	f8060613          	addi	a2,a2,-128
1c003ca2:	00c84e23          	p.sb	a2,t3(a6)
	for (int Idx=First; Idx<Last; Idx++) {
1c003ca6:	00278e13          	addi	t3,a5,2
1c003caa:	8ef2                	mv	t4,t3
1c003cac:	00373b63          	p.bneimm	a4,3,1c003cc2 <CNN_NormBW_offset_fps+0xc2>
		Out[Idx] = In[Idx] - 128;
1c003cb0:	41c5f603          	p.lbu	a2,t3(a1)
1c003cb4:	f8060613          	addi	a2,a2,-128
1c003cb8:	00c84e23          	p.sb	a2,t3(a6)
	for (int Idx=First; Idx<Last; Idx++) {
1c003cbc:	00378e13          	addi	t3,a5,3
1c003cc0:	8ef2                	mv	t4,t3
1c003cc2:	40e888b3          	sub	a7,a7,a4
1c003cc6:	97ba                	add	a5,a5,a4
		Out[Idx] = In[Idx] - 128;
1c003cc8:	0028d613          	srli	a2,a7,0x2
1c003ccc:	1c00c737          	lui	a4,0x1c00c
1c003cd0:	00f80533          	add	a0,a6,a5
1c003cd4:	3b072303          	lw	t1,944(a4) # 1c00c3b0 <__clz_tab+0x520>
1c003cd8:	97ae                	add	a5,a5,a1
1c003cda:	c279                	beqz	a2,1c003da0 <CNN_NormBW_offset_fps+0x1a0>
1c003cdc:	006640fb          	lp.setup	x1,a2,1c003ce8 <CNN_NormBW_offset_fps+0xe8>
1c003ce0:	0047a70b          	p.lw	a4,4(a5!)
1c003ce4:	00671757          	pv.add.b	a4,a4,t1
1c003ce8:	00e5222b          	p.sw	a4,4(a0!)
1c003cec:	c208b733          	p.bclr	a4,a7,1,0
1c003cf0:	00ee87b3          	add	a5,t4,a4
1c003cf4:	9e3a                	add	t3,t3,a4
1c003cf6:	06e88a63          	beq	a7,a4,1c003d6a <CNN_NormBW_offset_fps+0x16a>
1c003cfa:	40f5f703          	p.lbu	a4,a5(a1)
	for (int Idx=First; Idx<Last; Idx++) {
1c003cfe:	001e0613          	addi	a2,t3,1 # 800001 <__L2+0x780001>
		Out[Idx] = In[Idx] - 128;
1c003d02:	f8070713          	addi	a4,a4,-128
1c003d06:	00e847a3          	p.sb	a4,a5(a6)
	for (int Idx=First; Idx<Last; Idx++) {
1c003d0a:	06d67063          	bleu	a3,a2,1c003d6a <CNN_NormBW_offset_fps+0x16a>
		Out[Idx] = In[Idx] - 128;
1c003d0e:	40c5f783          	p.lbu	a5,a2(a1)
	for (int Idx=First; Idx<Last; Idx++) {
1c003d12:	002e0713          	addi	a4,t3,2
		Out[Idx] = In[Idx] - 128;
1c003d16:	f8078793          	addi	a5,a5,-128
1c003d1a:	00f84623          	p.sb	a5,a2(a6)
	for (int Idx=First; Idx<Last; Idx++) {
1c003d1e:	04d77663          	bleu	a3,a4,1c003d6a <CNN_NormBW_offset_fps+0x16a>
		Out[Idx] = In[Idx] - 128;
1c003d22:	40e5f783          	p.lbu	a5,a4(a1)
	for (int Idx=First; Idx<Last; Idx++) {
1c003d26:	003e0613          	addi	a2,t3,3
		Out[Idx] = In[Idx] - 128;
1c003d2a:	f8078793          	addi	a5,a5,-128
1c003d2e:	00f84723          	p.sb	a5,a4(a6)
	for (int Idx=First; Idx<Last; Idx++) {
1c003d32:	02d67c63          	bleu	a3,a2,1c003d6a <CNN_NormBW_offset_fps+0x16a>
		Out[Idx] = In[Idx] - 128;
1c003d36:	40c5f783          	p.lbu	a5,a2(a1)
	for (int Idx=First; Idx<Last; Idx++) {
1c003d3a:	004e0713          	addi	a4,t3,4
		Out[Idx] = In[Idx] - 128;
1c003d3e:	f8078793          	addi	a5,a5,-128
1c003d42:	00f84623          	p.sb	a5,a2(a6)
	for (int Idx=First; Idx<Last; Idx++) {
1c003d46:	02d77263          	bleu	a3,a4,1c003d6a <CNN_NormBW_offset_fps+0x16a>
		Out[Idx] = In[Idx] - 128;
1c003d4a:	40e5f603          	p.lbu	a2,a4(a1)
	for (int Idx=First; Idx<Last; Idx++) {
1c003d4e:	005e0793          	addi	a5,t3,5
		Out[Idx] = In[Idx] - 128;
1c003d52:	f8060613          	addi	a2,a2,-128
1c003d56:	00c84723          	p.sb	a2,a4(a6)
	for (int Idx=First; Idx<Last; Idx++) {
1c003d5a:	00d7f863          	bleu	a3,a5,1c003d6a <CNN_NormBW_offset_fps+0x16a>
		Out[Idx] = In[Idx] - 128;
1c003d5e:	40f5f703          	p.lbu	a4,a5(a1)
1c003d62:	f8070713          	addi	a4,a4,-128
1c003d66:	00e847a3          	p.sb	a4,a5(a6)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003d6a:	002047b7          	lui	a5,0x204
1c003d6e:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c003d72:	01c7e703          	p.elw	a4,28(a5)
	}
	gap_waitbarrier(0);
}
1c003d76:	8082                	ret
	for (int Idx=First; Idx<Last; Idx++) {
1c003d78:	8ebe                	mv	t4,a5
1c003d7a:	b7a1                	j	1c003cc2 <CNN_NormBW_offset_fps+0xc2>
1c003d7c:	96ae                	add	a3,a3,a1
1c003d7e:	879a                	mv	a5,t1
1c003d80:	8e89                	sub	a3,a3,a0
1c003d82:	0066c0fb          	lp.setup	x1,a3,1c003d8e <CNN_NormBW_offset_fps+0x18e>
		Out[Idx] = In[Idx] - 128;
1c003d86:	0015470b          	p.lbu	a4,1(a0!)
1c003d8a:	f8070713          	addi	a4,a4,-128
1c003d8e:	00e780ab          	p.sb	a4,1(a5!)
1c003d92:	002047b7          	lui	a5,0x204
1c003d96:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c003d9a:	01c7e703          	p.elw	a4,28(a5)
}
1c003d9e:	8082                	ret
1c003da0:	4605                	li	a2,1
1c003da2:	bf2d                	j	1c003cdc <CNN_NormBW_offset_fps+0xdc>

1c003da4 <KerReductIO_Compact_SQ8_1>:
	unsigned int ActScale = ((unsigned char *)Infos)[AT_INF_ACTSCALE], ActScaleN = ((unsigned char *)Infos)[AT_INF_ACTSCALEN];
	int A0 = Infos[AT_INF_A0], B0 = Infos[AT_INF_B0], C0 = Infos[AT_INF_C0];

	for (int c=First; c<Last; c++) KerReduct_Activation_HWC_SQ8(In+W*H*c, Out+c, W*H, S, Scale[c], ScaleN[c], ACT_TANH, ActScale, ActScaleN, A0, B0, C0);
	gap_waitbarrier(0);
}
1c003da4:	7179                	addi	sp,sp,-48
1c003da6:	d24a                	sw	s2,36(sp)
1c003da8:	f1402973          	csrr	s2,mhartid
1c003dac:	f83637b3          	p.bclr	a5,a2,28,3
1c003db0:	00365713          	srli	a4,a2,0x3
1c003db4:	00f037b3          	snez	a5,a5
1c003db8:	97ba                	add	a5,a5,a4
1c003dba:	c8091933          	p.extractu	s2,s2,4,0
1c003dbe:	02f90733          	mul	a4,s2,a5
1c003dc2:	d622                	sw	s0,44(sp)
1c003dc4:	d426                	sw	s1,40(sp)
1c003dc6:	d04e                	sw	s3,32(sp)
1c003dc8:	ce52                	sw	s4,28(sp)
1c003dca:	cc56                	sw	s5,24(sp)
1c003dcc:	ca5a                	sw	s6,20(sp)
1c003dce:	c85e                	sw	s7,16(sp)
1c003dd0:	c662                	sw	s8,12(sp)
1c003dd2:	c466                	sw	s9,8(sp)
1c003dd4:	97ba                	add	a5,a5,a4
1c003dd6:	04c7c7b3          	p.min	a5,a5,a2
1c003dda:	c26a                	sw	s10,4(sp)
1c003ddc:	40e78fb3          	sub	t6,a5,a4
1c003de0:	0cd65163          	ble	a3,a2,1c003ea2 <KerReductIO_Compact_SQ8_1+0xfe>
1c003de4:	040fe7b3          	p.max	a5,t6,zero
1c003de8:	0037da13          	srli	s4,a5,0x3
1c003dec:	fff78813          	addi	a6,a5,-1
1c003df0:	983a                	add	a6,a6,a4
1c003df2:	00261c13          	slli	s8,a2,0x2
1c003df6:	003a1413          	slli	s0,s4,0x3
1c003dfa:	4e85                	li	t4,1
1c003dfc:	010c08b3          	add	a7,s8,a6
1c003e00:	8c1d                	sub	s0,s0,a5
1c003e02:	9832                	add	a6,a6,a2
1c003e04:	40fe8eb3          	sub	t4,t4,a5
1c003e08:	c407b9b3          	p.bclr	s3,a5,2,0
1c003e0c:	c207b933          	p.bclr	s2,a5,1,0
1c003e10:	4f95                	li	t6,5
1c003e12:	002044b7          	lui	s1,0x204
1c003e16:	0047fb93          	andi	s7,a5,4
1c003e1a:	0027fb13          	andi	s6,a5,2
1c003e1e:	fc17bab3          	p.bclr	s5,a5,30,1
1c003e22:	95c6                	add	a1,a1,a7
1c003e24:	9542                	add	a0,a0,a6
1c003e26:	8e32                	mv	t3,a2
1c003e28:	40ee8f33          	sub	t5,t4,a4
1c003e2c:	40ff8fb3          	sub	t6,t6,a5
1c003e30:	0405                	addi	s0,s0,1
1c003e32:	99ba                	add	s3,s3,a4
1c003e34:	993a                	add	s2,s2,a4
1c003e36:	20048493          	addi	s1,s1,512 # 204200 <__L2+0x184200>
1c003e3a:	00bf03b3          	add	t2,t5,a1
1c003e3e:	00af02b3          	add	t0,t5,a0
1c003e42:	020a0963          	beqz	s4,1c003e74 <KerReductIO_Compact_SQ8_1+0xd0>
1c003e46:	41d407b3          	sub	a5,s0,t4
1c003e4a:	17e1                	addi	a5,a5,-8
1c003e4c:	838d                	srli	a5,a5,0x3
1c003e4e:	00ae8333          	add	t1,t4,a0
1c003e52:	01f588b3          	add	a7,a1,t6
1c003e56:	00af8833          	add	a6,t6,a0
1c003e5a:	00be8733          	add	a4,t4,a1
1c003e5e:	0785                	addi	a5,a5,1
1c003e60:	0087c0fb          	lp.setup	x1,a5,1c003e70 <KerReductIO_Compact_SQ8_1+0xcc>
1c003e64:	00872d0b          	p.lw	s10,8(a4!)
1c003e68:	0088ac8b          	p.lw	s9,8(a7!)
1c003e6c:	01a3242b          	p.sw	s10,8(t1!)
1c003e70:	0198242b          	p.sw	s9,8(a6!)
1c003e74:	000b8663          	beqz	s7,1c003e80 <KerReductIO_Compact_SQ8_1+0xdc>
1c003e78:	2133f783          	p.lw	a5,s3(t2)
1c003e7c:	00f2e9a3          	p.sw	a5,s3(t0)
1c003e80:	000b0663          	beqz	s6,1c003e8c <KerReductIO_Compact_SQ8_1+0xe8>
1c003e84:	5123f783          	p.lhu	a5,s2(t2)
1c003e88:	00f2d923          	p.sh	a5,s2(t0)
1c003e8c:	020a8863          	beqz	s5,1c003ebc <KerReductIO_Compact_SQ8_1+0x118>
1c003e90:	4185f78b          	p.lbu	a5,s8(a1!)
1c003e94:	00f5462b          	p.sb	a5,a2(a0!)
1c003e98:	01c4e783          	p.elw	a5,28(s1)
1c003e9c:	9e32                	add	t3,t3,a2
1c003e9e:	f8de4ee3          	blt	t3,a3,1c003e3a <KerReductIO_Compact_SQ8_1+0x96>
1c003ea2:	5432                	lw	s0,44(sp)
1c003ea4:	54a2                	lw	s1,40(sp)
1c003ea6:	5912                	lw	s2,36(sp)
1c003ea8:	5982                	lw	s3,32(sp)
1c003eaa:	4a72                	lw	s4,28(sp)
1c003eac:	4ae2                	lw	s5,24(sp)
1c003eae:	4b52                	lw	s6,20(sp)
1c003eb0:	4bc2                	lw	s7,16(sp)
1c003eb2:	4c32                	lw	s8,12(sp)
1c003eb4:	4ca2                	lw	s9,8(sp)
1c003eb6:	4d12                	lw	s10,4(sp)
1c003eb8:	6145                	addi	sp,sp,48
1c003eba:	8082                	ret
1c003ebc:	01c4e783          	p.elw	a5,28(s1)
1c003ec0:	9e32                	add	t3,t3,a2
1c003ec2:	95e2                	add	a1,a1,s8
1c003ec4:	9532                	add	a0,a0,a2
1c003ec6:	f6de4ae3          	blt	t3,a3,1c003e3a <KerReductIO_Compact_SQ8_1+0x96>
1c003eca:	bfe1                	j	1c003ea2 <KerReductIO_Compact_SQ8_1+0xfe>

1c003ecc <KerParReductIO_CC_SQ8>:
extern void DumpFeaturePlanes(char *Mess, int DataSize, void *Plane, unsigned int NPlanes, unsigned int W, unsigned int Wmax, unsigned int H, unsigned int Hmax);

void KerParReductIO_CC_SQ8(KerConvLinReduct_SQ8_T *Arg)

{
	unsigned int S = Arg->Feat;
1c003ecc:	00855703          	lhu	a4,8(a0)
	unsigned int Size = Arg->W*Arg->H;
	unsigned int W = Arg->W, H = Arg->H;
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(S), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, S);
1c003ed0:	f14027f3          	csrr	a5,mhartid
	unsigned int Size = Arg->W*Arg->H;
1c003ed4:	00a55803          	lhu	a6,10(a0)
        Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c003ed8:	f8373633          	p.bclr	a2,a4,28,3
1c003edc:	00375593          	srli	a1,a4,0x3
	unsigned int Size = Arg->W*Arg->H;
1c003ee0:	00c55683          	lhu	a3,12(a0)
        Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c003ee4:	00c03633          	snez	a2,a2
1c003ee8:	962e                	add	a2,a2,a1
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(S), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, S);
1c003eea:	c80797b3          	p.extractu	a5,a5,4,0
1c003eee:	02c787b3          	mul	a5,a5,a2
	int * __restrict__ In = (int *__restrict__) Arg->In;
1c003ef2:	410c                	lw	a1,0(a0)
{
1c003ef4:	1141                	addi	sp,sp,-16
1c003ef6:	c622                	sw	s0,12(sp)
	signed char *__restrict__ Out = (signed char *__restrict__)(In+First*Size);
	unsigned char * __restrict__ Scale = (unsigned char *__restrict__) Arg->Scale;
1c003ef8:	01052283          	lw	t0,16(a0)
	unsigned char * __restrict__ ScaleN = (unsigned char *__restrict__) Arg->ScaleN;
1c003efc:	01452383          	lw	t2,20(a0)
	unsigned int Size = Arg->W*Arg->H;
1c003f00:	00d806db          	p.mac	a3,a6,a3,zero
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(S), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, S);
1c003f04:	00c78f33          	add	t5,a5,a2
	signed char *__restrict__ Out = (signed char *__restrict__)(In+First*Size);
1c003f08:	882e                	mv	a6,a1
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(S), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, S);
1c003f0a:	04ef4f33          	p.min	t5,t5,a4
1c003f0e:	00269413          	slli	s0,a3,0x2
	signed char *__restrict__ Out = (signed char *__restrict__)(In+First*Size);
1c003f12:	42f40833          	p.mac	a6,s0,a5
	signed char * __restrict__ Infos = (signed char *__restrict__) Arg->Infos;
	unsigned int ActScale = ((unsigned char *)Infos)[AT_INF_ACTSCALE], ActScaleN = ((unsigned char *)Infos)[AT_INF_ACTSCALEN];
	int A0 = Infos[AT_INF_A0], B0 = Infos[AT_INF_B0], C0 = Infos[AT_INF_C0];

	S = Size*Max(0, Last-First);
	for (int c=First; c<Last; Out+=Size, c++) KerReductIO_ActivationScale1_SQ8(Out, In+Size*c, Size, Scale[c], ScaleN[c], ACT_NONE, A0, B0, C0);
1c003f16:	05e7f163          	bleu	t5,a5,1c003f58 <KerParReductIO_CC_SQ8+0x8c>
1c003f1a:	ce9d                	beqz	a3,1c003f58 <KerParReductIO_CC_SQ8+0x8c>
1c003f1c:	93be                	add	t2,t2,a5
1c003f1e:	8fc2                	mv	t6,a6
1c003f20:	92be                	add	t0,t0,a5
1c003f22:	40ff0f33          	sub	t5,t5,a5
1c003f26:	018f407b          	lp.setup	x0,t5,1c003f56 <KerParReductIO_CC_SQ8+0x8a>
1c003f2a:	0012ce0b          	p.lbu	t3,1(t0!)
1c003f2e:	0013c30b          	p.lbu	t1,1(t2!)
1c003f32:	00d80eb3          	add	t4,a6,a3
1c003f36:	88fe                	mv	a7,t6
1c003f38:	410e8733          	sub	a4,t4,a6
1c003f3c:	00a740fb          	lp.setup	x1,a4,1c003f50 <KerParReductIO_CC_SQ8+0x84>
                int Acc0 = gap_clip(AT_SCALE(In[i], Scale, ScaleN), 7);
1c003f40:	0048a78b          	p.lw	a5,4(a7!)
1c003f44:	03c787b3          	mul	a5,a5,t3
1c003f48:	406067db          	p.mac.zh.sl	a5,zero,t1,zero
1c003f4c:	148797b3          	p.clip	a5,a5,8
                Out[i] = Acc0;
1c003f50:	00f800ab          	p.sb	a5,1(a6!)
	for (int c=First; c<Last; Out+=Size, c++) KerReductIO_ActivationScale1_SQ8(Out, In+Size*c, Size, Scale[c], ScaleN[c], ACT_NONE, A0, B0, C0);
1c003f54:	8876                	mv	a6,t4
1c003f56:	9fa2                	add	t6,t6,s0
1c003f58:	002047b7          	lui	a5,0x204
1c003f5c:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c003f60:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);
	// KerReductIO_Compact_SQ8(In, S, CoreId, ChunkCell*Size);
	KerReductIO_Compact_SQ8_1((signed char *__restrict__)In, (signed char *__restrict__)In, Size*ChunkCell, Size * Arg->Feat);
1c003f64:	00855783          	lhu	a5,8(a0)
1c003f68:	02c68633          	mul	a2,a3,a2
}
1c003f6c:	4432                	lw	s0,12(sp)
	KerReductIO_Compact_SQ8_1((signed char *__restrict__)In, (signed char *__restrict__)In, Size*ChunkCell, Size * Arg->Feat);
1c003f6e:	852e                	mv	a0,a1
}
1c003f70:	0141                	addi	sp,sp,16
	KerReductIO_Compact_SQ8_1((signed char *__restrict__)In, (signed char *__restrict__)In, Size*ChunkCell, Size * Arg->Feat);
1c003f72:	02d786b3          	mul	a3,a5,a3
1c003f76:	b53d                	j	1c003da4 <KerReductIO_Compact_SQ8_1>

1c003f78 <KerParSetBiasB32_SQ8>:
		if (InDim&0x4) Acc = gap_sumdotp4(VectIn[InDim/4-1], W[InDim/4-1], Acc);
		for (int j=4*(InDim/4); j<InDim; j++) Acc += In[j]*Weights[i*InDim+j];
		Out[i] = gap_clip(AT_SCALE(Acc, Scale[i], ScaleN[i]), 7);
	}
	gap_waitbarrier(0);
}
1c003f78:	00855603          	lhu	a2,8(a0)
1c003f7c:	f14026f3          	csrr	a3,mhartid
1c003f80:	4118                	lw	a4,0(a0)
1c003f82:	f83637b3          	p.bclr	a5,a2,28,3
1c003f86:	00365593          	srli	a1,a2,0x3
1c003f8a:	00f037b3          	snez	a5,a5
1c003f8e:	97ae                	add	a5,a5,a1
1c003f90:	c80696b3          	p.extractu	a3,a3,4,0
1c003f94:	02f686b3          	mul	a3,a3,a5
1c003f98:	00455303          	lhu	t1,4(a0)
1c003f9c:	00655583          	lhu	a1,6(a0)
1c003fa0:	00c52803          	lw	a6,12(a0)
1c003fa4:	01054e83          	lbu	t4,16(a0)
1c003fa8:	97b6                	add	a5,a5,a3
1c003faa:	04c7c7b3          	p.min	a5,a5,a2
1c003fae:	06f6f863          	bleu	a5,a3,1c00401e <KerParSetBiasB32_SQ8+0xa6>
1c003fb2:	02b30333          	mul	t1,t1,a1
1c003fb6:	00269613          	slli	a2,a3,0x2
1c003fba:	00279593          	slli	a1,a5,0x2
1c003fbe:	8d91                	sub	a1,a1,a2
1c003fc0:	15f1                	addi	a1,a1,-4
1c003fc2:	8189                	srli	a1,a1,0x2
1c003fc4:	4e11                	li	t3,4
1c003fc6:	9832                	add	a6,a6,a2
1c003fc8:	0585                	addi	a1,a1,1
1c003fca:	00231f93          	slli	t6,t1,0x2
1c003fce:	ffcf8893          	addi	a7,t6,-4
1c003fd2:	8546                	mv	a0,a7
1c003fd4:	42df8533          	p.mac	a0,t6,a3
1c003fd8:	00135313          	srli	t1,t1,0x1
1c003fdc:	00331f13          	slli	t5,t1,0x3
1c003fe0:	411f0f33          	sub	t5,t5,a7
1c003fe4:	411e0e33          	sub	t3,t3,a7
1c003fe8:	953a                	add	a0,a0,a4
1c003fea:	0195c07b          	lp.setup	x0,a1,1c00401c <KerParSetBiasB32_SQ8+0xa4>
1c003fee:	0048270b          	p.lw	a4,4(a6!)
1c003ff2:	01d71733          	sll	a4,a4,t4
1c003ff6:	02030163          	beqz	t1,1c004018 <KerParSetBiasB32_SQ8+0xa0>
1c003ffa:	01e887b3          	add	a5,a7,t5
1c003ffe:	17e1                	addi	a5,a5,-8
1c004000:	838d                	srli	a5,a5,0x3
1c004002:	00ae0633          	add	a2,t3,a0
1c004006:	411506b3          	sub	a3,a0,a7
1c00400a:	0785                	addi	a5,a5,1
1c00400c:	0047c0fb          	lp.setup	x1,a5,1c004014 <KerParSetBiasB32_SQ8+0x9c>
1c004010:	00e6a42b          	p.sw	a4,8(a3!)
1c004014:	00e6242b          	p.sw	a4,8(a2!)
1c004018:	00e56fab          	p.sw	a4,t6(a0!)
1c00401c:	0001                	nop
1c00401e:	002047b7          	lui	a5,0x204
1c004022:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c004026:	01c7e703          	p.elw	a4,28(a5)
1c00402a:	8082                	ret

1c00402c <KerParLinearLayerFullFeatB32_ReLU_SQ8>:

void KerParLinearLayerFullFeatB32_ReLU_SQ8(KerLinear_SQ8_T *Arg)

{
	signed char * __restrict__ In = Arg->In;
	unsigned int InDim = Arg->InDim, OutDim = Arg->OutDim;
1c00402c:	01455683          	lhu	a3,20(a0)
	unsigned int NormBias = ((unsigned char *)Arg->Infos)[AT_INF_BIASN];
	unsigned char *Scale = Arg->Scale;
	unsigned char *ScaleN = Arg->ScaleN;
	signed char * __restrict__ Out = (signed char * __restrict__) Arg->Out;

	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(OutDim), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, OutDim);
1c004030:	f14022f3          	csrr	t0,mhartid
	unsigned int NormBias = ((unsigned char *)Arg->Infos)[AT_INF_BIASN];
1c004034:	5110                	lw	a2,32(a0)
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c004036:	f836b7b3          	p.bclr	a5,a3,28,3
1c00403a:	0036d713          	srli	a4,a3,0x3
1c00403e:	00f037b3          	snez	a5,a5
1c004042:	97ba                	add	a5,a5,a4
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(OutDim), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, OutDim);
1c004044:	c80292b3          	p.extractu	t0,t0,4,0
1c004048:	02f28733          	mul	a4,t0,a5
{
1c00404c:	7179                	addi	sp,sp,-48
1c00404e:	d622                	sw	s0,44(sp)
1c004050:	d426                	sw	s1,40(sp)
1c004052:	d24a                	sw	s2,36(sp)
1c004054:	d04e                	sw	s3,32(sp)
1c004056:	ce52                	sw	s4,28(sp)
1c004058:	cc56                	sw	s5,24(sp)
1c00405a:	ca5a                	sw	s6,20(sp)
1c00405c:	c85e                	sw	s7,16(sp)
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(OutDim), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, OutDim);
1c00405e:	97ba                	add	a5,a5,a4
{
1c004060:	c662                	sw	s8,12(sp)
	unsigned int CoreId = gap_coreid(), ChunkCell = ChunkSize(OutDim), First = CoreId*ChunkCell, Last  = Min(First+ChunkCell, OutDim);
1c004062:	04d7c7b3          	p.min	a5,a5,a3
	signed char * __restrict__ In = Arg->In;
1c004066:	00052f03          	lw	t5,0(a0)
	unsigned int InDim = Arg->InDim, OutDim = Arg->OutDim;
1c00406a:	01055e83          	lhu	t4,16(a0)
	const signed char * __restrict__ Weights = Arg->Weights;
1c00406e:	00452303          	lw	t1,4(a0)
	const int * __restrict__ Bias = Arg->Bias;
1c004072:	00852f83          	lw	t6,8(a0)
	unsigned int NormBias = ((unsigned char *)Arg->Infos)[AT_INF_BIASN];
1c004076:	00564983          	lbu	s3,5(a2)
	unsigned char *Scale = Arg->Scale;
1c00407a:	4d00                	lw	s0,24(a0)
	unsigned char *ScaleN = Arg->ScaleN;
1c00407c:	01c52383          	lw	t2,28(a0)
	signed char * __restrict__ Out = (signed char * __restrict__) Arg->Out;
1c004080:	00c52283          	lw	t0,12(a0)
	v4s * __restrict__ VectIn = (v4s *) In;

	for (int i=First; i<Last; i++) {
1c004084:	0cf77863          	bleu	a5,a4,1c004154 <KerParLinearLayerFullFeatB32_ReLU_SQ8+0x128>
1c004088:	42ee8333          	p.mac	t1,t4,a4
1c00408c:	00271693          	slli	a3,a4,0x2
1c004090:	00279893          	slli	a7,a5,0x2
		for (int j=0; j<(InDim/(4*2)); j++) {
			v4s V0=VectIn[2*j], V1=VectIn[2*j+1];
			v4s C0=W[2*j], C1=W[2*j+1];
			Acc = gap_sumdotp4(V0, C0, Acc); Acc = gap_sumdotp4(V1, C1, Acc);
		}
		if (InDim&0x4) Acc = gap_sumdotp4(VectIn[InDim/4-1], W[InDim/4-1], Acc);
1c004094:	40d888b3          	sub	a7,a7,a3
		for (int j=0; j<(InDim/(4*2)); j++) {
1c004098:	003ed493          	srli	s1,t4,0x3
		if (InDim&0x4) Acc = gap_sumdotp4(VectIn[InDim/4-1], W[InDim/4-1], Acc);
1c00409c:	18f1                	addi	a7,a7,-4
		for (int j=4*(InDim/4); j<InDim; j++) Acc += In[j]*Weights[i*InDim+j];
1c00409e:	c20ebe33          	p.bclr	t3,t4,1,0
1c0040a2:	00349913          	slli	s2,s1,0x3
		if (InDim&0x4) Acc = gap_sumdotp4(VectIn[InDim/4-1], W[InDim/4-1], Acc);
1c0040a6:	0028d893          	srli	a7,a7,0x2
1c0040aa:	004efa93          	andi	s5,t4,4
1c0040ae:	943a                	add	s0,s0,a4
1c0040b0:	93ba                	add	t2,t2,a4
1c0040b2:	92ba                	add	t0,t0,a4
1c0040b4:	9fb6                	add	t6,t6,a3
1c0040b6:	997a                	add	s2,s2,t5
1c0040b8:	ffce0a13          	addi	s4,t3,-4
1c0040bc:	0885                	addi	a7,a7,1
1c0040be:	0498c07b          	lp.setup	x0,a7,1c004150 <KerParLinearLayerFullFeatB32_ReLU_SQ8+0x124>
		int Acc = AT_LSHIFT(Bias[i], NormBias);
1c0040c2:	004fa78b          	p.lw	a5,4(t6!)
1c0040c6:	013797b3          	sll	a5,a5,s3
		for (int j=0; j<(InDim/(4*2)); j++) {
1c0040ca:	c895                	beqz	s1,1c0040fe <KerParLinearLayerFullFeatB32_ReLU_SQ8+0xd2>
1c0040cc:	41e90533          	sub	a0,s2,t5
1c0040d0:	1561                	addi	a0,a0,-8
1c0040d2:	810d                	srli	a0,a0,0x3
1c0040d4:	004f0c13          	addi	s8,t5,4
1c0040d8:	00430b93          	addi	s7,t1,4
1c0040dc:	8b1a                	mv	s6,t1
1c0040de:	887a                	mv	a6,t5
1c0040e0:	0505                	addi	a0,a0,1
1c0040e2:	00c540fb          	lp.setup	x1,a0,1c0040fa <KerParLinearLayerFullFeatB32_ReLU_SQ8+0xce>
			Acc = gap_sumdotp4(V0, C0, Acc); Acc = gap_sumdotp4(V1, C1, Acc);
1c0040e6:	0088258b          	p.lw	a1,8(a6!)
1c0040ea:	008b260b          	p.lw	a2,8(s6!)
			v4s V0=VectIn[2*j], V1=VectIn[2*j+1];
1c0040ee:	008c268b          	p.lw	a3,8(s8!)
			v4s C0=W[2*j], C1=W[2*j+1];
1c0040f2:	008ba70b          	p.lw	a4,8(s7!)
			Acc = gap_sumdotp4(V0, C0, Acc); Acc = gap_sumdotp4(V1, C1, Acc);
1c0040f6:	b8c597d7          	pv.sdotsp.b	a5,a1,a2
1c0040fa:	b8e697d7          	pv.sdotsp.b	a5,a3,a4
		if (InDim&0x4) Acc = gap_sumdotp4(VectIn[InDim/4-1], W[InDim/4-1], Acc);
1c0040fe:	000a8863          	beqz	s5,1c00410e <KerParLinearLayerFullFeatB32_ReLU_SQ8+0xe2>
1c004102:	214f7683          	p.lw	a3,s4(t5)
1c004106:	21437703          	p.lw	a4,s4(t1)
1c00410a:	b8e697d7          	pv.sdotsp.b	a5,a3,a4
		for (int j=4*(InDim/4); j<InDim; j++) Acc += In[j]*Weights[i*InDim+j];
1c00410e:	03de7463          	bleu	t4,t3,1c004136 <KerParLinearLayerFullFeatB32_ReLU_SQ8+0x10a>
1c004112:	001e0593          	addi	a1,t3,1
1c004116:	006e06b3          	add	a3,t3,t1
1c00411a:	01cf0633          	add	a2,t5,t3
1c00411e:	41ce8733          	sub	a4,t4,t3
1c004122:	04beea63          	bltu	t4,a1,1c004176 <KerParLinearLayerFullFeatB32_ReLU_SQ8+0x14a>
1c004126:	006740fb          	lp.setup	x1,a4,1c004132 <KerParLinearLayerFullFeatB32_ReLU_SQ8+0x106>
1c00412a:	0016050b          	p.lb	a0,1(a2!)
1c00412e:	0016858b          	p.lb	a1,1(a3!)
1c004132:	42b507b3          	p.mac	a5,a0,a1
		Out[i] = Max(0, gap_clip(AT_SCALE(Acc, Scale[i], ScaleN[i]), 7));
1c004136:	0014470b          	p.lbu	a4,1(s0!)
1c00413a:	0013c68b          	p.lbu	a3,1(t2!)
1c00413e:	9376                	add	t1,t1,t4
1c004140:	02f707b3          	mul	a5,a4,a5
1c004144:	40d067db          	p.mac.zh.sl	a5,zero,a3,zero
1c004148:	148797b3          	p.clip	a5,a5,8
1c00414c:	0407e7b3          	p.max	a5,a5,zero
1c004150:	00f280ab          	p.sb	a5,1(t0!)
1c004154:	002047b7          	lui	a5,0x204
1c004158:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00415c:	01c7e703          	p.elw	a4,28(a5)
	}
	gap_waitbarrier(0);
}
1c004160:	5432                	lw	s0,44(sp)
1c004162:	54a2                	lw	s1,40(sp)
1c004164:	5912                	lw	s2,36(sp)
1c004166:	5982                	lw	s3,32(sp)
1c004168:	4a72                	lw	s4,28(sp)
1c00416a:	4ae2                	lw	s5,24(sp)
1c00416c:	4b52                	lw	s6,20(sp)
1c00416e:	4bc2                	lw	s7,16(sp)
1c004170:	4c32                	lw	s8,12(sp)
1c004172:	6145                	addi	sp,sp,48
1c004174:	8082                	ret
1c004176:	4705                	li	a4,1
1c004178:	b77d                	j	1c004126 <KerParLinearLayerFullFeatB32_ReLU_SQ8+0xfa>

1c00417a <KerConv2x3from3x3Stride1_V_2Out_SQ8>:
	int Ho_F = Min(Ho, FirstDefinedOutput(FSy, PadIn[2], Sy)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FSy, PadIn[2], Sy));

	unsigned int InFeatures = Arg->InFeatures;
		
	for (unsigned int of=First; of<Last; of++) 
		for (unsigned int If=0; If<InFeatures; If++) {
1c00417a:	7179                	addi	sp,sp,-48
1c00417c:	5e42                	lw	t3,48(sp)
1c00417e:	5352                	lw	t1,52(sp)
1c004180:	5ee2                	lw	t4,56(sp)
1c004182:	d622                	sw	s0,44(sp)
1c004184:	d426                	sw	s1,40(sp)
1c004186:	d24a                	sw	s2,36(sp)
1c004188:	d04e                	sw	s3,32(sp)
1c00418a:	ce52                	sw	s4,28(sp)
1c00418c:	cc56                	sw	s5,24(sp)
1c00418e:	ca5a                	sw	s6,20(sp)
1c004190:	c85e                	sw	s7,16(sp)
1c004192:	c662                	sw	s8,12(sp)
1c004194:	9372                	add	t1,t1,t3
1c004196:	0e0e8563          	beqz	t4,1c004280 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0x106>
1c00419a:	000e5283          	lhu	t0,0(t3)
1c00419e:	003e5f03          	lhu	t5,3(t3)
1c0041a2:	006e5383          	lhu	t2,6(t3)
1c0041a6:	00035f83          	lhu	t6,0(t1)
1c0041aa:	00335e83          	lhu	t4,3(t1)
1c0041ae:	00635403          	lhu	s0,6(t1)
1c0041b2:	0e17a563          	p.beqimm	a5,1,1c00429c <KerConv2x3from3x3Stride1_V_2Out_SQ8+0x122>
1c0041b6:	40c78633          	sub	a2,a5,a2
1c0041ba:	42b60533          	p.mac	a0,a2,a1
1c0041be:	8bbe                	mv	s7,a5
1c0041c0:	02d787b3          	mul	a5,a5,a3
1c0041c4:	20b5730b          	p.lw	t1,a1(a0!)
1c0041c8:	20b5760b          	p.lw	a2,a1(a0!)
1c0041cc:	078a                	slli	a5,a5,0x2
1c0041ce:	98be                	add	a7,a7,a5
1c0041d0:	02d70ab3          	mul	s5,a4,a3
1c0041d4:	0a8a                	slli	s5,s5,0x2
1c0041d6:	9ac6                	add	s5,s5,a7
1c0041d8:	050bff63          	bleu	a6,s7,1c004236 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0xbc>
1c0041dc:	00269b13          	slli	s6,a3,0x2
1c0041e0:	89de                	mv	s3,s7
1c0041e2:	8956                	mv	s2,s5
1c0041e4:	84c6                	mv	s1,a7
1c0041e6:	8a2a                	mv	s4,a0
1c0041e8:	417806b3          	sub	a3,a6,s7
1c0041ec:	01c6c0fb          	lp.setup	x1,a3,1c004224 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0xaa>
1c0041f0:	0004ac03          	lw	s8,0(s1)
1c0041f4:	00092e03          	lw	t3,0(s2)
1c0041f8:	20ba778b          	p.lw	a5,a1(s4!)
1c0041fc:	b8531c57          	pv.sdotsp.b	s8,t1,t0
1c004200:	b9e61c57          	pv.sdotsp.b	s8,a2,t5
1c004204:	b9f31e57          	pv.sdotsp.b	t3,t1,t6
1c004208:	8372                	mv	t1,t3
1c00420a:	8e62                	mv	t3,s8
1c00420c:	b9d61357          	pv.sdotsp.b	t1,a2,t4
1c004210:	b8779e57          	pv.sdotsp.b	t3,a5,t2
1c004214:	b8879357          	pv.sdotsp.b	t1,a5,s0
1c004218:	01c4eb2b          	p.sw	t3,s6(s1!)
1c00421c:	00696b2b          	p.sw	t1,s6(s2!)
1c004220:	0985                	addi	s3,s3,1
1c004222:	8332                	mv	t1,a2
1c004224:	863e                	mv	a2,a5
1c004226:	417989b3          	sub	s3,s3,s7
1c00422a:	033b0b33          	mul	s6,s6,s3
1c00422e:	42b98533          	p.mac	a0,s3,a1
1c004232:	98da                	add	a7,a7,s6
1c004234:	9ada                	add	s5,s5,s6
1c004236:	03070a63          	beq	a4,a6,1c00426a <KerConv2x3from3x3Stride1_V_2Out_SQ8+0xf0>
1c00423a:	00159793          	slli	a5,a1,0x1
1c00423e:	8d1d                	sub	a0,a0,a5
1c004240:	0008a683          	lw	a3,0(a7)
1c004244:	411c                	lw	a5,0(a0)
1c004246:	000aa703          	lw	a4,0(s5)
1c00424a:	20b57583          	p.lw	a1,a1(a0)
1c00424e:	b85796d7          	pv.sdotsp.b	a3,a5,t0
1c004252:	b9f79757          	pv.sdotsp.b	a4,a5,t6
1c004256:	87ba                	mv	a5,a4
1c004258:	8736                	mv	a4,a3
1c00425a:	b9e59757          	pv.sdotsp.b	a4,a1,t5
1c00425e:	b9d597d7          	pv.sdotsp.b	a5,a1,t4
1c004262:	00e8a023          	sw	a4,0(a7)
1c004266:	00faa023          	sw	a5,0(s5)
1c00426a:	5432                	lw	s0,44(sp)
1c00426c:	54a2                	lw	s1,40(sp)
1c00426e:	5912                	lw	s2,36(sp)
1c004270:	5982                	lw	s3,32(sp)
1c004272:	4a72                	lw	s4,28(sp)
1c004274:	4ae2                	lw	s5,24(sp)
1c004276:	4b52                	lw	s6,20(sp)
1c004278:	4bc2                	lw	s7,16(sp)
1c00427a:	4c32                	lw	s8,12(sp)
1c00427c:	6145                	addi	sp,sp,48
1c00427e:	8082                	ret
1c004280:	001e5283          	lhu	t0,1(t3)
1c004284:	004e5f03          	lhu	t5,4(t3)
1c004288:	007e5383          	lhu	t2,7(t3)
1c00428c:	00135f83          	lhu	t6,1(t1)
1c004290:	00435e83          	lhu	t4,4(t1)
1c004294:	00735403          	lhu	s0,7(t1)
1c004298:	f017bfe3          	p.bneimm	a5,1,1c0041b6 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0x3c>
1c00429c:	20b5760b          	p.lw	a2,a1(a0!)
1c0042a0:	4b81                	li	s7,0
1c0042a2:	00007357          	pv.add.sci.b	t1,zero,0
1c0042a6:	b72d                	j	1c0041d0 <KerConv2x3from3x3Stride1_V_2Out_SQ8+0x56>

1c0042a8 <KerConv3x2from3x3Stride1_H_2Out_SQ8>:
1c0042a8:	02e68733          	mul	a4,a3,a4
1c0042ac:	4e02                	lw	t3,0(sp)
1c0042ae:	4692                	lw	a3,4(sp)
1c0042b0:	4f22                	lw	t5,8(sp)
1c0042b2:	003e2303          	lw	t1,3(t3)
1c0042b6:	96f2                	add	a3,a3,t3
1c0042b8:	0036ae83          	lw	t4,3(a3)
1c0042bc:	40c78633          	sub	a2,a5,a2
1c0042c0:	9532                	add	a0,a0,a2
1c0042c2:	b2107357          	pv.insert.b	t1,zero,3
1c0042c6:	070a                	slli	a4,a4,0x2
1c0042c8:	00e883b3          	add	t2,a7,a4
1c0042cc:	b2107ed7          	pv.insert.b	t4,zero,3
1c0042d0:	040f0a63          	beqz	t5,1c004324 <KerConv3x2from3x3Stride1_H_2Out_SQ8+0x7c>
1c0042d4:	4298                	lw	a4,0(a3)
1c0042d6:	000e2f03          	lw	t5,0(t3)
1c0042da:	82f6                	mv	t0,t4
1c0042dc:	8eba                	mv	t4,a4
1c0042de:	b2107f57          	pv.insert.b	t5,zero,3
1c0042e2:	b2107ed7          	pv.insert.b	t4,zero,3
1c0042e6:	8f9a                	mv	t6,t1
1c0042e8:	0307fd63          	bleu	a6,a5,1c004322 <KerConv3x2from3x3Stride1_H_2Out_SQ8+0x7a>
1c0042ec:	95aa                	add	a1,a1,a0
1c0042ee:	40f80833          	sub	a6,a6,a5
1c0042f2:	016840fb          	lp.setup	x1,a6,1c00431e <KerConv3x2from3x3Stride1_H_2Out_SQ8+0x76>
1c0042f6:	0008ae03          	lw	t3,0(a7)
1c0042fa:	0015268b          	p.lw	a3,1(a0!)
1c0042fe:	0003a303          	lw	t1,0(t2)
1c004302:	0015a70b          	p.lw	a4,1(a1!) # 19001 <__L1Cl+0x9001>
1c004306:	b9e69e57          	pv.sdotsp.b	t3,a3,t5
1c00430a:	b9d69357          	pv.sdotsp.b	t1,a3,t4
1c00430e:	869a                	mv	a3,t1
1c004310:	8372                	mv	t1,t3
1c004312:	b9f71357          	pv.sdotsp.b	t1,a4,t6
1c004316:	b85716d7          	pv.sdotsp.b	a3,a4,t0
1c00431a:	0068a22b          	p.sw	t1,4(a7!)
1c00431e:	00d3a22b          	p.sw	a3,4(t2!)
1c004322:	8082                	ret
1c004324:	006e2f83          	lw	t6,6(t3)
1c004328:	0066a283          	lw	t0,6(a3)
1c00432c:	8f1a                	mv	t5,t1
1c00432e:	b2107fd7          	pv.insert.b	t6,zero,3
1c004332:	b21072d7          	pv.insert.b	t0,zero,3
1c004336:	bf4d                	j	1c0042e8 <KerConv3x2from3x3Stride1_H_2Out_SQ8+0x40>

1c004338 <KerConv2x3from3x3Stride1_V_SQ8>:
1c004338:	1141                	addi	sp,sp,-16
1c00433a:	4e52                	lw	t3,20(sp)
1c00433c:	c622                	sw	s0,12(sp)
1c00433e:	c426                	sw	s1,8(sp)
1c004340:	c24a                	sw	s2,4(sp)
1c004342:	4342                	lw	t1,16(sp)
1c004344:	080e0b63          	beqz	t3,1c0043da <KerConv2x3from3x3Stride1_V_SQ8+0xa2>
1c004348:	00035f03          	lhu	t5,0(t1)
1c00434c:	00335e83          	lhu	t4,3(t1)
1c004350:	00635f83          	lhu	t6,6(t1)
1c004354:	0817ab63          	p.beqimm	a5,1,1c0043ea <KerConv2x3from3x3Stride1_V_SQ8+0xb2>
1c004358:	40c78633          	sub	a2,a5,a2
1c00435c:	42b60533          	p.mac	a0,a2,a1
1c004360:	84be                	mv	s1,a5
1c004362:	02d787b3          	mul	a5,a5,a3
1c004366:	20b57e0b          	p.lw	t3,a1(a0!)
1c00436a:	20b5760b          	p.lw	a2,a1(a0!)
1c00436e:	078a                	slli	a5,a5,0x2
1c004370:	98be                	add	a7,a7,a5
1c004372:	0304ff63          	bleu	a6,s1,1c0043b0 <KerConv2x3from3x3Stride1_V_SQ8+0x78>
1c004376:	00269913          	slli	s2,a3,0x2
1c00437a:	83c6                	mv	t2,a7
1c00437c:	86a6                	mv	a3,s1
1c00437e:	842a                	mv	s0,a0
1c004380:	409802b3          	sub	t0,a6,s1
1c004384:	0102c0fb          	lp.setup	x1,t0,1c0043a4 <KerConv2x3from3x3Stride1_V_SQ8+0x6c>
1c004388:	0003a783          	lw	a5,0(t2)
1c00438c:	20b4730b          	p.lw	t1,a1(s0!)
1c004390:	0685                	addi	a3,a3,1
1c004392:	b9ee17d7          	pv.sdotsp.b	a5,t3,t5
1c004396:	b9d617d7          	pv.sdotsp.b	a5,a2,t4
1c00439a:	b9f317d7          	pv.sdotsp.b	a5,t1,t6
1c00439e:	00f3e92b          	p.sw	a5,s2(t2!)
1c0043a2:	8e32                	mv	t3,a2
1c0043a4:	861a                	mv	a2,t1
1c0043a6:	8e85                	sub	a3,a3,s1
1c0043a8:	42b68533          	p.mac	a0,a3,a1
1c0043ac:	42d908b3          	p.mac	a7,s2,a3
1c0043b0:	03070063          	beq	a4,a6,1c0043d0 <KerConv2x3from3x3Stride1_V_SQ8+0x98>
1c0043b4:	00159793          	slli	a5,a1,0x1
1c0043b8:	8d1d                	sub	a0,a0,a5
1c0043ba:	4118                	lw	a4,0(a0)
1c0043bc:	0008a783          	lw	a5,0(a7)
1c0043c0:	20b57583          	p.lw	a1,a1(a0)
1c0043c4:	b9e717d7          	pv.sdotsp.b	a5,a4,t5
1c0043c8:	b9d597d7          	pv.sdotsp.b	a5,a1,t4
1c0043cc:	00f8a023          	sw	a5,0(a7)
1c0043d0:	4432                	lw	s0,12(sp)
1c0043d2:	44a2                	lw	s1,8(sp)
1c0043d4:	4912                	lw	s2,4(sp)
1c0043d6:	0141                	addi	sp,sp,16
1c0043d8:	8082                	ret
1c0043da:	00135f03          	lhu	t5,1(t1)
1c0043de:	00435e83          	lhu	t4,4(t1)
1c0043e2:	00735f83          	lhu	t6,7(t1)
1c0043e6:	f617b9e3          	p.bneimm	a5,1,1c004358 <KerConv2x3from3x3Stride1_V_SQ8+0x20>
1c0043ea:	20b5760b          	p.lw	a2,a1(a0!)
1c0043ee:	4481                	li	s1,0
1c0043f0:	00007e57          	pv.add.sci.b	t3,zero,0
1c0043f4:	bfbd                	j	1c004372 <KerConv2x3from3x3Stride1_V_SQ8+0x3a>

1c0043f6 <KerConv4x5from5x5Stride1_V_SQ8>:
1c0043f6:	1101                	addi	sp,sp,-32
1c0043f8:	5e22                	lw	t3,40(sp)
1c0043fa:	ce22                	sw	s0,28(sp)
1c0043fc:	cc26                	sw	s1,24(sp)
1c0043fe:	ca4a                	sw	s2,20(sp)
1c004400:	c84e                	sw	s3,16(sp)
1c004402:	c652                	sw	s4,12(sp)
1c004404:	c456                	sw	s5,8(sp)
1c004406:	c25a                	sw	s6,4(sp)
1c004408:	5312                	lw	t1,36(sp)
1c00440a:	7816fed7          	pv.extract.b	t4,a3,2
1c00440e:	183e2f63          	p.beqimm	t3,3,1c0045ac <KerConv4x5from5x5Stride1_V_SQ8+0x1b6>
1c004412:	4f0d                	li	t5,3
1c004414:	13cf5a63          	ble	t3,t5,1c004548 <KerConv4x5from5x5Stride1_V_SQ8+0x152>
1c004418:	144e2f63          	p.beqimm	t3,4,1c004576 <KerConv4x5from5x5Stride1_V_SQ8+0x180>
1c00441c:	165e3d63          	p.bneimm	t3,5,1c004596 <KerConv4x5from5x5Stride1_V_SQ8+0x1a0>
1c004420:	00032383          	lw	t2,0(t1)
1c004424:	00532283          	lw	t0,5(t1)
1c004428:	00a32f83          	lw	t6,10(t1)
1c00442c:	00f32403          	lw	s0,15(t1)
1c004430:	01432483          	lw	s1,20(t1)
1c004434:	b21073d7          	pv.insert.b	t2,zero,3
1c004438:	b21072d7          	pv.insert.b	t0,zero,3
1c00443c:	b2107fd7          	pv.insert.b	t6,zero,3
1c004440:	b2107457          	pv.insert.b	s0,zero,3
1c004444:	b21074d7          	pv.insert.b	s1,zero,3
1c004448:	0e2ea063          	p.beqimm	t4,2,1c004528 <KerConv4x5from5x5Stride1_V_SQ8+0x132>
1c00444c:	0e0e8363          	beqz	t4,1c004532 <KerConv4x5from5x5Stride1_V_SQ8+0x13c>
1c004450:	20b5760b          	p.lw	a2,a1(a0!)
1c004454:	00007f57          	pv.add.sci.b	t5,zero,0
1c004458:	4801                	li	a6,0
1c00445a:	00052303          	lw	t1,0(a0)
1c00445e:	0a17ac63          	p.beqimm	a5,1,1c004516 <KerConv4x5from5x5Stride1_V_SQ8+0x120>
1c004462:	02e80ab3          	mul	s5,a6,a4
1c004466:	00b50933          	add	s2,a0,a1
1c00446a:	20b97e0b          	p.lw	t3,a1(s2!)
1c00446e:	002a9793          	slli	a5,s5,0x2
1c004472:	5a82                	lw	s5,32(sp)
1c004474:	9abe                	add	s5,s5,a5
1c004476:	05187563          	bleu	a7,a6,1c0044c0 <KerConv4x5from5x5Stride1_V_SQ8+0xca>
1c00447a:	00271b13          	slli	s6,a4,0x2
1c00447e:	89c2                	mv	s3,a6
1c004480:	8556                	mv	a0,s5
1c004482:	8a4a                	mv	s4,s2
1c004484:	410888b3          	sub	a7,a7,a6
1c004488:	0158c0fb          	lp.setup	x1,a7,1c0044b2 <KerConv4x5from5x5Stride1_V_SQ8+0xbc>
1c00448c:	411c                	lw	a5,0(a0)
1c00448e:	20ba7e8b          	p.lw	t4,a1(s4!)
1c004492:	0985                	addi	s3,s3,1
1c004494:	b87f17d7          	pv.sdotsp.b	a5,t5,t2
1c004498:	b85617d7          	pv.sdotsp.b	a5,a2,t0
1c00449c:	b9f317d7          	pv.sdotsp.b	a5,t1,t6
1c0044a0:	b88e17d7          	pv.sdotsp.b	a5,t3,s0
1c0044a4:	b89e97d7          	pv.sdotsp.b	a5,t4,s1
1c0044a8:	00f56b2b          	p.sw	a5,s6(a0!)
1c0044ac:	8f32                	mv	t5,a2
1c0044ae:	861a                	mv	a2,t1
1c0044b0:	8372                	mv	t1,t3
1c0044b2:	8e76                	mv	t3,t4
1c0044b4:	41098833          	sub	a6,s3,a6
1c0044b8:	42b80933          	p.mac	s2,a6,a1
1c0044bc:	430b0ab3          	p.mac	s5,s6,a6
1c0044c0:	7a16f6d7          	pv.extract.b	a3,a3,3
1c0044c4:	caa9                	beqz	a3,1c004516 <KerConv4x5from5x5Stride1_V_SQ8+0x120>
1c0044c6:	00259513          	slli	a0,a1,0x2
1c0044ca:	40a90933          	sub	s2,s2,a0
1c0044ce:	00b907b3          	add	a5,s2,a1
1c0044d2:	20b7f80b          	p.lw	a6,a1(a5!)
1c0044d6:	000aa603          	lw	a2,0(s5)
1c0044da:	00092883          	lw	a7,0(s2)
1c0044de:	4388                	lw	a0,0(a5)
1c0044e0:	20b7f583          	p.lw	a1,a1(a5)
1c0044e4:	87b2                	mv	a5,a2
1c0044e6:	b87897d7          	pv.sdotsp.b	a5,a7,t2
1c0044ea:	b85817d7          	pv.sdotsp.b	a5,a6,t0
1c0044ee:	b9f517d7          	pv.sdotsp.b	a5,a0,t6
1c0044f2:	b88597d7          	pv.sdotsp.b	a5,a1,s0
1c0044f6:	00faa023          	sw	a5,0(s5)
1c0044fa:	0026be63          	p.bneimm	a3,2,1c004516 <KerConv4x5from5x5Stride1_V_SQ8+0x120>
1c0044fe:	070a                	slli	a4,a4,0x2
1c004500:	9aba                	add	s5,s5,a4
1c004502:	000aa783          	lw	a5,0(s5)
1c004506:	b87817d7          	pv.sdotsp.b	a5,a6,t2
1c00450a:	b85517d7          	pv.sdotsp.b	a5,a0,t0
1c00450e:	b9f597d7          	pv.sdotsp.b	a5,a1,t6
1c004512:	00faa023          	sw	a5,0(s5)
1c004516:	4472                	lw	s0,28(sp)
1c004518:	44e2                	lw	s1,24(sp)
1c00451a:	4952                	lw	s2,20(sp)
1c00451c:	49c2                	lw	s3,16(sp)
1c00451e:	4a32                	lw	s4,12(sp)
1c004520:	4aa2                	lw	s5,8(sp)
1c004522:	4b12                	lw	s6,4(sp)
1c004524:	6105                	addi	sp,sp,32
1c004526:	8082                	ret
1c004528:	00007657          	pv.add.sci.b	a2,zero,0
1c00452c:	8f32                	mv	t5,a2
1c00452e:	4801                	li	a6,0
1c004530:	b72d                	j	1c00445a <KerConv4x5from5x5Stride1_V_SQ8+0x64>
1c004532:	78167657          	pv.extract.b	a2,a2,2
1c004536:	40c80633          	sub	a2,a6,a2
1c00453a:	42b60533          	p.mac	a0,a2,a1
1c00453e:	20b57f0b          	p.lw	t5,a1(a0!)
1c004542:	20b5760b          	p.lw	a2,a1(a0!)
1c004546:	bf11                	j	1c00445a <KerConv4x5from5x5Stride1_V_SQ8+0x64>
1c004548:	042e3763          	p.bneimm	t3,2,1c004596 <KerConv4x5from5x5Stride1_V_SQ8+0x1a0>
1c00454c:	00232383          	lw	t2,2(t1)
1c004550:	00732283          	lw	t0,7(t1)
1c004554:	00c32f83          	lw	t6,12(t1)
1c004558:	01132403          	lw	s0,17(t1)
1c00455c:	01632483          	lw	s1,22(t1)
1c004560:	b21073d7          	pv.insert.b	t2,zero,3
1c004564:	b21072d7          	pv.insert.b	t0,zero,3
1c004568:	b2107fd7          	pv.insert.b	t6,zero,3
1c00456c:	b2107457          	pv.insert.b	s0,zero,3
1c004570:	b21074d7          	pv.insert.b	s1,zero,3
1c004574:	bdd1                	j	1c004448 <KerConv4x5from5x5Stride1_V_SQ8+0x52>
1c004576:	00032383          	lw	t2,0(t1)
1c00457a:	00532283          	lw	t0,5(t1)
1c00457e:	00a32f83          	lw	t6,10(t1)
1c004582:	00f32403          	lw	s0,15(t1)
1c004586:	01432483          	lw	s1,20(t1)
1c00458a:	03a2                	slli	t2,t2,0x8
1c00458c:	02a2                	slli	t0,t0,0x8
1c00458e:	0fa2                	slli	t6,t6,0x8
1c004590:	0422                	slli	s0,s0,0x8
1c004592:	04a2                	slli	s1,s1,0x8
1c004594:	bd55                	j	1c004448 <KerConv4x5from5x5Stride1_V_SQ8+0x52>
1c004596:	00132383          	lw	t2,1(t1)
1c00459a:	00632283          	lw	t0,6(t1)
1c00459e:	00b32f83          	lw	t6,11(t1)
1c0045a2:	01032403          	lw	s0,16(t1)
1c0045a6:	01532483          	lw	s1,21(t1)
1c0045aa:	bd79                	j	1c004448 <KerConv4x5from5x5Stride1_V_SQ8+0x52>
1c0045ac:	00032383          	lw	t2,0(t1)
1c0045b0:	00532283          	lw	t0,5(t1)
1c0045b4:	00a32f83          	lw	t6,10(t1)
1c0045b8:	00f32403          	lw	s0,15(t1)
1c0045bc:	01432483          	lw	s1,20(t1)
1c0045c0:	b561                	j	1c004448 <KerConv4x5from5x5Stride1_V_SQ8+0x52>

1c0045c2 <KerConv3x3Stride1_Body_2Out_SQ8.isra.17>:
1c0045c2:	7179                	addi	sp,sp,-48
1c0045c4:	d426                	sw	s1,40(sp)
1c0045c6:	54d2                	lw	s1,52(sp)
1c0045c8:	d622                	sw	s0,44(sp)
1c0045ca:	5442                	lw	s0,48(sp)
1c0045cc:	d04e                	sw	s3,32(sp)
1c0045ce:	89c2                	mv	s3,a6
1c0045d0:	429789b3          	p.mac	s3,a5,s1
1c0045d4:	53f2                	lw	t2,60(sp)
1c0045d6:	d24a                	sw	s2,36(sp)
1c0045d8:	ca5a                	sw	s6,20(sp)
1c0045da:	ce52                	sw	s4,28(sp)
1c0045dc:	cc56                	sw	s5,24(sp)
1c0045de:	c85e                	sw	s7,16(sp)
1c0045e0:	c662                	sw	s8,12(sp)
1c0045e2:	c466                	sw	s9,8(sp)
1c0045e4:	00d602b3          	add	t0,a2,a3
1c0045e8:	02878433          	mul	s0,a5,s0
1c0045ec:	098a                	slli	s3,s3,0x2
1c0045ee:	99ae                	add	s3,s3,a1
1c0045f0:	0032af83          	lw	t6,3(t0)
1c0045f4:	7803f957          	pv.extract.b	s2,t2,0
1c0045f8:	00062e03          	lw	t3,0(a2)
1c0045fc:	00362e83          	lw	t4,3(a2)
1c004600:	00662f03          	lw	t5,6(a2)
1c004604:	20d67303          	p.lw	t1,a3(a2)
1c004608:	0062a283          	lw	t0,6(t0)
1c00460c:	040a                	slli	s0,s0,0x2
1c00460e:	7813f3d7          	pv.extract.b	t2,t2,2
1c004612:	5b62                	lw	s6,56(sp)
1c004614:	944e                	add	s0,s0,s3
1c004616:	0b187563          	bleu	a7,a6,1c0046c0 <KerConv3x3Stride1_Body_2Out_SQ8.isra.17+0xfe>
1c00461a:	1003d3b3          	p.exthz	t2,t2
1c00461e:	407483b3          	sub	t2,s1,t2
1c004622:	02e383b3          	mul	t2,t2,a4
1c004626:	10095933          	p.exthz	s2,s2
1c00462a:	00279b93          	slli	s7,a5,0x2
1c00462e:	412387b3          	sub	a5,t2,s2
1c004632:	0964f763          	bleu	s6,s1,1c0046c0 <KerConv3x3Stride1_Body_2Out_SQ8.isra.17+0xfe>
1c004636:	00f80ab3          	add	s5,a6,a5
1c00463a:	01150933          	add	s2,a0,a7
1c00463e:	983a                	add	a6,a6,a4
1c004640:	9aaa                	add	s5,s5,a0
1c004642:	983e                	add	a6,a6,a5
1c004644:	993e                	add	s2,s2,a5
1c004646:	b2107e57          	pv.insert.b	t3,zero,3
1c00464a:	b2107ed7          	pv.insert.b	t4,zero,3
1c00464e:	b2107f57          	pv.insert.b	t5,zero,3
1c004652:	b2107357          	pv.insert.b	t1,zero,3
1c004656:	b2107fd7          	pv.insert.b	t6,zero,3
1c00465a:	b21072d7          	pv.insert.b	t0,zero,3
1c00465e:	01050a33          	add	s4,a0,a6
1c004662:	00171c13          	slli	s8,a4,0x1
1c004666:	41590933          	sub	s2,s2,s5
1c00466a:	02a9407b          	lp.setup	x0,s2,1c0046be <KerConv3x3Stride1_Body_2Out_SQ8.isra.17+0xfc>
1c00466e:	85d6                	mv	a1,s5
1c004670:	2185f60b          	p.lw	a2,s8(a1!)
1c004674:	000a2783          	lw	a5,0(s4)
1c004678:	83a2                	mv	t2,s0
1c00467a:	88ce                	mv	a7,s3
1c00467c:	409b0833          	sub	a6,s6,s1
1c004680:	01b840fb          	lp.setup	x1,a6,1c0046b6 <KerConv3x3Stride1_Body_2Out_SQ8.isra.17+0xf4>
1c004684:	0008ac83          	lw	s9,0(a7)
1c004688:	0003a503          	lw	a0,0(t2)
1c00468c:	20e5f68b          	p.lw	a3,a4(a1!)
1c004690:	b9c61cd7          	pv.sdotsp.b	s9,a2,t3
1c004694:	b9d79cd7          	pv.sdotsp.b	s9,a5,t4
1c004698:	b8661557          	pv.sdotsp.b	a0,a2,t1
1c00469c:	862a                	mv	a2,a0
1c00469e:	8566                	mv	a0,s9
1c0046a0:	b9f79657          	pv.sdotsp.b	a2,a5,t6
1c0046a4:	b9e69557          	pv.sdotsp.b	a0,a3,t5
1c0046a8:	b8569657          	pv.sdotsp.b	a2,a3,t0
1c0046ac:	00a8ebab          	p.sw	a0,s7(a7!)
1c0046b0:	00c3ebab          	p.sw	a2,s7(t2!)
1c0046b4:	863e                	mv	a2,a5
1c0046b6:	87b6                	mv	a5,a3
1c0046b8:	0991                	addi	s3,s3,4
1c0046ba:	0411                	addi	s0,s0,4
1c0046bc:	0a85                	addi	s5,s5,1
1c0046be:	0a05                	addi	s4,s4,1
1c0046c0:	5432                	lw	s0,44(sp)
1c0046c2:	54a2                	lw	s1,40(sp)
1c0046c4:	5912                	lw	s2,36(sp)
1c0046c6:	5982                	lw	s3,32(sp)
1c0046c8:	4a72                	lw	s4,28(sp)
1c0046ca:	4ae2                	lw	s5,24(sp)
1c0046cc:	4b52                	lw	s6,20(sp)
1c0046ce:	4bc2                	lw	s7,16(sp)
1c0046d0:	4c32                	lw	s8,12(sp)
1c0046d2:	4ca2                	lw	s9,8(sp)
1c0046d4:	6145                	addi	sp,sp,48
1c0046d6:	8082                	ret

1c0046d8 <KerConv3x3BorderStride1_2Out_SQ8.isra.18>:
1c0046d8:	711d                	addi	sp,sp,-96
1c0046da:	5336                	lw	t1,108(sp)
1c0046dc:	5e46                	lw	t3,112(sp)
1c0046de:	cca2                	sw	s0,88(sp)
1c0046e0:	caa6                	sw	s1,84(sp)
1c0046e2:	c8ca                	sw	s2,80(sp)
1c0046e4:	c6ce                	sw	s3,76(sp)
1c0046e6:	c4d2                	sw	s4,72(sp)
1c0046e8:	c2d6                	sw	s5,68(sp)
1c0046ea:	c0da                	sw	s6,64(sp)
1c0046ec:	de5e                	sw	s7,60(sp)
1c0046ee:	dc62                	sw	s8,56(sp)
1c0046f0:	da66                	sw	s9,52(sp)
1c0046f2:	d86a                	sw	s10,48(sp)
1c0046f4:	d66e                	sw	s11,44(sp)
1c0046f6:	ce86                	sw	ra,92(sp)
1c0046f8:	78037fd7          	pv.extract.b	t6,t1,0
1c0046fc:	780e7d57          	pv.extract.b	s10,t3,0
1c004700:	781e74d7          	pv.extract.b	s1,t3,2
1c004704:	8daa                	mv	s11,a0
1c004706:	8b2e                	mv	s6,a1
1c004708:	8c32                	mv	s8,a2
1c00470a:	8cb6                	mv	s9,a3
1c00470c:	8a3a                	mv	s4,a4
1c00470e:	89be                	mv	s3,a5
1c004710:	8ac2                	mv	s5,a6
1c004712:	8ec6                	mv	t4,a7
1c004714:	5b86                	lw	s7,96(sp)
1c004716:	5296                	lw	t0,100(sp)
1c004718:	5926                	lw	s2,104(sp)
1c00471a:	7a037f57          	pv.extract.b	t5,t1,1
1c00471e:	78137e57          	pv.extract.b	t3,t1,2
1c004722:	7a137457          	pv.extract.b	s0,t1,3
1c004726:	0c0f9563          	bnez	t6,1c0047f0 <KerConv3x3BorderStride1_2Out_SQ8.isra.18+0x118>
1c00472a:	080f1963          	bnez	t5,1c0047bc <KerConv3x3BorderStride1_2Out_SQ8.isra.18+0xe4>
1c00472e:	020e1263          	bnez	t3,1c004752 <KerConv3x3BorderStride1_2Out_SQ8.isra.18+0x7a>
1c004732:	e029                	bnez	s0,1c004774 <KerConv3x3BorderStride1_2Out_SQ8.isra.18+0x9c>
1c004734:	40f6                	lw	ra,92(sp)
1c004736:	4466                	lw	s0,88(sp)
1c004738:	44d6                	lw	s1,84(sp)
1c00473a:	4946                	lw	s2,80(sp)
1c00473c:	49b6                	lw	s3,76(sp)
1c00473e:	4a26                	lw	s4,72(sp)
1c004740:	4a96                	lw	s5,68(sp)
1c004742:	4b06                	lw	s6,64(sp)
1c004744:	5bf2                	lw	s7,60(sp)
1c004746:	5c62                	lw	s8,56(sp)
1c004748:	5cd2                	lw	s9,52(sp)
1c00474a:	5d42                	lw	s10,48(sp)
1c00474c:	5db2                	lw	s11,44(sp)
1c00474e:	6125                	addi	sp,sp,96
1c004750:	8082                	ret
1c004752:	002a9893          	slli	a7,s5,0x2
1c004756:	8876                	mv	a6,t4
1c004758:	c402                	sw	zero,8(sp)
1c00475a:	c266                	sw	s9,4(sp)
1c00475c:	c062                	sw	s8,0(sp)
1c00475e:	98da                	add	a7,a7,s6
1c004760:	87d6                	mv	a5,s5
1c004762:	875e                	mv	a4,s7
1c004764:	86ce                	mv	a3,s3
1c004766:	866a                	mv	a2,s10
1c004768:	85d2                	mv	a1,s4
1c00476a:	856e                	mv	a0,s11
1c00476c:	c876                	sw	t4,16(sp)
1c00476e:	3e2d                	jal	1c0042a8 <KerConv3x2from3x3Stride1_H_2Out_SQ8>
1c004770:	4ec2                	lw	t4,16(sp)
1c004772:	d069                	beqz	s0,1c004734 <KerConv3x3BorderStride1_2Out_SQ8.isra.18+0x5c>
1c004774:	88d6                	mv	a7,s5
1c004776:	432988b3          	p.mac	a7,s3,s2
1c00477a:	40990633          	sub	a2,s2,s1
1c00477e:	856e                	mv	a0,s11
1c004780:	4785                	li	a5,1
1c004782:	4466                	lw	s0,88(sp)
1c004784:	d4be                	sw	a5,104(sp)
1c004786:	d2e6                	sw	s9,100(sp)
1c004788:	d0e2                	sw	s8,96(sp)
1c00478a:	40f6                	lw	ra,92(sp)
1c00478c:	44d6                	lw	s1,84(sp)
1c00478e:	43460533          	p.mac	a0,a2,s4
1c004792:	088a                	slli	a7,a7,0x2
1c004794:	4946                	lw	s2,80(sp)
1c004796:	5c62                	lw	s8,56(sp)
1c004798:	5cd2                	lw	s9,52(sp)
1c00479a:	5db2                	lw	s11,44(sp)
1c00479c:	87d6                	mv	a5,s5
1c00479e:	875e                	mv	a4,s7
1c0047a0:	4a96                	lw	s5,68(sp)
1c0047a2:	5bf2                	lw	s7,60(sp)
1c0047a4:	86ce                	mv	a3,s3
1c0047a6:	98da                	add	a7,a7,s6
1c0047a8:	49b6                	lw	s3,76(sp)
1c0047aa:	4b06                	lw	s6,64(sp)
1c0047ac:	866a                	mv	a2,s10
1c0047ae:	85d2                	mv	a1,s4
1c0047b0:	5d42                	lw	s10,48(sp)
1c0047b2:	4a26                	lw	s4,72(sp)
1c0047b4:	8876                	mv	a6,t4
1c0047b6:	6125                	addi	sp,sp,96
1c0047b8:	af1ff06f          	j	1c0042a8 <KerConv3x2from3x3Stride1_H_2Out_SQ8>
1c0047bc:	00299893          	slli	a7,s3,0x2
1c0047c0:	41ae8533          	sub	a0,t4,s10
1c0047c4:	4785                	li	a5,1
1c0047c6:	18f1                	addi	a7,a7,-4
1c0047c8:	c43e                	sw	a5,8(sp)
1c0047ca:	c266                	sw	s9,4(sp)
1c0047cc:	c062                	sw	s8,0(sp)
1c0047ce:	98da                	add	a7,a7,s6
1c0047d0:	884a                	mv	a6,s2
1c0047d2:	8796                	mv	a5,t0
1c0047d4:	875e                	mv	a4,s7
1c0047d6:	86ce                	mv	a3,s3
1c0047d8:	8626                	mv	a2,s1
1c0047da:	85d2                	mv	a1,s4
1c0047dc:	956e                	add	a0,a0,s11
1c0047de:	ca72                	sw	t3,20(sp)
1c0047e0:	c876                	sw	t4,16(sp)
1c0047e2:	999ff0ef          	jal	ra,1c00417a <KerConv2x3from3x3Stride1_V_2Out_SQ8>
1c0047e6:	4e52                	lw	t3,20(sp)
1c0047e8:	4ec2                	lw	t4,16(sp)
1c0047ea:	f40e04e3          	beqz	t3,1c004732 <KerConv3x3BorderStride1_2Out_SQ8.isra.18+0x5a>
1c0047ee:	b795                	j	1c004752 <KerConv3x3BorderStride1_2Out_SQ8.isra.18+0x7a>
1c0047f0:	c236                	sw	a3,4(sp)
1c0047f2:	c032                	sw	a2,0(sp)
1c0047f4:	88ae                	mv	a7,a1
1c0047f6:	8796                	mv	a5,t0
1c0047f8:	c402                	sw	zero,8(sp)
1c0047fa:	884a                	mv	a6,s2
1c0047fc:	875e                	mv	a4,s7
1c0047fe:	86ce                	mv	a3,s3
1c004800:	8626                	mv	a2,s1
1c004802:	85d2                	mv	a1,s4
1c004804:	cc16                	sw	t0,24(sp)
1c004806:	ca72                	sw	t3,20(sp)
1c004808:	c876                	sw	t4,16(sp)
1c00480a:	ce7a                	sw	t5,28(sp)
1c00480c:	96fff0ef          	jal	ra,1c00417a <KerConv2x3from3x3Stride1_V_2Out_SQ8>
1c004810:	4f72                	lw	t5,28(sp)
1c004812:	4ec2                	lw	t4,16(sp)
1c004814:	4e52                	lw	t3,20(sp)
1c004816:	42e2                	lw	t0,24(sp)
1c004818:	f00f0be3          	beqz	t5,1c00472e <KerConv3x3BorderStride1_2Out_SQ8.isra.18+0x56>
1c00481c:	b745                	j	1c0047bc <KerConv3x3BorderStride1_2Out_SQ8.isra.18+0xe4>

1c00481e <KerConv3x3Stride1_Body_SQ8.isra.19>:
1c00481e:	8fbe                	mv	t6,a5
1c004820:	43170fb3          	p.mac	t6,a4,a7
1c004824:	1141                	addi	sp,sp,-16
1c004826:	4f52                	lw	t5,20(sp)
1c004828:	c426                	sw	s1,8(sp)
1c00482a:	c622                	sw	s0,12(sp)
1c00482c:	c24a                	sw	s2,4(sp)
1c00482e:	c04e                	sw	s3,0(sp)
1c004830:	780f72d7          	pv.extract.b	t0,t5,0
1c004834:	00062303          	lw	t1,0(a2)
1c004838:	00362e03          	lw	t3,3(a2)
1c00483c:	0f8a                	slli	t6,t6,0x2
1c00483e:	00662e83          	lw	t4,6(a2)
1c004842:	781f7f57          	pv.extract.b	t5,t5,2
1c004846:	44c2                	lw	s1,16(sp)
1c004848:	95fe                	add	a1,a1,t6
1c00484a:	0907f163          	bleu	a6,a5,1c0048cc <KerConv3x3Stride1_Body_SQ8.isra.19+0xae>
1c00484e:	100f5f33          	p.exthz	t5,t5
1c004852:	41e88f33          	sub	t5,a7,t5
1c004856:	1002d633          	p.exthz	a2,t0
1c00485a:	02df02b3          	mul	t0,t5,a3
1c00485e:	00271913          	slli	s2,a4,0x2
1c004862:	40c28733          	sub	a4,t0,a2
1c004866:	0698f363          	bleu	s1,a7,1c0048cc <KerConv3x3Stride1_Body_SQ8.isra.19+0xae>
1c00486a:	00e78433          	add	s0,a5,a4
1c00486e:	00d783b3          	add	t2,a5,a3
1c004872:	010502b3          	add	t0,a0,a6
1c004876:	942a                	add	s0,s0,a0
1c004878:	93ba                	add	t2,t2,a4
1c00487a:	92ba                	add	t0,t0,a4
1c00487c:	b2107357          	pv.insert.b	t1,zero,3
1c004880:	b2107e57          	pv.insert.b	t3,zero,3
1c004884:	b2107ed7          	pv.insert.b	t4,zero,3
1c004888:	93aa                	add	t2,t2,a0
1c00488a:	00169993          	slli	s3,a3,0x1
1c00488e:	408282b3          	sub	t0,t0,s0
1c004892:	01c2c07b          	lp.setup	x0,t0,1c0048ca <KerConv3x3Stride1_Body_SQ8.isra.19+0xac>
1c004896:	8fa2                	mv	t6,s0
1c004898:	213ff50b          	p.lw	a0,s3(t6!)
1c00489c:	0003a703          	lw	a4,0(t2)
1c0048a0:	8f2e                	mv	t5,a1
1c0048a2:	41148833          	sub	a6,s1,a7
1c0048a6:	00f840fb          	lp.setup	x1,a6,1c0048c4 <KerConv3x3Stride1_Body_SQ8.isra.19+0xa6>
1c0048aa:	000f2783          	lw	a5,0(t5)
1c0048ae:	20dff60b          	p.lw	a2,a3(t6!)
1c0048b2:	b86517d7          	pv.sdotsp.b	a5,a0,t1
1c0048b6:	b9c717d7          	pv.sdotsp.b	a5,a4,t3
1c0048ba:	b9d617d7          	pv.sdotsp.b	a5,a2,t4
1c0048be:	00ff692b          	p.sw	a5,s2(t5!)
1c0048c2:	853a                	mv	a0,a4
1c0048c4:	8732                	mv	a4,a2
1c0048c6:	0591                	addi	a1,a1,4
1c0048c8:	0405                	addi	s0,s0,1
1c0048ca:	0385                	addi	t2,t2,1
1c0048cc:	4432                	lw	s0,12(sp)
1c0048ce:	44a2                	lw	s1,8(sp)
1c0048d0:	4912                	lw	s2,4(sp)
1c0048d2:	4982                	lw	s3,0(sp)
1c0048d4:	0141                	addi	sp,sp,16
1c0048d6:	8082                	ret

1c0048d8 <KerConv3x2from3x3Stride1_H_SQ8.isra.20>:
1c0048d8:	00382e03          	lw	t3,3(a6)
1c0048dc:	40c68633          	sub	a2,a3,a2
1c0048e0:	9532                	add	a0,a0,a2
1c0048e2:	b2107e57          	pv.insert.b	t3,zero,3
1c0048e6:	02088b63          	beqz	a7,1c00491c <KerConv3x2from3x3Stride1_H_SQ8.isra.20+0x44>
1c0048ea:	00082603          	lw	a2,0(a6)
1c0048ee:	8ef2                	mv	t4,t3
1c0048f0:	8e32                	mv	t3,a2
1c0048f2:	b2107e57          	pv.insert.b	t3,zero,3
1c0048f6:	02e6f263          	bleu	a4,a3,1c00491a <KerConv3x2from3x3Stride1_H_SQ8.isra.20+0x42>
1c0048fa:	95aa                	add	a1,a1,a0
1c0048fc:	8f15                	sub	a4,a4,a3
1c0048fe:	00c740fb          	lp.setup	x1,a4,1c004916 <KerConv3x2from3x3Stride1_H_SQ8.isra.20+0x3e>
1c004902:	0007a803          	lw	a6,0(a5)
1c004906:	0015230b          	p.lw	t1,1(a0!)
1c00490a:	0015a88b          	p.lw	a7,1(a1!)
1c00490e:	b9c31857          	pv.sdotsp.b	a6,t1,t3
1c004912:	b9d89857          	pv.sdotsp.b	a6,a7,t4
1c004916:	0107a22b          	p.sw	a6,4(a5!)
1c00491a:	8082                	ret
1c00491c:	00682e83          	lw	t4,6(a6)
1c004920:	b2107ed7          	pv.insert.b	t4,zero,3
1c004924:	bfc9                	j	1c0048f6 <KerConv3x2from3x3Stride1_H_SQ8.isra.20+0x1e>

1c004926 <KerConv3x3BorderStride1_SQ8.isra.21>:
1c004926:	711d                	addi	sp,sp,-96
1c004928:	5326                	lw	t1,104(sp)
1c00492a:	5e36                	lw	t3,108(sp)
1c00492c:	cca2                	sw	s0,88(sp)
1c00492e:	caa6                	sw	s1,84(sp)
1c004930:	c8ca                	sw	s2,80(sp)
1c004932:	c6ce                	sw	s3,76(sp)
1c004934:	c4d2                	sw	s4,72(sp)
1c004936:	c2d6                	sw	s5,68(sp)
1c004938:	c0da                	sw	s6,64(sp)
1c00493a:	de5e                	sw	s7,60(sp)
1c00493c:	dc62                	sw	s8,56(sp)
1c00493e:	da66                	sw	s9,52(sp)
1c004940:	d86a                	sw	s10,48(sp)
1c004942:	d66e                	sw	s11,44(sp)
1c004944:	ce86                	sw	ra,92(sp)
1c004946:	78037ed7          	pv.extract.b	t4,t1,0
1c00494a:	780e7cd7          	pv.extract.b	s9,t3,0
1c00494e:	781e74d7          	pv.extract.b	s1,t3,2
1c004952:	8c2a                	mv	s8,a0
1c004954:	8a2e                	mv	s4,a1
1c004956:	8b32                	mv	s6,a2
1c004958:	8ab6                	mv	s5,a3
1c00495a:	8bba                	mv	s7,a4
1c00495c:	89be                	mv	s3,a5
1c00495e:	8d42                	mv	s10,a6
1c004960:	8f46                	mv	t5,a7
1c004962:	5f86                	lw	t6,96(sp)
1c004964:	5916                	lw	s2,100(sp)
1c004966:	7a037e57          	pv.extract.b	t3,t1,1
1c00496a:	78137dd7          	pv.extract.b	s11,t1,2
1c00496e:	7a137457          	pv.extract.b	s0,t1,3
1c004972:	0a0e9663          	bnez	t4,1c004a1e <KerConv3x3BorderStride1_SQ8.isra.21+0xf8>
1c004976:	060e1f63          	bnez	t3,1c0049f4 <KerConv3x3BorderStride1_SQ8.isra.21+0xce>
1c00497a:	020d9263          	bnez	s11,1c00499e <KerConv3x3BorderStride1_SQ8.isra.21+0x78>
1c00497e:	ec05                	bnez	s0,1c0049b6 <KerConv3x3BorderStride1_SQ8.isra.21+0x90>
1c004980:	40f6                	lw	ra,92(sp)
1c004982:	4466                	lw	s0,88(sp)
1c004984:	44d6                	lw	s1,84(sp)
1c004986:	4946                	lw	s2,80(sp)
1c004988:	49b6                	lw	s3,76(sp)
1c00498a:	4a26                	lw	s4,72(sp)
1c00498c:	4a96                	lw	s5,68(sp)
1c00498e:	4b06                	lw	s6,64(sp)
1c004990:	5bf2                	lw	s7,60(sp)
1c004992:	5c62                	lw	s8,56(sp)
1c004994:	5cd2                	lw	s9,52(sp)
1c004996:	5d42                	lw	s10,48(sp)
1c004998:	5db2                	lw	s11,44(sp)
1c00499a:	6125                	addi	sp,sp,96
1c00499c:	8082                	ret
1c00499e:	00299793          	slli	a5,s3,0x2
1c0049a2:	4881                	li	a7,0
1c0049a4:	885a                	mv	a6,s6
1c0049a6:	97d2                	add	a5,a5,s4
1c0049a8:	876a                	mv	a4,s10
1c0049aa:	86ce                	mv	a3,s3
1c0049ac:	8666                	mv	a2,s9
1c0049ae:	85d6                	mv	a1,s5
1c0049b0:	8562                	mv	a0,s8
1c0049b2:	371d                	jal	1c0048d8 <KerConv3x2from3x3Stride1_H_SQ8.isra.20>
1c0049b4:	d471                	beqz	s0,1c004980 <KerConv3x3BorderStride1_SQ8.isra.21+0x5a>
1c0049b6:	87ce                	mv	a5,s3
1c0049b8:	40990533          	sub	a0,s2,s1
1c0049bc:	432b87b3          	p.mac	a5,s7,s2
1c0049c0:	4466                	lw	s0,88(sp)
1c0049c2:	40f6                	lw	ra,92(sp)
1c0049c4:	44d6                	lw	s1,84(sp)
1c0049c6:	4946                	lw	s2,80(sp)
1c0049c8:	5bf2                	lw	s7,60(sp)
1c0049ca:	5db2                	lw	s11,44(sp)
1c0049cc:	885a                	mv	a6,s6
1c0049ce:	876a                	mv	a4,s10
1c0049d0:	4b06                	lw	s6,64(sp)
1c0049d2:	43550c33          	p.mac	s8,a0,s5
1c0049d6:	078a                	slli	a5,a5,0x2
1c0049d8:	5d42                	lw	s10,48(sp)
1c0049da:	86ce                	mv	a3,s3
1c0049dc:	8666                	mv	a2,s9
1c0049de:	49b6                	lw	s3,76(sp)
1c0049e0:	5cd2                	lw	s9,52(sp)
1c0049e2:	85d6                	mv	a1,s5
1c0049e4:	97d2                	add	a5,a5,s4
1c0049e6:	4a96                	lw	s5,68(sp)
1c0049e8:	4a26                	lw	s4,72(sp)
1c0049ea:	8562                	mv	a0,s8
1c0049ec:	5c62                	lw	s8,56(sp)
1c0049ee:	4885                	li	a7,1
1c0049f0:	6125                	addi	sp,sp,96
1c0049f2:	b5dd                	j	1c0048d8 <KerConv3x2from3x3Stride1_H_SQ8.isra.20>
1c0049f4:	002b9893          	slli	a7,s7,0x2
1c0049f8:	4785                	li	a5,1
1c0049fa:	18f1                	addi	a7,a7,-4
1c0049fc:	419d0533          	sub	a0,s10,s9
1c004a00:	c23e                	sw	a5,4(sp)
1c004a02:	c05a                	sw	s6,0(sp)
1c004a04:	98d2                	add	a7,a7,s4
1c004a06:	884a                	mv	a6,s2
1c004a08:	87fe                	mv	a5,t6
1c004a0a:	877a                	mv	a4,t5
1c004a0c:	86de                	mv	a3,s7
1c004a0e:	8626                	mv	a2,s1
1c004a10:	85d6                	mv	a1,s5
1c004a12:	9562                	add	a0,a0,s8
1c004a14:	925ff0ef          	jal	ra,1c004338 <KerConv2x3from3x3Stride1_V_SQ8>
1c004a18:	f60d83e3          	beqz	s11,1c00497e <KerConv3x3BorderStride1_SQ8.isra.21+0x58>
1c004a1c:	b749                	j	1c00499e <KerConv3x3BorderStride1_SQ8.isra.21+0x78>
1c004a1e:	c032                	sw	a2,0(sp)
1c004a20:	88ae                	mv	a7,a1
1c004a22:	87fe                	mv	a5,t6
1c004a24:	877a                	mv	a4,t5
1c004a26:	c202                	sw	zero,4(sp)
1c004a28:	884a                	mv	a6,s2
1c004a2a:	86de                	mv	a3,s7
1c004a2c:	8626                	mv	a2,s1
1c004a2e:	85d6                	mv	a1,s5
1c004a30:	ce72                	sw	t3,28(sp)
1c004a32:	cc7a                	sw	t5,24(sp)
1c004a34:	ca7e                	sw	t6,20(sp)
1c004a36:	903ff0ef          	jal	ra,1c004338 <KerConv2x3from3x3Stride1_V_SQ8>
1c004a3a:	4e72                	lw	t3,28(sp)
1c004a3c:	4fd2                	lw	t6,20(sp)
1c004a3e:	4f62                	lw	t5,24(sp)
1c004a40:	f20e0de3          	beqz	t3,1c00497a <KerConv3x3BorderStride1_SQ8.isra.21+0x54>
1c004a44:	bf45                	j	1c0049f4 <KerConv3x3BorderStride1_SQ8.isra.21+0xce>

1c004a46 <KerConv5x5Stride1_Body_SQ8.isra.42>:
1c004a46:	833e                	mv	t1,a5
1c004a48:	43170333          	p.mac	t1,a4,a7
1c004a4c:	715d                	addi	sp,sp,-80
1c004a4e:	c2ca                	sw	s2,68(sp)
1c004a50:	c6a2                	sw	s0,76(sp)
1c004a52:	c4a6                	sw	s1,72(sp)
1c004a54:	c0ce                	sw	s3,64(sp)
1c004a56:	de52                	sw	s4,60(sp)
1c004a58:	dc56                	sw	s5,56(sp)
1c004a5a:	da5a                	sw	s6,52(sp)
1c004a5c:	d85e                	sw	s7,48(sp)
1c004a5e:	d662                	sw	s8,44(sp)
1c004a60:	d466                	sw	s9,40(sp)
1c004a62:	d26a                	sw	s10,36(sp)
1c004a64:	d06e                	sw	s11,32(sp)
1c004a66:	00464f03          	lbu	t5,4(a2)
1c004a6a:	00964e03          	lbu	t3,9(a2)
1c004a6e:	ca46                	sw	a7,20(sp)
1c004a70:	00e64983          	lbu	s3,14(a2)
1c004a74:	48d6                	lw	a7,84(sp)
1c004a76:	01364483          	lbu	s1,19(a2)
1c004a7a:	030a                	slli	t1,t1,0x2
1c004a7c:	932e                	add	t1,t1,a1
1c004a7e:	e1ee1e57          	pv.packlo.b	t3,t3,t5
1c004a82:	c81a                	sw	t1,16(sp)
1c004a84:	7808f957          	pv.extract.b	s2,a7,0
1c004a88:	01864e83          	lbu	t4,24(a2)
1c004a8c:	7818f8d7          	pv.extract.b	a7,a7,2
1c004a90:	00062f03          	lw	t5,0(a2)
1c004a94:	00562f83          	lw	t6,5(a2)
1c004a98:	00a62283          	lw	t0,10(a2)
1c004a9c:	00f62383          	lw	t2,15(a2)
1c004aa0:	4a40                	lw	s0,20(a2)
1c004aa2:	d9349e57          	pv.packhi.b	t3,s1,s3
1c004aa6:	1307f963          	bleu	a6,a5,1c004bd8 <KerConv5x5Stride1_Body_SQ8.isra.42+0x192>
1c004aaa:	4652                	lw	a2,20(sp)
1c004aac:	1008d8b3          	p.exthz	a7,a7
1c004ab0:	00169593          	slli	a1,a3,0x1
1c004ab4:	411608b3          	sub	a7,a2,a7
1c004ab8:	02d88633          	mul	a2,a7,a3
1c004abc:	10095933          	p.exthz	s2,s2
1c004ac0:	00b688b3          	add	a7,a3,a1
1c004ac4:	00458c93          	addi	s9,a1,4
1c004ac8:	00488c13          	addi	s8,a7,4
1c004acc:	00468b93          	addi	s7,a3,4
1c004ad0:	98be                	add	a7,a7,a5
1c004ad2:	00d784b3          	add	s1,a5,a3
1c004ad6:	95be                	add	a1,a1,a5
1c004ad8:	9cbe                	add	s9,s9,a5
1c004ada:	41260633          	sub	a2,a2,s2
1c004ade:	00c78b33          	add	s6,a5,a2
1c004ae2:	9c3e                	add	s8,s8,a5
1c004ae4:	00478d13          	addi	s10,a5,4
1c004ae8:	9bbe                	add	s7,s7,a5
1c004aea:	1c00c7b7          	lui	a5,0x1c00c
1c004aee:	01050333          	add	t1,a0,a6
1c004af2:	3b47aa83          	lw	s5,948(a5) # 1c00c3b4 <__clz_tab+0x524>
1c004af6:	00c487b3          	add	a5,s1,a2
1c004afa:	00c88833          	add	a6,a7,a2
1c004afe:	95b2                	add	a1,a1,a2
1c004b00:	9cb2                	add	s9,s9,a2
1c004b02:	9c32                	add	s8,s8,a2
1c004b04:	9d32                	add	s10,s10,a2
1c004b06:	9bb2                	add	s7,s7,a2
1c004b08:	00269893          	slli	a7,a3,0x2
1c004b0c:	97aa                	add	a5,a5,a0
1c004b0e:	9b2a                	add	s6,s6,a0
1c004b10:	961a                	add	a2,a2,t1
1c004b12:	c23e                	sw	a5,4(sp)
1c004b14:	95aa                	add	a1,a1,a0
1c004b16:	982a                	add	a6,a6,a0
1c004b18:	00488793          	addi	a5,a7,4
1c004b1c:	41660633          	sub	a2,a2,s6
1c004b20:	ce46                	sw	a7,28(sp)
1c004b22:	00271d93          	slli	s11,a4,0x2
1c004b26:	c02e                	sw	a1,0(sp)
1c004b28:	9caa                	add	s9,s9,a0
1c004b2a:	c442                	sw	a6,8(sp)
1c004b2c:	9c2a                	add	s8,s8,a0
1c004b2e:	9d2a                	add	s10,s10,a0
1c004b30:	9baa                	add	s7,s7,a0
1c004b32:	cc3e                	sw	a5,24(sp)
1c004b34:	c632                	sw	a2,12(sp)
1c004b36:	48f2                	lw	a7,28(sp)
1c004b38:	001d060b          	p.lb	a2,1(s10!)
1c004b3c:	001b870b          	p.lb	a4,1(s7!)
1c004b40:	89da                	mv	s3,s6
1c004b42:	001c880b          	p.lb	a6,1(s9!)
1c004b46:	001c078b          	p.lb	a5,1(s8!)
1c004b4a:	2119f30b          	p.lw	t1,a7(s3!)
1c004b4e:	4882                	lw	a7,0(sp)
1c004b50:	e0c71757          	pv.packlo.b	a4,a4,a2
1c004b54:	d9079757          	pv.packhi.b	a4,a5,a6
1c004b58:	4612                	lw	a2,4(sp)
1c004b5a:	0008a583          	lw	a1,0(a7)
1c004b5e:	47d2                	lw	a5,20(sp)
1c004b60:	48a2                	lw	a7,8(sp)
1c004b62:	4846                	lw	a6,80(sp)
1c004b64:	4208                	lw	a0,0(a2)
1c004b66:	0008a603          	lw	a2,0(a7)
1c004b6a:	0507f663          	bleu	a6,a5,1c004bb6 <KerConv5x5Stride1_Body_SQ8.isra.42+0x170>
1c004b6e:	48e2                	lw	a7,24(sp)
1c004b70:	4942                	lw	s2,16(sp)
1c004b72:	40f804b3          	sub	s1,a6,a5
1c004b76:	01688a33          	add	s4,a7,s6
1c004b7a:	01d4c0fb          	lp.setup	x1,s1,1c004bb4 <KerConv5x5Stride1_Body_SQ8.isra.42+0x16e>
1c004b7e:	00092783          	lw	a5,0(s2)
1c004b82:	20d9f80b          	p.lw	a6,a3(s3!)
1c004b86:	00da788b          	p.lb	a7,a3(s4!)
1c004b8a:	b9e317d7          	pv.sdotsp.b	a5,t1,t5
1c004b8e:	b9f517d7          	pv.sdotsp.b	a5,a0,t6
1c004b92:	b85597d7          	pv.sdotsp.b	a5,a1,t0
1c004b96:	b87617d7          	pv.sdotsp.b	a5,a2,t2
1c004b9a:	b88817d7          	pv.sdotsp.b	a5,a6,s0
1c004b9e:	b9c717d7          	pv.sdotsp.b	a5,a4,t3
1c004ba2:	b9d897d7          	pv.sdotsp.b	a5,a7,t4
1c004ba6:	00f96dab          	p.sw	a5,s11(s2!)
1c004baa:	832a                	mv	t1,a0
1c004bac:	c9589757          	pv.shuffle2.b	a4,a7,s5
1c004bb0:	852e                	mv	a0,a1
1c004bb2:	85b2                	mv	a1,a2
1c004bb4:	8642                	mv	a2,a6
1c004bb6:	4642                	lw	a2,16(sp)
1c004bb8:	4792                	lw	a5,4(sp)
1c004bba:	4802                	lw	a6,0(sp)
1c004bbc:	0611                	addi	a2,a2,4
1c004bbe:	48a2                	lw	a7,8(sp)
1c004bc0:	c832                	sw	a2,16(sp)
1c004bc2:	4632                	lw	a2,12(sp)
1c004bc4:	0785                	addi	a5,a5,1
1c004bc6:	0805                	addi	a6,a6,1
1c004bc8:	0885                	addi	a7,a7,1
1c004bca:	167d                	addi	a2,a2,-1
1c004bcc:	c23e                	sw	a5,4(sp)
1c004bce:	c042                	sw	a6,0(sp)
1c004bd0:	c446                	sw	a7,8(sp)
1c004bd2:	c632                	sw	a2,12(sp)
1c004bd4:	0b05                	addi	s6,s6,1
1c004bd6:	f225                	bnez	a2,1c004b36 <KerConv5x5Stride1_Body_SQ8.isra.42+0xf0>
1c004bd8:	4436                	lw	s0,76(sp)
1c004bda:	44a6                	lw	s1,72(sp)
1c004bdc:	4916                	lw	s2,68(sp)
1c004bde:	4986                	lw	s3,64(sp)
1c004be0:	5a72                	lw	s4,60(sp)
1c004be2:	5ae2                	lw	s5,56(sp)
1c004be4:	5b52                	lw	s6,52(sp)
1c004be6:	5bc2                	lw	s7,48(sp)
1c004be8:	5c32                	lw	s8,44(sp)
1c004bea:	5ca2                	lw	s9,40(sp)
1c004bec:	5d12                	lw	s10,36(sp)
1c004bee:	5d82                	lw	s11,32(sp)
1c004bf0:	6161                	addi	sp,sp,80
1c004bf2:	8082                	ret

1c004bf4 <KerConv5x4from5x5Stride1_H_SQ8.isra.43>:
1c004bf4:	7179                	addi	sp,sp,-48
1c004bf6:	d622                	sw	s0,44(sp)
1c004bf8:	d426                	sw	s1,40(sp)
1c004bfa:	d24a                	sw	s2,36(sp)
1c004bfc:	d04e                	sw	s3,32(sp)
1c004bfe:	ce52                	sw	s4,28(sp)
1c004c00:	cc56                	sw	s5,24(sp)
1c004c02:	ca5a                	sw	s6,20(sp)
1c004c04:	c85e                	sw	s7,16(sp)
1c004c06:	c662                	sw	s8,12(sp)
1c004c08:	40c68633          	sub	a2,a3,a2
1c004c0c:	9532                	add	a0,a0,a2
1c004c0e:	00a82f03          	lw	t5,10(a6)
1c004c12:	00e80603          	lb	a2,14(a6)
1c004c16:	1438ab63          	p.beqimm	a7,3,1c004d6c <KerConv5x4from5x5Stride1_H_SQ8.isra.43+0x178>
1c004c1a:	430d                	li	t1,3
1c004c1c:	0f135263          	ble	a7,t1,1c004d00 <KerConv5x4from5x5Stride1_H_SQ8.isra.43+0x10c>
1c004c20:	1048a363          	p.beqimm	a7,4,1c004d26 <KerConv5x4from5x5Stride1_H_SQ8.isra.43+0x132>
1c004c24:	1258b263          	p.bneimm	a7,5,1c004d48 <KerConv5x4from5x5Stride1_H_SQ8.isra.43+0x154>
1c004c28:	00484e83          	lbu	t4,4(a6)
1c004c2c:	00984883          	lbu	a7,9(a6)
1c004c30:	00082283          	lw	t0,0(a6)
1c004c34:	00582383          	lw	t2,5(a6)
1c004c38:	e1d89ed7          	pv.packlo.b	t4,a7,t4
1c004c3c:	4801                	li	a6,0
1c004c3e:	d8c81ed7          	pv.packhi.b	t4,a6,a2
1c004c42:	00007fd7          	pv.add.sci.b	t6,zero,0
1c004c46:	832a                	mv	t1,a0
1c004c48:	20b3788b          	p.lw	a7,a1(t1!)
1c004c4c:	00159613          	slli	a2,a1,0x1
1c004c50:	00b60433          	add	s0,a2,a1
1c004c54:	00b30833          	add	a6,t1,a1
1c004c58:	00082e03          	lw	t3,0(a6)
1c004c5c:	00032303          	lw	t1,0(t1)
1c004c60:	20b87803          	p.lw	a6,a1(a6)
1c004c64:	00450493          	addi	s1,a0,4
1c004c68:	08e6f163          	bleu	a4,a3,1c004cea <KerConv5x4from5x5Stride1_H_SQ8.isra.43+0xf6>
1c004c6c:	1c00c937          	lui	s2,0x1c00c
1c004c70:	3b492a83          	lw	s5,948(s2) # 1c00c3b4 <__clz_tab+0x524>
1c004c74:	1c00c937          	lui	s2,0x1c00c
1c004c78:	3b892a03          	lw	s4,952(s2) # 1c00c3b8 <__clz_tab+0x528>
1c004c7c:	1c00c937          	lui	s2,0x1c00c
1c004c80:	0711                	addi	a4,a4,4
1c004c82:	3bc92983          	lw	s3,956(s2) # 1c00c3bc <__clz_tab+0x52c>
1c004c86:	1c00c937          	lui	s2,0x1c00c
1c004c8a:	972e                	add	a4,a4,a1
1c004c8c:	3c092903          	lw	s2,960(s2) # 1c00c3c0 <__clz_tab+0x530>
1c004c90:	0591                	addi	a1,a1,4
1c004c92:	0611                	addi	a2,a2,4
1c004c94:	0411                	addi	s0,s0,4
1c004c96:	40d706b3          	sub	a3,a4,a3
1c004c9a:	962a                	add	a2,a2,a0
1c004c9c:	942a                	add	s0,s0,a0
1c004c9e:	952e                	add	a0,a0,a1
1c004ca0:	40b685b3          	sub	a1,a3,a1
1c004ca4:	0215c0fb          	lp.setup	x1,a1,1c004ce6 <KerConv5x4from5x5Stride1_H_SQ8.isra.43+0xf2>
1c004ca8:	4394                	lw	a3,0(a5)
1c004caa:	0014870b          	p.lb	a4,1(s1!)
1c004cae:	00150c0b          	p.lb	s8,1(a0!)
1c004cb2:	b85896d7          	pv.sdotsp.b	a3,a7,t0
1c004cb6:	00160b8b          	p.lb	s7,1(a2!)
1c004cba:	00140b0b          	p.lb	s6,1(s0!)
1c004cbe:	b87316d7          	pv.sdotsp.b	a3,t1,t2
1c004cc2:	b9ee16d7          	pv.sdotsp.b	a3,t3,t5
1c004cc6:	e0ec1757          	pv.packlo.b	a4,s8,a4
1c004cca:	d97b1757          	pv.packhi.b	a4,s6,s7
1c004cce:	b9f816d7          	pv.sdotsp.b	a3,a6,t6
1c004cd2:	b9d716d7          	pv.sdotsp.b	a3,a4,t4
1c004cd6:	00d7a22b          	p.sw	a3,4(a5!)
1c004cda:	c95718d7          	pv.shuffle2.b	a7,a4,s5
1c004cde:	c9471357          	pv.shuffle2.b	t1,a4,s4
1c004ce2:	c9371e57          	pv.shuffle2.b	t3,a4,s3
1c004ce6:	c9271857          	pv.shuffle2.b	a6,a4,s2
1c004cea:	5432                	lw	s0,44(sp)
1c004cec:	54a2                	lw	s1,40(sp)
1c004cee:	5912                	lw	s2,36(sp)
1c004cf0:	5982                	lw	s3,32(sp)
1c004cf2:	4a72                	lw	s4,28(sp)
1c004cf4:	4ae2                	lw	s5,24(sp)
1c004cf6:	4b52                	lw	s6,20(sp)
1c004cf8:	4bc2                	lw	s7,16(sp)
1c004cfa:	4c32                	lw	s8,12(sp)
1c004cfc:	6145                	addi	sp,sp,48
1c004cfe:	8082                	ret
1c004d00:	0428b463          	p.bneimm	a7,2,1c004d48 <KerConv5x4from5x5Stride1_H_SQ8.isra.43+0x154>
1c004d04:	01384e83          	lbu	t4,19(a6)
1c004d08:	01884883          	lbu	a7,24(a6)
1c004d0c:	82fa                	mv	t0,t5
1c004d0e:	e0ce9ed7          	pv.packlo.b	t4,t4,a2
1c004d12:	4601                	li	a2,0
1c004d14:	00f82383          	lw	t2,15(a6)
1c004d18:	d9161ed7          	pv.packhi.b	t4,a2,a7
1c004d1c:	01482f03          	lw	t5,20(a6)
1c004d20:	00007fd7          	pv.add.sci.b	t6,zero,0
1c004d24:	b70d                	j	1c004c46 <KerConv5x4from5x5Stride1_H_SQ8.isra.43+0x52>
1c004d26:	00484303          	lbu	t1,4(a6)
1c004d2a:	00984883          	lbu	a7,9(a6)
1c004d2e:	4e81                	li	t4,0
1c004d30:	e1d31ed7          	pv.packlo.b	t4,t1,t4
1c004d34:	8ffa                	mv	t6,t5
1c004d36:	00082383          	lw	t2,0(a6)
1c004d3a:	d9161ed7          	pv.packhi.b	t4,a2,a7
1c004d3e:	00582f03          	lw	t5,5(a6)
1c004d42:	000072d7          	pv.add.sci.b	t0,zero,0
1c004d46:	b701                	j	1c004c46 <KerConv5x4from5x5Stride1_H_SQ8.isra.43+0x52>
1c004d48:	00984e83          	lbu	t4,9(a6)
1c004d4c:	01384303          	lbu	t1,19(a6)
1c004d50:	01884883          	lbu	a7,24(a6)
1c004d54:	e1d61ed7          	pv.packlo.b	t4,a2,t4
1c004d58:	83fa                	mv	t2,t5
1c004d5a:	00582283          	lw	t0,5(a6)
1c004d5e:	01482f83          	lw	t6,20(a6)
1c004d62:	d8689ed7          	pv.packhi.b	t4,a7,t1
1c004d66:	00f82f03          	lw	t5,15(a6)
1c004d6a:	bdf1                	j	1c004c46 <KerConv5x4from5x5Stride1_H_SQ8.isra.43+0x52>
1c004d6c:	00484e83          	lbu	t4,4(a6)
1c004d70:	00984303          	lbu	t1,9(a6)
1c004d74:	01384883          	lbu	a7,19(a6)
1c004d78:	00082283          	lw	t0,0(a6)
1c004d7c:	e1d31ed7          	pv.packlo.b	t4,t1,t4
1c004d80:	00582383          	lw	t2,5(a6)
1c004d84:	00f82f83          	lw	t6,15(a6)
1c004d88:	d8c89ed7          	pv.packhi.b	t4,a7,a2
1c004d8c:	bd6d                	j	1c004c46 <KerConv5x4from5x5Stride1_H_SQ8.isra.43+0x52>

1c004d8e <KerConv5x5BorderStride1_SQ8.isra.44>:
1c004d8e:	7159                	addi	sp,sp,-112
1c004d90:	d2a6                	sw	s1,100(sp)
1c004d92:	54f6                	lw	s1,124(sp)
1c004d94:	d4a2                	sw	s0,104(sp)
1c004d96:	5466                	lw	s0,120(sp)
1c004d98:	de6e                	sw	s11,60(sp)
1c004d9a:	8dbe                	mv	s11,a5
1c004d9c:	7814f7d7          	pv.extract.b	a5,s1,2
1c004da0:	d0ca                	sw	s2,96(sp)
1c004da2:	cece                	sw	s3,92(sp)
1c004da4:	ccd2                	sw	s4,88(sp)
1c004da6:	cad6                	sw	s5,84(sp)
1c004da8:	c8da                	sw	s6,80(sp)
1c004daa:	c6de                	sw	s7,76(sp)
1c004dac:	c4e2                	sw	s8,72(sp)
1c004dae:	c2e6                	sw	s9,68(sp)
1c004db0:	c0ea                	sw	s10,64(sp)
1c004db2:	d686                	sw	ra,108(sp)
1c004db4:	78047e57          	pv.extract.b	t3,s0,0
1c004db8:	d63e                	sw	a5,44(sp)
1c004dba:	89aa                	mv	s3,a0
1c004dbc:	8aae                	mv	s5,a1
1c004dbe:	8b32                	mv	s6,a2
1c004dc0:	8936                	mv	s2,a3
1c004dc2:	8bba                	mv	s7,a4
1c004dc4:	8cc2                	mv	s9,a6
1c004dc6:	8d46                	mv	s10,a7
1c004dc8:	52c6                	lw	t0,112(sp)
1c004dca:	5a56                	lw	s4,116(sp)
1c004dcc:	7804fc57          	pv.extract.b	s8,s1,0
1c004dd0:	7a047fd7          	pv.extract.b	t6,s0,1
1c004dd4:	78147ed7          	pv.extract.b	t4,s0,2
1c004dd8:	7a147f57          	pv.extract.b	t5,s0,3
1c004ddc:	122e2f63          	p.beqimm	t3,2,1c004f1a <KerConv5x5BorderStride1_SQ8.isra.44+0x18c>
1c004de0:	1a1e2063          	p.beqimm	t3,1,1c004f80 <KerConv5x5BorderStride1_SQ8.isra.44+0x1f2>
1c004de4:	022fab63          	p.beqimm	t6,2,1c004e1a <KerConv5x5BorderStride1_SQ8.isra.44+0x8c>
1c004de8:	1c1fa063          	p.beqimm	t6,1,1c004fa8 <KerConv5x5BorderStride1_SQ8.isra.44+0x21a>
1c004dec:	082eab63          	p.beqimm	t4,2,1c004e82 <KerConv5x5BorderStride1_SQ8.isra.44+0xf4>
1c004df0:	161eaa63          	p.beqimm	t4,1,1c004f64 <KerConv5x5BorderStride1_SQ8.isra.44+0x1d6>
1c004df4:	0c2f2263          	p.beqimm	t5,2,1c004eb8 <KerConv5x5BorderStride1_SQ8.isra.44+0x12a>
1c004df8:	1e1f2163          	p.beqimm	t5,1,1c004fda <KerConv5x5BorderStride1_SQ8.isra.44+0x24c>
1c004dfc:	50b6                	lw	ra,108(sp)
1c004dfe:	5426                	lw	s0,104(sp)
1c004e00:	5496                	lw	s1,100(sp)
1c004e02:	5906                	lw	s2,96(sp)
1c004e04:	49f6                	lw	s3,92(sp)
1c004e06:	4a66                	lw	s4,88(sp)
1c004e08:	4ad6                	lw	s5,84(sp)
1c004e0a:	4b46                	lw	s6,80(sp)
1c004e0c:	4bb6                	lw	s7,76(sp)
1c004e0e:	4c26                	lw	s8,72(sp)
1c004e10:	4c96                	lw	s9,68(sp)
1c004e12:	4d06                	lw	s10,64(sp)
1c004e14:	5df2                	lw	s11,60(sp)
1c004e16:	6165                	addi	sp,sp,112
1c004e18:	8082                	ret
1c004e1a:	418c8fb3          	sub	t6,s9,s8
1c004e1e:	9fce                	add	t6,t6,s3
1c004e20:	1c1baf63          	p.beqimm	s7,1,1c004ffe <KerConv5x5BorderStride1_SQ8.isra.44+0x270>
1c004e24:	002b9e13          	slli	t3,s7,0x2
1c004e28:	1e61                	addi	t3,t3,-8
1c004e2a:	01ca83b3          	add	t2,s5,t3
1c004e2e:	408d                	li	ra,3
1c004e30:	8816                	mv	a6,t0
1c004e32:	857e                	mv	a0,t6
1c004e34:	88d2                	mv	a7,s4
1c004e36:	87ea                	mv	a5,s10
1c004e38:	875e                	mv	a4,s7
1c004e3a:	86a2                	mv	a3,s0
1c004e3c:	8626                	mv	a2,s1
1c004e3e:	85ca                	mv	a1,s2
1c004e40:	c406                	sw	ra,8(sp)
1c004e42:	c01e                	sw	t2,0(sp)
1c004e44:	c25a                	sw	s6,4(sp)
1c004e46:	ce76                	sw	t4,28(sp)
1c004e48:	cc7a                	sw	t5,24(sp)
1c004e4a:	d016                	sw	t0,32(sp)
1c004e4c:	d472                	sw	t3,40(sp)
1c004e4e:	d27e                	sw	t6,36(sp)
1c004e50:	da6ff0ef          	jal	ra,1c0043f6 <KerConv4x5from5x5Stride1_V_SQ8>
1c004e54:	5e22                	lw	t3,40(sp)
1c004e56:	5282                	lw	t0,32(sp)
1c004e58:	5f92                	lw	t6,36(sp)
1c004e5a:	0e11                	addi	t3,t3,4
1c004e5c:	9e56                	add	t3,t3,s5
1c004e5e:	4791                	li	a5,4
1c004e60:	c43e                	sw	a5,8(sp)
1c004e62:	c25a                	sw	s6,4(sp)
1c004e64:	c072                	sw	t3,0(sp)
1c004e66:	88d2                	mv	a7,s4
1c004e68:	8816                	mv	a6,t0
1c004e6a:	87ea                	mv	a5,s10
1c004e6c:	875e                	mv	a4,s7
1c004e6e:	86a2                	mv	a3,s0
1c004e70:	8626                	mv	a2,s1
1c004e72:	85ca                	mv	a1,s2
1c004e74:	857e                	mv	a0,t6
1c004e76:	d80ff0ef          	jal	ra,1c0043f6 <KerConv4x5from5x5Stride1_V_SQ8>
1c004e7a:	4ef2                	lw	t4,28(sp)
1c004e7c:	4f62                	lw	t5,24(sp)
1c004e7e:	f62eb9e3          	p.bneimm	t4,2,1c004df0 <KerConv5x5BorderStride1_SQ8.isra.44+0x62>
1c004e82:	002d9793          	slli	a5,s11,0x2
1c004e86:	885a                	mv	a6,s6
1c004e88:	97d6                	add	a5,a5,s5
1c004e8a:	8766                	mv	a4,s9
1c004e8c:	86ee                	mv	a3,s11
1c004e8e:	8662                	mv	a2,s8
1c004e90:	85ca                	mv	a1,s2
1c004e92:	854e                	mv	a0,s3
1c004e94:	4889                	li	a7,2
1c004e96:	cc7a                	sw	t5,24(sp)
1c004e98:	3bb1                	jal	1c004bf4 <KerConv5x4from5x5Stride1_H_SQ8.isra.43>
1c004e9a:	01bb87b3          	add	a5,s7,s11
1c004e9e:	078a                	slli	a5,a5,0x2
1c004ea0:	4885                	li	a7,1
1c004ea2:	885a                	mv	a6,s6
1c004ea4:	97d6                	add	a5,a5,s5
1c004ea6:	8766                	mv	a4,s9
1c004ea8:	86ee                	mv	a3,s11
1c004eaa:	8662                	mv	a2,s8
1c004eac:	85ca                	mv	a1,s2
1c004eae:	854e                	mv	a0,s3
1c004eb0:	3391                	jal	1c004bf4 <KerConv5x4from5x5Stride1_H_SQ8.isra.43>
1c004eb2:	4f62                	lw	t5,24(sp)
1c004eb4:	f42f32e3          	p.bneimm	t5,2,1c004df8 <KerConv5x5BorderStride1_SQ8.isra.44+0x6a>
1c004eb8:	034b8433          	mul	s0,s7,s4
1c004ebc:	5732                	lw	a4,44(sp)
1c004ebe:	4895                	li	a7,5
1c004ec0:	885a                	mv	a6,s6
1c004ec2:	40ea0a33          	sub	s4,s4,a4
1c004ec6:	01b407b3          	add	a5,s0,s11
1c004eca:	078a                	slli	a5,a5,0x2
1c004ecc:	432a09b3          	p.mac	s3,s4,s2
1c004ed0:	97d6                	add	a5,a5,s5
1c004ed2:	021d2063          	p.beqimm	s10,1,1c004ef2 <KerConv5x5BorderStride1_SQ8.isra.44+0x164>
1c004ed6:	488d                	li	a7,3
1c004ed8:	8766                	mv	a4,s9
1c004eda:	86ee                	mv	a3,s11
1c004edc:	8662                	mv	a2,s8
1c004ede:	85ca                	mv	a1,s2
1c004ee0:	854e                	mv	a0,s3
1c004ee2:	3b09                	jal	1c004bf4 <KerConv5x4from5x5Stride1_H_SQ8.isra.43>
1c004ee4:	008b87b3          	add	a5,s7,s0
1c004ee8:	97ee                	add	a5,a5,s11
1c004eea:	078a                	slli	a5,a5,0x2
1c004eec:	4891                	li	a7,4
1c004eee:	885a                	mv	a6,s6
1c004ef0:	97d6                	add	a5,a5,s5
1c004ef2:	8766                	mv	a4,s9
1c004ef4:	86ee                	mv	a3,s11
1c004ef6:	8662                	mv	a2,s8
1c004ef8:	85ca                	mv	a1,s2
1c004efa:	854e                	mv	a0,s3
1c004efc:	5426                	lw	s0,104(sp)
1c004efe:	50b6                	lw	ra,108(sp)
1c004f00:	5496                	lw	s1,100(sp)
1c004f02:	5906                	lw	s2,96(sp)
1c004f04:	49f6                	lw	s3,92(sp)
1c004f06:	4a66                	lw	s4,88(sp)
1c004f08:	4ad6                	lw	s5,84(sp)
1c004f0a:	4b46                	lw	s6,80(sp)
1c004f0c:	4bb6                	lw	s7,76(sp)
1c004f0e:	4c26                	lw	s8,72(sp)
1c004f10:	4c96                	lw	s9,68(sp)
1c004f12:	4d06                	lw	s10,64(sp)
1c004f14:	5df2                	lw	s11,60(sp)
1c004f16:	6165                	addi	sp,sp,112
1c004f18:	b9f1                	j	1c004bf4 <KerConv5x4from5x5Stride1_H_SQ8.isra.43>
1c004f1a:	8816                	mv	a6,t0
1c004f1c:	88d2                	mv	a7,s4
1c004f1e:	87ea                	mv	a5,s10
1c004f20:	86a2                	mv	a3,s0
1c004f22:	8626                	mv	a2,s1
1c004f24:	85ca                	mv	a1,s2
1c004f26:	c472                	sw	t3,8(sp)
1c004f28:	c25a                	sw	s6,4(sp)
1c004f2a:	c056                	sw	s5,0(sp)
1c004f2c:	ce76                	sw	t4,28(sp)
1c004f2e:	cc7a                	sw	t5,24(sp)
1c004f30:	d27e                	sw	t6,36(sp)
1c004f32:	d016                	sw	t0,32(sp)
1c004f34:	cc2ff0ef          	jal	ra,1c0043f6 <KerConv4x5from5x5Stride1_V_SQ8>
1c004f38:	5282                	lw	t0,32(sp)
1c004f3a:	004a8793          	addi	a5,s5,4
1c004f3e:	4705                	li	a4,1
1c004f40:	c43a                	sw	a4,8(sp)
1c004f42:	c03e                	sw	a5,0(sp)
1c004f44:	8816                	mv	a6,t0
1c004f46:	c25a                	sw	s6,4(sp)
1c004f48:	88d2                	mv	a7,s4
1c004f4a:	87ea                	mv	a5,s10
1c004f4c:	875e                	mv	a4,s7
1c004f4e:	86a2                	mv	a3,s0
1c004f50:	8626                	mv	a2,s1
1c004f52:	85ca                	mv	a1,s2
1c004f54:	854e                	mv	a0,s3
1c004f56:	ca0ff0ef          	jal	ra,1c0043f6 <KerConv4x5from5x5Stride1_V_SQ8>
1c004f5a:	5282                	lw	t0,32(sp)
1c004f5c:	4ef2                	lw	t4,28(sp)
1c004f5e:	4f62                	lw	t5,24(sp)
1c004f60:	5f92                	lw	t6,36(sp)
1c004f62:	b549                	j	1c004de4 <KerConv5x5BorderStride1_SQ8.isra.44+0x56>
1c004f64:	002d9793          	slli	a5,s11,0x2
1c004f68:	4885                	li	a7,1
1c004f6a:	885a                	mv	a6,s6
1c004f6c:	97d6                	add	a5,a5,s5
1c004f6e:	8766                	mv	a4,s9
1c004f70:	86ee                	mv	a3,s11
1c004f72:	8662                	mv	a2,s8
1c004f74:	85ca                	mv	a1,s2
1c004f76:	854e                	mv	a0,s3
1c004f78:	cc7a                	sw	t5,24(sp)
1c004f7a:	39ad                	jal	1c004bf4 <KerConv5x4from5x5Stride1_H_SQ8.isra.43>
1c004f7c:	4f62                	lw	t5,24(sp)
1c004f7e:	bd9d                	j	1c004df4 <KerConv5x5BorderStride1_SQ8.isra.44+0x66>
1c004f80:	c232                	sw	a2,4(sp)
1c004f82:	c02e                	sw	a1,0(sp)
1c004f84:	8816                	mv	a6,t0
1c004f86:	c472                	sw	t3,8(sp)
1c004f88:	88d2                	mv	a7,s4
1c004f8a:	87ea                	mv	a5,s10
1c004f8c:	86a2                	mv	a3,s0
1c004f8e:	8626                	mv	a2,s1
1c004f90:	85ca                	mv	a1,s2
1c004f92:	d016                	sw	t0,32(sp)
1c004f94:	ce76                	sw	t4,28(sp)
1c004f96:	cc7a                	sw	t5,24(sp)
1c004f98:	d27e                	sw	t6,36(sp)
1c004f9a:	c5cff0ef          	jal	ra,1c0043f6 <KerConv4x5from5x5Stride1_V_SQ8>
1c004f9e:	5f92                	lw	t6,36(sp)
1c004fa0:	4f62                	lw	t5,24(sp)
1c004fa2:	4ef2                	lw	t4,28(sp)
1c004fa4:	5282                	lw	t0,32(sp)
1c004fa6:	bd3d                	j	1c004de4 <KerConv5x5BorderStride1_SQ8.isra.44+0x56>
1c004fa8:	002b9793          	slli	a5,s7,0x2
1c004fac:	17f1                	addi	a5,a5,-4
1c004fae:	97d6                	add	a5,a5,s5
1c004fb0:	470d                	li	a4,3
1c004fb2:	418c8533          	sub	a0,s9,s8
1c004fb6:	c43a                	sw	a4,8(sp)
1c004fb8:	c03e                	sw	a5,0(sp)
1c004fba:	c25a                	sw	s6,4(sp)
1c004fbc:	88d2                	mv	a7,s4
1c004fbe:	8816                	mv	a6,t0
1c004fc0:	87ea                	mv	a5,s10
1c004fc2:	875e                	mv	a4,s7
1c004fc4:	86a2                	mv	a3,s0
1c004fc6:	8626                	mv	a2,s1
1c004fc8:	85ca                	mv	a1,s2
1c004fca:	954e                	add	a0,a0,s3
1c004fcc:	ce76                	sw	t4,28(sp)
1c004fce:	cc7a                	sw	t5,24(sp)
1c004fd0:	c26ff0ef          	jal	ra,1c0043f6 <KerConv4x5from5x5Stride1_V_SQ8>
1c004fd4:	4f62                	lw	t5,24(sp)
1c004fd6:	4ef2                	lw	t4,28(sp)
1c004fd8:	bd11                	j	1c004dec <KerConv5x5BorderStride1_SQ8.isra.44+0x5e>
1c004fda:	87ee                	mv	a5,s11
1c004fdc:	434b87b3          	p.mac	a5,s7,s4
1c004fe0:	5732                	lw	a4,44(sp)
1c004fe2:	854e                	mv	a0,s3
1c004fe4:	488d                	li	a7,3
1c004fe6:	40ea0a33          	sub	s4,s4,a4
1c004fea:	885a                	mv	a6,s6
1c004fec:	8766                	mv	a4,s9
1c004fee:	86ee                	mv	a3,s11
1c004ff0:	8662                	mv	a2,s8
1c004ff2:	85ca                	mv	a1,s2
1c004ff4:	078a                	slli	a5,a5,0x2
1c004ff6:	432a0533          	p.mac	a0,s4,s2
1c004ffa:	97d6                	add	a5,a5,s5
1c004ffc:	b701                	j	1c004efc <KerConv5x5BorderStride1_SQ8.isra.44+0x16e>
1c004ffe:	4795                	li	a5,5
1c005000:	c43e                	sw	a5,8(sp)
1c005002:	c25a                	sw	s6,4(sp)
1c005004:	c056                	sw	s5,0(sp)
1c005006:	88d2                	mv	a7,s4
1c005008:	8816                	mv	a6,t0
1c00500a:	87ea                	mv	a5,s10
1c00500c:	4705                	li	a4,1
1c00500e:	86a2                	mv	a3,s0
1c005010:	8626                	mv	a2,s1
1c005012:	85ca                	mv	a1,s2
1c005014:	857e                	mv	a0,t6
1c005016:	ce76                	sw	t4,28(sp)
1c005018:	cc7a                	sw	t5,24(sp)
1c00501a:	bdcff0ef          	jal	ra,1c0043f6 <KerConv4x5from5x5Stride1_V_SQ8>
1c00501e:	4ef2                	lw	t4,28(sp)
1c005020:	4f62                	lw	t5,24(sp)
1c005022:	b3e9                	j	1c004dec <KerConv5x5BorderStride1_SQ8.isra.44+0x5e>

1c005024 <KerParConv3x3Stride1_SQ8>:
1c005024:	00e55603          	lhu	a2,14(a0)
1c005028:	f1402773          	csrr	a4,mhartid
1c00502c:	7171                	addi	sp,sp,-176
1c00502e:	f83637b3          	p.bclr	a5,a2,28,3
1c005032:	00365693          	srli	a3,a2,0x3
1c005036:	00f037b3          	snez	a5,a5
1c00503a:	97b6                	add	a5,a5,a3
1c00503c:	c8071733          	p.extractu	a4,a4,4,0
1c005040:	02f70733          	mul	a4,a4,a5
1c005044:	d14a                	sw	s2,160(sp)
1c005046:	cf4e                	sw	s3,156(sp)
1c005048:	cd52                	sw	s4,152(sp)
1c00504a:	cb56                	sw	s5,148(sp)
1c00504c:	c95a                	sw	s6,144(sp)
1c00504e:	c75e                	sw	s7,140(sp)
1c005050:	c562                	sw	s8,136(sp)
1c005052:	d706                	sw	ra,172(sp)
1c005054:	d522                	sw	s0,168(sp)
1c005056:	d326                	sw	s1,164(sp)
1c005058:	c366                	sw	s9,132(sp)
1c00505a:	c16a                	sw	s10,128(sp)
1c00505c:	deee                	sw	s11,124(sp)
1c00505e:	5100                	lw	s0,32(a0)
1c005060:	00655a03          	lhu	s4,6(a0)
1c005064:	00a55b03          	lhu	s6,10(a0)
1c005068:	97ba                	add	a5,a5,a4
1c00506a:	780479d7          	pv.extract.b	s3,s0,0
1c00506e:	78147ad7          	pv.extract.b	s5,s0,2
1c005072:	04c7c7b3          	p.min	a5,a5,a2
1c005076:	4689                	li	a3,2
1c005078:	d2be                	sw	a5,100(sp)
1c00507a:	40e78633          	sub	a2,a5,a4
1c00507e:	413687b3          	sub	a5,a3,s3
1c005082:	415686b3          	sub	a3,a3,s5
1c005086:	ffea0913          	addi	s2,s4,-2
1c00508a:	ffeb0b93          	addi	s7,s6,-2
1c00508e:	40fa0a33          	sub	s4,s4,a5
1c005092:	40db0b33          	sub	s6,s6,a3
1c005096:	00855783          	lhu	a5,8(a0)
1c00509a:	4114                	lw	a3,0(a0)
1c00509c:	04066633          	p.max	a2,a2,zero
1c0050a0:	ceb2                	sw	a2,92(sp)
1c0050a2:	8205                	srli	a2,a2,0x1
1c0050a4:	c0b2                	sw	a2,64(sp)
1c0050a6:	c6b6                	sw	a3,76(sp)
1c0050a8:	01055603          	lhu	a2,16(a0)
1c0050ac:	4954                	lw	a3,20(a0)
1c0050ae:	d4be                	sw	a5,104(sp)
1c0050b0:	4d5c                	lw	a5,28(a0)
1c0050b2:	00455c03          	lhu	s8,4(a0)
1c0050b6:	00c55503          	lhu	a0,12(a0)
1c0050ba:	ccb2                	sw	a2,88(sp)
1c0050bc:	d0b6                	sw	a3,96(sp)
1c0050be:	d6be                	sw	a5,108(sp)
1c0050c0:	994e                	add	s2,s2,s3
1c0050c2:	9bd6                	add	s7,s7,s5
1c0050c4:	7a047857          	pv.extract.b	a6,s0,1
1c0050c8:	7a1475d7          	pv.extract.b	a1,s0,3
1c0050cc:	de2a                	sw	a0,60(sp)
1c0050ce:	4606                	lw	a2,64(sp)
1c0050d0:	9942                	add	s2,s2,a6
1c0050d2:	9bae                	add	s7,s7,a1
1c0050d4:	053949b3          	p.min	s3,s2,s3
1c0050d8:	055bcab3          	p.min	s5,s7,s5
1c0050dc:	0549ea33          	p.max	s4,s3,s4
1c0050e0:	056aeb33          	p.max	s6,s5,s6
1c0050e4:	ce41                	beqz	a2,1c00517c <KerParConv3x3Stride1_SQ8+0x158>
1c0050e6:	84be                	mv	s1,a5
1c0050e8:	037907b3          	mul	a5,s2,s7
1c0050ec:	46e6                	lw	a3,88(sp)
1c0050ee:	c8a2                	sw	s0,80(sp)
1c0050f0:	dc02                	sw	zero,56(sp)
1c0050f2:	00369c93          	slli	s9,a3,0x3
1c0050f6:	9cb6                	add	s9,s9,a3
1c0050f8:	00351693          	slli	a3,a0,0x3
1c0050fc:	96aa                	add	a3,a3,a0
1c0050fe:	001c9613          	slli	a2,s9,0x1
1c005102:	cab6                	sw	a3,84(sp)
1c005104:	00279693          	slli	a3,a5,0x2
1c005108:	078e                	slli	a5,a5,0x3
1c00510a:	c4b2                	sw	a2,72(sp)
1c00510c:	c2be                	sw	a5,68(sp)
1c00510e:	5626                	lw	a2,104(sp)
1c005110:	5786                	lw	a5,96(sp)
1c005112:	42e684b3          	p.mac	s1,a3,a4
1c005116:	02cc0633          	mul	a2,s8,a2
1c00511a:	42ec87b3          	p.mac	a5,s9,a4
1c00511e:	d832                	sw	a2,48(sp)
1c005120:	da3e                	sw	a5,52(sp)
1c005122:	5672                	lw	a2,60(sp)
1c005124:	c221                	beqz	a2,1c005164 <KerParConv3x3Stride1_SQ8+0x140>
1c005126:	46c6                	lw	a3,80(sp)
1c005128:	e2f5                	bnez	a3,1c00520c <KerParConv3x3Stride1_SQ8+0x1e8>
1c00512a:	47d6                	lw	a5,84(sp)
1c00512c:	5d52                	lw	s10,52(sp)
1c00512e:	5752                	lw	a4,52(sp)
1c005130:	4db6                	lw	s11,76(sp)
1c005132:	973e                	add	a4,a4,a5
1c005134:	87ea                	mv	a5,s10
1c005136:	d63a                	sw	a4,44(sp)
1c005138:	8d6e                	mv	s10,s11
1c00513a:	8dbe                	mv	s11,a5
1c00513c:	866e                	mv	a2,s11
1c00513e:	856a                	mv	a0,s10
1c005140:	86e6                	mv	a3,s9
1c005142:	c622                	sw	s0,12(sp)
1c005144:	c45a                	sw	s6,8(sp)
1c005146:	c256                	sw	s5,4(sp)
1c005148:	c05e                	sw	s7,0(sp)
1c00514a:	88d2                	mv	a7,s4
1c00514c:	884e                	mv	a6,s3
1c00514e:	87ca                	mv	a5,s2
1c005150:	8762                	mv	a4,s8
1c005152:	85a6                	mv	a1,s1
1c005154:	c6eff0ef          	jal	ra,1c0045c2 <KerConv3x3Stride1_Body_2Out_SQ8.isra.17>
1c005158:	5642                	lw	a2,48(sp)
1c00515a:	56b2                	lw	a3,44(sp)
1c00515c:	0da5                	addi	s11,s11,9
1c00515e:	9d32                	add	s10,s10,a2
1c005160:	fcdd9ee3          	bne	s11,a3,1c00513c <KerParConv3x3Stride1_SQ8+0x118>
1c005164:	57d2                	lw	a5,52(sp)
1c005166:	4626                	lw	a2,72(sp)
1c005168:	5762                	lw	a4,56(sp)
1c00516a:	4696                	lw	a3,68(sp)
1c00516c:	97b2                	add	a5,a5,a2
1c00516e:	da3e                	sw	a5,52(sp)
1c005170:	4786                	lw	a5,64(sp)
1c005172:	0705                	addi	a4,a4,1
1c005174:	dc3a                	sw	a4,56(sp)
1c005176:	94b6                	add	s1,s1,a3
1c005178:	fae795e3          	bne	a5,a4,1c005122 <KerParConv3x3Stride1_SQ8+0xfe>
1c00517c:	4676                	lw	a2,92(sp)
1c00517e:	fc1637b3          	p.bclr	a5,a2,30,1
1c005182:	c3a5                	beqz	a5,1c0051e2 <KerParConv3x3Stride1_SQ8+0x1be>
1c005184:	5696                	lw	a3,100(sp)
1c005186:	5772                	lw	a4,60(sp)
1c005188:	fff68793          	addi	a5,a3,-1
1c00518c:	cb39                	beqz	a4,1c0051e2 <KerParConv3x3Stride1_SQ8+0x1be>
1c00518e:	037906b3          	mul	a3,s2,s7
1c005192:	5626                	lw	a2,104(sp)
1c005194:	5cb6                	lw	s9,108(sp)
1c005196:	02cc04b3          	mul	s1,s8,a2
1c00519a:	4666                	lw	a2,88(sp)
1c00519c:	068a                	slli	a3,a3,0x2
1c00519e:	02f60733          	mul	a4,a2,a5
1c0051a2:	42f68cb3          	p.mac	s9,a3,a5
1c0051a6:	ec4d                	bnez	s0,1c005260 <KerParConv3x3Stride1_SQ8+0x23c>
1c0051a8:	56f2                	lw	a3,60(sp)
1c0051aa:	00371b93          	slli	s7,a4,0x3
1c0051ae:	9bba                	add	s7,s7,a4
1c0051b0:	00d707b3          	add	a5,a4,a3
1c0051b4:	5706                	lw	a4,96(sp)
1c0051b6:	00379d93          	slli	s11,a5,0x3
1c0051ba:	4d36                	lw	s10,76(sp)
1c0051bc:	9dbe                	add	s11,s11,a5
1c0051be:	9bba                	add	s7,s7,a4
1c0051c0:	9dba                	add	s11,s11,a4
1c0051c2:	865e                	mv	a2,s7
1c0051c4:	856a                	mv	a0,s10
1c0051c6:	c222                	sw	s0,4(sp)
1c0051c8:	c05a                	sw	s6,0(sp)
1c0051ca:	88d6                	mv	a7,s5
1c0051cc:	8852                	mv	a6,s4
1c0051ce:	87ce                	mv	a5,s3
1c0051d0:	874a                	mv	a4,s2
1c0051d2:	86e2                	mv	a3,s8
1c0051d4:	85e6                	mv	a1,s9
1c0051d6:	0ba5                	addi	s7,s7,9
1c0051d8:	e46ff0ef          	jal	ra,1c00481e <KerConv3x3Stride1_Body_SQ8.isra.19>
1c0051dc:	9d26                	add	s10,s10,s1
1c0051de:	ff7d92e3          	bne	s11,s7,1c0051c2 <KerParConv3x3Stride1_SQ8+0x19e>
1c0051e2:	002047b7          	lui	a5,0x204
1c0051e6:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0051ea:	01c7e703          	p.elw	a4,28(a5)
1c0051ee:	50ba                	lw	ra,172(sp)
1c0051f0:	542a                	lw	s0,168(sp)
1c0051f2:	549a                	lw	s1,164(sp)
1c0051f4:	590a                	lw	s2,160(sp)
1c0051f6:	49fa                	lw	s3,156(sp)
1c0051f8:	4a6a                	lw	s4,152(sp)
1c0051fa:	4ada                	lw	s5,148(sp)
1c0051fc:	4b4a                	lw	s6,144(sp)
1c0051fe:	4bba                	lw	s7,140(sp)
1c005200:	4c2a                	lw	s8,136(sp)
1c005202:	4c9a                	lw	s9,132(sp)
1c005204:	4d0a                	lw	s10,128(sp)
1c005206:	5df6                	lw	s11,124(sp)
1c005208:	614d                	addi	sp,sp,176
1c00520a:	8082                	ret
1c00520c:	5752                	lw	a4,52(sp)
1c00520e:	47d6                	lw	a5,84(sp)
1c005210:	4d36                	lw	s10,76(sp)
1c005212:	5dd2                	lw	s11,52(sp)
1c005214:	973e                	add	a4,a4,a5
1c005216:	d63a                	sw	a4,44(sp)
1c005218:	866e                	mv	a2,s11
1c00521a:	856a                	mv	a0,s10
1c00521c:	88d2                	mv	a7,s4
1c00521e:	884e                	mv	a6,s3
1c005220:	87ca                	mv	a5,s2
1c005222:	8762                	mv	a4,s8
1c005224:	86e6                	mv	a3,s9
1c005226:	85a6                	mv	a1,s1
1c005228:	c622                	sw	s0,12(sp)
1c00522a:	c45a                	sw	s6,8(sp)
1c00522c:	c256                	sw	s5,4(sp)
1c00522e:	c05e                	sw	s7,0(sp)
1c005230:	b92ff0ef          	jal	ra,1c0045c2 <KerConv3x3Stride1_Body_2Out_SQ8.isra.17>
1c005234:	866e                	mv	a2,s11
1c005236:	856a                	mv	a0,s10
1c005238:	86e6                	mv	a3,s9
1c00523a:	c822                	sw	s0,16(sp)
1c00523c:	c622                	sw	s0,12(sp)
1c00523e:	c45a                	sw	s6,8(sp)
1c005240:	c256                	sw	s5,4(sp)
1c005242:	c05e                	sw	s7,0(sp)
1c005244:	88d2                	mv	a7,s4
1c005246:	884e                	mv	a6,s3
1c005248:	87ca                	mv	a5,s2
1c00524a:	8762                	mv	a4,s8
1c00524c:	85a6                	mv	a1,s1
1c00524e:	c8aff0ef          	jal	ra,1c0046d8 <KerConv3x3BorderStride1_2Out_SQ8.isra.18>
1c005252:	5642                	lw	a2,48(sp)
1c005254:	56b2                	lw	a3,44(sp)
1c005256:	0da5                	addi	s11,s11,9
1c005258:	9d32                	add	s10,s10,a2
1c00525a:	fadd9fe3          	bne	s11,a3,1c005218 <KerParConv3x3Stride1_SQ8+0x1f4>
1c00525e:	b719                	j	1c005164 <KerParConv3x3Stride1_SQ8+0x140>
1c005260:	5672                	lw	a2,60(sp)
1c005262:	5686                	lw	a3,96(sp)
1c005264:	00371313          	slli	t1,a4,0x3
1c005268:	00c707b3          	add	a5,a4,a2
1c00526c:	00379d93          	slli	s11,a5,0x3
1c005270:	97ee                	add	a5,a5,s11
1c005272:	4d36                	lw	s10,76(sp)
1c005274:	933a                	add	t1,t1,a4
1c005276:	97b6                	add	a5,a5,a3
1c005278:	00668db3          	add	s11,a3,t1
1c00527c:	d83e                	sw	a5,48(sp)
1c00527e:	866e                	mv	a2,s11
1c005280:	856a                	mv	a0,s10
1c005282:	88d6                	mv	a7,s5
1c005284:	8852                	mv	a6,s4
1c005286:	87ce                	mv	a5,s3
1c005288:	874a                	mv	a4,s2
1c00528a:	86e2                	mv	a3,s8
1c00528c:	85e6                	mv	a1,s9
1c00528e:	c222                	sw	s0,4(sp)
1c005290:	c05a                	sw	s6,0(sp)
1c005292:	d8cff0ef          	jal	ra,1c00481e <KerConv3x3Stride1_Body_SQ8.isra.19>
1c005296:	866e                	mv	a2,s11
1c005298:	856a                	mv	a0,s10
1c00529a:	874a                	mv	a4,s2
1c00529c:	c622                	sw	s0,12(sp)
1c00529e:	c422                	sw	s0,8(sp)
1c0052a0:	c25a                	sw	s6,4(sp)
1c0052a2:	c056                	sw	s5,0(sp)
1c0052a4:	88de                	mv	a7,s7
1c0052a6:	8852                	mv	a6,s4
1c0052a8:	87ce                	mv	a5,s3
1c0052aa:	86e2                	mv	a3,s8
1c0052ac:	85e6                	mv	a1,s9
1c0052ae:	e78ff0ef          	jal	ra,1c004926 <KerConv3x3BorderStride1_SQ8.isra.21>
1c0052b2:	5742                	lw	a4,48(sp)
1c0052b4:	0da5                	addi	s11,s11,9
1c0052b6:	9d26                	add	s10,s10,s1
1c0052b8:	fced93e3          	bne	s11,a4,1c00527e <KerParConv3x3Stride1_SQ8+0x25a>
1c0052bc:	b71d                	j	1c0051e2 <KerParConv3x3Stride1_SQ8+0x1be>

1c0052be <KerParConv5x5Stride1_SQ8>:
	unsigned int FS=5, S=1;
	signed char * __restrict__ In = Arg->In;
	unsigned int W = Arg->W;
	unsigned int H = Arg->H;
	int TotalInFeatures = Arg->TotalInFeatures;
	unsigned int OutFeatures = Arg->OutFeatures;
1c0052be:	00e55683          	lhu	a3,14(a0)
{
1c0052c2:	7119                	addi	sp,sp,-128
1c0052c4:	cae6                	sw	s9,84(sp)
	signed char * __restrict__ Filter = Arg->Filter;
	int * __restrict__ Out = Arg->Out;
	unsigned int CoreId = gap_coreid();
1c0052c6:	f1402cf3          	csrr	s9,mhartid
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c0052ca:	f836b7b3          	p.bclr	a5,a3,28,3
1c0052ce:	0036d713          	srli	a4,a3,0x3
1c0052d2:	00f037b3          	snez	a5,a5
1c0052d6:	97ba                	add	a5,a5,a4
	unsigned int CoreId = gap_coreid();
1c0052d8:	c80c9cb3          	p.extractu	s9,s9,4,0
	unsigned int Chunk = ChunkSize(OutFeatures);
	unsigned int First = Chunk*CoreId;
1c0052dc:	02fc8cb3          	mul	s9,s9,a5
{
1c0052e0:	daa6                	sw	s1,116(sp)
1c0052e2:	d8ca                	sw	s2,112(sp)
1c0052e4:	d6ce                	sw	s3,108(sp)
1c0052e6:	d4d2                	sw	s4,104(sp)
1c0052e8:	d2d6                	sw	s5,100(sp)
1c0052ea:	d0da                	sw	s6,96(sp)
1c0052ec:	cede                	sw	s7,92(sp)
1c0052ee:	cce2                	sw	s8,88(sp)
1c0052f0:	c6ee                	sw	s11,76(sp)
1c0052f2:	de86                	sw	ra,124(sp)
1c0052f4:	dca2                	sw	s0,120(sp)
1c0052f6:	c8ea                	sw	s10,80(sp)
	unsigned int Last = Min(First+Chunk, OutFeatures);
	v4s PadIn = Arg->Pad;
1c0052f8:	5100                	lw	s0,32(a0)

	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c0052fa:	00655a03          	lhu	s4,6(a0)
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c0052fe:	00a55b03          	lhu	s6,10(a0)
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c005302:	780479d7          	pv.extract.b	s3,s0,0
1c005306:	ffca0913          	addi	s2,s4,-4
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00530a:	4711                	li	a4,4
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00530c:	994e                	add	s2,s2,s3
1c00530e:	7a0475d7          	pv.extract.b	a1,s0,1
1c005312:	992e                	add	s2,s2,a1
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c005314:	97e6                	add	a5,a5,s9
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c005316:	413705b3          	sub	a1,a4,s3
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00531a:	78147ad7          	pv.extract.b	s5,s0,2
1c00531e:	ffcb0613          	addi	a2,s6,-4
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c005322:	40ba0a33          	sub	s4,s4,a1
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c005326:	04d7c7b3          	p.min	a5,a5,a3
	signed char * __restrict__ In = Arg->In;
1c00532a:	410c                	lw	a1,0(a0)
	unsigned int W = Arg->W;
1c00532c:	00455b83          	lhu	s7,4(a0)
	unsigned int H = Arg->H;
1c005330:	00855c03          	lhu	s8,8(a0)
	int TotalInFeatures = Arg->TotalInFeatures;
1c005334:	01055683          	lhu	a3,16(a0)
	signed char * __restrict__ Filter = Arg->Filter;
1c005338:	01452d83          	lw	s11,20(a0)
	int * __restrict__ Out = Arg->Out;
1c00533c:	4d44                	lw	s1,28(a0)
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));

	unsigned int InFeatures = Arg->InFeatures;
1c00533e:	00c55503          	lhu	a0,12(a0)
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c005342:	9656                	add	a2,a2,s5
1c005344:	7a147857          	pv.extract.b	a6,s0,3
1c005348:	9832                	add	a6,a6,a2
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00534a:	41570733          	sub	a4,a4,s5
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c00534e:	053949b3          	p.min	s3,s2,s3
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c005352:	05584ab3          	p.min	s5,a6,s5
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c005356:	40eb0b33          	sub	s6,s6,a4
	unsigned int First = Chunk*CoreId;
1c00535a:	ce66                	sw	s9,28(sp)
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00535c:	d042                	sw	a6,32(sp)
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c00535e:	d43e                	sw	a5,40(sp)
	signed char * __restrict__ In = Arg->In;
1c005360:	da2e                	sw	a1,52(sp)
	unsigned int InFeatures = Arg->InFeatures;
1c005362:	d22a                	sw	a0,36(sp)
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c005364:	0549ea33          	p.max	s4,s3,s4
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c005368:	056aeb33          	p.max	s6,s5,s6
		
	for (unsigned int of=First; of<Last; of++) 
1c00536c:	08fcf163          	bleu	a5,s9,1c0053ee <KerParConv5x5Stride1_SQ8+0x130>
		for (unsigned int If=0; If<InFeatures; If++) {
			signed char *in = In+W*H*If, *filter = Filter+FS*FS*(TotalInFeatures*of + If);
			int *out = Out+Wo*Ho*(of);
1c005370:	03090633          	mul	a2,s2,a6
1c005374:	00169713          	slli	a4,a3,0x1
1c005378:	00151793          	slli	a5,a0,0x1
1c00537c:	9736                	add	a4,a4,a3
1c00537e:	97aa                	add	a5,a5,a0
1c005380:	070e                	slli	a4,a4,0x3
1c005382:	078e                	slli	a5,a5,0x3
1c005384:	9736                	add	a4,a4,a3
1c005386:	97aa                	add	a5,a5,a0
1c005388:	de3e                	sw	a5,60(sp)
1c00538a:	42ec8db3          	p.mac	s11,s9,a4
1c00538e:	00261793          	slli	a5,a2,0x2
1c005392:	d83a                	sw	a4,48(sp)
			KerConv5x5Stride1_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
			if ((int)PadIn) KerConv5x5BorderStride1_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c005394:	dc22                	sw	s0,56(sp)
1c005396:	d63e                	sw	a5,44(sp)
			signed char *in = In+W*H*If, *filter = Filter+FS*FS*(TotalInFeatures*of + If);
1c005398:	038b8c33          	mul	s8,s7,s8
1c00539c:	cc6e                	sw	s11,24(sp)
1c00539e:	42fc84b3          	p.mac	s1,s9,a5
		for (unsigned int If=0; If<InFeatures; If++) {
1c0053a2:	5612                	lw	a2,36(sp)
1c0053a4:	ca0d                	beqz	a2,1c0053d6 <KerParConv5x5Stride1_SQ8+0x118>
1c0053a6:	5662                	lw	a2,56(sp)
1c0053a8:	ea25                	bnez	a2,1c005418 <KerParConv5x5Stride1_SQ8+0x15a>
1c0053aa:	4762                	lw	a4,24(sp)
1c0053ac:	57f2                	lw	a5,60(sp)
1c0053ae:	5d52                	lw	s10,52(sp)
			int *out = Out+Wo*Ho*(of);
1c0053b0:	8dba                	mv	s11,a4
1c0053b2:	00f70cb3          	add	s9,a4,a5
			KerConv5x5Stride1_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
1c0053b6:	866e                	mv	a2,s11
1c0053b8:	856a                	mv	a0,s10
1c0053ba:	c222                	sw	s0,4(sp)
1c0053bc:	c05a                	sw	s6,0(sp)
1c0053be:	88d6                	mv	a7,s5
1c0053c0:	8852                	mv	a6,s4
1c0053c2:	87ce                	mv	a5,s3
1c0053c4:	874a                	mv	a4,s2
1c0053c6:	86de                	mv	a3,s7
1c0053c8:	85a6                	mv	a1,s1
1c0053ca:	0de5                	addi	s11,s11,25
1c0053cc:	e7aff0ef          	jal	ra,1c004a46 <KerConv5x5Stride1_Body_SQ8.isra.42>
1c0053d0:	9d62                	add	s10,s10,s8
		for (unsigned int If=0; If<InFeatures; If++) {
1c0053d2:	ff9d92e3          	bne	s11,s9,1c0053b6 <KerParConv5x5Stride1_SQ8+0xf8>
	for (unsigned int of=First; of<Last; of++) 
1c0053d6:	4672                	lw	a2,28(sp)
1c0053d8:	4762                	lw	a4,24(sp)
1c0053da:	57c2                	lw	a5,48(sp)
1c0053dc:	58b2                	lw	a7,44(sp)
1c0053de:	55a2                	lw	a1,40(sp)
1c0053e0:	0605                	addi	a2,a2,1
1c0053e2:	973e                	add	a4,a4,a5
1c0053e4:	ce32                	sw	a2,28(sp)
1c0053e6:	cc3a                	sw	a4,24(sp)
1c0053e8:	94c6                	add	s1,s1,a7
1c0053ea:	fac59ce3          	bne	a1,a2,1c0053a2 <KerParConv5x5Stride1_SQ8+0xe4>
1c0053ee:	002047b7          	lui	a5,0x204
1c0053f2:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0053f6:	01c7e703          	p.elw	a4,28(a5)
		}
	gap_waitbarrier(0);
}
1c0053fa:	50f6                	lw	ra,124(sp)
1c0053fc:	5466                	lw	s0,120(sp)
1c0053fe:	54d6                	lw	s1,116(sp)
1c005400:	5946                	lw	s2,112(sp)
1c005402:	59b6                	lw	s3,108(sp)
1c005404:	5a26                	lw	s4,104(sp)
1c005406:	5a96                	lw	s5,100(sp)
1c005408:	5b06                	lw	s6,96(sp)
1c00540a:	4bf6                	lw	s7,92(sp)
1c00540c:	4c66                	lw	s8,88(sp)
1c00540e:	4cd6                	lw	s9,84(sp)
1c005410:	4d46                	lw	s10,80(sp)
1c005412:	4db6                	lw	s11,76(sp)
1c005414:	6109                	addi	sp,sp,128
1c005416:	8082                	ret
1c005418:	48e2                	lw	a7,24(sp)
1c00541a:	55f2                	lw	a1,60(sp)
1c00541c:	5dd2                	lw	s11,52(sp)
			int *out = Out+Wo*Ho*(of);
1c00541e:	8cc6                	mv	s9,a7
1c005420:	00b88d33          	add	s10,a7,a1
1c005424:	87ea                	mv	a5,s10
1c005426:	8d6e                	mv	s10,s11
1c005428:	8dbe                	mv	s11,a5
			KerConv5x5Stride1_Body_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn);
1c00542a:	8666                	mv	a2,s9
1c00542c:	856a                	mv	a0,s10
1c00542e:	88d6                	mv	a7,s5
1c005430:	8852                	mv	a6,s4
1c005432:	87ce                	mv	a5,s3
1c005434:	874a                	mv	a4,s2
1c005436:	86de                	mv	a3,s7
1c005438:	85a6                	mv	a1,s1
1c00543a:	c222                	sw	s0,4(sp)
1c00543c:	c05a                	sw	s6,0(sp)
1c00543e:	e08ff0ef          	jal	ra,1c004a46 <KerConv5x5Stride1_Body_SQ8.isra.42>
			if ((int)PadIn) KerConv5x5BorderStride1_SQ8(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c005442:	5882                	lw	a7,32(sp)
1c005444:	8666                	mv	a2,s9
1c005446:	856a                	mv	a0,s10
1c005448:	c622                	sw	s0,12(sp)
1c00544a:	c422                	sw	s0,8(sp)
1c00544c:	c25a                	sw	s6,4(sp)
1c00544e:	c056                	sw	s5,0(sp)
1c005450:	8852                	mv	a6,s4
1c005452:	87ce                	mv	a5,s3
1c005454:	874a                	mv	a4,s2
1c005456:	86de                	mv	a3,s7
1c005458:	85a6                	mv	a1,s1
1c00545a:	0ce5                	addi	s9,s9,25
1c00545c:	933ff0ef          	jal	ra,1c004d8e <KerConv5x5BorderStride1_SQ8.isra.44>
1c005460:	9d62                	add	s10,s10,s8
		for (unsigned int If=0; If<InFeatures; If++) {
1c005462:	fdbc94e3          	bne	s9,s11,1c00542a <KerParConv5x5Stride1_SQ8+0x16c>
1c005466:	bf85                	j	1c0053d6 <KerParConv5x5Stride1_SQ8+0x118>

1c005468 <KerMaxPool2x2Stride2_SQ8>:
					int Acc0N = Acc0 << 8;
					Acc0 = AT_SCALE((Sigmoid(Acc0N) >> 8), ActScale, ActScaleN);
				}
				break;
		}
		InOut[i] = gap_clip(Acc0, 7);
1c005468:	715d                	addi	sp,sp,-80
1c00546a:	4366                	lw	t1,88(sp)
1c00546c:	d85e                	sw	s7,48(sp)
1c00546e:	4bf6                	lw	s7,92(sp)
1c005470:	78037e57          	pv.extract.b	t3,t1,0
1c005474:	ce32                	sw	a2,28(sp)
1c005476:	c642                	sw	a6,12(sp)
1c005478:	7a037657          	pv.extract.b	a2,t1,1
1c00547c:	780bf857          	pv.extract.b	a6,s7,0
1c005480:	78137f57          	pv.extract.b	t5,t1,2
1c005484:	7a137357          	pv.extract.b	t1,t1,3
1c005488:	c2ca                	sw	s2,68(sp)
1c00548a:	d662                	sw	s8,44(sp)
1c00548c:	c6a2                	sw	s0,76(sp)
1c00548e:	c4a6                	sw	s1,72(sp)
1c005490:	c0ce                	sw	s3,64(sp)
1c005492:	de52                	sw	s4,60(sp)
1c005494:	dc56                	sw	s5,56(sp)
1c005496:	da5a                	sw	s6,52(sp)
1c005498:	d466                	sw	s9,40(sp)
1c00549a:	d26a                	sw	s10,36(sp)
1c00549c:	d06e                	sw	s11,32(sp)
1c00549e:	c072                	sw	t3,0(sp)
1c0054a0:	c846                	sw	a7,16(sp)
1c0054a2:	c432                	sw	a2,8(sp)
1c0054a4:	cc1a                	sw	t1,24(sp)
1c0054a6:	c242                	sw	a6,4(sp)
1c0054a8:	4946                	lw	s2,80(sp)
1c0054aa:	4c56                	lw	s8,84(sp)
1c0054ac:	781bfbd7          	pv.extract.b	s7,s7,2
1c0054b0:	300e0f63          	beqz	t3,1c0057ce <KerMaxPool2x2Stride2_SQ8+0x366>
1c0054b4:	31897d63          	bleu	s8,s2,1c0057ce <KerMaxPool2x2Stride2_SQ8+0x366>
1c0054b8:	00191c93          	slli	s9,s2,0x1
1c0054bc:	417c8633          	sub	a2,s9,s7
1c0054c0:	8832                	mv	a6,a2
1c0054c2:	02e903b3          	mul	t2,s2,a4
1c0054c6:	0605                	addi	a2,a2,1
1c0054c8:	8eaa                	mv	t4,a0
1c0054ca:	832a                	mv	t1,a0
1c0054cc:	00159a13          	slli	s4,a1,0x1
1c0054d0:	412c08b3          	sub	a7,s8,s2
1c0054d4:	42b80eb3          	p.mac	t4,a6,a1
1c0054d8:	00768e33          	add	t3,a3,t2
1c0054dc:	42b60333          	p.mac	t1,a2,a1
1c0054e0:	00a8c0fb          	lp.setup	x1,a7,1c0054f4 <KerMaxPool2x2Stride2_SQ8+0x8c>
1c0054e4:	014ef60b          	p.lb	a2,s4(t4!)
1c0054e8:	0143780b          	p.lb	a6,s4(t1!)
1c0054ec:	04066633          	p.max	a2,a2,zero
1c0054f0:	05066633          	p.max	a2,a2,a6
1c0054f4:	00ce472b          	p.sb	a2,a4(t3!)
1c0054f8:	0a0f0a63          	beqz	t5,1c0055ac <KerMaxPool2x2Stride2_SQ8+0x144>
1c0054fc:	4e32                	lw	t3,12(sp)
1c0054fe:	4612                	lw	a2,4(sp)
1c005500:	00179f13          	slli	t5,a5,0x1
1c005504:	40fe0fb3          	sub	t6,t3,a5
1c005508:	40cf0f33          	sub	t5,t5,a2
1c00550c:	001fd293          	srli	t0,t6,0x1
1c005510:	9f2a                	add	t5,t5,a0
1c005512:	04028463          	beqz	t0,1c00555a <KerMaxPool2x2Stride2_SQ8+0xf2>
1c005516:	00229893          	slli	a7,t0,0x2
1c00551a:	18f1                	addi	a7,a7,-4
1c00551c:	00178313          	addi	t1,a5,1
1c005520:	0028d893          	srli	a7,a7,0x2
1c005524:	8efa                	mv	t4,t5
1c005526:	00f68e33          	add	t3,a3,a5
1c00552a:	9336                	add	t1,t1,a3
1c00552c:	0885                	addi	a7,a7,1
1c00552e:	0148c0fb          	lp.setup	x1,a7,1c005556 <KerMaxPool2x2Stride2_SQ8+0xee>
1c005532:	004ea60b          	p.lw	a2,4(t4!)
1c005536:	30067657          	pv.max.sci.b	a2,a2,0
1c00553a:	7a067857          	pv.extract.b	a6,a2,1
1c00553e:	780673d7          	pv.extract.b	t2,a2,0
1c005542:	0503e3b3          	p.max	t2,t2,a6
1c005546:	78167857          	pv.extract.b	a6,a2,2
1c00554a:	7a167657          	pv.extract.b	a2,a2,3
1c00554e:	04c86633          	p.max	a2,a6,a2
1c005552:	007e012b          	p.sb	t2,2(t3!)
1c005556:	00c3012b          	p.sb	a2,2(t1!)
1c00555a:	fc1fb633          	p.bclr	a2,t6,30,1
1c00555e:	c21d                	beqz	a2,1c005584 <KerMaxPool2x2Stride2_SQ8+0x11c>
1c005560:	00229613          	slli	a2,t0,0x2
1c005564:	20cf7603          	p.lw	a2,a2(t5)
1c005568:	c00fbfb3          	p.bclr	t6,t6,0,0
1c00556c:	00f688b3          	add	a7,a3,a5
1c005570:	30067657          	pv.max.sci.b	a2,a2,0
1c005574:	78067857          	pv.extract.b	a6,a2,0
1c005578:	7a067657          	pv.extract.b	a2,a2,1
1c00557c:	04c86633          	p.max	a2,a6,a2
1c005580:	00c8cfa3          	p.sb	a2,t6(a7)
1c005584:	4e02                	lw	t3,0(sp)
1c005586:	000e0863          	beqz	t3,1c005596 <KerMaxPool2x2Stride2_SQ8+0x12e>
1c00558a:	00050603          	lb	a2,0(a0)
1c00558e:	04066633          	p.max	a2,a2,zero
1c005592:	00c68023          	sb	a2,0(a3)
1c005596:	4622                	lw	a2,8(sp)
1c005598:	24061b63          	bnez	a2,1c0057ee <KerMaxPool2x2Stride2_SQ8+0x386>
1c00559c:	13897763          	bleu	s8,s2,1c0056ca <KerMaxPool2x2Stride2_SQ8+0x262>
1c0055a0:	02e903b3          	mul	t2,s2,a4
1c0055a4:	00159a13          	slli	s4,a1,0x1
1c0055a8:	00191c93          	slli	s9,s2,0x1
1c0055ac:	4832                	lw	a6,12(sp)
1c0055ae:	001c8613          	addi	a2,s9,1
1c0055b2:	4e12                	lw	t3,4(sp)
1c0055b4:	41760633          	sub	a2,a2,s7
1c0055b8:	40f80ab3          	sub	s5,a6,a5
1c0055bc:	001adb13          	srli	s6,s5,0x1
1c0055c0:	00179293          	slli	t0,a5,0x1
1c0055c4:	02b60633          	mul	a2,a2,a1
1c0055c8:	002b1993          	slli	s3,s6,0x2
1c0055cc:	41c282b3          	sub	t0,t0,t3
1c0055d0:	92ce                	add	t0,t0,s3
1c0055d2:	417c8833          	sub	a6,s9,s7
1c0055d6:	8416                	mv	s0,t0
1c0055d8:	c00abd33          	p.bclr	s10,s5,0,0
1c0055dc:	93be                	add	t2,t2,a5
1c0055de:	00f68db3          	add	s11,a3,a5
1c0055e2:	fc1abab3          	p.bclr	s5,s5,30,1
1c0055e6:	42b80433          	p.mac	s0,a6,a1
1c0055ea:	ca32                	sw	a2,20(sp)
1c0055ec:	4852                	lw	a6,20(sp)
1c0055ee:	00190613          	addi	a2,s2,1
1c0055f2:	93b6                	add	t2,t2,a3
1c0055f4:	92c2                	add	t0,t0,a6
1c0055f6:	9d6e                	add	s10,s10,s11
1c0055f8:	412c04b3          	sub	s1,s8,s2
1c0055fc:	92aa                	add	t0,t0,a0
1c0055fe:	942a                	add	s0,s0,a0
1c005600:	20cc6463          	bltu	s8,a2,1c005808 <KerMaxPool2x2Stride2_SQ8+0x3a0>
1c005604:	200c0263          	beqz	s8,1c005808 <KerMaxPool2x2Stride2_SQ8+0x3a0>
1c005608:	03b4c07b          	lp.setup	x0,s1,1c00567e <KerMaxPool2x2Stride2_SQ8+0x216>
1c00560c:	040b0663          	beqz	s6,1c005658 <KerMaxPool2x2Stride2_SQ8+0x1f0>
1c005610:	ffc98893          	addi	a7,s3,-4
1c005614:	0028d893          	srli	a7,a7,0x2
1c005618:	41328f33          	sub	t5,t0,s3
1c00561c:	00138e93          	addi	t4,t2,1
1c005620:	8e1e                	mv	t3,t2
1c005622:	41340333          	sub	t1,s0,s3
1c005626:	0885                	addi	a7,a7,1
1c005628:	0168c0fb          	lp.setup	x1,a7,1c005654 <KerMaxPool2x2Stride2_SQ8+0x1ec>
1c00562c:	0043280b          	p.lw	a6,4(t1!)
1c005630:	004f260b          	p.lw	a2,4(t5!)
1c005634:	30c81657          	pv.max.b	a2,a6,a2
1c005638:	7a067857          	pv.extract.b	a6,a2,1
1c00563c:	78067fd7          	pv.extract.b	t6,a2,0
1c005640:	050fefb3          	p.max	t6,t6,a6
1c005644:	78167857          	pv.extract.b	a6,a2,2
1c005648:	7a167657          	pv.extract.b	a2,a2,3
1c00564c:	04c86633          	p.max	a2,a6,a2
1c005650:	01fe012b          	p.sb	t6,2(t3!)
1c005654:	00ce812b          	p.sb	a2,2(t4!)
1c005658:	020a8163          	beqz	s5,1c00567a <KerMaxPool2x2Stride2_SQ8+0x212>
1c00565c:	0002a803          	lw	a6,0(t0)
1c005660:	4010                	lw	a2,0(s0)
1c005662:	41b388b3          	sub	a7,t2,s11
1c005666:	31061657          	pv.max.b	a2,a2,a6
1c00566a:	78067857          	pv.extract.b	a6,a2,0
1c00566e:	7a067657          	pv.extract.b	a2,a2,1
1c005672:	04c86633          	p.max	a2,a6,a2
1c005676:	00cd48a3          	p.sb	a2,a7(s10)
1c00567a:	9452                	add	s0,s0,s4
1c00567c:	92d2                	add	t0,t0,s4
1c00567e:	93ba                	add	t2,t2,a4
1c005680:	4622                	lw	a2,8(sp)
1c005682:	c621                	beqz	a2,1c0056ca <KerMaxPool2x2Stride2_SQ8+0x262>
1c005684:	0c89                	addi	s9,s9,2
1c005686:	00190613          	addi	a2,s2,1
1c00568a:	417c8bb3          	sub	s7,s9,s7
1c00568e:	832a                	mv	t1,a0
1c005690:	88b6                	mv	a7,a3
1c005692:	42bb8333          	p.mac	t1,s7,a1
1c005696:	4852                	lw	a6,20(sp)
1c005698:	412c0933          	sub	s2,s8,s2
1c00569c:	fff80e13          	addi	t3,a6,-1
1c0056a0:	9e2a                	add	t3,t3,a0
1c0056a2:	42e608b3          	p.mac	a7,a2,a4
1c0056a6:	137d                	addi	t1,t1,-1
1c0056a8:	18fd                	addi	a7,a7,-1
1c0056aa:	14cc6d63          	bltu	s8,a2,1c005804 <KerMaxPool2x2Stride2_SQ8+0x39c>
1c0056ae:	140c0b63          	beqz	s8,1c005804 <KerMaxPool2x2Stride2_SQ8+0x39c>
1c0056b2:	00a940fb          	lp.setup	x1,s2,1c0056c6 <KerMaxPool2x2Stride2_SQ8+0x25e>
1c0056b6:	014e760b          	p.lb	a2,s4(t3!)
1c0056ba:	0143780b          	p.lb	a6,s4(t1!)
1c0056be:	04066633          	p.max	a2,a2,zero
1c0056c2:	05066633          	p.max	a2,a2,a6
1c0056c6:	00c8c72b          	p.sb	a2,a4(a7!)
1c0056ca:	4e62                	lw	t3,24(sp)
1c0056cc:	0e0e0363          	beqz	t3,1c0057b2 <KerMaxPool2x2Stride2_SQ8+0x34a>
1c0056d0:	4e72                	lw	t3,28(sp)
1c0056d2:	4632                	lw	a2,12(sp)
1c0056d4:	4812                	lw	a6,4(sp)
1c0056d6:	fffe0f93          	addi	t6,t3,-1
1c0056da:	02bf8fb3          	mul	t6,t6,a1
1c0056de:	00179f13          	slli	t5,a5,0x1
1c0056e2:	40f602b3          	sub	t0,a2,a5
1c0056e6:	0012d393          	srli	t2,t0,0x1
1c0056ea:	9f7e                	add	t5,t5,t6
1c0056ec:	410f0f33          	sub	t5,t5,a6
1c0056f0:	9f2a                	add	t5,t5,a0
1c0056f2:	04038963          	beqz	t2,1c005744 <KerMaxPool2x2Stride2_SQ8+0x2dc>
1c0056f6:	4e42                	lw	t3,16(sp)
1c0056f8:	00239313          	slli	t1,t2,0x2
1c0056fc:	1371                	addi	t1,t1,-4
1c0056fe:	fffe0613          	addi	a2,t3,-1
1c005702:	8e3e                	mv	t3,a5
1c005704:	42e60e33          	p.mac	t3,a2,a4
1c005708:	00235313          	srli	t1,t1,0x2
1c00570c:	847a                	mv	s0,t5
1c00570e:	0305                	addi	t1,t1,1
1c005710:	001e0e93          	addi	t4,t3,1
1c005714:	9eb6                	add	t4,t4,a3
1c005716:	9e36                	add	t3,t3,a3
1c005718:	014340fb          	lp.setup	x1,t1,1c005740 <KerMaxPool2x2Stride2_SQ8+0x2d8>
1c00571c:	0044260b          	p.lw	a2,4(s0!)
1c005720:	30067657          	pv.max.sci.b	a2,a2,0
1c005724:	7a067857          	pv.extract.b	a6,a2,1
1c005728:	780678d7          	pv.extract.b	a7,a2,0
1c00572c:	0508e8b3          	p.max	a7,a7,a6
1c005730:	78167857          	pv.extract.b	a6,a2,2
1c005734:	7a167657          	pv.extract.b	a2,a2,3
1c005738:	04c86633          	p.max	a2,a6,a2
1c00573c:	011e012b          	p.sb	a7,2(t3!)
1c005740:	00ce812b          	p.sb	a2,2(t4!)
1c005744:	fc12b633          	p.bclr	a2,t0,30,1
1c005748:	c61d                	beqz	a2,1c005776 <KerMaxPool2x2Stride2_SQ8+0x30e>
1c00574a:	4842                	lw	a6,16(sp)
1c00574c:	97b6                	add	a5,a5,a3
1c00574e:	c002b2b3          	p.bclr	t0,t0,0,0
1c005752:	fff80613          	addi	a2,a6,-1
1c005756:	42e607b3          	p.mac	a5,a2,a4
1c00575a:	00239613          	slli	a2,t2,0x2
1c00575e:	20cf7603          	p.lw	a2,a2(t5)
1c005762:	30067657          	pv.max.sci.b	a2,a2,0
1c005766:	78067857          	pv.extract.b	a6,a2,0
1c00576a:	7a067657          	pv.extract.b	a2,a2,1
1c00576e:	04c86633          	p.max	a2,a6,a2
1c005772:	00c7c2a3          	p.sb	a2,t0(a5)
1c005776:	4e02                	lw	t3,0(sp)
1c005778:	000e0f63          	beqz	t3,1c005796 <KerMaxPool2x2Stride2_SQ8+0x32e>
1c00577c:	47c2                	lw	a5,16(sp)
1c00577e:	fff78613          	addi	a2,a5,-1
1c005782:	02e60633          	mul	a2,a2,a4
1c005786:	01f507b3          	add	a5,a0,t6
1c00578a:	00078783          	lb	a5,0(a5)
1c00578e:	0407e7b3          	p.max	a5,a5,zero
1c005792:	00f6c623          	p.sb	a5,a2(a3)
1c005796:	4822                	lw	a6,8(sp)
1c005798:	00080d63          	beqz	a6,1c0057b2 <KerMaxPool2x2Stride2_SQ8+0x34a>
1c00579c:	4e42                	lw	t3,16(sp)
1c00579e:	957e                	add	a0,a0,t6
1c0057a0:	95aa                	add	a1,a1,a0
1c0057a2:	43c706b3          	p.mac	a3,a4,t3
1c0057a6:	fff58783          	lb	a5,-1(a1)
1c0057aa:	0407e7b3          	p.max	a5,a5,zero
1c0057ae:	fef68fa3          	sb	a5,-1(a3)
1c0057b2:	4436                	lw	s0,76(sp)
1c0057b4:	44a6                	lw	s1,72(sp)
1c0057b6:	4916                	lw	s2,68(sp)
1c0057b8:	4986                	lw	s3,64(sp)
1c0057ba:	5a72                	lw	s4,60(sp)
1c0057bc:	5ae2                	lw	s5,56(sp)
1c0057be:	5b52                	lw	s6,52(sp)
1c0057c0:	5bc2                	lw	s7,48(sp)
1c0057c2:	5c32                	lw	s8,44(sp)
1c0057c4:	5ca2                	lw	s9,40(sp)
1c0057c6:	5d12                	lw	s10,36(sp)
1c0057c8:	5d82                	lw	s11,32(sp)
1c0057ca:	6161                	addi	sp,sp,80
1c0057cc:	8082                	ret
1c0057ce:	dc0f07e3          	beqz	t5,1c00559c <KerMaxPool2x2Stride2_SQ8+0x134>
1c0057d2:	4e32                	lw	t3,12(sp)
1c0057d4:	4612                	lw	a2,4(sp)
1c0057d6:	00179f13          	slli	t5,a5,0x1
1c0057da:	40fe0fb3          	sub	t6,t3,a5
1c0057de:	40cf0f33          	sub	t5,t5,a2
1c0057e2:	001fd293          	srli	t0,t6,0x1
1c0057e6:	9f2a                	add	t5,t5,a0
1c0057e8:	d20297e3          	bnez	t0,1c005516 <KerMaxPool2x2Stride2_SQ8+0xae>
1c0057ec:	b3bd                	j	1c00555a <KerMaxPool2x2Stride2_SQ8+0xf2>
1c0057ee:	00b50633          	add	a2,a0,a1
1c0057f2:	fff60603          	lb	a2,-1(a2)
1c0057f6:	00e68833          	add	a6,a3,a4
1c0057fa:	04066633          	p.max	a2,a2,zero
1c0057fe:	fec80fa3          	sb	a2,-1(a6)
1c005802:	bb69                	j	1c00559c <KerMaxPool2x2Stride2_SQ8+0x134>
1c005804:	4905                	li	s2,1
1c005806:	b575                	j	1c0056b2 <KerMaxPool2x2Stride2_SQ8+0x24a>
1c005808:	4485                	li	s1,1
1c00580a:	bbfd                	j	1c005608 <KerMaxPool2x2Stride2_SQ8+0x1a0>

1c00580c <KerAvgPool2x2Stride2_SQ8>:
1c00580c:	7139                	addi	sp,sp,-64
1c00580e:	4326                	lw	t1,72(sp)
1c005810:	d25a                	sw	s6,36(sp)
1c005812:	4b36                	lw	s6,76(sp)
1c005814:	d05e                	sw	s7,32(sp)
1c005816:	c86e                	sw	s11,16(sp)
1c005818:	78037bd7          	pv.extract.b	s7,t1,0
1c00581c:	7a037dd7          	pv.extract.b	s11,t1,1
1c005820:	781373d7          	pv.extract.b	t2,t1,2
1c005824:	7a137357          	pv.extract.b	t1,t1,3
1c005828:	d84e                	sw	s3,48(sp)
1c00582a:	ce62                	sw	s8,28(sp)
1c00582c:	ca6a                	sw	s10,20(sp)
1c00582e:	de22                	sw	s0,60(sp)
1c005830:	dc26                	sw	s1,56(sp)
1c005832:	da4a                	sw	s2,52(sp)
1c005834:	d652                	sw	s4,44(sp)
1c005836:	d456                	sw	s5,40(sp)
1c005838:	cc66                	sw	s9,24(sp)
1c00583a:	c61a                	sw	t1,12(sp)
1c00583c:	780b7d57          	pv.extract.b	s10,s6,0
1c005840:	4986                	lw	s3,64(sp)
1c005842:	4c16                	lw	s8,68(sp)
1c005844:	781b7b57          	pv.extract.b	s6,s6,2
1c005848:	1e0b8463          	beqz	s7,1c005a30 <KerAvgPool2x2Stride2_SQ8+0x224>
1c00584c:	1f89f263          	bleu	s8,s3,1c005a30 <KerAvgPool2x2Stride2_SQ8+0x224>
1c005850:	00199c93          	slli	s9,s3,0x1
1c005854:	416c8333          	sub	t1,s9,s6
1c005858:	8e1a                	mv	t3,t1
1c00585a:	02e984b3          	mul	s1,s3,a4
1c00585e:	0305                	addi	t1,t1,1
1c005860:	82aa                	mv	t0,a0
1c005862:	8f2a                	mv	t5,a0
1c005864:	00159a93          	slli	s5,a1,0x1
1c005868:	413c0eb3          	sub	t4,s8,s3
1c00586c:	42be02b3          	p.mac	t0,t3,a1
1c005870:	00968fb3          	add	t6,a3,s1
1c005874:	42b30f33          	p.mac	t5,t1,a1
1c005878:	008ec0fb          	lp.setup	x1,t4,1c005888 <KerAvgPool2x2Stride2_SQ8+0x7c>
1c00587c:	0152f30b          	p.lb	t1,s5(t0!)
1c005880:	015f7e0b          	p.lb	t3,s5(t5!)
1c005884:	05c3635b          	p.mac.zh.zl	t1,t1,t3,sp
1c005888:	006fc72b          	p.sb	t1,a4(t6!)
1c00588c:	04038e63          	beqz	t2,1c0058e8 <KerAvgPool2x2Stride2_SQ8+0xdc>
1c005890:	00179313          	slli	t1,a5,0x1
1c005894:	40f80eb3          	sub	t4,a6,a5
1c005898:	41a30333          	sub	t1,t1,s10
1c00589c:	020e8463          	beqz	t4,1c0058c4 <KerAvgPool2x2Stride2_SQ8+0xb8>
1c0058a0:	1c00ce37          	lui	t3,0x1c00c
1c0058a4:	3c4e2e03          	lw	t3,964(t3) # 1c00c3c4 <__clz_tab+0x534>
1c0058a8:	00650f33          	add	t5,a0,t1
1c0058ac:	00f68fb3          	add	t6,a3,a5
1c0058b0:	008ec0fb          	lp.setup	x1,t4,1c0058c0 <KerAvgPool2x2Stride2_SQ8+0xb4>
1c0058b4:	004f230b          	p.lw	t1,4(t5!)
1c0058b8:	99c31357          	pv.dotsp.b	t1,t1,t3
1c0058bc:	0403635b          	p.mac.zh.zl	t1,t1,zero,sp
1c0058c0:	006f80ab          	p.sb	t1,1(t6!)
1c0058c4:	000b8863          	beqz	s7,1c0058d4 <KerAvgPool2x2Stride2_SQ8+0xc8>
1c0058c8:	00050303          	lb	t1,0(a0)
1c0058cc:	0403635b          	p.mac.zh.zl	t1,t1,zero,sp
1c0058d0:	00668023          	sb	t1,0(a3)
1c0058d4:	160d9963          	bnez	s11,1c005a46 <KerAvgPool2x2Stride2_SQ8+0x23a>
1c0058d8:	0d89f063          	bleu	s8,s3,1c005998 <KerAvgPool2x2Stride2_SQ8+0x18c>
1c0058dc:	02e984b3          	mul	s1,s3,a4
1c0058e0:	00159a93          	slli	s5,a1,0x1
1c0058e4:	00199c93          	slli	s9,s3,0x1
1c0058e8:	00179413          	slli	s0,a5,0x1
1c0058ec:	416c8333          	sub	t1,s9,s6
1c0058f0:	41a40433          	sub	s0,s0,s10
1c0058f4:	00198e93          	addi	t4,s3,1
1c0058f8:	40f80a33          	sub	s4,a6,a5
1c0058fc:	94b6                	add	s1,s1,a3
1c0058fe:	413c0933          	sub	s2,s8,s3
1c005902:	42b30433          	p.mac	s0,t1,a1
1c005906:	1c00c337          	lui	t1,0x1c00c
1c00590a:	3c432e03          	lw	t3,964(t1) # 1c00c3c4 <__clz_tab+0x534>
1c00590e:	942a                	add	s0,s0,a0
1c005910:	15dc6863          	bltu	s8,t4,1c005a60 <KerAvgPool2x2Stride2_SQ8+0x254>
1c005914:	140c0663          	beqz	s8,1c005a60 <KerAvgPool2x2Stride2_SQ8+0x254>
1c005918:	0189407b          	lp.setup	x0,s2,1c005948 <KerAvgPool2x2Stride2_SQ8+0x13c>
1c00591c:	020a0563          	beqz	s4,1c005946 <KerAvgPool2x2Stride2_SQ8+0x13a>
1c005920:	00b402b3          	add	t0,s0,a1
1c005924:	8fa6                	mv	t6,s1
1c005926:	8f22                	mv	t5,s0
1c005928:	8ed2                	mv	t4,s4
1c00592a:	00cec0fb          	lp.setup	x1,t4,1c005942 <KerAvgPool2x2Stride2_SQ8+0x136>
1c00592e:	002f130b          	p.lh	t1,2(t5!)
1c005932:	0022938b          	p.lh	t2,2(t0!)
1c005936:	99c31357          	pv.dotsp.b	t1,t1,t3
1c00593a:	b9c39357          	pv.sdotsp.b	t1,t2,t3
1c00593e:	0403635b          	p.mac.zh.zl	t1,t1,zero,sp
1c005942:	006f80ab          	p.sb	t1,1(t6!)
1c005946:	9456                	add	s0,s0,s5
1c005948:	94ba                	add	s1,s1,a4
1c00594a:	040d8763          	beqz	s11,1c005998 <KerAvgPool2x2Stride2_SQ8+0x18c>
1c00594e:	001c8313          	addi	t1,s9,1
1c005952:	0c89                	addi	s9,s9,2
1c005954:	41630333          	sub	t1,t1,s6
1c005958:	00198e13          	addi	t3,s3,1
1c00595c:	416c8b33          	sub	s6,s9,s6
1c005960:	8faa                	mv	t6,a0
1c005962:	8f2a                	mv	t5,a0
1c005964:	8eb6                	mv	t4,a3
1c005966:	42b30fb3          	p.mac	t6,t1,a1
1c00596a:	413c09b3          	sub	s3,s8,s3
1c00596e:	42bb0f33          	p.mac	t5,s6,a1
1c005972:	1ffd                	addi	t6,t6,-1
1c005974:	42ee0eb3          	p.mac	t4,t3,a4
1c005978:	1f7d                	addi	t5,t5,-1
1c00597a:	1efd                	addi	t4,t4,-1
1c00597c:	0fcc6063          	bltu	s8,t3,1c005a5c <KerAvgPool2x2Stride2_SQ8+0x250>
1c005980:	0c0c0e63          	beqz	s8,1c005a5c <KerAvgPool2x2Stride2_SQ8+0x250>
1c005984:	0089c0fb          	lp.setup	x1,s3,1c005994 <KerAvgPool2x2Stride2_SQ8+0x188>
1c005988:	015ff30b          	p.lb	t1,s5(t6!)
1c00598c:	015f7e0b          	p.lb	t3,s5(t5!)
1c005990:	05c3635b          	p.mac.zh.zl	t1,t1,t3,sp
1c005994:	006ec72b          	p.sb	t1,a4(t4!)
1c005998:	4332                	lw	t1,12(sp)
1c00599a:	06030d63          	beqz	t1,1c005a14 <KerAvgPool2x2Stride2_SQ8+0x208>
1c00599e:	167d                	addi	a2,a2,-1
1c0059a0:	02b60eb3          	mul	t4,a2,a1
1c0059a4:	00179613          	slli	a2,a5,0x1
1c0059a8:	40f80833          	sub	a6,a6,a5
1c0059ac:	9676                	add	a2,a2,t4
1c0059ae:	41a60333          	sub	t1,a2,s10
1c0059b2:	02080763          	beqz	a6,1c0059e0 <KerAvgPool2x2Stride2_SQ8+0x1d4>
1c0059b6:	fff88613          	addi	a2,a7,-1
1c0059ba:	42e607b3          	p.mac	a5,a2,a4
1c0059be:	1c00ce37          	lui	t3,0x1c00c
1c0059c2:	3c4e2603          	lw	a2,964(t3) # 1c00c3c4 <__clz_tab+0x534>
1c0059c6:	932a                	add	t1,t1,a0
1c0059c8:	00f68e33          	add	t3,a3,a5
1c0059cc:	008840fb          	lp.setup	x1,a6,1c0059dc <KerAvgPool2x2Stride2_SQ8+0x1d0>
1c0059d0:	0023178b          	p.lh	a5,2(t1!)
1c0059d4:	98c797d7          	pv.dotsp.b	a5,a5,a2
1c0059d8:	0407e7db          	p.mac.zh.zl	a5,a5,zero,sp
1c0059dc:	00fe00ab          	p.sb	a5,1(t3!)
1c0059e0:	000b8e63          	beqz	s7,1c0059fc <KerAvgPool2x2Stride2_SQ8+0x1f0>
1c0059e4:	fff88613          	addi	a2,a7,-1
1c0059e8:	02e60633          	mul	a2,a2,a4
1c0059ec:	01d507b3          	add	a5,a0,t4
1c0059f0:	00078783          	lb	a5,0(a5)
1c0059f4:	0407e7db          	p.mac.zh.zl	a5,a5,zero,sp
1c0059f8:	00f6c623          	p.sb	a5,a2(a3)
1c0059fc:	000d8c63          	beqz	s11,1c005a14 <KerAvgPool2x2Stride2_SQ8+0x208>
1c005a00:	431706b3          	p.mac	a3,a4,a7
1c005a04:	9576                	add	a0,a0,t4
1c005a06:	95aa                	add	a1,a1,a0
1c005a08:	fff58783          	lb	a5,-1(a1)
1c005a0c:	0407e7db          	p.mac.zh.zl	a5,a5,zero,sp
1c005a10:	fef68fa3          	sb	a5,-1(a3)
1c005a14:	5472                	lw	s0,60(sp)
1c005a16:	54e2                	lw	s1,56(sp)
1c005a18:	5952                	lw	s2,52(sp)
1c005a1a:	59c2                	lw	s3,48(sp)
1c005a1c:	5a32                	lw	s4,44(sp)
1c005a1e:	5aa2                	lw	s5,40(sp)
1c005a20:	5b12                	lw	s6,36(sp)
1c005a22:	5b82                	lw	s7,32(sp)
1c005a24:	4c72                	lw	s8,28(sp)
1c005a26:	4ce2                	lw	s9,24(sp)
1c005a28:	4d52                	lw	s10,20(sp)
1c005a2a:	4dc2                	lw	s11,16(sp)
1c005a2c:	6121                	addi	sp,sp,64
1c005a2e:	8082                	ret
1c005a30:	ea0384e3          	beqz	t2,1c0058d8 <KerAvgPool2x2Stride2_SQ8+0xcc>
1c005a34:	00179313          	slli	t1,a5,0x1
1c005a38:	40f80eb3          	sub	t4,a6,a5
1c005a3c:	41a30333          	sub	t1,t1,s10
1c005a40:	e60e90e3          	bnez	t4,1c0058a0 <KerAvgPool2x2Stride2_SQ8+0x94>
1c005a44:	b541                	j	1c0058c4 <KerAvgPool2x2Stride2_SQ8+0xb8>
1c005a46:	00b50333          	add	t1,a0,a1
1c005a4a:	fff30303          	lb	t1,-1(t1)
1c005a4e:	00e68e33          	add	t3,a3,a4
1c005a52:	0403635b          	p.mac.zh.zl	t1,t1,zero,sp
1c005a56:	fe6e0fa3          	sb	t1,-1(t3)
1c005a5a:	bdbd                	j	1c0058d8 <KerAvgPool2x2Stride2_SQ8+0xcc>
1c005a5c:	4985                	li	s3,1
1c005a5e:	b71d                	j	1c005984 <KerAvgPool2x2Stride2_SQ8+0x178>
1c005a60:	4905                	li	s2,1
1c005a62:	bd5d                	j	1c005918 <KerAvgPool2x2Stride2_SQ8+0x10c>

1c005a64 <KerParPoolActivation.constprop.11>:
1c005a64:	02c58633          	mul	a2,a1,a2
1c005a68:	40d70833          	sub	a6,a4,a3
1c005a6c:	02c80833          	mul	a6,a6,a2
1c005a70:	42c68533          	p.mac	a0,a3,a2
1c005a74:	00185613          	srli	a2,a6,0x1
1c005a78:	06e6df63          	ble	a4,a3,1c005af6 <KerParPoolActivation.constprop.11+0x92>
1c005a7c:	00078583          	lb	a1,0(a5)
1c005a80:	cdd5                	beqz	a1,1c005b3c <KerParPoolActivation.constprop.11+0xd8>
1c005a82:	0ff5f593          	andi	a1,a1,255
1c005a86:	0017ce03          	lbu	t3,1(a5)
1c005a8a:	c621                	beqz	a2,1c005ad2 <KerParPoolActivation.constprop.11+0x6e>
1c005a8c:	00161793          	slli	a5,a2,0x1
1c005a90:	17f9                	addi	a5,a5,-2
1c005a92:	8385                	srli	a5,a5,0x1
1c005a94:	8672                	mv	a2,t3
1c005a96:	832a                	mv	t1,a0
1c005a98:	00150893          	addi	a7,a0,1
1c005a9c:	0785                	addi	a5,a5,1
1c005a9e:	0187c0fb          	lp.setup	x1,a5,1c005ace <KerParPoolActivation.constprop.11+0x6a>
1c005aa2:	00030683          	lb	a3,0(t1)
1c005aa6:	00088703          	lb	a4,0(a7)
1c005aaa:	0406e6b3          	p.max	a3,a3,zero
1c005aae:	02b686b3          	mul	a3,a3,a1
1c005ab2:	04076733          	p.max	a4,a4,zero
1c005ab6:	02b70733          	mul	a4,a4,a1
1c005aba:	40c066db          	p.mac.zh.sl	a3,zero,a2,zero
1c005abe:	148696b3          	p.clip	a3,a3,8
1c005ac2:	00d3012b          	p.sb	a3,2(t1!)
1c005ac6:	40c0675b          	p.mac.zh.sl	a4,zero,a2,zero
1c005aca:	14871733          	p.clip	a4,a4,8
1c005ace:	00e8812b          	p.sb	a4,2(a7!)
1c005ad2:	fc1837b3          	p.bclr	a5,a6,30,1
1c005ad6:	c3b5                	beqz	a5,1c005b3a <KerParPoolActivation.constprop.11+0xd6>
1c005ad8:	187d                	addi	a6,a6,-1
1c005ada:	9542                	add	a0,a0,a6
1c005adc:	00050783          	lb	a5,0(a0)
1c005ae0:	0407e7b3          	p.max	a5,a5,zero
1c005ae4:	02b787b3          	mul	a5,a5,a1
1c005ae8:	41c067db          	p.mac.zh.sl	a5,zero,t3,zero
1c005aec:	148797b3          	p.clip	a5,a5,8
1c005af0:	00f50023          	sb	a5,0(a0)
1c005af4:	8082                	ret
1c005af6:	c61d                	beqz	a2,1c005b24 <KerParPoolActivation.constprop.11+0xc0>
1c005af8:	00161793          	slli	a5,a2,0x1
1c005afc:	17f9                	addi	a5,a5,-2
1c005afe:	8385                	srli	a5,a5,0x1
1c005b00:	85aa                	mv	a1,a0
1c005b02:	00150613          	addi	a2,a0,1
1c005b06:	0785                	addi	a5,a5,1
1c005b08:	00c7c0fb          	lp.setup	x1,a5,1c005b20 <KerParPoolActivation.constprop.11+0xbc>
1c005b0c:	00058683          	lb	a3,0(a1)
1c005b10:	00060703          	lb	a4,0(a2)
1c005b14:	0406e6b3          	p.max	a3,a3,zero
1c005b18:	04076733          	p.max	a4,a4,zero
1c005b1c:	00d5812b          	p.sb	a3,2(a1!)
1c005b20:	00e6012b          	p.sb	a4,2(a2!)
1c005b24:	fc1837b3          	p.bclr	a5,a6,30,1
1c005b28:	cb89                	beqz	a5,1c005b3a <KerParPoolActivation.constprop.11+0xd6>
1c005b2a:	187d                	addi	a6,a6,-1
1c005b2c:	982a                	add	a6,a6,a0
1c005b2e:	00080783          	lb	a5,0(a6)
1c005b32:	0407e7b3          	p.max	a5,a5,zero
1c005b36:	00f80023          	sb	a5,0(a6)
1c005b3a:	8082                	ret
1c005b3c:	c61d                	beqz	a2,1c005b6a <KerParPoolActivation.constprop.11+0x106>
1c005b3e:	00161793          	slli	a5,a2,0x1
1c005b42:	17f9                	addi	a5,a5,-2
1c005b44:	8385                	srli	a5,a5,0x1
1c005b46:	85aa                	mv	a1,a0
1c005b48:	00150613          	addi	a2,a0,1
1c005b4c:	0785                	addi	a5,a5,1
1c005b4e:	00c7c0fb          	lp.setup	x1,a5,1c005b66 <KerParPoolActivation.constprop.11+0x102>
1c005b52:	00058683          	lb	a3,0(a1)
1c005b56:	00060703          	lb	a4,0(a2)
1c005b5a:	0406e6b3          	p.max	a3,a3,zero
1c005b5e:	04076733          	p.max	a4,a4,zero
1c005b62:	00d5812b          	p.sb	a3,2(a1!)
1c005b66:	00e6012b          	p.sb	a4,2(a2!)
1c005b6a:	fc1837b3          	p.bclr	a5,a6,30,1
1c005b6e:	d7f1                	beqz	a5,1c005b3a <KerParPoolActivation.constprop.11+0xd6>
1c005b70:	187d                	addi	a6,a6,-1
1c005b72:	9542                	add	a0,a0,a6
1c005b74:	00050783          	lb	a5,0(a0)
1c005b78:	0407e7b3          	p.max	a5,a5,zero
1c005b7c:	00f50023          	sb	a5,0(a0)
1c005b80:	8082                	ret

1c005b82 <KerParPool2x2Stride2_ReLU_SQ8>:

{
	unsigned int FS=2,S=2;
	signed char * __restrict__ In = Arg->In;
	unsigned int W = Arg->W, H = Arg->H;
	unsigned int Feat = Arg->Feat;
1c005b82:	00855703          	lhu	a4,8(a0)
{
1c005b86:	7159                	addi	sp,sp,-112
1c005b88:	d4a2                	sw	s0,104(sp)
1c005b8a:	d2a6                	sw	s1,100(sp)
1c005b8c:	d0ca                	sw	s2,96(sp)
1c005b8e:	cece                	sw	s3,92(sp)
1c005b90:	ccd2                	sw	s4,88(sp)
1c005b92:	cad6                	sw	s5,84(sp)
1c005b94:	c8da                	sw	s6,80(sp)
1c005b96:	c6de                	sw	s7,76(sp)
1c005b98:	c2e6                	sw	s9,68(sp)
1c005b9a:	d686                	sw	ra,108(sp)
1c005b9c:	c4e2                	sw	s8,72(sp)
1c005b9e:	c0ea                	sw	s10,64(sp)
1c005ba0:	de6e                	sw	s11,60(sp)
	signed char * __restrict__ Out = Arg->Out;
	signed char * __restrict__ Infos = Arg->Infos;
	int PoolMax = Arg->PoolMax;
	v4s PadIn = Arg->Pad;

	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Feat);
1c005ba2:	f1402bf3          	csrr	s7,mhartid
	v4s PadIn = Arg->Pad;
1c005ba6:	02052c03          	lw	s8,32(a0)
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c005baa:	f8373433          	p.bclr	s0,a4,28,3

	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c005bae:	01055603          	lhu	a2,16(a0)
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c005bb2:	00375793          	srli	a5,a4,0x3
1c005bb6:	00803433          	snez	s0,s0
1c005bba:	943e                	add	s0,s0,a5
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Feat);
1c005bbc:	c80b9bb3          	p.extractu	s7,s7,4,0
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c005bc0:	781c7b57          	pv.extract.b	s6,s8,2
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Feat);
1c005bc4:	028b8bb3          	mul	s7,s7,s0
	return ((Pad+Stride-1)/Stride);
1c005bc8:	001b0793          	addi	a5,s6,1
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c005bcc:	ffe60913          	addi	s2,a2,-2
1c005bd0:	995a                	add	s2,s2,s6
	return ((Pad+Stride-1)/Stride);
1c005bd2:	01f7da13          	srli	s4,a5,0x1f
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c005bd6:	9b32                	add	s6,s6,a2
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c005bd8:	00c55583          	lhu	a1,12(a0)
	return ((Pad+Stride-1)/Stride);
1c005bdc:	02fa2a5b          	p.addn	s4,s4,a5,1
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c005be0:	01fb5793          	srli	a5,s6,0x1f
1c005be4:	0367ab5b          	p.addn	s6,a5,s6,1
	unsigned int W = Arg->W, H = Arg->H;
1c005be8:	00e55783          	lhu	a5,14(a0)
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c005bec:	780c7ad7          	pv.extract.b	s5,s8,0
1c005bf0:	ffe58493          	addi	s1,a1,-2
	return ((Pad+Stride-1)/Stride);
1c005bf4:	001a8693          	addi	a3,s5,1
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c005bf8:	94d6                	add	s1,s1,s5
1c005bfa:	7a0c78d7          	pv.extract.b	a7,s8,1
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c005bfe:	7a1c7857          	pv.extract.b	a6,s8,3
	int PoolMax = Arg->PoolMax;
1c005c02:	01254603          	lbu	a2,18(a0)
	signed char * __restrict__ In = Arg->In;
1c005c06:	00052303          	lw	t1,0(a0)
	unsigned int W = Arg->W, H = Arg->H;
1c005c0a:	00a55c83          	lhu	s9,10(a0)
1c005c0e:	ce3e                	sw	a5,28(sp)
	signed char * __restrict__ Out = Arg->Out;
1c005c10:	415c                	lw	a5,4(a0)
	signed char * __restrict__ Infos = Arg->Infos;
1c005c12:	5148                	lw	a0,36(a0)
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c005c14:	9aae                	add	s5,s5,a1
	return ((Pad+Stride-1)/Stride);
1c005c16:	01f6d993          	srli	s3,a3,0x1f
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c005c1a:	8314a4db          	p.addun	s1,s1,a7,1
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c005c1e:	8309295b          	p.addun	s2,s2,a6,1
	return ((Pad+Stride-1)/Stride);
1c005c22:	02d9a9db          	p.addn	s3,s3,a3,1
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c005c26:	0485                	addi	s1,s1,1
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c005c28:	01fad693          	srli	a3,s5,0x1f
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c005c2c:	0905                	addi	s2,s2,1
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Feat);
1c005c2e:	945e                	add	s0,s0,s7
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c005c30:	0534c9b3          	p.min	s3,s1,s3
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c005c34:	0356aadb          	p.addn	s5,a3,s5,1
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c005c38:	05494a33          	p.min	s4,s2,s4
	signed char * __restrict__ Out = Arg->Out;
1c005c3c:	d43e                	sw	a5,40(sp)
	signed char * __restrict__ Infos = Arg->Infos;
1c005c3e:	d62a                	sw	a0,44(sp)
	unsigned int CoreId = gap_coreid(), Chunk = ChunkSize(Feat), First = Chunk*CoreId, Last = Min(First+Chunk, Feat);
1c005c40:	04e44433          	p.min	s0,s0,a4
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c005c44:	0559eab3          	p.max	s5,s3,s5
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c005c48:	056a6b33          	p.max	s6,s4,s6

	if (PoolMax) for (unsigned int of=First; of<Last; of++) KerMaxPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c005c4c:	e651                	bnez	a2,1c005cd8 <KerParPool2x2Stride2_ReLU_SQ8+0x156>
	else	 for (unsigned int of=First; of<Last; of++) KerAvgPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c005c4e:	048bf963          	bleu	s0,s7,1c005ca0 <KerParPool2x2Stride2_ReLU_SQ8+0x11e>
1c005c52:	8d3e                	mv	s10,a5
1c005c54:	47f2                	lw	a5,28(sp)
1c005c56:	8d9a                	mv	s11,t1
1c005c58:	8f5e                	mv	t5,s7
1c005c5a:	02fc87b3          	mul	a5,s9,a5
1c005c5e:	d23e                	sw	a5,36(sp)
1c005c60:	032487b3          	mul	a5,s1,s2
1c005c64:	d03e                	sw	a5,32(sp)
1c005c66:	5792                	lw	a5,36(sp)
1c005c68:	42fb8db3          	p.mac	s11,s7,a5
1c005c6c:	5782                	lw	a5,32(sp)
1c005c6e:	42fb8d33          	p.mac	s10,s7,a5
1c005c72:	4672                	lw	a2,28(sp)
1c005c74:	0f05                	addi	t5,t5,1
1c005c76:	86ea                	mv	a3,s10
1c005c78:	856e                	mv	a0,s11
1c005c7a:	87ce                	mv	a5,s3
1c005c7c:	c662                	sw	s8,12(sp)
1c005c7e:	c462                	sw	s8,8(sp)
1c005c80:	c25a                	sw	s6,4(sp)
1c005c82:	c052                	sw	s4,0(sp)
1c005c84:	88ca                	mv	a7,s2
1c005c86:	8856                	mv	a6,s5
1c005c88:	8726                	mv	a4,s1
1c005c8a:	85e6                	mv	a1,s9
1c005c8c:	cc7a                	sw	t5,24(sp)
1c005c8e:	b7fff0ef          	jal	ra,1c00580c <KerAvgPool2x2Stride2_SQ8>
1c005c92:	5792                	lw	a5,36(sp)
1c005c94:	4f62                	lw	t5,24(sp)
1c005c96:	9dbe                	add	s11,s11,a5
1c005c98:	5782                	lw	a5,32(sp)
1c005c9a:	9d3e                	add	s10,s10,a5
1c005c9c:	fde41be3          	bne	s0,t5,1c005c72 <KerParPool2x2Stride2_ReLU_SQ8+0xf0>

	KerParPoolActivation(Out, Wo, Ho, First, Last, Infos, ACT_RELU);
1c005ca0:	57b2                	lw	a5,44(sp)
1c005ca2:	5522                	lw	a0,40(sp)
1c005ca4:	8722                	mv	a4,s0
1c005ca6:	86de                	mv	a3,s7
1c005ca8:	864a                	mv	a2,s2
1c005caa:	85a6                	mv	a1,s1
1c005cac:	3b65                	jal	1c005a64 <KerParPoolActivation.constprop.11>
1c005cae:	002047b7          	lui	a5,0x204
1c005cb2:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c005cb6:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);
}
1c005cba:	50b6                	lw	ra,108(sp)
1c005cbc:	5426                	lw	s0,104(sp)
1c005cbe:	5496                	lw	s1,100(sp)
1c005cc0:	5906                	lw	s2,96(sp)
1c005cc2:	49f6                	lw	s3,92(sp)
1c005cc4:	4a66                	lw	s4,88(sp)
1c005cc6:	4ad6                	lw	s5,84(sp)
1c005cc8:	4b46                	lw	s6,80(sp)
1c005cca:	4bb6                	lw	s7,76(sp)
1c005ccc:	4c26                	lw	s8,72(sp)
1c005cce:	4c96                	lw	s9,68(sp)
1c005cd0:	4d06                	lw	s10,64(sp)
1c005cd2:	5df2                	lw	s11,60(sp)
1c005cd4:	6165                	addi	sp,sp,112
1c005cd6:	8082                	ret
	if (PoolMax) for (unsigned int of=First; of<Last; of++) KerMaxPool2x2Stride2_SQ8(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn);
1c005cd8:	fc8bf4e3          	bleu	s0,s7,1c005ca0 <KerParPool2x2Stride2_ReLU_SQ8+0x11e>
1c005cdc:	8d3e                	mv	s10,a5
1c005cde:	47f2                	lw	a5,28(sp)
1c005ce0:	8d9a                	mv	s11,t1
1c005ce2:	8f5e                	mv	t5,s7
1c005ce4:	02fc87b3          	mul	a5,s9,a5
1c005ce8:	d23e                	sw	a5,36(sp)
1c005cea:	032487b3          	mul	a5,s1,s2
1c005cee:	d03e                	sw	a5,32(sp)
1c005cf0:	5792                	lw	a5,36(sp)
1c005cf2:	42fb8db3          	p.mac	s11,s7,a5
1c005cf6:	5782                	lw	a5,32(sp)
1c005cf8:	42fb8d33          	p.mac	s10,s7,a5
1c005cfc:	4672                	lw	a2,28(sp)
1c005cfe:	0f05                	addi	t5,t5,1
1c005d00:	86ea                	mv	a3,s10
1c005d02:	856e                	mv	a0,s11
1c005d04:	87ce                	mv	a5,s3
1c005d06:	c662                	sw	s8,12(sp)
1c005d08:	c462                	sw	s8,8(sp)
1c005d0a:	c25a                	sw	s6,4(sp)
1c005d0c:	c052                	sw	s4,0(sp)
1c005d0e:	88ca                	mv	a7,s2
1c005d10:	8856                	mv	a6,s5
1c005d12:	8726                	mv	a4,s1
1c005d14:	85e6                	mv	a1,s9
1c005d16:	cc7a                	sw	t5,24(sp)
1c005d18:	f50ff0ef          	jal	ra,1c005468 <KerMaxPool2x2Stride2_SQ8>
1c005d1c:	5792                	lw	a5,36(sp)
1c005d1e:	4f62                	lw	t5,24(sp)
1c005d20:	9dbe                	add	s11,s11,a5
1c005d22:	5782                	lw	a5,32(sp)
1c005d24:	9d3e                	add	s10,s10,a5
1c005d26:	fde41be3          	bne	s0,t5,1c005cfc <KerParPool2x2Stride2_ReLU_SQ8+0x17a>
1c005d2a:	bf9d                	j	1c005ca0 <KerParPool2x2Stride2_ReLU_SQ8+0x11e>

1c005d2c <KerParSoftMax_SQ8>:
void KerParSoftMax_SQ8(KerSoftMax_SQ8_T *Arg)

{
	signed char * __restrict__ In = Arg->In;
	short int * __restrict__ Out = Arg->Out;
	int N = Arg->N;
1c005d2c:	00655383          	lhu	t2,6(a0)
{
1c005d30:	715d                	addi	sp,sp,-80
1c005d32:	d26a                	sw	s10,36(sp)
	int Feat = Arg->Feat;
	int Norm = Arg->Infos[AT_INF_BIASL_SM];
	static L1_CL_MEM int Reduct[8];
	int M, Sum, InvSum;
	unsigned int CoreId = gap_coreid();
1c005d34:	f1402d73          	csrr	s10,mhartid
{
1c005d38:	de52                	sw	s4,60(sp)
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c005d3a:	f833ba33          	p.bclr	s4,t2,28,3
1c005d3e:	0033d713          	srli	a4,t2,0x3
1c005d42:	01403a33          	snez	s4,s4
1c005d46:	9a3a                	add	s4,s4,a4
	unsigned int CoreId = gap_coreid();
1c005d48:	c80d1d33          	p.extractu	s10,s10,4,0
{
1c005d4c:	d662                	sw	s8,44(sp)
	unsigned int ChunkCell = ChunkSize(N);
	unsigned int First = CoreId*ChunkCell;
1c005d4e:	034d0c33          	mul	s8,s10,s4
	int Norm = Arg->Infos[AT_INF_BIASL_SM];
1c005d52:	491c                	lw	a5,16(a0)
	int Feat = Arg->Feat;
1c005d54:	00455703          	lhu	a4,4(a0)
{
1c005d58:	da5a                	sw	s6,52(sp)
1c005d5a:	c6a2                	sw	s0,76(sp)
1c005d5c:	c4a6                	sw	s1,72(sp)
1c005d5e:	c2ca                	sw	s2,68(sp)
1c005d60:	c0ce                	sw	s3,64(sp)
1c005d62:	dc56                	sw	s5,56(sp)
1c005d64:	d85e                	sw	s7,48(sp)
1c005d66:	d466                	sw	s9,40(sp)
1c005d68:	d06e                	sw	s11,32(sp)
	unsigned int Last  = Min(First+ChunkCell, N);
1c005d6a:	9a62                	add	s4,s4,s8
	int N = Arg->N;
1c005d6c:	ca1e                	sw	t2,20(sp)
	signed char * __restrict__ In = Arg->In;
1c005d6e:	00052b03          	lw	s6,0(a0)
	short int * __restrict__ Out = Arg->Out;
1c005d72:	4554                	lw	a3,12(a0)
	int Norm = Arg->Infos[AT_INF_BIASL_SM];
1c005d74:	00078483          	lb	s1,0(a5)
	unsigned int Last  = Min(First+ChunkCell, N);
1c005d78:	047a4a33          	p.min	s4,s4,t2
	unsigned int *Red = &Reduct[CoreId];

	for (int f=0; f<Feat; f++) {
1c005d7c:	c375                	beqz	a4,1c005e60 <KerParSoftMax_SQ8+0x134>
1c005d7e:	100002b7          	lui	t0,0x10000
1c005d82:	418a0533          	sub	a0,s4,s8
1c005d86:	02028293          	addi	t0,t0,32 # 10000020 <Reduct.17332>
1c005d8a:	002d1793          	slli	a5,s10,0x2
1c005d8e:	001c1b93          	slli	s7,s8,0x1
	FractX = (Y & 0x7FFF);
1c005d92:	69a1                	lui	s3,0x8
		Sum = Reduct[0];
		InvSum = ((FP2FIX(1.0, 15)<<15)/Sum);
		for (int i=First; i<Last; i++) Out[i] = Abs(gap_roundnorm_reg(Out[i]*InvSum, 15));
		gap_waitbarrier(0);
		In += N;
		Out += N;
1c005d94:	00139593          	slli	a1,t2,0x1
1c005d98:	00151613          	slli	a2,a0,0x1
		Reduct[CoreId] = M;
1c005d9c:	9796                	add	a5,a5,t0
1c005d9e:	00204937          	lui	s2,0x204
1c005da2:	c62a                	sw	a0,12(sp)
		Out += N;
1c005da4:	cc2e                	sw	a1,24(sp)
1c005da6:	9bb6                	add	s7,s7,a3
1c005da8:	9b62                	add	s6,s6,s8
1c005daa:	ce32                	sw	a2,28(sp)
		Reduct[CoreId] = M;
1c005dac:	c43e                	sw	a5,8(sp)
1c005dae:	20090913          	addi	s2,s2,512 # 204200 <__L2+0x184200>
	FractX = (Y & 0x7FFF);
1c005db2:	fff98c93          	addi	s9,s3,-1 # 7fff <__rt_stack_size+0x77ff>
		Result = ((0x7FFFFFFF / Result) >> 1);      /* negative value */
1c005db6:	8dba                	mv	s11,a4
1c005db8:	053dc07b          	lp.setup	x0,s11,1c005e5e <KerParSoftMax_SQ8+0x132>
		for (int i=First; i<Last; i++) M = Max(M, In[i]);
1c005dbc:	274c7b63          	bleu	s4,s8,1c006032 <KerParSoftMax_SQ8+0x306>
		M = 0x80000000;
1c005dc0:	47b2                	lw	a5,12(sp)
		for (int i=First; i<Last; i++) M = Max(M, In[i]);
1c005dc2:	86da                	mv	a3,s6
		M = 0x80000000;
1c005dc4:	80000737          	lui	a4,0x80000
1c005dc8:	0047c0fb          	lp.setup	x1,a5,1c005dd0 <KerParSoftMax_SQ8+0xa4>
		for (int i=First; i<Last; i++) M = Max(M, In[i]);
1c005dcc:	0016860b          	p.lb	a2,1(a3!)
1c005dd0:	04c76733          	p.max	a4,a4,a2
		Reduct[CoreId] = M;
1c005dd4:	46a2                	lw	a3,8(sp)
1c005dd6:	c298                	sw	a4,0(a3)
1c005dd8:	01c96783          	p.elw	a5,28(s2)
		if (CoreId==0) {
1c005ddc:	1c0d0763          	beqz	s10,1c005faa <KerParSoftMax_SQ8+0x27e>
1c005de0:	01c96783          	p.elw	a5,28(s2)
		M = Reduct[0];
1c005de4:	0002a403          	lw	s0,0(t0)
		for (int i=First; i<Last; i++) {
1c005de8:	254c7863          	bleu	s4,s8,1c006038 <KerParSoftMax_SQ8+0x30c>
	if (!X) return 0x8000;
1c005dec:	4332                	lw	t1,12(sp)
		M = 0x80000000;
1c005dee:	8ede                	mv	t4,s7
1c005df0:	8e5a                	mv	t3,s6
		Sum = 0;
1c005df2:	4f81                	li	t6,0
			unsigned int Exp = Exp_fp_17_15((In[i]-M)<<(Norm));
1c005df4:	001e078b          	p.lb	a5,1(t3!)
1c005df8:	8f81                	sub	a5,a5,s0
1c005dfa:	009797b3          	sll	a5,a5,s1
	if (!X) return 0x8000;
1c005dfe:	efbd                	bnez	a5,1c005e7c <KerParSoftMax_SQ8+0x150>
1c005e00:	9fce                	add	t6,t6,s3
1c005e02:	76e1                	lui	a3,0xffff8
			Out[i] = Exp; Sum += Exp;
1c005e04:	00de912b          	p.sh	a3,2(t4!)
1c005e08:	137d                	addi	t1,t1,-1
1c005e0a:	fe0315e3          	bnez	t1,1c005df4 <KerParSoftMax_SQ8+0xc8>
		Reduct[CoreId] = Sum;
1c005e0e:	46a2                	lw	a3,8(sp)
1c005e10:	01f6a023          	sw	t6,0(a3) # ffff8000 <pulp__FC+0xffff8001>
1c005e14:	01c96783          	p.elw	a5,28(s2)
		if (CoreId==0) {
1c005e18:	1e0d0363          	beqz	s10,1c005ffe <KerParSoftMax_SQ8+0x2d2>
1c005e1c:	01c96783          	p.elw	a5,28(s2)
		InvSum = ((FP2FIX(1.0, 15)<<15)/Sum);
1c005e20:	3fff8737          	lui	a4,0x3fff8
1c005e24:	0002a603          	lw	a2,0(t0)
1c005e28:	02c74633          	div	a2,a4,a2
		for (int i=First; i<Last; i++) Out[i] = Abs(gap_roundnorm_reg(Out[i]*InvSum, 15));
1c005e2c:	034c7463          	bleu	s4,s8,1c005e54 <KerParSoftMax_SQ8+0x128>
1c005e30:	47f2                	lw	a5,28(sp)
1c005e32:	86de                	mv	a3,s7
1c005e34:	ffe78713          	addi	a4,a5,-2
1c005e38:	8305                	srli	a4,a4,0x1
1c005e3a:	0705                	addi	a4,a4,1
1c005e3c:	00a740fb          	lp.setup	x1,a4,1c005e50 <KerParSoftMax_SQ8+0x124>
1c005e40:	00069783          	lh	a5,0(a3)
1c005e44:	02c787b3          	mul	a5,a5,a2
1c005e48:	1e07e7db          	p.mac.zh.zl	a5,a5,zero,a5
1c005e4c:	040787b3          	p.avg	a5,a5,zero
1c005e50:	00f6912b          	p.sh	a5,2(a3!)
1c005e54:	01c96783          	p.elw	a5,28(s2)
1c005e58:	43e2                	lw	t2,24(sp)
1c005e5a:	4552                	lw	a0,20(sp)
1c005e5c:	9b9e                	add	s7,s7,t2
1c005e5e:	9b2a                	add	s6,s6,a0
	}
}
1c005e60:	4436                	lw	s0,76(sp)
1c005e62:	44a6                	lw	s1,72(sp)
1c005e64:	4916                	lw	s2,68(sp)
1c005e66:	4986                	lw	s3,64(sp)
1c005e68:	5a72                	lw	s4,60(sp)
1c005e6a:	5ae2                	lw	s5,56(sp)
1c005e6c:	5b52                	lw	s6,52(sp)
1c005e6e:	5bc2                	lw	s7,48(sp)
1c005e70:	5c32                	lw	s8,44(sp)
1c005e72:	5ca2                	lw	s9,40(sp)
1c005e74:	5d12                	lw	s10,36(sp)
1c005e76:	5d82                	lw	s11,32(sp)
1c005e78:	6161                	addi	sp,sp,80
1c005e7a:	8082                	ret
	Y = Abs(X);
1c005e7c:	04078633          	p.avg	a2,a5,zero
	FractX = (Y & 0x7FFF);
1c005e80:	01967733          	and	a4,a2,s9
	if (gap_bitextractu(FractX, 1, 14)) {
1c005e84:	01171393          	slli	t2,a4,0x11
	IntX = (Y >> 15);
1c005e88:	40f65693          	srai	a3,a2,0xf
	if (gap_bitextractu(FractX, 1, 14)) {
1c005e8c:	0003d563          	bgez	t2,1c005e96 <KerParSoftMax_SQ8+0x16a>
		FractX -= 0x8000; IntX++;
1c005e90:	41370733          	sub	a4,a4,s3
1c005e94:	0685                	addi	a3,a3,1
	if (IntX >= (int) ARRAYSIZE (IntegerExpLUT)) {
1c005e96:	452d                	li	a0,11
1c005e98:	02d55163          	ble	a3,a0,1c005eba <KerParSoftMax_SQ8+0x18e>
		if (Y==X) return 0x7FFFFFFF; else return 0;
1c005e9c:	4681                	li	a3,0
1c005e9e:	f6c793e3          	bne	a5,a2,1c005e04 <KerParSoftMax_SQ8+0xd8>
1c005ea2:	800005b7          	lui	a1,0x80000
1c005ea6:	56fd                	li	a3,-1
1c005ea8:	fff5c593          	not	a1,a1
			Out[i] = Exp; Sum += Exp;
1c005eac:	00de912b          	p.sh	a3,2(t4!)
1c005eb0:	9fae                	add	t6,t6,a1
1c005eb2:	137d                	addi	t1,t1,-1
1c005eb4:	f40310e3          	bnez	t1,1c005df4 <KerParSoftMax_SQ8+0xc8>
1c005eb8:	bf99                	j	1c005e0e <KerParSoftMax_SQ8+0xe2>
	FractX_s = FractX; Z_s = FractX; Result = 0;
1c005eba:	10074833          	p.exths	a6,a4
		Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c005ebe:	9f08465b          	p.mac.sl.zl	a2,a6,a6,a5
		Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c005ec2:	00f71893          	slli	a7,a4,0xf
1c005ec6:	40e88733          	sub	a4,a7,a4
	ScaledInt = IntegerExpLUT[IntX]; ScaledFract = FractionExpLUT[IntX];
1c005eca:	1c00c3b7          	lui	t2,0x1c00c
1c005ece:	1c00c537          	lui	a0,0x1c00c
1c005ed2:	0686                	slli	a3,a3,0x1
1c005ed4:	3c838393          	addi	t2,t2,968 # 1c00c3c8 <FractionExpLUT>
1c005ed8:	3e050513          	addi	a0,a0,992 # 1c00c3e0 <IntegerExpLUT>
1c005edc:	00d385b3          	add	a1,t2,a3
1c005ee0:	96aa                	add	a3,a3,a0
		Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c005ee2:	10064633          	p.exths	a2,a2
1c005ee6:	9f064adb          	p.mac.sl.zl	s5,a2,a6,a5
		Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c005eea:	063a                	slli	a2,a2,0xe
1c005eec:	00c708b3          	add	a7,a4,a2
	ScaledInt = IntegerExpLUT[IntX]; ScaledFract = FractionExpLUT[IntX];
1c005ef0:	0005df03          	lhu	t5,0(a1) # 80000000 <pulp__FC+0x80000001>
1c005ef4:	0006d683          	lhu	a3,0(a3)
1c005ef8:	c836                	sw	a3,16(sp)
	if (Result && (X > 0x7FFFFFFF)) 
1c005efa:	4681                	li	a3,0
		Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c005efc:	100acab3          	p.exths	s5,s5
1c005f00:	9f0ac75b          	p.mac.sl.zl	a4,s5,a6,a5
1c005f04:	10074633          	p.exths	a2,a4
1c005f08:	9f06455b          	p.mac.sl.zl	a0,a2,a6,a5
		Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c005f0c:	00261713          	slli	a4,a2,0x2
1c005f10:	9732                	add	a4,a4,a2
1c005f12:	070a                	slli	a4,a4,0x2
1c005f14:	9732                	add	a4,a4,a2
1c005f16:	00671613          	slli	a2,a4,0x6
1c005f1a:	9732                	add	a4,a4,a2
		Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c005f1c:	10054533          	p.exths	a0,a0
1c005f20:	9f0543db          	p.mac.sl.zl	t2,a0,a6,a5
		Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c005f24:	00451593          	slli	a1,a0,0x4
1c005f28:	95aa                	add	a1,a1,a0
1c005f2a:	0592                	slli	a1,a1,0x4
1c005f2c:	952e                	add	a0,a0,a1
		Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c005f2e:	1003c3b3          	p.exths	t2,t2
1c005f32:	9f03c5db          	p.mac.sl.zl	a1,t2,a6,a5
		Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c005f36:	00139613          	slli	a2,t2,0x1
1c005f3a:	961e                	add	a2,a2,t2
1c005f3c:	060e                	slli	a2,a2,0x3
1c005f3e:	40760633          	sub	a2,a2,t2
1c005f42:	6385                	lui	t2,0x1
1c005f44:	55538393          	addi	t2,t2,1365 # 1555 <__rt_stack_size+0xd55>
1c005f48:	0606                	slli	a2,a2,0x1
1c005f4a:	427a88b3          	p.mac	a7,s5,t2
		Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c005f4e:	1005c5b3          	p.exths	a1,a1
		Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c005f52:	00359a93          	slli	s5,a1,0x3
1c005f56:	40ba8ab3          	sub	s5,s5,a1
		Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c005f5a:	9f05c85b          	p.mac.sl.zl	a6,a1,a6,a5
		Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c005f5e:	9746                	add	a4,a4,a7
1c005f60:	972a                	add	a4,a4,a0
1c005f62:	9732                	add	a4,a4,a2
1c005f64:	9756                	add	a4,a4,s5
	Result = gap_muluRN(U_Res, ScaledFract, 15) + U_Res * ScaledInt;
1c005f66:	6541                	lui	a0,0x10
1c005f68:	45c2                	lw	a1,16(sp)
1c005f6a:	157d                	addi	a0,a0,-1
		Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c005f6c:	10084833          	p.exths	a6,a6
	Result = gap_roundnorm(Result, 15) + ExpCoeffLUT[0];
1c005f70:	1f07675b          	p.mac.zh.zl	a4,a4,a6,a5
1c005f74:	9766                	add	a4,a4,s9
	Result = gap_muluRN(U_Res, ScaledFract, 15) + U_Res * ScaledInt;
1c005f76:	1fe74f5b          	p.mac.zl.zl	t5,a4,t5,a5
1c005f7a:	8f69                	and	a4,a4,a0
1c005f7c:	42b70f33          	p.mac	t5,a4,a1
	if (Result && (X > 0x7FFFFFFF)) 
1c005f80:	e80f02e3          	beqz	t5,1c005e04 <KerParSoftMax_SQ8+0xd8>
1c005f84:	0007da63          	bgez	a5,1c005f98 <KerParSoftMax_SQ8+0x26c>
		Result = ((0x7FFFFFFF / Result) >> 1);      /* negative value */
1c005f88:	80000637          	lui	a2,0x80000
1c005f8c:	fff64613          	not	a2,a2
1c005f90:	03e64f33          	div	t5,a2,t5
1c005f94:	401f5f13          	srai	t5,t5,0x1
1c005f98:	100f46b3          	p.exths	a3,t5
			Out[i] = Exp; Sum += Exp;
1c005f9c:	00de912b          	p.sh	a3,2(t4!)
1c005fa0:	9ffa                	add	t6,t6,t5
1c005fa2:	137d                	addi	t1,t1,-1
1c005fa4:	e40318e3          	bnez	t1,1c005df4 <KerParSoftMax_SQ8+0xc8>
1c005fa8:	b59d                	j	1c005e0e <KerParSoftMax_SQ8+0xe2>
			M = Reduct[0];
1c005faa:	0002a783          	lw	a5,0(t0)
			for (int i=1; i<gap_ncore(); i++) M = Max(M, Reduct[i]);
1c005fae:	0042a603          	lw	a2,4(t0)
1c005fb2:	0082a683          	lw	a3,8(t0)
1c005fb6:	00c2a703          	lw	a4,12(t0)
1c005fba:	0102a583          	lw	a1,16(t0)
1c005fbe:	04c7e7b3          	p.max	a5,a5,a2
1c005fc2:	04d7e7b3          	p.max	a5,a5,a3
1c005fc6:	0142a603          	lw	a2,20(t0)
1c005fca:	0182a683          	lw	a3,24(t0)
1c005fce:	04e7e7b3          	p.max	a5,a5,a4
1c005fd2:	04b7e7b3          	p.max	a5,a5,a1
1c005fd6:	01c2a703          	lw	a4,28(t0)
1c005fda:	04c7e7b3          	p.max	a5,a5,a2
1c005fde:	04d7e7b3          	p.max	a5,a5,a3
1c005fe2:	04e7e7b3          	p.max	a5,a5,a4
			Reduct[0] = M;
1c005fe6:	00f2a023          	sw	a5,0(t0)
1c005fea:	01c96783          	p.elw	a5,28(s2)
		M = Reduct[0];
1c005fee:	0002a403          	lw	s0,0(t0)
		for (int i=First; i<Last; i++) {
1c005ff2:	df4c6de3          	bltu	s8,s4,1c005dec <KerParSoftMax_SQ8+0xc0>
		Reduct[CoreId] = Sum;
1c005ff6:	0002a023          	sw	zero,0(t0)
1c005ffa:	01c96783          	p.elw	a5,28(s2)
			for (int i=0; i<gap_ncore(); i++) Sum += Reduct[i];
1c005ffe:	0002a783          	lw	a5,0(t0)
1c006002:	0042a703          	lw	a4,4(t0)
1c006006:	0082a603          	lw	a2,8(t0)
1c00600a:	00c2a683          	lw	a3,12(t0)
1c00600e:	97ba                	add	a5,a5,a4
1c006010:	0102a703          	lw	a4,16(t0)
1c006014:	97b2                	add	a5,a5,a2
1c006016:	0142a603          	lw	a2,20(t0)
1c00601a:	97b6                	add	a5,a5,a3
1c00601c:	0182a683          	lw	a3,24(t0)
1c006020:	97ba                	add	a5,a5,a4
1c006022:	01c2a703          	lw	a4,28(t0)
1c006026:	97b2                	add	a5,a5,a2
1c006028:	97b6                	add	a5,a5,a3
1c00602a:	97ba                	add	a5,a5,a4
			Reduct[0] = Sum;
1c00602c:	00f2a023          	sw	a5,0(t0)
1c006030:	b3f5                	j	1c005e1c <KerParSoftMax_SQ8+0xf0>
		M = 0x80000000;
1c006032:	80000737          	lui	a4,0x80000
1c006036:	bb79                	j	1c005dd4 <KerParSoftMax_SQ8+0xa8>
		Reduct[CoreId] = Sum;
1c006038:	45a2                	lw	a1,8(sp)
1c00603a:	0005a023          	sw	zero,0(a1)
1c00603e:	01c96783          	p.elw	a5,28(s2)
1c006042:	01c96783          	p.elw	a5,28(s2)
1c006046:	b539                	j	1c005e54 <KerParSoftMax_SQ8+0x128>

1c006048 <pi_flash_open>:


int pi_flash_open(struct pi_device *device)
{
  struct pi_flash_conf *conf = (struct pi_flash_conf *)device->config;
  pi_flash_api_t *api = (pi_flash_api_t *)conf->api;
1c006048:	415c                	lw	a5,4(a0)
1c00604a:	439c                	lw	a5,0(a5)
  device->api = (struct pi_device_api *)api;
  return api->open(device);
1c00604c:	0007a303          	lw	t1,0(a5)
  device->api = (struct pi_device_api *)api;
1c006050:	c11c                	sw	a5,0(a0)
  return api->open(device);
1c006052:	8302                	jr	t1

1c006054 <__flash_conf_init>:
}


void __flash_conf_init(struct pi_flash_conf *conf)
{
}
1c006054:	8082                	ret

1c006056 <pi_task_wait_on.isra.3>:
{
  pi_task_t task;
  int result = pi_fs_copy_2d_async(file, index, buffer, size, stride, length, ext2loc, pi_task_block(&task));
  pi_task_wait_on(&task);
  return result;
}
1c006056:	1141                	addi	sp,sp,-16
1c006058:	c422                	sw	s0,8(sp)
1c00605a:	c226                	sw	s1,4(sp)
1c00605c:	c606                	sw	ra,12(sp)
1c00605e:	c04a                	sw	s2,0(sp)
1c006060:	842a                	mv	s0,a0
1c006062:	00040783          	lb	a5,0(s0)
1c006066:	c799                	beqz	a5,1c006074 <pi_task_wait_on.isra.3+0x1e>
1c006068:	40b2                	lw	ra,12(sp)
1c00606a:	4422                	lw	s0,8(sp)
1c00606c:	4492                	lw	s1,4(sp)
1c00606e:	4902                	lw	s2,0(sp)
1c006070:	0141                	addi	sp,sp,16
1c006072:	8082                	ret
1c006074:	30047973          	csrrci	s2,mstatus,8
1c006078:	4585                	li	a1,1
1c00607a:	01c00513          	li	a0,28
1c00607e:	145020ef          	jal	ra,1c0089c2 <__rt_event_execute>
1c006082:	30091073          	csrw	mstatus,s2
1c006086:	bff1                	j	1c006062 <pi_task_wait_on.isra.3+0xc>

1c006088 <pi_fs_conf_init>:
1c006088:	00052023          	sw	zero,0(a0) # 10000 <__L1Cl>
1c00608c:	00052423          	sw	zero,8(a0)
1c006090:	00050623          	sb	zero,12(a0)
1c006094:	00052823          	sw	zero,16(a0)
1c006098:	8082                	ret

1c00609a <pi_fs_mount>:
1c00609a:	4158                	lw	a4,4(a0)
1c00609c:	4b1c                	lw	a5,16(a4)
1c00609e:	eb89                	bnez	a5,1c0060b0 <pi_fs_mount+0x16>
1c0060a0:	431c                	lw	a5,0(a4)
1c0060a2:	cb99                	beqz	a5,1c0060b8 <pi_fs_mount+0x1e>
1c0060a4:	0017bf63          	p.bneimm	a5,1,1c0060c2 <pi_fs_mount+0x28>
1c0060a8:	1c00c7b7          	lui	a5,0x1c00c
1c0060ac:	6ac78793          	addi	a5,a5,1708 # 1c00c6ac <__pi_host_fs_api>
1c0060b0:	0007a303          	lw	t1,0(a5)
1c0060b4:	c11c                	sw	a5,0(a0)
1c0060b6:	8302                	jr	t1
1c0060b8:	1c00c7b7          	lui	a5,0x1c00c
1c0060bc:	68478793          	addi	a5,a5,1668 # 1c00c684 <__pi_read_fs_api>
1c0060c0:	bfc5                	j	1c0060b0 <pi_fs_mount+0x16>
1c0060c2:	557d                	li	a0,-1
1c0060c4:	8082                	ret

1c0060c6 <pi_fs_unmount>:
1c0060c6:	411c                	lw	a5,0(a0)
1c0060c8:	0047a303          	lw	t1,4(a5)
1c0060cc:	8302                	jr	t1

1c0060ce <pi_fs_open>:
1c0060ce:	411c                	lw	a5,0(a0)
1c0060d0:	0087a303          	lw	t1,8(a5)
1c0060d4:	8302                	jr	t1

1c0060d6 <pi_fs_close>:
1c0060d6:	415c                	lw	a5,4(a0)
1c0060d8:	00c7a303          	lw	t1,12(a5)
1c0060dc:	8302                	jr	t1

1c0060de <pi_fs_read_async>:
1c0060de:	415c                	lw	a5,4(a0)
1c0060e0:	0107a303          	lw	t1,16(a5)
1c0060e4:	8302                	jr	t1

1c0060e6 <pi_fs_read>:
1c0060e6:	7175                	addi	sp,sp,-144
1c0060e8:	4785                	li	a5,1
1c0060ea:	868a                	mv	a3,sp
1c0060ec:	c706                	sw	ra,140(sp)
1c0060ee:	c522                	sw	s0,136(sp)
1c0060f0:	cc3e                	sw	a5,24(sp)
1c0060f2:	d43e                	sw	a5,40(sp)
1c0060f4:	c202                	sw	zero,4(sp)
1c0060f6:	00010a23          	sb	zero,20(sp)
1c0060fa:	37d5                	jal	1c0060de <pi_fs_read_async>
1c0060fc:	842a                	mv	s0,a0
1c0060fe:	0848                	addi	a0,sp,20
1c006100:	3f99                	jal	1c006056 <pi_task_wait_on.isra.3>
1c006102:	8522                	mv	a0,s0
1c006104:	40ba                	lw	ra,140(sp)
1c006106:	442a                	lw	s0,136(sp)
1c006108:	6149                	addi	sp,sp,144
1c00610a:	8082                	ret

1c00610c <pi_fs_write_async>:
1c00610c:	415c                	lw	a5,4(a0)
1c00610e:	0187a303          	lw	t1,24(a5)
1c006112:	8302                	jr	t1

1c006114 <pi_fs_write>:
1c006114:	7175                	addi	sp,sp,-144
1c006116:	4785                	li	a5,1
1c006118:	868a                	mv	a3,sp
1c00611a:	c706                	sw	ra,140(sp)
1c00611c:	c522                	sw	s0,136(sp)
1c00611e:	cc3e                	sw	a5,24(sp)
1c006120:	d43e                	sw	a5,40(sp)
1c006122:	c202                	sw	zero,4(sp)
1c006124:	00010a23          	sb	zero,20(sp)
1c006128:	37d5                	jal	1c00610c <pi_fs_write_async>
1c00612a:	842a                	mv	s0,a0
1c00612c:	0848                	addi	a0,sp,20
1c00612e:	3725                	jal	1c006056 <pi_task_wait_on.isra.3>
1c006130:	8522                	mv	a0,s0
1c006132:	40ba                	lw	ra,140(sp)
1c006134:	442a                	lw	s0,136(sp)
1c006136:	6149                	addi	sp,sp,144
1c006138:	8082                	ret

1c00613a <pi_fs_copy_async>:
1c00613a:	00452803          	lw	a6,4(a0)
1c00613e:	02082303          	lw	t1,32(a6)
1c006142:	8302                	jr	t1

1c006144 <pi_fs_seek>:

int32_t pi_fs_seek(pi_fs_file_t *file, unsigned int offset)
{
  return file->api->seek(file, offset);
1c006144:	415c                	lw	a5,4(a0)
1c006146:	01c7a303          	lw	t1,28(a5)
1c00614a:	8302                	jr	t1

1c00614c <pi_flash_read_async>:
}

static inline void pi_flash_read_async(struct pi_device *device, uint32_t pi_flash_addr, void *data, uint32_t size, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->read_async(device, pi_flash_addr, data, size, task);
1c00614c:	411c                	lw	a5,0(a0)
1c00614e:	00c7a303          	lw	t1,12(a5)
1c006152:	8302                	jr	t1

1c006154 <__pi_read_fs_write>:
    return block_size;
}

static int32_t __pi_read_fs_write(pi_fs_file_t *_file, void *buffer, uint32_t size, pi_task_t *task)
{
    pi_read_fs_t *fs = (pi_read_fs_t *) _file->fs->data;
1c006154:	411c                	lw	a5,0(a0)
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    
    int real_size = size;
    unsigned int addr = file->addr + file->offset;
1c006156:	01852803          	lw	a6,24(a0)
{
1c00615a:	8736                	mv	a4,a3
    pi_read_fs_t *fs = (pi_read_fs_t *) _file->fs->data;
1c00615c:	4794                	lw	a3,8(a5)
    unsigned int addr = file->addr + file->offset;
1c00615e:	495c                	lw	a5,20(a0)
{
1c006160:	88ae                	mv	a7,a1
1c006162:	1141                	addi	sp,sp,-16
    unsigned int addr = file->addr + file->offset;
1c006164:	010785b3          	add	a1,a5,a6
    if(file->offset + size > file->fs_file.size)
1c006168:	00c52803          	lw	a6,12(a0)
{
1c00616c:	c606                	sw	ra,12(sp)
    if(file->offset + size > file->fs_file.size)
1c00616e:	00c78333          	add	t1,a5,a2
1c006172:	00687463          	bleu	t1,a6,1c00617a <__pi_read_fs_write+0x26>
    {
        real_size = file->fs_file.size - file->offset;
1c006176:	40f80633          	sub	a2,a6,a5
    }
    file->offset += real_size;
1c00617a:	97b2                	add	a5,a5,a2
1c00617c:	c95c                	sw	a5,20(a0)
    
    pi_flash_program_async(fs->flash, addr, (void *) buffer, real_size, task);
1c00617e:	4288                	lw	a0,0(a3)
}

static inline void pi_flash_program_async(struct pi_device *device, uint32_t pi_flash_addr, const void *data, uint32_t size, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->program_async(device, pi_flash_addr, data, size, task);
1c006180:	86b2                	mv	a3,a2
1c006182:	8646                	mv	a2,a7
1c006184:	411c                	lw	a5,0(a0)
1c006186:	4b9c                	lw	a5,16(a5)
1c006188:	9782                	jalr	a5
    
    return 0;
}
1c00618a:	40b2                	lw	ra,12(sp)
1c00618c:	4501                	li	a0,0
1c00618e:	0141                	addi	sp,sp,16
1c006190:	8082                	ret

1c006192 <__pi_read_fs_seek>:
static int32_t __pi_read_fs_seek(pi_fs_file_t *_file, unsigned int offset)
{
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    //printf("[FS] File seek (file: %p, offset: 0x%x)\n", file, offset);
    
    if(offset < file->fs_file.size)
1c006192:	455c                	lw	a5,12(a0)
1c006194:	00f5f563          	bleu	a5,a1,1c00619e <__pi_read_fs_seek+0xc>
    {
        file->offset = offset;
1c006198:	c94c                	sw	a1,20(a0)
        return 0;
1c00619a:	4501                	li	a0,0
1c00619c:	8082                	ret
    }
    return -1;
1c00619e:	557d                	li	a0,-1
}
1c0061a0:	8082                	ret

1c0061a2 <__pi_read_fs_direct_read_async>:
}

static int32_t __pi_read_fs_direct_read_async(pi_fs_file_t *_file, void *buffer, uint32_t size, pi_task_t *event)
{
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c0061a2:	411c                	lw	a5,0(a0)
{
1c0061a4:	1141                	addi	sp,sp,-16
1c0061a6:	c422                	sw	s0,8(sp)
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c0061a8:	0087a803          	lw	a6,8(a5)
{
1c0061ac:	8432                	mv	s0,a2
    // Mask interrupt to update file current position and get information
    //int irq = pi_irq_disable();
    
    int real_size = size;
    unsigned int addr = file->addr + file->offset;
1c0061ae:	495c                	lw	a5,20(a0)
1c0061b0:	4d10                	lw	a2,24(a0)
{
1c0061b2:	88ae                	mv	a7,a1
1c0061b4:	8736                	mv	a4,a3
    unsigned int addr = file->addr + file->offset;
1c0061b6:	00c785b3          	add	a1,a5,a2
    if(file->offset + size > file->fs_file.size)
1c0061ba:	4550                	lw	a2,12(a0)
{
1c0061bc:	c606                	sw	ra,12(sp)
    if(file->offset + size > file->fs_file.size)
1c0061be:	008786b3          	add	a3,a5,s0
1c0061c2:	00d67463          	bleu	a3,a2,1c0061ca <__pi_read_fs_direct_read_async+0x28>
    {
        real_size = file->fs_file.size - file->offset;
1c0061c6:	40f60433          	sub	s0,a2,a5
    }
    file->offset += real_size;
1c0061ca:	97a2                	add	a5,a5,s0
1c0061cc:	c95c                	sw	a5,20(a0)
    
    //pi_irq_restore(irq);
    
    pi_flash_read_async(fs->flash, addr, (void *) buffer, real_size, event);
1c0061ce:	00082503          	lw	a0,0(a6)
1c0061d2:	86a2                	mv	a3,s0
1c0061d4:	8646                	mv	a2,a7
1c0061d6:	3f9d                	jal	1c00614c <pi_flash_read_async>
    
    return real_size;
}
1c0061d8:	8522                	mv	a0,s0
1c0061da:	40b2                	lw	ra,12(sp)
1c0061dc:	4422                	lw	s0,8(sp)
1c0061de:	0141                	addi	sp,sp,16
1c0061e0:	8082                	ret

1c0061e2 <__pi_read_fs_copy_async>:


static int32_t
__pi_read_fs_copy_async(pi_fs_file_t *_file, uint32_t index, void *buffer, uint32_t size, int32_t ext2loc,
                        pi_task_t *task)
{
1c0061e2:	882a                	mv	a6,a0
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c0061e4:	4108                	lw	a0,0(a0)
    return pi_flash_copy_async(fs->flash, file->addr + index, buffer, size, ext2loc, task);
1c0061e6:	01882803          	lw	a6,24(a6)
1c0061ea:	4508                	lw	a0,8(a0)
}

static inline int pi_flash_copy_async(struct pi_device *device, uint32_t pi_flash_addr, void *buffer, uint32_t size, int ext2loc, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  return api->copy_async(device, pi_flash_addr, buffer, size, ext2loc, task);
1c0061ec:	95c2                	add	a1,a1,a6
1c0061ee:	4108                	lw	a0,0(a0)
1c0061f0:	00052883          	lw	a7,0(a0)
1c0061f4:	0288a303          	lw	t1,40(a7)
1c0061f8:	8302                	jr	t1

1c0061fa <__pi_read_fs_copy_2d_async>:
}

static int32_t
__pi_read_fs_copy_2d_async(pi_fs_file_t *_file, uint32_t index, void *buffer, uint32_t size, uint32_t stride,
                           uint32_t length, int32_t ext2loc, pi_task_t *task)
{
1c0061fa:	832a                	mv	t1,a0
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c0061fc:	4108                	lw	a0,0(a0)
    return pi_flash_copy_2d_async(fs->flash, file->addr + index, buffer, size, stride, length, ext2loc, task);
1c0061fe:	01832e03          	lw	t3,24(t1)
1c006202:	4508                	lw	a0,8(a0)
}

static inline int pi_flash_copy_2d_async(struct pi_device *device, uint32_t pi_flash_addr, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int ext2loc, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  return api->copy_2d_async(device, pi_flash_addr, buffer, size, stride, length, ext2loc, task);
1c006204:	95f2                	add	a1,a1,t3
1c006206:	4108                	lw	a0,0(a0)
1c006208:	00052303          	lw	t1,0(a0)
1c00620c:	02c32303          	lw	t1,44(t1)
1c006210:	8302                	jr	t1

1c006212 <rt_event_enqueue>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006212:	300476f3          	csrrci	a3,mstatus,8
  if (sched->first) {
1c006216:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c00621a:	00052023          	sw	zero,0(a0)
1c00621e:	01c00713          	li	a4,28
  if (sched->first) {
1c006222:	c619                	beqz	a2,1c006230 <rt_event_enqueue+0x1e>
    sched->last->next = event;
1c006224:	435c                	lw	a5,4(a4)
1c006226:	c388                	sw	a0,0(a5)
  sched->last = event;
1c006228:	c348                	sw	a0,4(a4)
  __builtin_pulp_spr_write(reg, val);
1c00622a:	30069073          	csrw	mstatus,a3
}
1c00622e:	8082                	ret
    sched->first = event;
1c006230:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c006234:	bfd5                	j	1c006228 <rt_event_enqueue+0x16>

1c006236 <__pi_fs_free>:
    if(fs != NULL)
1c006236:	c91d                	beqz	a0,1c00626c <__pi_fs_free+0x36>
{
1c006238:	1141                	addi	sp,sp,-16
1c00623a:	c422                	sw	s0,8(sp)
1c00623c:	842a                	mv	s0,a0
        if(fs->pi_fs_info) pmsis_l2_malloc_free(fs->pi_fs_info, fs->pi_fs_l2->pi_fs_size);
1c00623e:	09c52503          	lw	a0,156(a0)
{
1c006242:	c606                	sw	ra,12(sp)
        if(fs->pi_fs_info) pmsis_l2_malloc_free(fs->pi_fs_info, fs->pi_fs_l2->pi_fs_size);
1c006244:	c511                	beqz	a0,1c006250 <__pi_fs_free+0x1a>
1c006246:	09842783          	lw	a5,152(s0)
1c00624a:	438c                	lw	a1,0(a5)
1c00624c:	229020ef          	jal	ra,1c008c74 <pi_l2_free>
        if(fs->pi_fs_l2) pmsis_l2_malloc_free(fs->pi_fs_l2, sizeof(pi_fs_l2_t));
1c006250:	09842503          	lw	a0,152(s0)
1c006254:	c501                	beqz	a0,1c00625c <__pi_fs_free+0x26>
1c006256:	45a1                	li	a1,8
1c006258:	21d020ef          	jal	ra,1c008c74 <pi_l2_free>
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c00625c:	8522                	mv	a0,s0
}
1c00625e:	4422                	lw	s0,8(sp)
1c006260:	40b2                	lw	ra,12(sp)
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c006262:	1b800593          	li	a1,440
}
1c006266:	0141                	addi	sp,sp,16
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c006268:	20d0206f          	j	1c008c74 <pi_l2_free>
1c00626c:	8082                	ret

1c00626e <__pi_read_fs_unmount>:
    __pi_fs_free(fs);
1c00626e:	4508                	lw	a0,8(a0)
1c006270:	b7d9                	j	1c006236 <__pi_fs_free>

1c006272 <__pi_read_fs_open>:
{
1c006272:	1101                	addi	sp,sp,-32
1c006274:	ca26                	sw	s1,20(sp)
1c006276:	c452                	sw	s4,8(sp)
1c006278:	c256                	sw	s5,4(sp)
1c00627a:	ce06                	sw	ra,28(sp)
1c00627c:	cc22                	sw	s0,24(sp)
1c00627e:	c84a                	sw	s2,16(sp)
1c006280:	c64e                	sw	s3,12(sp)
1c006282:	c05a                	sw	s6,0(sp)
1c006284:	8a2a                	mv	s4,a0
1c006286:	8aae                	mv	s5,a1
    pi_read_fs_t *fs = (pi_read_fs_t *) device->data;
1c006288:	4504                	lw	s1,8(a0)
    if(flags == PI_FS_FLAGS_WRITE)
1c00628a:	08163f63          	p.bneimm	a2,1,1c006328 <__pi_read_fs_open+0xb6>
        if(fs->last_created_file)
1c00628e:	12c4a783          	lw	a5,300(s1)
1c006292:	c399                	beqz	a5,1c006298 <__pi_read_fs_open+0x26>
    return NULL;
1c006294:	4501                	li	a0,0
1c006296:	a8bd                	j	1c006314 <__pi_read_fs_open+0xa2>
        file = pmsis_l2_malloc(sizeof(pi_read_fs_file_t));
1c006298:	0c000513          	li	a0,192
1c00629c:	1cb020ef          	jal	ra,1c008c66 <pi_l2_malloc>
1c0062a0:	842a                	mv	s0,a0
        if(file == NULL) return NULL;
1c0062a2:	d96d                	beqz	a0,1c006294 <__pi_read_fs_open+0x22>
        int str_len = strlen(file_name);
1c0062a4:	8556                	mv	a0,s5
1c0062a6:	778040ef          	jal	ra,1c00aa1e <strlen>
        int header_size = ((str_len + 7) & ~0x7) + 12;
1c0062aa:	00750913          	addi	s2,a0,7
1c0062ae:	c4093933          	p.bclr	s2,s2,2,0
1c0062b2:	0931                	addi	s2,s2,12
        int str_len = strlen(file_name);
1c0062b4:	89aa                	mv	s3,a0
        uint8_t *header = pmsis_l2_malloc(header_size);
1c0062b6:	854a                	mv	a0,s2
1c0062b8:	1af020ef          	jal	ra,1c008c66 <pi_l2_malloc>
        if(header == NULL)
1c0062bc:	e519                	bnez	a0,1c0062ca <__pi_read_fs_open+0x58>
    pmsis_l2_malloc_free(file, sizeof(pi_read_fs_file_t));
1c0062be:	0c000593          	li	a1,192
1c0062c2:	8522                	mv	a0,s0
1c0062c4:	1b1020ef          	jal	ra,1c008c74 <pi_l2_free>
1c0062c8:	b7f1                	j	1c006294 <__pi_read_fs_open+0x22>
        file->header = header;
1c0062ca:	0aa42a23          	sw	a0,180(s0)
        file->header_size = header_size;
1c0062ce:	0b242c23          	sw	s2,184(s0)
        memcpy(&file->header[12], file_name, str_len);
1c0062d2:	864e                	mv	a2,s3
1c0062d4:	85d6                	mv	a1,s5
1c0062d6:	0531                	addi	a0,a0,12
1c0062d8:	76c040ef          	jal	ra,1c00aa44 <memcpy>
        *(uint32_t *) &file->header[8] = str_len;
1c0062dc:	0b442783          	lw	a5,180(s0)
1c0062e0:	0137a423          	sw	s3,8(a5)
        file->addr = fs->free_flash_area + header_size;
1c0062e4:	1284a783          	lw	a5,296(s1)
        file->fs_file.size = 0;
1c0062e8:	00042623          	sw	zero,12(s0)
        file->offset = 0;
1c0062ec:	00042a23          	sw	zero,20(s0)
        file->addr = fs->free_flash_area + header_size;
1c0062f0:	993e                	add	s2,s2,a5
        file->cache_addr = -1;
1c0062f2:	57fd                	li	a5,-1
        file->addr = fs->free_flash_area + header_size;
1c0062f4:	01242c23          	sw	s2,24(s0)
        file->cache_addr = -1;
1c0062f8:	0af42823          	sw	a5,176(s0)
        fs->last_created_file = file;
1c0062fc:	1284a623          	sw	s0,300(s1)
    file->fs_file.api = (pi_fs_api_t *) device->api;
1c006300:	000a2783          	lw	a5,0(s4)
    file->fs_file.fs_data = &fs->fs_data;
1c006304:	13048493          	addi	s1,s1,304
    file->fs_file.data = file;
1c006308:	c400                	sw	s0,8(s0)
    file->fs_file.api = (pi_fs_api_t *) device->api;
1c00630a:	c05c                	sw	a5,4(s0)
    file->fs_file.fs = device;
1c00630c:	01442023          	sw	s4,0(s0)
    file->fs_file.fs_data = &fs->fs_data;
1c006310:	c804                	sw	s1,16(s0)
    return &file->fs_file;
1c006312:	8522                	mv	a0,s0
}
1c006314:	40f2                	lw	ra,28(sp)
1c006316:	4462                	lw	s0,24(sp)
1c006318:	44d2                	lw	s1,20(sp)
1c00631a:	4942                	lw	s2,16(sp)
1c00631c:	49b2                	lw	s3,12(sp)
1c00631e:	4a22                	lw	s4,8(sp)
1c006320:	4a92                	lw	s5,4(sp)
1c006322:	4b02                	lw	s6,0(sp)
1c006324:	6105                	addi	sp,sp,32
1c006326:	8082                	ret
        unsigned int *pi_fs_info = fs->pi_fs_info;
1c006328:	09c4a783          	lw	a5,156(s1)
        for (i = 0; i < nb_comps; i++)
1c00632c:	4981                	li	s3,0
        pi_fs_desc_t *desc = NULL;
1c00632e:	4901                	li	s2,0
        int nb_comps = *pi_fs_info++;
1c006330:	0007ab03          	lw	s6,0(a5)
1c006334:	00478413          	addi	s0,a5,4
        for (i = 0; i < nb_comps; i++)
1c006338:	0569c163          	blt	s3,s6,1c00637a <__pi_read_fs_open+0x108>
        if(i == nb_comps) goto error;
1c00633c:	f5698ce3          	beq	s3,s6,1c006294 <__pi_read_fs_open+0x22>
        file = pmsis_l2_malloc(sizeof(pi_read_fs_file_t));
1c006340:	0c000513          	li	a0,192
1c006344:	123020ef          	jal	ra,1c008c66 <pi_l2_malloc>
1c006348:	842a                	mv	s0,a0
        if(file == NULL) goto error;
1c00634a:	d529                	beqz	a0,1c006294 <__pi_read_fs_open+0x22>
        file->cache = pmsis_l2_malloc(READ_FS_THRESHOLD_BLOCK_FULL);
1c00634c:	08800513          	li	a0,136
1c006350:	117020ef          	jal	ra,1c008c66 <pi_l2_malloc>
1c006354:	0aa42623          	sw	a0,172(s0)
        if(file->cache == NULL) goto error1;
1c006358:	d13d                	beqz	a0,1c0062be <__pi_read_fs_open+0x4c>
        file->fs_file.size = desc->size;
1c00635a:	00492783          	lw	a5,4(s2)
        file->addr = desc->addr + fs->partition_offset;
1c00635e:	4498                	lw	a4,8(s1)
        file->header = NULL;
1c006360:	0a042a23          	sw	zero,180(s0)
        file->fs_file.size = desc->size;
1c006364:	c45c                	sw	a5,12(s0)
        file->addr = desc->addr + fs->partition_offset;
1c006366:	00092783          	lw	a5,0(s2)
        file->offset = 0;
1c00636a:	00042a23          	sw	zero,20(s0)
        file->addr = desc->addr + fs->partition_offset;
1c00636e:	97ba                	add	a5,a5,a4
1c006370:	cc1c                	sw	a5,24(s0)
        file->cache_addr = -1;
1c006372:	57fd                	li	a5,-1
1c006374:	0af42823          	sw	a5,176(s0)
1c006378:	b761                	j	1c006300 <__pi_read_fs_open+0x8e>
            if(strcmp(desc->name, file_name) == 0) break;
1c00637a:	85d6                	mv	a1,s5
1c00637c:	00c40513          	addi	a0,s0,12
1c006380:	66a040ef          	jal	ra,1c00a9ea <strcmp>
1c006384:	c901                	beqz	a0,1c006394 <__pi_read_fs_open+0x122>
            pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c006386:	441c                	lw	a5,8(s0)
        for (i = 0; i < nb_comps; i++)
1c006388:	8922                	mv	s2,s0
1c00638a:	0985                	addi	s3,s3,1
            pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c00638c:	97a2                	add	a5,a5,s0
1c00638e:	00c78413          	addi	s0,a5,12
1c006392:	b75d                	j	1c006338 <__pi_read_fs_open+0xc6>
1c006394:	8922                	mv	s2,s0
1c006396:	b76d                	j	1c006340 <__pi_read_fs_open+0xce>

1c006398 <__pi_fs_mount_step>:
{
1c006398:	7179                	addi	sp,sp,-48
1c00639a:	d226                	sw	s1,36(sp)
    switch (fs->mount_step)
1c00639c:	09052483          	lw	s1,144(a0)
{
1c0063a0:	d422                	sw	s0,40(sp)
1c0063a2:	d606                	sw	ra,44(sp)
1c0063a4:	d04a                	sw	s2,32(sp)
    const pi_partition_table_t partition_table = NULL;
1c0063a6:	ce02                	sw	zero,28(sp)
{
1c0063a8:	842a                	mv	s0,a0
    switch (fs->mount_step)
1c0063aa:	0834a463          	p.beqimm	s1,3,1c006432 <__pi_fs_mount_step+0x9a>
1c0063ae:	0c44a963          	p.beqimm	s1,4,1c006480 <__pi_fs_mount_step+0xe8>
1c0063b2:	0614ba63          	p.bneimm	s1,1,1c006426 <__pi_fs_mount_step+0x8e>
            rc = pi_partition_table_load(fs->flash, &partition_table);
1c0063b6:	4108                	lw	a0,0(a0)
1c0063b8:	086c                	addi	a1,sp,28
1c0063ba:	7a5000ef          	jal	ra,1c00735e <pi_partition_table_load>
            if(rc != PI_OK) goto error;
1c0063be:	ed09                	bnez	a0,1c0063d8 <__pi_fs_mount_step+0x40>
            readfs_partition = pi_partition_find_first(partition_table, PI_PARTITION_TYPE_DATA,
1c0063c0:	4054                	lw	a3,4(s0)
1c0063c2:	4572                	lw	a0,28(sp)
1c0063c4:	08100613          	li	a2,129
1c0063c8:	4585                	li	a1,1
1c0063ca:	799000ef          	jal	ra,1c007362 <pi_partition_find_first>
1c0063ce:	892a                	mv	s2,a0
            if(readfs_partition == NULL)
1c0063d0:	e901                	bnez	a0,1c0063e0 <__pi_fs_mount_step+0x48>
                pi_partition_table_free(partition_table);
1c0063d2:	4572                	lw	a0,28(sp)
1c0063d4:	789000ef          	jal	ra,1c00735c <pi_partition_table_free>
    fs->error = -1;
1c0063d8:	57fd                	li	a5,-1
1c0063da:	12f42223          	sw	a5,292(s0)
1c0063de:	a0c9                	j	1c0064a0 <__pi_fs_mount_step+0x108>
            fs->partition_offset = pi_partition_get_flash_offset(readfs_partition);
1c0063e0:	773000ef          	jal	ra,1c007352 <pi_partition_get_flash_offset>

/// @cond IMPLEM

static inline pi_err_t pi_partition_close(const pi_partition_t *partition)
{
    pi_l2_free((pi_partition_t *) partition, sizeof(pi_partition_t));
1c0063e4:	02800593          	li	a1,40
1c0063e8:	c408                	sw	a0,8(s0)
1c0063ea:	854a                	mv	a0,s2
1c0063ec:	089020ef          	jal	ra,1c008c74 <pi_l2_free>
            pi_partition_table_free(partition_table);
1c0063f0:	4572                	lw	a0,28(sp)
1c0063f2:	76b000ef          	jal	ra,1c00735c <pi_partition_table_free>
            fs->mount_step++;
1c0063f6:	09042783          	lw	a5,144(s0)
            pi_flash_read_async(fs->flash, fs->partition_offset, &fs->pi_fs_l2->pi_fs_size, 8,
1c0063fa:	4008                	lw	a0,0(s0)
1c0063fc:	440c                	lw	a1,8(s0)
            fs->mount_step++;
1c0063fe:	0789                	addi	a5,a5,2
1c006400:	08f42823          	sw	a5,144(s0)
            pi_flash_read_async(fs->flash, fs->partition_offset, &fs->pi_fs_l2->pi_fs_size, 8,
1c006404:	09842603          	lw	a2,152(s0)


struct pi_task *pi_task_callback(struct pi_task *task, void (*callback)(void*), void *arg)
{
  task->id = PI_TASK_CALLBACK_ID;
  task->arg[0] = (uint32_t)callback;
1c006408:	1c0067b7          	lui	a5,0x1c006
1c00640c:	39878793          	addi	a5,a5,920 # 1c006398 <__pi_fs_mount_step>
  task->id = PI_TASK_CALLBACK_ID;
1c006410:	02042223          	sw	zero,36(s0)
  task->arg[0] = (uint32_t)callback;
1c006414:	c81c                	sw	a5,16(s0)
  task->arg[1] = (uint32_t)arg;
1c006416:	c840                	sw	s0,20(s0)
  task->implem.keep = 1;
1c006418:	d844                	sw	s1,52(s0)
  task->done = 0;
1c00641a:	02040023          	sb	zero,32(s0)
1c00641e:	00c40713          	addi	a4,s0,12
1c006422:	46a1                	li	a3,8
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c006424:	3325                	jal	1c00614c <pi_flash_read_async>
}
1c006426:	50b2                	lw	ra,44(sp)
1c006428:	5422                	lw	s0,40(sp)
1c00642a:	5492                	lw	s1,36(sp)
1c00642c:	5902                	lw	s2,32(sp)
1c00642e:	6145                	addi	sp,sp,48
1c006430:	8082                	ret
            int pi_fs_size = ((fs->pi_fs_l2->pi_fs_size + 7) & ~7);
1c006432:	09852783          	lw	a5,152(a0)
            int pi_fs_offset = fs->partition_offset;
1c006436:	4504                	lw	s1,8(a0)
            int pi_fs_size = ((fs->pi_fs_l2->pi_fs_size + 7) & ~7);
1c006438:	4394                	lw	a3,0(a5)
1c00643a:	069d                	addi	a3,a3,7
1c00643c:	c406b6b3          	p.bclr	a3,a3,2,0
            fs->pi_fs_info = pmsis_l2_malloc(pi_fs_size);
1c006440:	8536                	mv	a0,a3
1c006442:	c636                	sw	a3,12(sp)
1c006444:	023020ef          	jal	ra,1c008c66 <pi_l2_malloc>
1c006448:	08a42e23          	sw	a0,156(s0)
1c00644c:	862a                	mv	a2,a0
            if(fs->pi_fs_info == NULL)
1c00644e:	46b2                	lw	a3,12(sp)
1c006450:	d541                	beqz	a0,1c0063d8 <__pi_fs_mount_step+0x40>
            fs->mount_step++;
1c006452:	09042783          	lw	a5,144(s0)
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c006456:	4008                	lw	a0,0(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c006458:	02042223          	sw	zero,36(s0)
            fs->mount_step++;
1c00645c:	0785                	addi	a5,a5,1
1c00645e:	08f42823          	sw	a5,144(s0)
  task->arg[0] = (uint32_t)callback;
1c006462:	1c0067b7          	lui	a5,0x1c006
1c006466:	39878793          	addi	a5,a5,920 # 1c006398 <__pi_fs_mount_step>
1c00646a:	c81c                	sw	a5,16(s0)
  task->implem.keep = 1;
1c00646c:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c00646e:	c840                	sw	s0,20(s0)
  task->implem.keep = 1;
1c006470:	d85c                	sw	a5,52(s0)
1c006472:	02040023          	sb	zero,32(s0)
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c006476:	00c40713          	addi	a4,s0,12
1c00647a:	00848593          	addi	a1,s1,8
1c00647e:	b75d                	j	1c006424 <__pi_fs_mount_step+0x8c>
            unsigned int *pi_fs_info = fs->pi_fs_info;
1c006480:	09c52703          	lw	a4,156(a0)
            for (i = 0; i < nb_comps; i++)
1c006484:	4681                	li	a3,0
            int nb_comps = *pi_fs_info++;
1c006486:	00470793          	addi	a5,a4,4 # 80000004 <pulp__FC+0x80000005>
1c00648a:	430c                	lw	a1,0(a4)
            pi_fs_desc_t *desc = NULL;
1c00648c:	4701                	li	a4,0
            for (i = 0; i < nb_comps; i++)
1c00648e:	00b6cd63          	blt	a3,a1,1c0064a8 <__pi_fs_mount_step+0x110>
            if(desc == NULL)
1c006492:	e315                	bnez	a4,1c0064b6 <__pi_fs_mount_step+0x11e>
                fs->free_flash_area = desc->addr + desc->size;
1c006494:	12f42423          	sw	a5,296(s0)
            fs->last_created_file = NULL;
1c006498:	12042623          	sw	zero,300(s0)
            fs->error = 0;
1c00649c:	12042223          	sw	zero,292(s0)
  rt_event_enqueue(task);
1c0064a0:	08c42503          	lw	a0,140(s0)
1c0064a4:	33bd                	jal	1c006212 <rt_event_enqueue>
1c0064a6:	b741                	j	1c006426 <__pi_fs_mount_step+0x8e>
                pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c0064a8:	4790                	lw	a2,8(a5)
            for (i = 0; i < nb_comps; i++)
1c0064aa:	873e                	mv	a4,a5
1c0064ac:	0685                	addi	a3,a3,1
                pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c0064ae:	963e                	add	a2,a2,a5
1c0064b0:	00c60793          	addi	a5,a2,12 # 8000000c <pulp__FC+0x8000000d>
1c0064b4:	bfe9                	j	1c00648e <__pi_fs_mount_step+0xf6>
                fs->free_flash_area = desc->addr + desc->size;
1c0064b6:	431c                	lw	a5,0(a4)
1c0064b8:	4358                	lw	a4,4(a4)
1c0064ba:	97ba                	add	a5,a5,a4
1c0064bc:	bfe1                	j	1c006494 <__pi_fs_mount_step+0xfc>

1c0064be <__pi_read_fs_close>:
    if(file->header == NULL)
1c0064be:	0b452603          	lw	a2,180(a0)
{
1c0064c2:	1141                	addi	sp,sp,-16
1c0064c4:	c422                	sw	s0,8(sp)
1c0064c6:	c606                	sw	ra,12(sp)
1c0064c8:	842a                	mv	s0,a0
    if(file->header == NULL)
1c0064ca:	ee19                	bnez	a2,1c0064e8 <__pi_read_fs_close+0x2a>
        pmsis_l2_malloc_free(file->cache, READ_FS_THRESHOLD_BLOCK_FULL);
1c0064cc:	0ac52503          	lw	a0,172(a0)
1c0064d0:	08800593          	li	a1,136
        pi_l2_free((void *) file->header, file->header_size);
1c0064d4:	7a0020ef          	jal	ra,1c008c74 <pi_l2_free>
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c0064d8:	8522                	mv	a0,s0
}
1c0064da:	4422                	lw	s0,8(sp)
1c0064dc:	40b2                	lw	ra,12(sp)
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c0064de:	0c000593          	li	a1,192
}
1c0064e2:	0141                	addi	sp,sp,16
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c0064e4:	7900206f          	j	1c008c74 <pi_l2_free>
        pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c0064e8:	411c                	lw	a5,0(a0)
        *(uint32_t *) &file->header[0] = file->addr;
1c0064ea:	4d0c                	lw	a1,24(a0)
        *(uint32_t *) &file->header[4] = file->fs_file.size;
1c0064ec:	4558                	lw	a4,12(a0)
        pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c0064ee:	479c                	lw	a5,8(a5)
  api->program(device, pi_flash_addr, data, size);
1c0064f0:	0b842683          	lw	a3,184(s0)
        *(uint32_t *) &file->header[0] = file->addr;
1c0064f4:	c20c                	sw	a1,0(a2)
        pi_flash_program(fs->flash, file->addr - file->header_size, (void *) file->header, file->header_size);
1c0064f6:	4388                	lw	a0,0(a5)
1c0064f8:	8d95                	sub	a1,a1,a3
        *(uint32_t *) &file->header[4] = file->fs_file.size;
1c0064fa:	c258                	sw	a4,4(a2)
1c0064fc:	411c                	lw	a5,0(a0)
1c0064fe:	5bdc                	lw	a5,52(a5)
1c006500:	9782                	jalr	a5
        pi_l2_free((void *) file->header, file->header_size);
1c006502:	0b842583          	lw	a1,184(s0)
1c006506:	0b442503          	lw	a0,180(s0)
1c00650a:	b7e9                	j	1c0064d4 <__pi_read_fs_close+0x16>

1c00650c <__pi_read_fs_mount>:
{
1c00650c:	7175                	addi	sp,sp,-144
1c00650e:	c326                	sw	s1,132(sp)
1c006510:	c14a                	sw	s2,128(sp)
1c006512:	84aa                	mv	s1,a0
    struct pi_fs_conf *conf = (struct pi_fs_conf *) device->config;
1c006514:	00452903          	lw	s2,4(a0)
    pi_read_fs_t *fs = pmsis_l2_malloc(sizeof(pi_read_fs_t));
1c006518:	1b800513          	li	a0,440
{
1c00651c:	c522                	sw	s0,136(sp)
1c00651e:	c706                	sw	ra,140(sp)
    pi_read_fs_t *fs = pmsis_l2_malloc(sizeof(pi_read_fs_t));
1c006520:	746020ef          	jal	ra,1c008c66 <pi_l2_malloc>
1c006524:	842a                	mv	s0,a0
    if(fs == NULL) goto error;
1c006526:	e911                	bnez	a0,1c00653a <__pi_read_fs_mount+0x2e>
    __pi_fs_free(fs);
1c006528:	8522                	mv	a0,s0
1c00652a:	3331                	jal	1c006236 <__pi_fs_free>
    return -1;
1c00652c:	557d                	li	a0,-1
}
1c00652e:	40ba                	lw	ra,140(sp)
1c006530:	442a                	lw	s0,136(sp)
1c006532:	449a                	lw	s1,132(sp)
1c006534:	490a                	lw	s2,128(sp)
1c006536:	6149                	addi	sp,sp,144
1c006538:	8082                	ret
    fs->flash = conf->flash;
1c00653a:	00492783          	lw	a5,4(s2)
    fs->pi_fs_l2 = NULL;
1c00653e:	08052c23          	sw	zero,152(a0)
    fs->pi_fs_info = NULL;
1c006542:	08052e23          	sw	zero,156(a0)
    fs->flash = conf->flash;
1c006546:	c11c                	sw	a5,0(a0)
    fs->fs_data.cluster_reqs_first = NULL;
1c006548:	12052823          	sw	zero,304(a0)
    fs->pi_fs_l2 = pmsis_l2_malloc(sizeof(pi_fs_l2_t));
1c00654c:	4521                	li	a0,8
1c00654e:	718020ef          	jal	ra,1c008c66 <pi_l2_malloc>
1c006552:	08a42c23          	sw	a0,152(s0)
    if(fs->pi_fs_l2 == NULL) goto error;
1c006556:	d969                	beqz	a0,1c006528 <__pi_read_fs_mount+0x1c>
    fs->mount_step = 1;
1c006558:	4785                	li	a5,1
1c00655a:	08f42823          	sw	a5,144(s0)
  task->id = PI_TASK_NONE_ID;
1c00655e:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c006560:	d43e                	sw	a5,40(sp)
1c006562:	00010a23          	sb	zero,20(sp)
    fs->pending_event = pi_task_block(&task);
1c006566:	00010793          	mv	a5,sp
1c00656a:	08f42623          	sw	a5,140(s0)
    fs->partition_name = conf->partition_name;
1c00656e:	00892783          	lw	a5,8(s2)
  task->arg[0] = (uint32_t)0;
1c006572:	c202                	sw	zero,4(sp)
    fs->pi_fs_info = NULL;
1c006574:	08042e23          	sw	zero,156(s0)
    fs->partition_name = conf->partition_name;
1c006578:	c05c                	sw	a5,4(s0)
    device->data = (void *) fs;
1c00657a:	c480                	sw	s0,8(s1)
    __pi_fs_mount_step((void *) fs);
1c00657c:	8522                	mv	a0,s0
1c00657e:	3d29                	jal	1c006398 <__pi_fs_mount_step>
  while(!task->done)
1c006580:	01410783          	lb	a5,20(sp)
1c006584:	c791                	beqz	a5,1c006590 <__pi_read_fs_mount+0x84>
    if(fs->error)
1c006586:	12442783          	lw	a5,292(s0)
1c00658a:	ffd9                	bnez	a5,1c006528 <__pi_read_fs_mount+0x1c>
    return 0;
1c00658c:	4501                	li	a0,0
1c00658e:	b745                	j	1c00652e <__pi_read_fs_mount+0x22>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006590:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c006594:	4585                	li	a1,1
1c006596:	01c00513          	li	a0,28
1c00659a:	428020ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00659e:	30091073          	csrw	mstatus,s2
1c0065a2:	bff9                	j	1c006580 <__pi_read_fs_mount+0x74>

1c0065a4 <__pi_fs_read_cached>:
{
1c0065a4:	88ae                	mv	a7,a1
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c0065a6:	0b052583          	lw	a1,176(a0)
{
1c0065aa:	1141                	addi	sp,sp,-16
1c0065ac:	c226                	sw	s1,4(sp)
1c0065ae:	c606                	sw	ra,12(sp)
1c0065b0:	c422                	sw	s0,8(sp)
1c0065b2:	84ba                	mv	s1,a4
1c0065b4:	0ac52803          	lw	a6,172(a0)
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c0065b8:	00b66f63          	bltu	a2,a1,1c0065d6 <__pi_fs_read_cached+0x32>
    if(size > READ_FS_THRESHOLD_BLOCK_FULL - (addr & 0x7)) size = READ_FS_THRESHOLD_BLOCK_FULL - (addr & 0x7);
1c0065bc:	f8363733          	p.bclr	a4,a2,28,3
1c0065c0:	08800413          	li	s0,136
1c0065c4:	8c19                	sub	s0,s0,a4
1c0065c6:	04d45433          	p.minu	s0,s0,a3
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c0065ca:	008606b3          	add	a3,a2,s0
1c0065ce:	08858713          	addi	a4,a1,136
1c0065d2:	02d77a63          	bleu	a3,a4,1c006606 <__pi_fs_read_cached+0x62>
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c0065d6:	4118                	lw	a4,0(a0)
        file->cache_addr = addr & ~0x7;
1c0065d8:	c40635b3          	p.bclr	a1,a2,2,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c0065dc:	08800693          	li	a3,136
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c0065e0:	00872883          	lw	a7,8(a4)
        file->cache_addr = addr & ~0x7;
1c0065e4:	0ab52823          	sw	a1,176(a0)
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c0065e8:	873e                	mv	a4,a5
1c0065ea:	0008a503          	lw	a0,0(a7)
1c0065ee:	8642                	mv	a2,a6
        return 0;
1c0065f0:	4401                	li	s0,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c0065f2:	b5bff0ef          	jal	ra,1c00614c <pi_flash_read_async>
        *pending = 1;
1c0065f6:	4785                	li	a5,1
1c0065f8:	c09c                	sw	a5,0(s1)
}
1c0065fa:	8522                	mv	a0,s0
1c0065fc:	40b2                	lw	ra,12(sp)
1c0065fe:	4422                	lw	s0,8(sp)
1c006600:	4492                	lw	s1,4(sp)
1c006602:	0141                	addi	sp,sp,16
1c006604:	8082                	ret
    memcpy((void *) buffer, &file->cache[addr - file->cache_addr], size);
1c006606:	40b605b3          	sub	a1,a2,a1
1c00660a:	95c2                	add	a1,a1,a6
1c00660c:	8622                	mv	a2,s0
1c00660e:	8546                	mv	a0,a7
1c006610:	434040ef          	jal	ra,1c00aa44 <memcpy>
    return __pi_fs_read_from_cache(file, buffer, addr, size);
1c006614:	b7dd                	j	1c0065fa <__pi_fs_read_cached+0x56>

1c006616 <__pi_fs_read>:
{
1c006616:	7179                	addi	sp,sp,-48
1c006618:	d422                	sw	s0,40(sp)
1c00661a:	d226                	sw	s1,36(sp)
1c00661c:	d04a                	sw	s2,32(sp)
1c00661e:	ca56                	sw	s5,20(sp)
1c006620:	c85a                	sw	s6,16(sp)
1c006622:	d606                	sw	ra,44(sp)
1c006624:	8b3e                	mv	s6,a5
1c006626:	ce4e                	sw	s3,28(sp)
1c006628:	cc52                	sw	s4,24(sp)
1c00662a:	c65e                	sw	s7,12(sp)
    int use_cache = size <= READ_FS_THRESHOLD || (addr & 0x7) != (buffer & 0x7);
1c00662c:	47c1                	li	a5,16
{
1c00662e:	892e                	mv	s2,a1
1c006630:	8432                	mv	s0,a2
1c006632:	84b6                	mv	s1,a3
1c006634:	8aba                	mv	s5,a4
    int use_cache = size <= READ_FS_THRESHOLD || (addr & 0x7) != (buffer & 0x7);
1c006636:	06d7d063          	ble	a3,a5,1c006696 <__pi_fs_read+0x80>
1c00663a:	00b647b3          	xor	a5,a2,a1
1c00663e:	f837b7b3          	p.bclr	a5,a5,28,3
1c006642:	ebb1                	bnez	a5,1c006696 <__pi_fs_read+0x80>
    if(size <= READ_FS_THRESHOLD_BLOCK_FULL &&
1c006644:	08800793          	li	a5,136
1c006648:	06d7d763          	ble	a3,a5,1c0066b6 <__pi_fs_read+0xa0>
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c00664c:	411c                	lw	a5,0(a0)
1c00664e:	0087ab83          	lw	s7,8(a5)
    int prefix_size = addr & 0x7;
1c006652:	f83437b3          	p.bclr	a5,s0,28,3
    if(prefix_size)
1c006656:	c395                	beqz	a5,1c00667a <__pi_fs_read+0x64>
        prefix_size = 4 - prefix_size;
1c006658:	4991                	li	s3,4
1c00665a:	40f989b3          	sub	s3,s3,a5
        int read_size = __pi_fs_read_cached(file, buffer, addr, prefix_size, pending, event);
1c00665e:	8756                	mv	a4,s5
1c006660:	87da                	mv	a5,s6
1c006662:	86ce                	mv	a3,s3
1c006664:	8622                	mv	a2,s0
1c006666:	85ca                	mv	a1,s2
1c006668:	3f35                	jal	1c0065a4 <__pi_fs_read_cached>
        if(*pending) return read_size;
1c00666a:	000aa783          	lw	a5,0(s5)
        int read_size = __pi_fs_read_cached(file, buffer, addr, prefix_size, pending, event);
1c00666e:	8a2a                	mv	s4,a0
        if(*pending) return read_size;
1c006670:	e7bd                	bnez	a5,1c0066de <__pi_fs_read+0xc8>
        addr += prefix_size;
1c006672:	944e                	add	s0,s0,s3
        buffer += prefix_size;
1c006674:	994e                	add	s2,s2,s3
        size -= prefix_size;
1c006676:	413484b3          	sub	s1,s1,s3
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c00667a:	000ba503          	lw	a0,0(s7)
    int block_size = size & ~0x7;
1c00667e:	c404ba33          	p.bclr	s4,s1,2,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c006682:	875a                	mv	a4,s6
1c006684:	86d2                	mv	a3,s4
1c006686:	864a                	mv	a2,s2
1c006688:	85a2                	mv	a1,s0
1c00668a:	ac3ff0ef          	jal	ra,1c00614c <pi_flash_read_async>
    *pending = 1;
1c00668e:	4785                	li	a5,1
1c006690:	00faa023          	sw	a5,0(s5)
    return block_size;
1c006694:	a0a9                	j	1c0066de <__pi_fs_read+0xc8>
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c006696:	8622                	mv	a2,s0
}
1c006698:	5422                	lw	s0,40(sp)
1c00669a:	50b2                	lw	ra,44(sp)
1c00669c:	49f2                	lw	s3,28(sp)
1c00669e:	4a62                	lw	s4,24(sp)
1c0066a0:	4bb2                	lw	s7,12(sp)
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c0066a2:	87da                	mv	a5,s6
1c0066a4:	8756                	mv	a4,s5
}
1c0066a6:	4b42                	lw	s6,16(sp)
1c0066a8:	4ad2                	lw	s5,20(sp)
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c0066aa:	86a6                	mv	a3,s1
1c0066ac:	85ca                	mv	a1,s2
}
1c0066ae:	5492                	lw	s1,36(sp)
1c0066b0:	5902                	lw	s2,32(sp)
1c0066b2:	6145                	addi	sp,sp,48
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c0066b4:	bdc5                	j	1c0065a4 <__pi_fs_read_cached>
       addr >= file->cache_addr &&
1c0066b6:	0b052583          	lw	a1,176(a0)
    if(size <= READ_FS_THRESHOLD_BLOCK_FULL &&
1c0066ba:	f8b669e3          	bltu	a2,a1,1c00664c <__pi_fs_read+0x36>
       addr + size < file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c0066be:	00c687b3          	add	a5,a3,a2
1c0066c2:	08858713          	addi	a4,a1,136
       addr >= file->cache_addr &&
1c0066c6:	f8e7f3e3          	bleu	a4,a5,1c00664c <__pi_fs_read+0x36>
    memcpy((void *) buffer, &file->cache[addr - file->cache_addr], size);
1c0066ca:	40b60433          	sub	s0,a2,a1
1c0066ce:	0ac52583          	lw	a1,172(a0)
1c0066d2:	8636                	mv	a2,a3
1c0066d4:	854a                	mv	a0,s2
1c0066d6:	95a2                	add	a1,a1,s0
1c0066d8:	36c040ef          	jal	ra,1c00aa44 <memcpy>
        return __pi_fs_read_from_cache(file, buffer, addr, size);
1c0066dc:	8a26                	mv	s4,s1
}
1c0066de:	50b2                	lw	ra,44(sp)
1c0066e0:	5422                	lw	s0,40(sp)
1c0066e2:	8552                	mv	a0,s4
1c0066e4:	5492                	lw	s1,36(sp)
1c0066e6:	5902                	lw	s2,32(sp)
1c0066e8:	49f2                	lw	s3,28(sp)
1c0066ea:	4a62                	lw	s4,24(sp)
1c0066ec:	4ad2                	lw	s5,20(sp)
1c0066ee:	4b42                	lw	s6,16(sp)
1c0066f0:	4bb2                	lw	s7,12(sp)
1c0066f2:	6145                	addi	sp,sp,48
1c0066f4:	8082                	ret

1c0066f6 <__pi_read_fs_try_read>:
    if(file->pending_size == 0)
1c0066f6:	0a852683          	lw	a3,168(a0)
{
1c0066fa:	7179                	addi	sp,sp,-48
1c0066fc:	d422                	sw	s0,40(sp)
1c0066fe:	d606                	sw	ra,44(sp)
1c006700:	d226                	sw	s1,36(sp)
1c006702:	d04a                	sw	s2,32(sp)
1c006704:	ce4e                	sw	s3,28(sp)
    int pending = 0;
1c006706:	c602                	sw	zero,12(sp)
{
1c006708:	842a                	mv	s0,a0
    if(file->pending_size == 0)
1c00670a:	ee99                	bnez	a3,1c006728 <__pi_read_fs_try_read+0x32>
            file->pending_event->implem.data[0] = file->first_read_size;
1c00670c:	501c                	lw	a5,32(s0)
1c00670e:	0bc42703          	lw	a4,188(s0)
1c006712:	df98                	sw	a4,56(a5)
  rt_event_enqueue(task);
1c006714:	5008                	lw	a0,32(s0)
1c006716:	afdff0ef          	jal	ra,1c006212 <rt_event_enqueue>
}
1c00671a:	50b2                	lw	ra,44(sp)
1c00671c:	5422                	lw	s0,40(sp)
1c00671e:	5492                	lw	s1,36(sp)
1c006720:	5902                	lw	s2,32(sp)
1c006722:	49f2                	lw	s3,28(sp)
1c006724:	6145                	addi	sp,sp,48
1c006726:	8082                	ret
  task->arg[0] = (uint32_t)callback;
1c006728:	1c0064b7          	lui	s1,0x1c006
1c00672c:	6f648493          	addi	s1,s1,1782 # 1c0066f6 <__pi_read_fs_try_read>
  task->id = PI_TASK_CALLBACK_ID;
1c006730:	02052e23          	sw	zero,60(a0)
  task->arg[0] = (uint32_t)callback;
1c006734:	d504                	sw	s1,40(a0)
    int size = __pi_fs_read(
1c006736:	4d50                	lw	a2,28(a0)
1c006738:	0a452583          	lw	a1,164(a0)
  task->arg[1] = (uint32_t)arg;
1c00673c:	d448                	sw	a0,44(s0)
            pi_task_callback(&file->step_event, __pi_read_fs_try_read, (void *) file)
1c00673e:	02450913          	addi	s2,a0,36
  task->implem.keep = 1;
1c006742:	4985                	li	s3,1
    int size = __pi_fs_read(
1c006744:	87ca                	mv	a5,s2
1c006746:	05352623          	sw	s3,76(a0)
  task->done = 0;
1c00674a:	02050c23          	sb	zero,56(a0)
1c00674e:	0078                	addi	a4,sp,12
1c006750:	35d9                	jal	1c006616 <__pi_fs_read>
    file->pending_addr += size;
1c006752:	4c5c                	lw	a5,28(s0)
1c006754:	97aa                	add	a5,a5,a0
1c006756:	cc5c                	sw	a5,28(s0)
    file->pending_buffer += size;
1c006758:	0a442783          	lw	a5,164(s0)
1c00675c:	97aa                	add	a5,a5,a0
1c00675e:	0af42223          	sw	a5,164(s0)
    file->pending_size -= size;
1c006762:	0a842783          	lw	a5,168(s0)
1c006766:	40a78533          	sub	a0,a5,a0
    if(!pending)
1c00676a:	47b2                	lw	a5,12(sp)
    file->pending_size -= size;
1c00676c:	0aa42423          	sw	a0,168(s0)
    if(!pending)
1c006770:	f7cd                	bnez	a5,1c00671a <__pi_read_fs_try_read+0x24>
        if(file->pending_size == 0)
1c006772:	dd49                	beqz	a0,1c00670c <__pi_read_fs_try_read+0x16>
  task->id = PI_TASK_CALLBACK_ID;
1c006774:	02042e23          	sw	zero,60(s0)
  task->arg[0] = (uint32_t)callback;
1c006778:	d404                	sw	s1,40(s0)
  task->arg[1] = (uint32_t)arg;
1c00677a:	d440                	sw	s0,44(s0)
  task->implem.keep = 1;
1c00677c:	05342623          	sw	s3,76(s0)
1c006780:	02040c23          	sb	zero,56(s0)
  rt_event_enqueue(task);
1c006784:	854a                	mv	a0,s2
1c006786:	bf41                	j	1c006716 <__pi_read_fs_try_read+0x20>

1c006788 <__pi_read_fs_read_async>:
    if(file->offset + size > file->fs_file.size)
1c006788:	495c                	lw	a5,20(a0)
1c00678a:	4558                	lw	a4,12(a0)
{
1c00678c:	1101                	addi	sp,sp,-32
1c00678e:	ce06                	sw	ra,28(sp)
    if(file->offset + size > file->fs_file.size)
1c006790:	00c78833          	add	a6,a5,a2
1c006794:	01077463          	bleu	a6,a4,1c00679c <__pi_read_fs_read_async+0x14>
        real_size = file->fs_file.size - file->offset;
1c006798:	40f70633          	sub	a2,a4,a5
    file->first_read_size = real_size;
1c00679c:	0ac52e23          	sw	a2,188(a0)
1c0067a0:	00068a23          	sb	zero,20(a3)
    file->pending_addr = file->addr + file->offset;
1c0067a4:	495c                	lw	a5,20(a0)
1c0067a6:	4d18                	lw	a4,24(a0)
    file->pending_size = real_size;
1c0067a8:	0ac52423          	sw	a2,168(a0)
    file->pending_event = event;
1c0067ac:	d114                	sw	a3,32(a0)
    file->pending_addr = file->addr + file->offset;
1c0067ae:	973e                	add	a4,a4,a5
    file->offset += real_size;
1c0067b0:	97b2                	add	a5,a5,a2
    file->pending_buffer = (unsigned int) buffer;
1c0067b2:	0ab52223          	sw	a1,164(a0)
    file->pending_addr = file->addr + file->offset;
1c0067b6:	cd58                	sw	a4,28(a0)
    file->offset += real_size;
1c0067b8:	c95c                	sw	a5,20(a0)
    __pi_read_fs_try_read((void *) file);
1c0067ba:	c632                	sw	a2,12(sp)
1c0067bc:	3f2d                	jal	1c0066f6 <__pi_read_fs_try_read>
}
1c0067be:	4632                	lw	a2,12(sp)
1c0067c0:	40f2                	lw	ra,28(sp)
1c0067c2:	8532                	mv	a0,a2
1c0067c4:	6105                	addi	sp,sp,32
1c0067c6:	8082                	ret

1c0067c8 <__pi_host_fs_mount>:
  int fd;
} pi_host_fs_file_t;

static int32_t __pi_host_fs_mount(struct pi_device *device)
{
  bsp_fs_data.cluster_reqs_first = NULL;
1c0067c8:	1c00d7b7          	lui	a5,0x1c00d
1c0067cc:	9207a823          	sw	zero,-1744(a5) # 1c00c930 <bsp_fs_data>
  return 0;
}
1c0067d0:	4501                	li	a0,0
1c0067d2:	8082                	ret

1c0067d4 <__pi_host_fs_unmount>:

static void __pi_host_fs_unmount(struct pi_device *device)
{
}
1c0067d4:	8082                	ret

1c0067d6 <rt_event_enqueue>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0067d6:	300476f3          	csrrci	a3,mstatus,8
  if (sched->first) {
1c0067da:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c0067de:	00052023          	sw	zero,0(a0)
1c0067e2:	01c00713          	li	a4,28
  if (sched->first) {
1c0067e6:	c619                	beqz	a2,1c0067f4 <rt_event_enqueue+0x1e>
    sched->last->next = event;
1c0067e8:	435c                	lw	a5,4(a4)
1c0067ea:	c388                	sw	a0,0(a5)
  sched->last = event;
1c0067ec:	c348                	sw	a0,4(a4)
  __builtin_pulp_spr_write(reg, val);
1c0067ee:	30069073          	csrw	mstatus,a3
}
1c0067f2:	8082                	ret
    sched->first = event;
1c0067f4:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c0067f8:	bfd5                	j	1c0067ec <rt_event_enqueue+0x16>

1c0067fa <__pi_host_fs_seek>:
}

static int32_t __pi_host_fs_seek(pi_fs_file_t *arg, unsigned int offset)
{
  pi_host_fs_file_t *file = (pi_host_fs_file_t *)arg;
  return semihost_seek(file->fd, offset);
1c0067fa:	4948                	lw	a0,20(a0)
1c0067fc:	1230106f          	j	1c00811e <semihost_seek>

1c006800 <__pi_host_fs_copy_2d_async>:
  else
    return __pi_host_fs_write_async(arg, buffer, size, task);
}

static int32_t __pi_host_fs_copy_2d_async(pi_fs_file_t *file, uint32_t index, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int32_t ext2loc, pi_task_t *task)
{
1c006800:	7179                	addi	sp,sp,-48
1c006802:	d422                	sw	s0,40(sp)
1c006804:	d226                	sw	s1,36(sp)
1c006806:	d04a                	sw	s2,32(sp)
1c006808:	ce4e                	sw	s3,28(sp)
1c00680a:	cc52                	sw	s4,24(sp)
1c00680c:	ca56                	sw	s5,20(sp)
1c00680e:	c85a                	sw	s6,16(sp)
1c006810:	c65e                	sw	s7,12(sp)
1c006812:	c462                	sw	s8,8(sp)
1c006814:	d606                	sw	ra,44(sp)
1c006816:	89aa                	mv	s3,a0
1c006818:	8a2e                	mv	s4,a1
1c00681a:	84b2                	mv	s1,a2
1c00681c:	8b36                	mv	s6,a3
1c00681e:	8bba                	mv	s7,a4
1c006820:	843e                	mv	s0,a5
1c006822:	8c42                	mv	s8,a6
1c006824:	8ac6                	mv	s5,a7
  unsigned int chunk;
  for (chunk=0; chunk<size; chunk+=length)
1c006826:	4901                	li	s2,0
1c006828:	03696163          	bltu	s2,s6,1c00684a <__pi_host_fs_copy_2d_async+0x4a>
1c00682c:	8556                	mv	a0,s5
1c00682e:	3765                	jal	1c0067d6 <rt_event_enqueue>

    buffer = ((char *)buffer) + length;
    index += stride;
  }
  pi_task_push(task);
  return 0;
1c006830:	4501                	li	a0,0

error:
  pi_task_push(task);
  return -1;
}
1c006832:	50b2                	lw	ra,44(sp)
1c006834:	5422                	lw	s0,40(sp)
1c006836:	5492                	lw	s1,36(sp)
1c006838:	5902                	lw	s2,32(sp)
1c00683a:	49f2                	lw	s3,28(sp)
1c00683c:	4a62                	lw	s4,24(sp)
1c00683e:	4ad2                	lw	s5,20(sp)
1c006840:	4b42                	lw	s6,16(sp)
1c006842:	4bb2                	lw	s7,12(sp)
1c006844:	4c22                	lw	s8,8(sp)
1c006846:	6145                	addi	sp,sp,48
1c006848:	8082                	ret
    if (__pi_host_fs_seek(file, index))
1c00684a:	85d2                	mv	a1,s4
1c00684c:	854e                	mv	a0,s3
1c00684e:	05645433          	p.minu	s0,s0,s6
1c006852:	3765                	jal	1c0067fa <__pi_host_fs_seek>
1c006854:	e10d                	bnez	a0,1c006876 <__pi_host_fs_copy_2d_async+0x76>
      if (pi_fs_read(file, buffer, length) != (int)length)
1c006856:	8622                	mv	a2,s0
1c006858:	85a6                	mv	a1,s1
1c00685a:	854e                	mv	a0,s3
    if (ext2loc)
1c00685c:	000c0a63          	beqz	s8,1c006870 <__pi_host_fs_copy_2d_async+0x70>
      if (pi_fs_read(file, buffer, length) != (int)length)
1c006860:	887ff0ef          	jal	ra,1c0060e6 <pi_fs_read>
1c006864:	00851963          	bne	a0,s0,1c006876 <__pi_host_fs_copy_2d_async+0x76>
    buffer = ((char *)buffer) + length;
1c006868:	94a2                	add	s1,s1,s0
    index += stride;
1c00686a:	9a5e                	add	s4,s4,s7
  for (chunk=0; chunk<size; chunk+=length)
1c00686c:	9922                	add	s2,s2,s0
1c00686e:	bf6d                	j	1c006828 <__pi_host_fs_copy_2d_async+0x28>
      if (pi_fs_write(file, buffer, length) != (int)length)
1c006870:	8a5ff0ef          	jal	ra,1c006114 <pi_fs_write>
1c006874:	bfc5                	j	1c006864 <__pi_host_fs_copy_2d_async+0x64>
1c006876:	8556                	mv	a0,s5
1c006878:	3fb9                	jal	1c0067d6 <rt_event_enqueue>
  return -1;
1c00687a:	557d                	li	a0,-1
1c00687c:	bf5d                	j	1c006832 <__pi_host_fs_copy_2d_async+0x32>

1c00687e <__pi_host_fs_write_async>:
  int result = size - semihost_write(file->fd, buffer, size);
1c00687e:	4948                	lw	a0,20(a0)
{
1c006880:	1101                	addi	sp,sp,-32
1c006882:	ce06                	sw	ra,28(sp)
1c006884:	cc22                	sw	s0,24(sp)
1c006886:	ca26                	sw	s1,20(sp)
  int result = size - semihost_write(file->fd, buffer, size);
1c006888:	c636                	sw	a3,12(sp)
{
1c00688a:	84b2                	mv	s1,a2
  int result = size - semihost_write(file->fd, buffer, size);
1c00688c:	077010ef          	jal	ra,1c008102 <semihost_write>
1c006890:	46b2                	lw	a3,12(sp)
1c006892:	842a                	mv	s0,a0
1c006894:	8536                	mv	a0,a3
1c006896:	3781                	jal	1c0067d6 <rt_event_enqueue>
}
1c006898:	40848533          	sub	a0,s1,s0
1c00689c:	40f2                	lw	ra,28(sp)
1c00689e:	4462                	lw	s0,24(sp)
1c0068a0:	44d2                	lw	s1,20(sp)
1c0068a2:	6105                	addi	sp,sp,32
1c0068a4:	8082                	ret

1c0068a6 <__pi_host_fs_read_async>:
  int result = size - semihost_read(file->fd, buffer, size);
1c0068a6:	4948                	lw	a0,20(a0)
{
1c0068a8:	1101                	addi	sp,sp,-32
1c0068aa:	ce06                	sw	ra,28(sp)
1c0068ac:	cc22                	sw	s0,24(sp)
  int result = size - semihost_read(file->fd, buffer, size);
1c0068ae:	c636                	sw	a3,12(sp)
{
1c0068b0:	8432                	mv	s0,a2
  int result = size - semihost_read(file->fd, buffer, size);
1c0068b2:	035010ef          	jal	ra,1c0080e6 <semihost_read>
  task->implem.data[0] = result;
1c0068b6:	46b2                	lw	a3,12(sp)
  int result = size - semihost_read(file->fd, buffer, size);
1c0068b8:	8c09                	sub	s0,s0,a0
  task->implem.data[0] = result;
1c0068ba:	de80                	sw	s0,56(a3)
1c0068bc:	8536                	mv	a0,a3
1c0068be:	3f21                	jal	1c0067d6 <rt_event_enqueue>
}
1c0068c0:	8522                	mv	a0,s0
1c0068c2:	40f2                	lw	ra,28(sp)
1c0068c4:	4462                	lw	s0,24(sp)
1c0068c6:	6105                	addi	sp,sp,32
1c0068c8:	8082                	ret

1c0068ca <__pi_host_fs_copy_async>:
{
1c0068ca:	1101                	addi	sp,sp,-32
1c0068cc:	cc22                	sw	s0,24(sp)
1c0068ce:	ca26                	sw	s1,20(sp)
  if (__pi_host_fs_seek(arg, index))
1c0068d0:	c636                	sw	a3,12(sp)
{
1c0068d2:	84b2                	mv	s1,a2
  if (__pi_host_fs_seek(arg, index))
1c0068d4:	c43a                	sw	a4,8(sp)
{
1c0068d6:	ce06                	sw	ra,28(sp)
1c0068d8:	842a                	mv	s0,a0
  if (__pi_host_fs_seek(arg, index))
1c0068da:	c23e                	sw	a5,4(sp)
1c0068dc:	3f39                	jal	1c0067fa <__pi_host_fs_seek>
1c0068de:	4632                	lw	a2,12(sp)
1c0068e0:	4692                	lw	a3,4(sp)
1c0068e2:	4722                	lw	a4,8(sp)
1c0068e4:	ed11                	bnez	a0,1c006900 <__pi_host_fs_copy_async+0x36>
    return __pi_host_fs_read_async(arg, buffer, size, task);
1c0068e6:	85a6                	mv	a1,s1
1c0068e8:	8522                	mv	a0,s0
  if (ext2loc)
1c0068ea:	c711                	beqz	a4,1c0068f6 <__pi_host_fs_copy_async+0x2c>
}
1c0068ec:	4462                	lw	s0,24(sp)
1c0068ee:	40f2                	lw	ra,28(sp)
1c0068f0:	44d2                	lw	s1,20(sp)
1c0068f2:	6105                	addi	sp,sp,32
    return __pi_host_fs_read_async(arg, buffer, size, task);
1c0068f4:	bf4d                	j	1c0068a6 <__pi_host_fs_read_async>
}
1c0068f6:	4462                	lw	s0,24(sp)
1c0068f8:	40f2                	lw	ra,28(sp)
1c0068fa:	44d2                	lw	s1,20(sp)
1c0068fc:	6105                	addi	sp,sp,32
    return __pi_host_fs_write_async(arg, buffer, size, task);
1c0068fe:	b741                	j	1c00687e <__pi_host_fs_write_async>
}
1c006900:	40f2                	lw	ra,28(sp)
1c006902:	4462                	lw	s0,24(sp)
1c006904:	44d2                	lw	s1,20(sp)
1c006906:	557d                	li	a0,-1
1c006908:	6105                	addi	sp,sp,32
1c00690a:	8082                	ret

1c00690c <__pi_host_fs_direct_read_async>:
1c00690c:	bf69                	j	1c0068a6 <__pi_host_fs_read_async>

1c00690e <__pi_host_fs_close>:
{
1c00690e:	1141                	addi	sp,sp,-16
1c006910:	c422                	sw	s0,8(sp)
1c006912:	842a                	mv	s0,a0
  semihost_close(file->fd);
1c006914:	4948                	lw	a0,20(a0)
{
1c006916:	c606                	sw	ra,12(sp)
  semihost_close(file->fd);
1c006918:	7c8010ef          	jal	ra,1c0080e0 <semihost_close>
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c00691c:	8522                	mv	a0,s0
}
1c00691e:	4422                	lw	s0,8(sp)
1c006920:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c006922:	45e1                	li	a1,24
}
1c006924:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c006926:	34e0206f          	j	1c008c74 <pi_l2_free>

1c00692a <__pi_host_fs_open>:
{
1c00692a:	1101                	addi	sp,sp,-32
1c00692c:	ca26                	sw	s1,20(sp)
1c00692e:	84aa                	mv	s1,a0
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c006930:	4561                	li	a0,24
{
1c006932:	c84a                	sw	s2,16(sp)
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c006934:	c632                	sw	a2,12(sp)
{
1c006936:	ce06                	sw	ra,28(sp)
1c006938:	cc22                	sw	s0,24(sp)
1c00693a:	892e                	mv	s2,a1
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c00693c:	32a020ef          	jal	ra,1c008c66 <pi_l2_malloc>
  if (file == NULL) goto error;
1c006940:	4632                	lw	a2,12(sp)
1c006942:	e909                	bnez	a0,1c006954 <__pi_host_fs_open+0x2a>
  return NULL;
1c006944:	4401                	li	s0,0
}
1c006946:	8522                	mv	a0,s0
1c006948:	40f2                	lw	ra,28(sp)
1c00694a:	4462                	lw	s0,24(sp)
1c00694c:	44d2                	lw	s1,20(sp)
1c00694e:	4942                	lw	s2,16(sp)
1c006950:	6105                	addi	sp,sp,32
1c006952:	8082                	ret
  file->header.fs = device;
1c006954:	c104                	sw	s1,0(a0)
1c006956:	842a                	mv	s0,a0
  file->fd = semihost_open(file_name, flags == PI_FS_FLAGS_WRITE ? 6 : flags == PI_FS_FLAGS_APPEND ? 8 : 0);
1c006958:	4599                	li	a1,6
1c00695a:	00162663          	p.beqimm	a2,1,1c006966 <__pi_host_fs_open+0x3c>
1c00695e:	45a1                	li	a1,8
1c006960:	00262363          	p.beqimm	a2,2,1c006966 <__pi_host_fs_open+0x3c>
1c006964:	4581                	li	a1,0
1c006966:	854a                	mv	a0,s2
1c006968:	74e010ef          	jal	ra,1c0080b6 <semihost_open>
1c00696c:	c848                	sw	a0,20(s0)
  if (file->fd == -1)
1c00696e:	fdf52be3          	p.beqimm	a0,-1,1c006944 <__pi_host_fs_open+0x1a>
  file->header.api = (pi_fs_api_t *)device->api;
1c006972:	409c                	lw	a5,0(s1)
  file->header.data = file;
1c006974:	c400                	sw	s0,8(s0)
  file->header.fs = device;
1c006976:	c004                	sw	s1,0(s0)
  file->header.api = (pi_fs_api_t *)device->api;
1c006978:	c05c                	sw	a5,4(s0)
  file->header.fs_data = &bsp_fs_data;
1c00697a:	1c00d7b7          	lui	a5,0x1c00d
1c00697e:	93078793          	addi	a5,a5,-1744 # 1c00c930 <bsp_fs_data>
1c006982:	c81c                	sw	a5,16(s0)
  return (pi_fs_file_t *)file;
1c006984:	b7c9                	j	1c006946 <__pi_host_fs_open+0x1c>

1c006986 <__rt_event_enqueue>:

    // Wait wakeup time
    pi_time_wait_us(300);

    // Don't know why on RTL, the flash model needs a SW reset
    hyperflash_set_reg_exec(hyperflash, 0x000<<1, 0xF0);
1c006986:	01c02683          	lw	a3,28(zero) # 1c <__rt_sched>
1c00698a:	00052023          	sw	zero,0(a0)
1c00698e:	01c00713          	li	a4,28
1c006992:	c689                	beqz	a3,1c00699c <__rt_event_enqueue+0x16>
1c006994:	435c                	lw	a5,4(a4)
1c006996:	c388                	sw	a0,0(a5)
1c006998:	c348                	sw	a0,4(a4)
1c00699a:	8082                	ret
1c00699c:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c0069a0:	bfe5                	j	1c006998 <__rt_event_enqueue+0x12>

1c0069a2 <hyperflash_ioctl>:
1c0069a2:	e589                	bnez	a1,1c0069ac <hyperflash_ioctl+0xa>
1c0069a4:	000407b7          	lui	a5,0x40
1c0069a8:	c21c                	sw	a5,0(a2)
1c0069aa:	c25c                	sw	a5,4(a2)
1c0069ac:	4501                	li	a0,0
1c0069ae:	8082                	ret

1c0069b0 <hyperflash_set_reg_exec>:
1c0069b0:	00c51623          	sh	a2,12(a0)
1c0069b4:	4689                	li	a3,2
1c0069b6:	00c50613          	addi	a2,a0,12
1c0069ba:	64e0306f          	j	1c00a008 <pi_hyper_write>

1c0069be <hyperflash_stall_task>:
1c0069be:	30047373          	csrrci	t1,mstatus,8
1c0069c2:	01852e03          	lw	t3,24(a0)
1c0069c6:	020e0763          	beqz	t3,1c0069f4 <hyperflash_stall_task+0x36>
1c0069ca:	dd90                	sw	a2,56(a1)
1c0069cc:	ddd4                	sw	a3,60(a1)
1c0069ce:	c1b8                	sw	a4,64(a1)
1c0069d0:	c1fc                	sw	a5,68(a1)
1c0069d2:	0505a423          	sw	a6,72(a1)
1c0069d6:	0515a623          	sw	a7,76(a1)
1c0069da:	491c                	lw	a5,16(a0)
1c0069dc:	cb91                	beqz	a5,1c0069f0 <hyperflash_stall_task+0x32>
1c0069de:	495c                	lw	a5,20(a0)
1c0069e0:	cfcc                	sw	a1,28(a5)
1c0069e2:	c94c                	sw	a1,20(a0)
1c0069e4:	0005ae23          	sw	zero,28(a1)
1c0069e8:	30031073          	csrw	mstatus,t1
1c0069ec:	4505                	li	a0,1
1c0069ee:	8082                	ret
1c0069f0:	c90c                	sw	a1,16(a0)
1c0069f2:	bfc5                	j	1c0069e2 <hyperflash_stall_task+0x24>
1c0069f4:	cd0c                	sw	a1,24(a0)
1c0069f6:	30031073          	csrw	mstatus,t1
1c0069fa:	4501                	li	a0,0
1c0069fc:	8082                	ret

1c0069fe <hyperflash_read_2d_async>:
1c0069fe:	1101                	addi	sp,sp,-32
1c006a00:	cc22                	sw	s0,24(sp)
1c006a02:	4500                	lw	s0,8(a0)
1c006a04:	ca26                	sw	s1,20(sp)
1c006a06:	84ae                	mv	s1,a1
1c006a08:	c84a                	sw	s2,16(sp)
1c006a0a:	c64e                	sw	s3,12(sp)
1c006a0c:	c452                	sw	s4,8(sp)
1c006a0e:	c256                	sw	s5,4(sp)
1c006a10:	c05a                	sw	s6,0(sp)
1c006a12:	8932                	mv	s2,a2
1c006a14:	8b2a                	mv	s6,a0
1c006a16:	89b6                	mv	s3,a3
1c006a18:	8a3a                	mv	s4,a4
1c006a1a:	8abe                	mv	s5,a5
1c006a1c:	85c2                	mv	a1,a6
1c006a1e:	88be                	mv	a7,a5
1c006a20:	883a                	mv	a6,a4
1c006a22:	87b6                	mv	a5,a3
1c006a24:	8732                	mv	a4,a2
1c006a26:	86a6                	mv	a3,s1
1c006a28:	4619                	li	a2,6
1c006a2a:	8522                	mv	a0,s0
1c006a2c:	ce06                	sw	ra,28(sp)
1c006a2e:	3f41                	jal	1c0069be <hyperflash_stall_task>
1c006a30:	e129                	bnez	a0,1c006a72 <hyperflash_read_2d_async+0x74>
1c006a32:	1c0077b7          	lui	a5,0x1c007
1c006a36:	c6878793          	addi	a5,a5,-920 # 1c006c68 <hyperflash_handle_pending_task>
1c006a3a:	02040e23          	sb	zero,60(s0)
1c006a3e:	d45c                	sw	a5,44(s0)
1c006a40:	4785                	li	a5,1
1c006a42:	03642823          	sw	s6,48(s0)
1c006a46:	c83c                	sw	a5,80(s0)
1c006a48:	04042023          	sw	zero,64(s0)
1c006a4c:	02840813          	addi	a6,s0,40
1c006a50:	8522                	mv	a0,s0
1c006a52:	4462                	lw	s0,24(sp)
1c006a54:	40f2                	lw	ra,28(sp)
1c006a56:	4b02                	lw	s6,0(sp)
1c006a58:	87d6                	mv	a5,s5
1c006a5a:	8752                	mv	a4,s4
1c006a5c:	4a92                	lw	s5,4(sp)
1c006a5e:	4a22                	lw	s4,8(sp)
1c006a60:	86ce                	mv	a3,s3
1c006a62:	864a                	mv	a2,s2
1c006a64:	49b2                	lw	s3,12(sp)
1c006a66:	4942                	lw	s2,16(sp)
1c006a68:	85a6                	mv	a1,s1
1c006a6a:	44d2                	lw	s1,20(sp)
1c006a6c:	6105                	addi	sp,sp,32
1c006a6e:	1430306f          	j	1c00a3b0 <pi_hyper_read_2d_async>
1c006a72:	40f2                	lw	ra,28(sp)
1c006a74:	4462                	lw	s0,24(sp)
1c006a76:	44d2                	lw	s1,20(sp)
1c006a78:	4942                	lw	s2,16(sp)
1c006a7a:	49b2                	lw	s3,12(sp)
1c006a7c:	4a22                	lw	s4,8(sp)
1c006a7e:	4a92                	lw	s5,4(sp)
1c006a80:	4b02                	lw	s6,0(sp)
1c006a82:	6105                	addi	sp,sp,32
1c006a84:	8082                	ret

1c006a86 <hyperflash_copy_2d_async>:
1c006a86:	00080a63          	beqz	a6,1c006a9a <hyperflash_copy_2d_async+0x14>
1c006a8a:	1141                	addi	sp,sp,-16
1c006a8c:	8846                	mv	a6,a7
1c006a8e:	c606                	sw	ra,12(sp)
1c006a90:	37bd                	jal	1c0069fe <hyperflash_read_2d_async>
1c006a92:	40b2                	lw	ra,12(sp)
1c006a94:	4501                	li	a0,0
1c006a96:	0141                	addi	sp,sp,16
1c006a98:	8082                	ret
1c006a9a:	557d                	li	a0,-1
1c006a9c:	8082                	ret

1c006a9e <hyperflash_erase_sector_async>:
1c006a9e:	1101                	addi	sp,sp,-32
1c006aa0:	cc22                	sw	s0,24(sp)
1c006aa2:	4500                	lw	s0,8(a0)
1c006aa4:	c64e                	sw	s3,12(sp)
1c006aa6:	89ae                	mv	s3,a1
1c006aa8:	c84a                	sw	s2,16(sp)
1c006aaa:	85b2                	mv	a1,a2
1c006aac:	892a                	mv	s2,a0
1c006aae:	4881                	li	a7,0
1c006ab0:	4801                	li	a6,0
1c006ab2:	4781                	li	a5,0
1c006ab4:	4701                	li	a4,0
1c006ab6:	86ce                	mv	a3,s3
1c006ab8:	4609                	li	a2,2
1c006aba:	8522                	mv	a0,s0
1c006abc:	ce06                	sw	ra,28(sp)
1c006abe:	ca26                	sw	s1,20(sp)
1c006ac0:	3dfd                	jal	1c0069be <hyperflash_stall_task>
1c006ac2:	ed3d                	bnez	a0,1c006b40 <hyperflash_erase_sector_async+0xa2>
1c006ac4:	6485                	lui	s1,0x1
1c006ac6:	aaa48593          	addi	a1,s1,-1366 # aaa <__rt_stack_size+0x2aa>
1c006aca:	8522                	mv	a0,s0
1c006acc:	0aa00613          	li	a2,170
1c006ad0:	35c5                	jal	1c0069b0 <hyperflash_set_reg_exec>
1c006ad2:	8522                	mv	a0,s0
1c006ad4:	05500613          	li	a2,85
1c006ad8:	55400593          	li	a1,1364
1c006adc:	3dd1                	jal	1c0069b0 <hyperflash_set_reg_exec>
1c006ade:	aaa48593          	addi	a1,s1,-1366
1c006ae2:	8522                	mv	a0,s0
1c006ae4:	08000613          	li	a2,128
1c006ae8:	35e1                	jal	1c0069b0 <hyperflash_set_reg_exec>
1c006aea:	aaa48593          	addi	a1,s1,-1366
1c006aee:	8522                	mv	a0,s0
1c006af0:	0aa00613          	li	a2,170
1c006af4:	3d75                	jal	1c0069b0 <hyperflash_set_reg_exec>
1c006af6:	8522                	mv	a0,s0
1c006af8:	05500613          	li	a2,85
1c006afc:	55400593          	li	a1,1364
1c006b00:	3d45                	jal	1c0069b0 <hyperflash_set_reg_exec>
1c006b02:	85ce                	mv	a1,s3
1c006b04:	8522                	mv	a0,s0
1c006b06:	03000613          	li	a2,48
1c006b0a:	355d                	jal	1c0069b0 <hyperflash_set_reg_exec>
1c006b0c:	1c0077b7          	lui	a5,0x1c007
1c006b10:	27e78793          	addi	a5,a5,638 # 1c00727e <hyperflash_check_erase>
1c006b14:	02040e23          	sb	zero,60(s0)
1c006b18:	d45c                	sw	a5,44(s0)
1c006b1a:	4785                	li	a5,1
1c006b1c:	03242823          	sw	s2,48(s0)
1c006b20:	04042023          	sw	zero,64(s0)
1c006b24:	c83c                	sw	a5,80(s0)
1c006b26:	02840513          	addi	a0,s0,40
1c006b2a:	4462                	lw	s0,24(sp)
1c006b2c:	40f2                	lw	ra,28(sp)
1c006b2e:	44d2                	lw	s1,20(sp)
1c006b30:	4942                	lw	s2,16(sp)
1c006b32:	49b2                	lw	s3,12(sp)
1c006b34:	6589                	lui	a1,0x2
1c006b36:	71058593          	addi	a1,a1,1808 # 2710 <__rt_stack_size+0x1f10>
1c006b3a:	6105                	addi	sp,sp,32
1c006b3c:	7450106f          	j	1c008a80 <pi_task_push_delayed_us>
1c006b40:	40f2                	lw	ra,28(sp)
1c006b42:	4462                	lw	s0,24(sp)
1c006b44:	44d2                	lw	s1,20(sp)
1c006b46:	4942                	lw	s2,16(sp)
1c006b48:	49b2                	lw	s3,12(sp)
1c006b4a:	6105                	addi	sp,sp,32
1c006b4c:	8082                	ret

1c006b4e <hyperflash_erase_chip_async>:
1c006b4e:	1141                	addi	sp,sp,-16
1c006b50:	c422                	sw	s0,8(sp)
1c006b52:	4500                	lw	s0,8(a0)
1c006b54:	c04a                	sw	s2,0(sp)
1c006b56:	4881                	li	a7,0
1c006b58:	892a                	mv	s2,a0
1c006b5a:	4801                	li	a6,0
1c006b5c:	4781                	li	a5,0
1c006b5e:	4701                	li	a4,0
1c006b60:	4681                	li	a3,0
1c006b62:	4605                	li	a2,1
1c006b64:	8522                	mv	a0,s0
1c006b66:	c606                	sw	ra,12(sp)
1c006b68:	c226                	sw	s1,4(sp)
1c006b6a:	3d91                	jal	1c0069be <hyperflash_stall_task>
1c006b6c:	ed35                	bnez	a0,1c006be8 <hyperflash_erase_chip_async+0x9a>
1c006b6e:	6485                	lui	s1,0x1
1c006b70:	aaa48593          	addi	a1,s1,-1366 # aaa <__rt_stack_size+0x2aa>
1c006b74:	8522                	mv	a0,s0
1c006b76:	0aa00613          	li	a2,170
1c006b7a:	3d1d                	jal	1c0069b0 <hyperflash_set_reg_exec>
1c006b7c:	8522                	mv	a0,s0
1c006b7e:	05500613          	li	a2,85
1c006b82:	55400593          	li	a1,1364
1c006b86:	352d                	jal	1c0069b0 <hyperflash_set_reg_exec>
1c006b88:	aaa48593          	addi	a1,s1,-1366
1c006b8c:	8522                	mv	a0,s0
1c006b8e:	08000613          	li	a2,128
1c006b92:	3d39                	jal	1c0069b0 <hyperflash_set_reg_exec>
1c006b94:	aaa48593          	addi	a1,s1,-1366
1c006b98:	8522                	mv	a0,s0
1c006b9a:	0aa00613          	li	a2,170
1c006b9e:	3d09                	jal	1c0069b0 <hyperflash_set_reg_exec>
1c006ba0:	8522                	mv	a0,s0
1c006ba2:	05500613          	li	a2,85
1c006ba6:	55400593          	li	a1,1364
1c006baa:	3519                	jal	1c0069b0 <hyperflash_set_reg_exec>
1c006bac:	aaa48593          	addi	a1,s1,-1366
1c006bb0:	8522                	mv	a0,s0
1c006bb2:	4641                	li	a2,16
1c006bb4:	3bf5                	jal	1c0069b0 <hyperflash_set_reg_exec>
1c006bb6:	1c0077b7          	lui	a5,0x1c007
1c006bba:	27e78793          	addi	a5,a5,638 # 1c00727e <hyperflash_check_erase>
1c006bbe:	02040e23          	sb	zero,60(s0)
1c006bc2:	d45c                	sw	a5,44(s0)
1c006bc4:	4785                	li	a5,1
1c006bc6:	03242823          	sw	s2,48(s0)
1c006bca:	04042023          	sw	zero,64(s0)
1c006bce:	c83c                	sw	a5,80(s0)
1c006bd0:	02840513          	addi	a0,s0,40
1c006bd4:	4422                	lw	s0,8(sp)
1c006bd6:	40b2                	lw	ra,12(sp)
1c006bd8:	4492                	lw	s1,4(sp)
1c006bda:	4902                	lw	s2,0(sp)
1c006bdc:	65e1                	lui	a1,0x18
1c006bde:	6a058593          	addi	a1,a1,1696 # 186a0 <__L1Cl+0x86a0>
1c006be2:	0141                	addi	sp,sp,16
1c006be4:	69d0106f          	j	1c008a80 <pi_task_push_delayed_us>
1c006be8:	40b2                	lw	ra,12(sp)
1c006bea:	4422                	lw	s0,8(sp)
1c006bec:	4492                	lw	s1,4(sp)
1c006bee:	4902                	lw	s2,0(sp)
1c006bf0:	0141                	addi	sp,sp,16
1c006bf2:	8082                	ret

1c006bf4 <hyperflash_read_async>:
1c006bf4:	1101                	addi	sp,sp,-32
1c006bf6:	cc22                	sw	s0,24(sp)
1c006bf8:	4500                	lw	s0,8(a0)
1c006bfa:	ca26                	sw	s1,20(sp)
1c006bfc:	84ae                	mv	s1,a1
1c006bfe:	c84a                	sw	s2,16(sp)
1c006c00:	c64e                	sw	s3,12(sp)
1c006c02:	c452                	sw	s4,8(sp)
1c006c04:	8932                	mv	s2,a2
1c006c06:	8a2a                	mv	s4,a0
1c006c08:	89b6                	mv	s3,a3
1c006c0a:	85ba                	mv	a1,a4
1c006c0c:	87b6                	mv	a5,a3
1c006c0e:	8732                	mv	a4,a2
1c006c10:	4881                	li	a7,0
1c006c12:	4801                	li	a6,0
1c006c14:	86a6                	mv	a3,s1
1c006c16:	4615                	li	a2,5
1c006c18:	8522                	mv	a0,s0
1c006c1a:	ce06                	sw	ra,28(sp)
1c006c1c:	334d                	jal	1c0069be <hyperflash_stall_task>
1c006c1e:	ed0d                	bnez	a0,1c006c58 <hyperflash_read_async+0x64>
1c006c20:	1c0077b7          	lui	a5,0x1c007
1c006c24:	c6878793          	addi	a5,a5,-920 # 1c006c68 <hyperflash_handle_pending_task>
1c006c28:	02040e23          	sb	zero,60(s0)
1c006c2c:	d45c                	sw	a5,44(s0)
1c006c2e:	4785                	li	a5,1
1c006c30:	03442823          	sw	s4,48(s0)
1c006c34:	04042023          	sw	zero,64(s0)
1c006c38:	c83c                	sw	a5,80(s0)
1c006c3a:	02840713          	addi	a4,s0,40
1c006c3e:	8522                	mv	a0,s0
1c006c40:	4462                	lw	s0,24(sp)
1c006c42:	40f2                	lw	ra,28(sp)
1c006c44:	4a22                	lw	s4,8(sp)
1c006c46:	86ce                	mv	a3,s3
1c006c48:	864a                	mv	a2,s2
1c006c4a:	49b2                	lw	s3,12(sp)
1c006c4c:	4942                	lw	s2,16(sp)
1c006c4e:	85a6                	mv	a1,s1
1c006c50:	44d2                	lw	s1,20(sp)
1c006c52:	6105                	addi	sp,sp,32
1c006c54:	3640306f          	j	1c009fb8 <pi_hyper_read_async>
1c006c58:	40f2                	lw	ra,28(sp)
1c006c5a:	4462                	lw	s0,24(sp)
1c006c5c:	44d2                	lw	s1,20(sp)
1c006c5e:	4942                	lw	s2,16(sp)
1c006c60:	49b2                	lw	s3,12(sp)
1c006c62:	4a22                	lw	s4,8(sp)
1c006c64:	6105                	addi	sp,sp,32
1c006c66:	8082                	ret

1c006c68 <hyperflash_handle_pending_task>:
1c006c68:	1101                	addi	sp,sp,-32
1c006c6a:	ca26                	sw	s1,20(sp)
1c006c6c:	4504                	lw	s1,8(a0)
1c006c6e:	cc22                	sw	s0,24(sp)
1c006c70:	842a                	mv	s0,a0
1c006c72:	ce06                	sw	ra,28(sp)
1c006c74:	c84a                	sw	s2,16(sp)
1c006c76:	c64e                	sw	s3,12(sp)
1c006c78:	30047973          	csrrci	s2,mstatus,8
1c006c7c:	4c88                	lw	a0,24(s1)
1c006c7e:	300479f3          	csrrci	s3,mstatus,8
1c006c82:	d05ff0ef          	jal	ra,1c006986 <__rt_event_enqueue>
1c006c86:	30099073          	csrw	mstatus,s3
1c006c8a:	4898                	lw	a4,16(s1)
1c006c8c:	0004ac23          	sw	zero,24(s1)
1c006c90:	c319                	beqz	a4,1c006c96 <hyperflash_handle_pending_task+0x2e>
1c006c92:	4f5c                	lw	a5,28(a4)
1c006c94:	c89c                	sw	a5,16(s1)
1c006c96:	30091073          	csrw	mstatus,s2
1c006c9a:	c361                	beqz	a4,1c006d5a <hyperflash_handle_pending_task+0xf2>
1c006c9c:	5f1c                	lw	a5,56(a4)
1c006c9e:	ef81                	bnez	a5,1c006cb6 <hyperflash_handle_pending_task+0x4e>
1c006ca0:	8522                	mv	a0,s0
1c006ca2:	4462                	lw	s0,24(sp)
1c006ca4:	40f2                	lw	ra,28(sp)
1c006ca6:	44d2                	lw	s1,20(sp)
1c006ca8:	4942                	lw	s2,16(sp)
1c006caa:	49b2                	lw	s3,12(sp)
1c006cac:	4374                	lw	a3,68(a4)
1c006cae:	4330                	lw	a2,64(a4)
1c006cb0:	5f4c                	lw	a1,60(a4)
1c006cb2:	6105                	addi	sp,sp,32
1c006cb4:	ac19                	j	1c006eca <hyperflash_program_async>
1c006cb6:	0017bb63          	p.bneimm	a5,1,1c006ccc <hyperflash_handle_pending_task+0x64>
1c006cba:	8522                	mv	a0,s0
1c006cbc:	4462                	lw	s0,24(sp)
1c006cbe:	40f2                	lw	ra,28(sp)
1c006cc0:	44d2                	lw	s1,20(sp)
1c006cc2:	4942                	lw	s2,16(sp)
1c006cc4:	49b2                	lw	s3,12(sp)
1c006cc6:	85ba                	mv	a1,a4
1c006cc8:	6105                	addi	sp,sp,32
1c006cca:	b551                	j	1c006b4e <hyperflash_erase_chip_async>
1c006ccc:	0027bc63          	p.bneimm	a5,2,1c006ce4 <hyperflash_handle_pending_task+0x7c>
1c006cd0:	8522                	mv	a0,s0
1c006cd2:	4462                	lw	s0,24(sp)
1c006cd4:	40f2                	lw	ra,28(sp)
1c006cd6:	44d2                	lw	s1,20(sp)
1c006cd8:	4942                	lw	s2,16(sp)
1c006cda:	49b2                	lw	s3,12(sp)
1c006cdc:	5f4c                	lw	a1,60(a4)
1c006cde:	863a                	mv	a2,a4
1c006ce0:	6105                	addi	sp,sp,32
1c006ce2:	bb75                	j	1c006a9e <hyperflash_erase_sector_async>
1c006ce4:	0037bd63          	p.bneimm	a5,3,1c006cfe <hyperflash_handle_pending_task+0x96>
1c006ce8:	8522                	mv	a0,s0
1c006cea:	4462                	lw	s0,24(sp)
1c006cec:	40f2                	lw	ra,28(sp)
1c006cee:	44d2                	lw	s1,20(sp)
1c006cf0:	4942                	lw	s2,16(sp)
1c006cf2:	49b2                	lw	s3,12(sp)
1c006cf4:	4330                	lw	a2,64(a4)
1c006cf6:	5f4c                	lw	a1,60(a4)
1c006cf8:	86ba                	mv	a3,a4
1c006cfa:	6105                	addi	sp,sp,32
1c006cfc:	a0e9                	j	1c006dc6 <hyperflash_reg_set_async>
1c006cfe:	0047bd63          	p.bneimm	a5,4,1c006d18 <hyperflash_handle_pending_task+0xb0>
1c006d02:	8522                	mv	a0,s0
1c006d04:	4462                	lw	s0,24(sp)
1c006d06:	40f2                	lw	ra,28(sp)
1c006d08:	44d2                	lw	s1,20(sp)
1c006d0a:	4942                	lw	s2,16(sp)
1c006d0c:	49b2                	lw	s3,12(sp)
1c006d0e:	4330                	lw	a2,64(a4)
1c006d10:	5f4c                	lw	a1,60(a4)
1c006d12:	86ba                	mv	a3,a4
1c006d14:	6105                	addi	sp,sp,32
1c006d16:	a889                	j	1c006d68 <hyperflash_reg_get_async>
1c006d18:	0057bd63          	p.bneimm	a5,5,1c006d32 <hyperflash_handle_pending_task+0xca>
1c006d1c:	8522                	mv	a0,s0
1c006d1e:	4462                	lw	s0,24(sp)
1c006d20:	40f2                	lw	ra,28(sp)
1c006d22:	44d2                	lw	s1,20(sp)
1c006d24:	4942                	lw	s2,16(sp)
1c006d26:	49b2                	lw	s3,12(sp)
1c006d28:	4374                	lw	a3,68(a4)
1c006d2a:	4330                	lw	a2,64(a4)
1c006d2c:	5f4c                	lw	a1,60(a4)
1c006d2e:	6105                	addi	sp,sp,32
1c006d30:	b5d1                	j	1c006bf4 <hyperflash_read_async>
1c006d32:	0267b463          	p.bneimm	a5,6,1c006d5a <hyperflash_handle_pending_task+0xf2>
1c006d36:	883a                	mv	a6,a4
1c006d38:	8522                	mv	a0,s0
1c006d3a:	4462                	lw	s0,24(sp)
1c006d3c:	477c                	lw	a5,76(a4)
1c006d3e:	40f2                	lw	ra,28(sp)
1c006d40:	44d2                	lw	s1,20(sp)
1c006d42:	4942                	lw	s2,16(sp)
1c006d44:	49b2                	lw	s3,12(sp)
1c006d46:	4738                	lw	a4,72(a4)
1c006d48:	04482683          	lw	a3,68(a6)
1c006d4c:	04082603          	lw	a2,64(a6)
1c006d50:	03c82583          	lw	a1,60(a6)
1c006d54:	6105                	addi	sp,sp,32
1c006d56:	ca9ff06f          	j	1c0069fe <hyperflash_read_2d_async>
1c006d5a:	40f2                	lw	ra,28(sp)
1c006d5c:	4462                	lw	s0,24(sp)
1c006d5e:	44d2                	lw	s1,20(sp)
1c006d60:	4942                	lw	s2,16(sp)
1c006d62:	49b2                	lw	s3,12(sp)
1c006d64:	6105                	addi	sp,sp,32
1c006d66:	8082                	ret

1c006d68 <hyperflash_reg_get_async>:
1c006d68:	1101                	addi	sp,sp,-32
1c006d6a:	cc22                	sw	s0,24(sp)
1c006d6c:	4500                	lw	s0,8(a0)
1c006d6e:	c64e                	sw	s3,12(sp)
1c006d70:	89ae                	mv	s3,a1
1c006d72:	ca26                	sw	s1,20(sp)
1c006d74:	c84a                	sw	s2,16(sp)
1c006d76:	84aa                	mv	s1,a0
1c006d78:	8932                	mv	s2,a2
1c006d7a:	85b6                	mv	a1,a3
1c006d7c:	8732                	mv	a4,a2
1c006d7e:	4881                	li	a7,0
1c006d80:	4801                	li	a6,0
1c006d82:	4781                	li	a5,0
1c006d84:	86ce                	mv	a3,s3
1c006d86:	4611                	li	a2,4
1c006d88:	8522                	mv	a0,s0
1c006d8a:	ce06                	sw	ra,28(sp)
1c006d8c:	c33ff0ef          	jal	ra,1c0069be <hyperflash_stall_task>
1c006d90:	e505                	bnez	a0,1c006db8 <hyperflash_reg_get_async+0x50>
1c006d92:	8522                	mv	a0,s0
1c006d94:	00c40613          	addi	a2,s0,12
1c006d98:	85ce                	mv	a1,s3
1c006d9a:	4691                	li	a3,4
1c006d9c:	232030ef          	jal	ra,1c009fce <pi_hyper_read>
1c006da0:	00c45783          	lhu	a5,12(s0)
1c006da4:	4462                	lw	s0,24(sp)
1c006da6:	40f2                	lw	ra,28(sp)
1c006da8:	00f91023          	sh	a5,0(s2)
1c006dac:	49b2                	lw	s3,12(sp)
1c006dae:	4942                	lw	s2,16(sp)
1c006db0:	8526                	mv	a0,s1
1c006db2:	44d2                	lw	s1,20(sp)
1c006db4:	6105                	addi	sp,sp,32
1c006db6:	bd4d                	j	1c006c68 <hyperflash_handle_pending_task>
1c006db8:	40f2                	lw	ra,28(sp)
1c006dba:	4462                	lw	s0,24(sp)
1c006dbc:	44d2                	lw	s1,20(sp)
1c006dbe:	4942                	lw	s2,16(sp)
1c006dc0:	49b2                	lw	s3,12(sp)
1c006dc2:	6105                	addi	sp,sp,32
1c006dc4:	8082                	ret

1c006dc6 <hyperflash_reg_set_async>:
1c006dc6:	1101                	addi	sp,sp,-32
1c006dc8:	ca26                	sw	s1,20(sp)
1c006dca:	4504                	lw	s1,8(a0)
1c006dcc:	c84a                	sw	s2,16(sp)
1c006dce:	892e                	mv	s2,a1
1c006dd0:	cc22                	sw	s0,24(sp)
1c006dd2:	c64e                	sw	s3,12(sp)
1c006dd4:	842a                	mv	s0,a0
1c006dd6:	89b2                	mv	s3,a2
1c006dd8:	85b6                	mv	a1,a3
1c006dda:	8732                	mv	a4,a2
1c006ddc:	4881                	li	a7,0
1c006dde:	4801                	li	a6,0
1c006de0:	4781                	li	a5,0
1c006de2:	86ca                	mv	a3,s2
1c006de4:	460d                	li	a2,3
1c006de6:	8526                	mv	a0,s1
1c006de8:	ce06                	sw	ra,28(sp)
1c006dea:	bd5ff0ef          	jal	ra,1c0069be <hyperflash_stall_task>
1c006dee:	ed19                	bnez	a0,1c006e0c <hyperflash_reg_set_async+0x46>
1c006df0:	0009d603          	lhu	a2,0(s3)
1c006df4:	8526                	mv	a0,s1
1c006df6:	85ca                	mv	a1,s2
1c006df8:	bb9ff0ef          	jal	ra,1c0069b0 <hyperflash_set_reg_exec>
1c006dfc:	8522                	mv	a0,s0
1c006dfe:	4462                	lw	s0,24(sp)
1c006e00:	40f2                	lw	ra,28(sp)
1c006e02:	44d2                	lw	s1,20(sp)
1c006e04:	4942                	lw	s2,16(sp)
1c006e06:	49b2                	lw	s3,12(sp)
1c006e08:	6105                	addi	sp,sp,32
1c006e0a:	bdb9                	j	1c006c68 <hyperflash_handle_pending_task>
1c006e0c:	40f2                	lw	ra,28(sp)
1c006e0e:	4462                	lw	s0,24(sp)
1c006e10:	44d2                	lw	s1,20(sp)
1c006e12:	4942                	lw	s2,16(sp)
1c006e14:	49b2                	lw	s3,12(sp)
1c006e16:	6105                	addi	sp,sp,32
1c006e18:	8082                	ret

1c006e1a <hyperflash_program_resume>:
1c006e1a:	1101                	addi	sp,sp,-32
1c006e1c:	cc22                	sw	s0,24(sp)
1c006e1e:	4500                	lw	s0,8(a0)
1c006e20:	ce06                	sw	ra,28(sp)
1c006e22:	ca26                	sw	s1,20(sp)
1c006e24:	13042683          	lw	a3,304(s0)
1c006e28:	c84a                	sw	s2,16(sp)
1c006e2a:	e699                	bnez	a3,1c006e38 <hyperflash_program_resume+0x1e>
1c006e2c:	4462                	lw	s0,24(sp)
1c006e2e:	40f2                	lw	ra,28(sp)
1c006e30:	44d2                	lw	s1,20(sp)
1c006e32:	4942                	lw	s2,16(sp)
1c006e34:	6105                	addi	sp,sp,32
1c006e36:	bd0d                	j	1c006c68 <hyperflash_handle_pending_task>
1c006e38:	12842783          	lw	a5,296(s0)
1c006e3c:	6905                	lui	s2,0x1
1c006e3e:	84aa                	mv	s1,a0
1c006e40:	ec97b733          	p.bclr	a4,a5,22,9
1c006e44:	20000793          	li	a5,512
1c006e48:	8f99                	sub	a5,a5,a4
1c006e4a:	04f6d6b3          	p.minu	a3,a3,a5
1c006e4e:	aaa90593          	addi	a1,s2,-1366 # aaa <__rt_stack_size+0x2aa>
1c006e52:	8522                	mv	a0,s0
1c006e54:	0aa00613          	li	a2,170
1c006e58:	c636                	sw	a3,12(sp)
1c006e5a:	b57ff0ef          	jal	ra,1c0069b0 <hyperflash_set_reg_exec>
1c006e5e:	8522                	mv	a0,s0
1c006e60:	05500613          	li	a2,85
1c006e64:	55400593          	li	a1,1364
1c006e68:	b49ff0ef          	jal	ra,1c0069b0 <hyperflash_set_reg_exec>
1c006e6c:	aaa90593          	addi	a1,s2,-1366
1c006e70:	8522                	mv	a0,s0
1c006e72:	0a000613          	li	a2,160
1c006e76:	b3bff0ef          	jal	ra,1c0069b0 <hyperflash_set_reg_exec>
1c006e7a:	46b2                	lw	a3,12(sp)
1c006e7c:	12842583          	lw	a1,296(s0)
1c006e80:	12c42603          	lw	a2,300(s0)
1c006e84:	02040e23          	sb	zero,60(s0)
1c006e88:	00d587b3          	add	a5,a1,a3
1c006e8c:	12f42423          	sw	a5,296(s0)
1c006e90:	00d607b3          	add	a5,a2,a3
1c006e94:	12f42623          	sw	a5,300(s0)
1c006e98:	13042783          	lw	a5,304(s0)
1c006e9c:	d804                	sw	s1,48(s0)
1c006e9e:	04042023          	sw	zero,64(s0)
1c006ea2:	8f95                	sub	a5,a5,a3
1c006ea4:	12f42823          	sw	a5,304(s0)
1c006ea8:	1c0077b7          	lui	a5,0x1c007
1c006eac:	2d078793          	addi	a5,a5,720 # 1c0072d0 <hyperflash_check_program>
1c006eb0:	d45c                	sw	a5,44(s0)
1c006eb2:	4785                	li	a5,1
1c006eb4:	c83c                	sw	a5,80(s0)
1c006eb6:	02840713          	addi	a4,s0,40
1c006eba:	8522                	mv	a0,s0
1c006ebc:	4462                	lw	s0,24(sp)
1c006ebe:	40f2                	lw	ra,28(sp)
1c006ec0:	44d2                	lw	s1,20(sp)
1c006ec2:	4942                	lw	s2,16(sp)
1c006ec4:	6105                	addi	sp,sp,32
1c006ec6:	12a0306f          	j	1c009ff0 <pi_hyper_write_async>

1c006eca <hyperflash_program_async>:
1c006eca:	1101                	addi	sp,sp,-32
1c006ecc:	cc22                	sw	s0,24(sp)
1c006ece:	4500                	lw	s0,8(a0)
1c006ed0:	c452                	sw	s4,8(sp)
1c006ed2:	8a2e                	mv	s4,a1
1c006ed4:	ca26                	sw	s1,20(sp)
1c006ed6:	c84a                	sw	s2,16(sp)
1c006ed8:	c64e                	sw	s3,12(sp)
1c006eda:	84aa                	mv	s1,a0
1c006edc:	89b2                	mv	s3,a2
1c006ede:	8936                	mv	s2,a3
1c006ee0:	85ba                	mv	a1,a4
1c006ee2:	87b6                	mv	a5,a3
1c006ee4:	8732                	mv	a4,a2
1c006ee6:	4881                	li	a7,0
1c006ee8:	4801                	li	a6,0
1c006eea:	86d2                	mv	a3,s4
1c006eec:	4601                	li	a2,0
1c006eee:	8522                	mv	a0,s0
1c006ef0:	ce06                	sw	ra,28(sp)
1c006ef2:	acdff0ef          	jal	ra,1c0069be <hyperflash_stall_task>
1c006ef6:	e105                	bnez	a0,1c006f16 <hyperflash_program_async+0x4c>
1c006ef8:	13442423          	sw	s4,296(s0)
1c006efc:	13342623          	sw	s3,300(s0)
1c006f00:	13242823          	sw	s2,304(s0)
1c006f04:	4462                	lw	s0,24(sp)
1c006f06:	40f2                	lw	ra,28(sp)
1c006f08:	4942                	lw	s2,16(sp)
1c006f0a:	49b2                	lw	s3,12(sp)
1c006f0c:	4a22                	lw	s4,8(sp)
1c006f0e:	8526                	mv	a0,s1
1c006f10:	44d2                	lw	s1,20(sp)
1c006f12:	6105                	addi	sp,sp,32
1c006f14:	b719                	j	1c006e1a <hyperflash_program_resume>
1c006f16:	40f2                	lw	ra,28(sp)
1c006f18:	4462                	lw	s0,24(sp)
1c006f1a:	44d2                	lw	s1,20(sp)
1c006f1c:	4942                	lw	s2,16(sp)
1c006f1e:	49b2                	lw	s3,12(sp)
1c006f20:	4a22                	lw	s4,8(sp)
1c006f22:	6105                	addi	sp,sp,32
1c006f24:	8082                	ret

1c006f26 <hyperflash_copy_async>:
1c006f26:	1141                	addi	sp,sp,-16
1c006f28:	c606                	sw	ra,12(sp)
1c006f2a:	e719                	bnez	a4,1c006f38 <hyperflash_copy_async+0x12>
1c006f2c:	873e                	mv	a4,a5
1c006f2e:	3f71                	jal	1c006eca <hyperflash_program_async>
1c006f30:	40b2                	lw	ra,12(sp)
1c006f32:	4501                	li	a0,0
1c006f34:	0141                	addi	sp,sp,16
1c006f36:	8082                	ret
1c006f38:	873e                	mv	a4,a5
1c006f3a:	cbbff0ef          	jal	ra,1c006bf4 <hyperflash_read_async>
1c006f3e:	bfcd                	j	1c006f30 <hyperflash_copy_async+0xa>

1c006f40 <hyperflash_close>:
1c006f40:	1141                	addi	sp,sp,-16
1c006f42:	c422                	sw	s0,8(sp)
1c006f44:	4500                	lw	s0,8(a0)
1c006f46:	c606                	sw	ra,12(sp)
1c006f48:	8522                	mv	a0,s0
1c006f4a:	6dd020ef          	jal	ra,1c009e26 <pi_hyper_close>
1c006f4e:	8522                	mv	a0,s0
1c006f50:	4422                	lw	s0,8(sp)
1c006f52:	40b2                	lw	ra,12(sp)
1c006f54:	13c00593          	li	a1,316
1c006f58:	0141                	addi	sp,sp,16
1c006f5a:	51b0106f          	j	1c008c74 <pi_l2_free>

1c006f5e <hyperflash_open>:
1c006f5e:	7179                	addi	sp,sp,-48
1c006f60:	d226                	sw	s1,36(sp)
1c006f62:	d04a                	sw	s2,32(sp)
1c006f64:	84aa                	mv	s1,a0
1c006f66:	00452903          	lw	s2,4(a0)
1c006f6a:	13c00513          	li	a0,316
1c006f6e:	d606                	sw	ra,44(sp)
1c006f70:	d422                	sw	s0,40(sp)
1c006f72:	4f5010ef          	jal	ra,1c008c66 <pi_l2_malloc>
1c006f76:	c92d                	beqz	a0,1c006fe8 <hyperflash_open+0x8a>
1c006f78:	c488                	sw	a0,8(s1)
1c006f7a:	842a                	mv	s0,a0
1c006f7c:	854a                	mv	a0,s2
1c006f7e:	200010ef          	jal	ra,1c00817e <bsp_hyperflash_open>
1c006f82:	84aa                	mv	s1,a0
1c006f84:	e939                	bnez	a0,1c006fda <hyperflash_open+0x7c>
1c006f86:	4671                	li	a2,28
1c006f88:	4581                	li	a1,0
1c006f8a:	0048                	addi	a0,sp,4
1c006f8c:	2a9030ef          	jal	ra,1c00aa34 <memset>
1c006f90:	0048                	addi	a0,sp,4
1c006f92:	527020ef          	jal	ra,1c009cb8 <pi_hyper_conf_init>
1c006f96:	00492783          	lw	a5,4(s2)
1c006f9a:	8522                	mv	a0,s0
1c006f9c:	004c                	addi	a1,sp,4
1c006f9e:	00f10423          	sb	a5,8(sp)
1c006fa2:	00892783          	lw	a5,8(s2)
1c006fa6:	c802                	sw	zero,16(sp)
1c006fa8:	c63e                	sw	a5,12(sp)
1c006faa:	00c92783          	lw	a5,12(s2)
1c006fae:	ca3e                	sw	a5,20(sp)
1c006fb0:	392010ef          	jal	ra,1c008342 <pi_open_from_conf>
1c006fb4:	8522                	mv	a0,s0
1c006fb6:	513020ef          	jal	ra,1c009cc8 <pi_hyper_open>
1c006fba:	e105                	bnez	a0,1c006fda <hyperflash_open+0x7c>
1c006fbc:	00042c23          	sw	zero,24(s0)
1c006fc0:	00042823          	sw	zero,16(s0)
1c006fc4:	02042223          	sw	zero,36(s0)
1c006fc8:	00042e23          	sw	zero,28(s0)
1c006fcc:	50b2                	lw	ra,44(sp)
1c006fce:	5422                	lw	s0,40(sp)
1c006fd0:	8526                	mv	a0,s1
1c006fd2:	5902                	lw	s2,32(sp)
1c006fd4:	5492                	lw	s1,36(sp)
1c006fd6:	6145                	addi	sp,sp,48
1c006fd8:	8082                	ret
1c006fda:	13c00593          	li	a1,316
1c006fde:	8522                	mv	a0,s0
1c006fe0:	495010ef          	jal	ra,1c008c74 <pi_l2_free>
1c006fe4:	54f9                	li	s1,-2
1c006fe6:	b7dd                	j	1c006fcc <hyperflash_open+0x6e>
1c006fe8:	54fd                	li	s1,-1
1c006fea:	b7cd                	j	1c006fcc <hyperflash_open+0x6e>

1c006fec <pi_task_wait_on.isra.3>:
1c006fec:	1141                	addi	sp,sp,-16
1c006fee:	c422                	sw	s0,8(sp)
1c006ff0:	c226                	sw	s1,4(sp)
1c006ff2:	c606                	sw	ra,12(sp)
1c006ff4:	c04a                	sw	s2,0(sp)
1c006ff6:	842a                	mv	s0,a0
1c006ff8:	00040783          	lb	a5,0(s0)
1c006ffc:	c799                	beqz	a5,1c00700a <pi_task_wait_on.isra.3+0x1e>
1c006ffe:	40b2                	lw	ra,12(sp)
1c007000:	4422                	lw	s0,8(sp)
1c007002:	4492                	lw	s1,4(sp)
1c007004:	4902                	lw	s2,0(sp)
1c007006:	0141                	addi	sp,sp,16
1c007008:	8082                	ret
1c00700a:	30047973          	csrrci	s2,mstatus,8
1c00700e:	4585                	li	a1,1
1c007010:	01c00513          	li	a0,28
1c007014:	1af010ef          	jal	ra,1c0089c2 <__rt_event_execute>
1c007018:	30091073          	csrw	mstatus,s2
1c00701c:	bff1                	j	1c006ff8 <pi_task_wait_on.isra.3+0xc>

1c00701e <hyperflash_copy_2d>:
1c00701e:	7175                	addi	sp,sp,-144
1c007020:	4885                	li	a7,1
1c007022:	c706                	sw	ra,140(sp)
1c007024:	cc46                	sw	a7,24(sp)
1c007026:	c202                	sw	zero,4(sp)
1c007028:	d446                	sw	a7,40(sp)
1c00702a:	00010a23          	sb	zero,20(sp)
1c00702e:	00080b63          	beqz	a6,1c007044 <hyperflash_copy_2d+0x26>
1c007032:	880a                	mv	a6,sp
1c007034:	9cbff0ef          	jal	ra,1c0069fe <hyperflash_read_2d_async>
1c007038:	0848                	addi	a0,sp,20
1c00703a:	3f4d                	jal	1c006fec <pi_task_wait_on.isra.3>
1c00703c:	4501                	li	a0,0
1c00703e:	40ba                	lw	ra,140(sp)
1c007040:	6149                	addi	sp,sp,144
1c007042:	8082                	ret
1c007044:	557d                	li	a0,-1
1c007046:	bfe5                	j	1c00703e <hyperflash_copy_2d+0x20>

1c007048 <hyperflash_erase_sector>:
1c007048:	7175                	addi	sp,sp,-144
1c00704a:	4785                	li	a5,1
1c00704c:	860a                	mv	a2,sp
1c00704e:	c706                	sw	ra,140(sp)
1c007050:	cc3e                	sw	a5,24(sp)
1c007052:	d43e                	sw	a5,40(sp)
1c007054:	c202                	sw	zero,4(sp)
1c007056:	00010a23          	sb	zero,20(sp)
1c00705a:	a45ff0ef          	jal	ra,1c006a9e <hyperflash_erase_sector_async>
1c00705e:	0848                	addi	a0,sp,20
1c007060:	3771                	jal	1c006fec <pi_task_wait_on.isra.3>
1c007062:	40ba                	lw	ra,140(sp)
1c007064:	4501                	li	a0,0
1c007066:	6149                	addi	sp,sp,144
1c007068:	8082                	ret

1c00706a <hyperflash_erase_chip>:
1c00706a:	7175                	addi	sp,sp,-144
1c00706c:	4785                	li	a5,1
1c00706e:	858a                	mv	a1,sp
1c007070:	c706                	sw	ra,140(sp)
1c007072:	cc3e                	sw	a5,24(sp)
1c007074:	d43e                	sw	a5,40(sp)
1c007076:	c202                	sw	zero,4(sp)
1c007078:	00010a23          	sb	zero,20(sp)
1c00707c:	ad3ff0ef          	jal	ra,1c006b4e <hyperflash_erase_chip_async>
1c007080:	0848                	addi	a0,sp,20
1c007082:	37ad                	jal	1c006fec <pi_task_wait_on.isra.3>
1c007084:	40ba                	lw	ra,140(sp)
1c007086:	4501                	li	a0,0
1c007088:	6149                	addi	sp,sp,144
1c00708a:	8082                	ret

1c00708c <hyperflash_read>:
1c00708c:	7175                	addi	sp,sp,-144
1c00708e:	4785                	li	a5,1
1c007090:	870a                	mv	a4,sp
1c007092:	c706                	sw	ra,140(sp)
1c007094:	cc3e                	sw	a5,24(sp)
1c007096:	d43e                	sw	a5,40(sp)
1c007098:	c202                	sw	zero,4(sp)
1c00709a:	00010a23          	sb	zero,20(sp)
1c00709e:	b57ff0ef          	jal	ra,1c006bf4 <hyperflash_read_async>
1c0070a2:	0848                	addi	a0,sp,20
1c0070a4:	37a1                	jal	1c006fec <pi_task_wait_on.isra.3>
1c0070a6:	40ba                	lw	ra,140(sp)
1c0070a8:	4501                	li	a0,0
1c0070aa:	6149                	addi	sp,sp,144
1c0070ac:	8082                	ret

1c0070ae <hyperflash_reg_get>:
1c0070ae:	7175                	addi	sp,sp,-144
1c0070b0:	4785                	li	a5,1
1c0070b2:	868a                	mv	a3,sp
1c0070b4:	c706                	sw	ra,140(sp)
1c0070b6:	cc3e                	sw	a5,24(sp)
1c0070b8:	d43e                	sw	a5,40(sp)
1c0070ba:	c202                	sw	zero,4(sp)
1c0070bc:	00010a23          	sb	zero,20(sp)
1c0070c0:	ca9ff0ef          	jal	ra,1c006d68 <hyperflash_reg_get_async>
1c0070c4:	0848                	addi	a0,sp,20
1c0070c6:	371d                	jal	1c006fec <pi_task_wait_on.isra.3>
1c0070c8:	40ba                	lw	ra,140(sp)
1c0070ca:	4501                	li	a0,0
1c0070cc:	6149                	addi	sp,sp,144
1c0070ce:	8082                	ret

1c0070d0 <hyperflash_reg_set>:
1c0070d0:	7175                	addi	sp,sp,-144
1c0070d2:	4785                	li	a5,1
1c0070d4:	868a                	mv	a3,sp
1c0070d6:	c706                	sw	ra,140(sp)
1c0070d8:	cc3e                	sw	a5,24(sp)
1c0070da:	d43e                	sw	a5,40(sp)
1c0070dc:	c202                	sw	zero,4(sp)
1c0070de:	00010a23          	sb	zero,20(sp)
1c0070e2:	ce5ff0ef          	jal	ra,1c006dc6 <hyperflash_reg_set_async>
1c0070e6:	0848                	addi	a0,sp,20
1c0070e8:	3711                	jal	1c006fec <pi_task_wait_on.isra.3>
1c0070ea:	40ba                	lw	ra,140(sp)
1c0070ec:	4501                	li	a0,0
1c0070ee:	6149                	addi	sp,sp,144
1c0070f0:	8082                	ret

1c0070f2 <hyperflash_program>:
1c0070f2:	7175                	addi	sp,sp,-144
1c0070f4:	4785                	li	a5,1
1c0070f6:	870a                	mv	a4,sp
1c0070f8:	c706                	sw	ra,140(sp)
1c0070fa:	cc3e                	sw	a5,24(sp)
1c0070fc:	d43e                	sw	a5,40(sp)
1c0070fe:	c202                	sw	zero,4(sp)
1c007100:	00010a23          	sb	zero,20(sp)
1c007104:	dc7ff0ef          	jal	ra,1c006eca <hyperflash_program_async>
1c007108:	0848                	addi	a0,sp,20
1c00710a:	35cd                	jal	1c006fec <pi_task_wait_on.isra.3>
1c00710c:	40ba                	lw	ra,140(sp)
1c00710e:	4501                	li	a0,0
1c007110:	6149                	addi	sp,sp,144
1c007112:	8082                	ret

1c007114 <hyperflash_copy>:
1c007114:	7175                	addi	sp,sp,-144
1c007116:	4785                	li	a5,1
1c007118:	cc3e                	sw	a5,24(sp)
1c00711a:	d43e                	sw	a5,40(sp)
1c00711c:	878a                	mv	a5,sp
1c00711e:	c522                	sw	s0,136(sp)
1c007120:	c706                	sw	ra,140(sp)
1c007122:	c202                	sw	zero,4(sp)
1c007124:	00010a23          	sb	zero,20(sp)
1c007128:	dffff0ef          	jal	ra,1c006f26 <hyperflash_copy_async>
1c00712c:	547d                	li	s0,-1
1c00712e:	e501                	bnez	a0,1c007136 <hyperflash_copy+0x22>
1c007130:	842a                	mv	s0,a0
1c007132:	0848                	addi	a0,sp,20
1c007134:	3d65                	jal	1c006fec <pi_task_wait_on.isra.3>
1c007136:	8522                	mv	a0,s0
1c007138:	40ba                	lw	ra,140(sp)
1c00713a:	442a                	lw	s0,136(sp)
1c00713c:	6149                	addi	sp,sp,144
1c00713e:	8082                	ret

1c007140 <hyperflash_erase_resume>:
1c007140:	1101                	addi	sp,sp,-32
1c007142:	cc22                	sw	s0,24(sp)
1c007144:	4500                	lw	s0,8(a0)
1c007146:	ca26                	sw	s1,20(sp)
1c007148:	c84a                	sw	s2,16(sp)
1c00714a:	13842483          	lw	s1,312(s0)
1c00714e:	ce06                	sw	ra,28(sp)
1c007150:	c64e                	sw	s3,12(sp)
1c007152:	892a                	mv	s2,a0
1c007154:	ec8d                	bnez	s1,1c00718e <hyperflash_erase_resume+0x4e>
1c007156:	300474f3          	csrrci	s1,mstatus,8
1c00715a:	5048                	lw	a0,36(s0)
1c00715c:	300479f3          	csrrci	s3,mstatus,8
1c007160:	827ff0ef          	jal	ra,1c006986 <__rt_event_enqueue>
1c007164:	30099073          	csrw	mstatus,s3
1c007168:	4c54                	lw	a3,28(s0)
1c00716a:	02042223          	sw	zero,36(s0)
1c00716e:	c299                	beqz	a3,1c007174 <hyperflash_erase_resume+0x34>
1c007170:	4edc                	lw	a5,28(a3)
1c007172:	cc5c                	sw	a5,28(s0)
1c007174:	30049073          	csrw	mstatus,s1
1c007178:	c2b5                	beqz	a3,1c0071dc <hyperflash_erase_resume+0x9c>
1c00717a:	4462                	lw	s0,24(sp)
1c00717c:	40f2                	lw	ra,28(sp)
1c00717e:	44d2                	lw	s1,20(sp)
1c007180:	49b2                	lw	s3,12(sp)
1c007182:	42b0                	lw	a2,64(a3)
1c007184:	5ecc                	lw	a1,60(a3)
1c007186:	854a                	mv	a0,s2
1c007188:	4942                	lw	s2,16(sp)
1c00718a:	6105                	addi	sp,sp,32
1c00718c:	a8b9                	j	1c0071ea <hyperflash_erase_async>
1c00718e:	13442583          	lw	a1,308(s0)
1c007192:	000407b7          	lui	a5,0x40
1c007196:	0c042023          	sw	zero,192(s0)
1c00719a:	db25b733          	p.bclr	a4,a1,13,18
1c00719e:	8f99                	sub	a5,a5,a4
1c0071a0:	04f4d4b3          	p.minu	s1,s1,a5
1c0071a4:	1c0077b7          	lui	a5,0x1c007
1c0071a8:	14078793          	addi	a5,a5,320 # 1c007140 <hyperflash_erase_resume>
1c0071ac:	0af42623          	sw	a5,172(s0)
1c0071b0:	4785                	li	a5,1
1c0071b2:	0cf42823          	sw	a5,208(s0)
1c0071b6:	0aa42823          	sw	a0,176(s0)
1c0071ba:	0a040e23          	sb	zero,188(s0)
1c0071be:	0a840613          	addi	a2,s0,168
1c0071c2:	8ddff0ef          	jal	ra,1c006a9e <hyperflash_erase_sector_async>
1c0071c6:	13442783          	lw	a5,308(s0)
1c0071ca:	97a6                	add	a5,a5,s1
1c0071cc:	12f42a23          	sw	a5,308(s0)
1c0071d0:	13842783          	lw	a5,312(s0)
1c0071d4:	409784b3          	sub	s1,a5,s1
1c0071d8:	12942c23          	sw	s1,312(s0)
1c0071dc:	40f2                	lw	ra,28(sp)
1c0071de:	4462                	lw	s0,24(sp)
1c0071e0:	44d2                	lw	s1,20(sp)
1c0071e2:	4942                	lw	s2,16(sp)
1c0071e4:	49b2                	lw	s3,12(sp)
1c0071e6:	6105                	addi	sp,sp,32
1c0071e8:	8082                	ret

1c0071ea <hyperflash_erase_async>:
1c0071ea:	451c                	lw	a5,8(a0)
1c0071ec:	30047773          	csrrci	a4,mstatus,8
1c0071f0:	0247a803          	lw	a6,36(a5)
1c0071f4:	02080463          	beqz	a6,1c00721c <hyperflash_erase_async+0x32>
1c0071f8:	450d                	li	a0,3
1c0071fa:	de88                	sw	a0,56(a3)
1c0071fc:	decc                	sw	a1,60(a3)
1c0071fe:	c2b0                	sw	a2,64(a3)
1c007200:	0406a223          	sw	zero,68(a3)
1c007204:	4fd0                	lw	a2,28(a5)
1c007206:	ca09                	beqz	a2,1c007218 <hyperflash_erase_async+0x2e>
1c007208:	5390                	lw	a2,32(a5)
1c00720a:	ce54                	sw	a3,28(a2)
1c00720c:	d394                	sw	a3,32(a5)
1c00720e:	0006ae23          	sw	zero,28(a3)
1c007212:	30071073          	csrw	mstatus,a4
1c007216:	8082                	ret
1c007218:	cfd4                	sw	a3,28(a5)
1c00721a:	bfcd                	j	1c00720c <hyperflash_erase_async+0x22>
1c00721c:	d3d4                	sw	a3,36(a5)
1c00721e:	30071073          	csrw	mstatus,a4
1c007222:	12b7aa23          	sw	a1,308(a5)
1c007226:	12c7ac23          	sw	a2,312(a5)
1c00722a:	bf19                	j	1c007140 <hyperflash_erase_resume>

1c00722c <hyperflash_erase>:
1c00722c:	7175                	addi	sp,sp,-144
1c00722e:	4785                	li	a5,1
1c007230:	868a                	mv	a3,sp
1c007232:	c706                	sw	ra,140(sp)
1c007234:	cc3e                	sw	a5,24(sp)
1c007236:	d43e                	sw	a5,40(sp)
1c007238:	c202                	sw	zero,4(sp)
1c00723a:	00010a23          	sb	zero,20(sp)
1c00723e:	3775                	jal	1c0071ea <hyperflash_erase_async>
1c007240:	0848                	addi	a0,sp,20
1c007242:	dabff0ef          	jal	ra,1c006fec <pi_task_wait_on.isra.3>
1c007246:	40ba                	lw	ra,140(sp)
1c007248:	4501                	li	a0,0
1c00724a:	6149                	addi	sp,sp,144
1c00724c:	8082                	ret

1c00724e <hyperflash_get_status_reg>:
1c00724e:	6585                	lui	a1,0x1
1c007250:	1141                	addi	sp,sp,-16
1c007252:	07000613          	li	a2,112
1c007256:	aaa58593          	addi	a1,a1,-1366 # aaa <__rt_stack_size+0x2aa>
1c00725a:	c606                	sw	ra,12(sp)
1c00725c:	c422                	sw	s0,8(sp)
1c00725e:	842a                	mv	s0,a0
1c007260:	f50ff0ef          	jal	ra,1c0069b0 <hyperflash_set_reg_exec>
1c007264:	8522                	mv	a0,s0
1c007266:	00c40613          	addi	a2,s0,12
1c00726a:	4691                	li	a3,4
1c00726c:	4581                	li	a1,0
1c00726e:	561020ef          	jal	ra,1c009fce <pi_hyper_read>
1c007272:	00c45503          	lhu	a0,12(s0)
1c007276:	40b2                	lw	ra,12(sp)
1c007278:	4422                	lw	s0,8(sp)
1c00727a:	0141                	addi	sp,sp,16
1c00727c:	8082                	ret

1c00727e <hyperflash_check_erase>:
1c00727e:	1141                	addi	sp,sp,-16
1c007280:	c422                	sw	s0,8(sp)
1c007282:	4500                	lw	s0,8(a0)
1c007284:	c226                	sw	s1,4(sp)
1c007286:	84aa                	mv	s1,a0
1c007288:	8522                	mv	a0,s0
1c00728a:	c606                	sw	ra,12(sp)
1c00728c:	37c9                	jal	1c00724e <hyperflash_get_status_reg>
1c00728e:	c0751533          	p.extractu	a0,a0,0,7
1c007292:	e905                	bnez	a0,1c0072c2 <hyperflash_check_erase+0x44>
1c007294:	1c0077b7          	lui	a5,0x1c007
1c007298:	27e78793          	addi	a5,a5,638 # 1c00727e <hyperflash_check_erase>
1c00729c:	02040e23          	sb	zero,60(s0)
1c0072a0:	d45c                	sw	a5,44(s0)
1c0072a2:	4785                	li	a5,1
1c0072a4:	d804                	sw	s1,48(s0)
1c0072a6:	04042023          	sw	zero,64(s0)
1c0072aa:	c83c                	sw	a5,80(s0)
1c0072ac:	02840513          	addi	a0,s0,40
1c0072b0:	4422                	lw	s0,8(sp)
1c0072b2:	40b2                	lw	ra,12(sp)
1c0072b4:	4492                	lw	s1,4(sp)
1c0072b6:	65e1                	lui	a1,0x18
1c0072b8:	6a058593          	addi	a1,a1,1696 # 186a0 <__L1Cl+0x86a0>
1c0072bc:	0141                	addi	sp,sp,16
1c0072be:	7c20106f          	j	1c008a80 <pi_task_push_delayed_us>
1c0072c2:	4422                	lw	s0,8(sp)
1c0072c4:	40b2                	lw	ra,12(sp)
1c0072c6:	8526                	mv	a0,s1
1c0072c8:	4492                	lw	s1,4(sp)
1c0072ca:	0141                	addi	sp,sp,16
1c0072cc:	99dff06f          	j	1c006c68 <hyperflash_handle_pending_task>

1c0072d0 <hyperflash_check_program>:
1c0072d0:	1141                	addi	sp,sp,-16
1c0072d2:	c422                	sw	s0,8(sp)
1c0072d4:	4500                	lw	s0,8(a0)
1c0072d6:	c226                	sw	s1,4(sp)
1c0072d8:	84aa                	mv	s1,a0
1c0072da:	8522                	mv	a0,s0
1c0072dc:	c606                	sw	ra,12(sp)
1c0072de:	3f85                	jal	1c00724e <hyperflash_get_status_reg>
1c0072e0:	08057513          	andi	a0,a0,128
1c0072e4:	e51d                	bnez	a0,1c007312 <hyperflash_check_program+0x42>
1c0072e6:	1c0077b7          	lui	a5,0x1c007
1c0072ea:	2d078793          	addi	a5,a5,720 # 1c0072d0 <hyperflash_check_program>
1c0072ee:	02040e23          	sb	zero,60(s0)
1c0072f2:	d45c                	sw	a5,44(s0)
1c0072f4:	4785                	li	a5,1
1c0072f6:	d804                	sw	s1,48(s0)
1c0072f8:	04042023          	sw	zero,64(s0)
1c0072fc:	c83c                	sw	a5,80(s0)
1c0072fe:	02840513          	addi	a0,s0,40
1c007302:	4422                	lw	s0,8(sp)
1c007304:	40b2                	lw	ra,12(sp)
1c007306:	4492                	lw	s1,4(sp)
1c007308:	0fa00593          	li	a1,250
1c00730c:	0141                	addi	sp,sp,16
1c00730e:	7720106f          	j	1c008a80 <pi_task_push_delayed_us>
1c007312:	4422                	lw	s0,8(sp)
1c007314:	40b2                	lw	ra,12(sp)
1c007316:	8526                	mv	a0,s1
1c007318:	4492                	lw	s1,4(sp)
1c00731a:	0141                	addi	sp,sp,16
1c00731c:	affff06f          	j	1c006e1a <hyperflash_program_resume>

1c007320 <pi_hyperflash_conf_init>:
};



void pi_hyperflash_conf_init(struct pi_hyperflash_conf *conf)
{
1c007320:	1141                	addi	sp,sp,-16
  conf->flash.api = &hyperflash_api;
1c007322:	1c00c7b7          	lui	a5,0x1c00c
{
1c007326:	c606                	sw	ra,12(sp)
1c007328:	c422                	sw	s0,8(sp)
  conf->flash.api = &hyperflash_api;
1c00732a:	6d478793          	addi	a5,a5,1748 # 1c00c6d4 <hyperflash_api>
1c00732e:	c11c                	sw	a5,0(a0)
{
1c007330:	842a                	mv	s0,a0
#if defined(__GAP9__)
  conf->flash.aes_conf.enabled = 0;
  conf->flash.aes_conf.qk_en = 0;
#endif
  bsp_hyperflash_conf_init(conf);
1c007332:	643000ef          	jal	ra,1c008174 <bsp_hyperflash_conf_init>
  __flash_conf_init(&conf->flash);
1c007336:	8522                	mv	a0,s0
1c007338:	d1dfe0ef          	jal	ra,1c006054 <__flash_conf_init>
  conf->xip_en = 0;
  conf->baudrate = 50000000;
1c00733c:	02faf7b7          	lui	a5,0x2faf
1c007340:	08078793          	addi	a5,a5,128 # 2faf080 <__L2+0x2f2f080>
  conf->xip_en = 0;
1c007344:	00042823          	sw	zero,16(s0)
  conf->baudrate = 50000000;
1c007348:	c45c                	sw	a5,12(s0)
}
1c00734a:	40b2                	lw	ra,12(sp)
1c00734c:	4422                	lw	s0,8(sp)
1c00734e:	0141                	addi	sp,sp,16
1c007350:	8082                	ret

1c007352 <pi_partition_get_flash_offset>:
        return 0;
}

uint32_t pi_partition_get_flash_offset(const pi_partition_t *partition)
{
    if(partition)
1c007352:	c119                	beqz	a0,1c007358 <pi_partition_get_flash_offset+0x6>
        return partition->offset;
1c007354:	4548                	lw	a0,12(a0)
1c007356:	8082                	ret
    else
        return UINT32_MAX;
1c007358:	557d                	li	a0,-1
}
1c00735a:	8082                	ret

1c00735c <pi_partition_table_free>:

void pi_partition_table_free(pi_partition_table_t table)
{
    flash_partition_table_free((flash_partition_table_t *) table);
1c00735c:	aae9                	j	1c007536 <flash_partition_table_free>

1c00735e <pi_partition_table_load>:

pi_err_t pi_partition_table_load(pi_device_t *flash, const pi_partition_table_t *table)
{
    pi_err_t rc;
    
    rc = flash_partition_table_load(flash, (const flash_partition_table_t **) table, NULL);
1c00735e:	4601                	li	a2,0
1c007360:	a8d1                	j	1c007434 <flash_partition_table_load>

1c007362 <pi_partition_find_first>:

const pi_partition_t *
pi_partition_find_first(const pi_partition_table_t table, const pi_partition_type_t type,
                        const pi_partition_subtype_t subtype,
                        const char *label)
{
1c007362:	1141                	addi	sp,sp,-16
1c007364:	c226                	sw	s1,4(sp)
1c007366:	c606                	sw	ra,12(sp)
1c007368:	c422                	sw	s0,8(sp)
1c00736a:	84aa                	mv	s1,a0
    pi_partition_t *partition;
    const flash_partition_info_t *info;
    
    info = flash_partition_find_first((const flash_partition_table_t *) table, type, subtype, label);
1c00736c:	22fd                	jal	1c00755a <flash_partition_find_first>
    if(info == NULL)
1c00736e:	c539                	beqz	a0,1c0073bc <pi_partition_find_first+0x5a>
1c007370:	842a                	mv	s0,a0
        return NULL;
    
    partition = pi_l2_malloc(sizeof(pi_partition_t));
1c007372:	02800513          	li	a0,40
1c007376:	0f1010ef          	jal	ra,1c008c66 <pi_l2_malloc>
    partition->type = info->type;
1c00737a:	00244783          	lbu	a5,2(s0)
    partition->subtype = info->subtype;
    partition->size = info->pos.size;
    partition->offset = info->pos.offset;
    partition->flash = ((const flash_partition_table_t *)table)->flash;
1c00737e:	4098                	lw	a4,0(s1)
    partition->type = info->type;
1c007380:	c15c                	sw	a5,4(a0)
    partition->subtype = info->subtype;
1c007382:	00344783          	lbu	a5,3(s0)
1c007386:	c51c                	sw	a5,8(a0)
    partition->size = info->pos.size;
1c007388:	441c                	lw	a5,8(s0)
1c00738a:	c91c                	sw	a5,16(a0)
    partition->offset = info->pos.offset;
1c00738c:	405c                	lw	a5,4(s0)
1c00738e:	c55c                	sw	a5,12(a0)
    partition->flash = ((const flash_partition_table_t *)table)->flash;
1c007390:	87aa                	mv	a5,a0
1c007392:	00e7aa2b          	p.sw	a4,20(a5!)
    memcpy(partition->label, info->label, 16);
1c007396:	4458                	lw	a4,12(s0)
1c007398:	c398                	sw	a4,0(a5)
1c00739a:	481c                	lw	a5,16(s0)
1c00739c:	cd1c                	sw	a5,24(a0)
1c00739e:	485c                	lw	a5,20(s0)
1c0073a0:	cd5c                	sw	a5,28(a0)
1c0073a2:	4c1c                	lw	a5,24(s0)
    partition->label[16] = 0;
1c0073a4:	02050223          	sb	zero,36(a0)
    partition->encrypted = false;
1c0073a8:	020502a3          	sb	zero,37(a0)
    memcpy(partition->label, info->label, 16);
1c0073ac:	d11c                	sw	a5,32(a0)
    partition->read_only = false;
1c0073ae:	02050323          	sb	zero,38(a0)
    
    return (const pi_partition_t *) partition;
}
1c0073b2:	40b2                	lw	ra,12(sp)
1c0073b4:	4422                	lw	s0,8(sp)
1c0073b6:	4492                	lw	s1,4(sp)
1c0073b8:	0141                	addi	sp,sp,16
1c0073ba:	8082                	ret
        return NULL;
1c0073bc:	4501                	li	a0,0
1c0073be:	bfd5                	j	1c0073b2 <pi_partition_find_first+0x50>

1c0073c0 <flash_partition_table_verify>:

pi_err_t flash_partition_table_verify(const flash_partition_table_t *table)
{
    const flash_partition_info_t *part;
    const flash_partition_table_header_t *header = &table->header;
    const flash_partition_info_t *partition_table = table->partitions;
1c0073c0:	514c                	lw	a1,36(a0)
    MD5_CTX context;
    uint8_t digest[16];

    // Check magic number for each partition
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c0073c2:	00754683          	lbu	a3,7(a0)
1c0073c6:	4781                	li	a5,0
1c0073c8:	872e                	mv	a4,a1
    {
        part = partition_table + num_parts;
        if (part->magic_bytes != PI_PARTITION_MAGIC)
1c0073ca:	1ba00613          	li	a2,442
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c0073ce:	04f69663          	bne	a3,a5,1c00741a <flash_partition_table_verify+0x5a>
        {
            return PI_ERR_INVALID_STATE;
        }
    }

    if (header->crc_flags)
1c0073d2:	00854783          	lbu	a5,8(a0)
1c0073d6:	cfa9                	beqz	a5,1c007430 <flash_partition_table_verify+0x70>
{
1c0073d8:	7155                	addi	sp,sp,-208
1c0073da:	c5a2                	sw	s0,200(sp)
1c0073dc:	842a                	mv	s0,a0
    {
        MD5_Init(&context);
1c0073de:	1028                	addi	a0,sp,40
{
1c0073e0:	c786                	sw	ra,204(sp)
        MD5_Init(&context);
1c0073e2:	c62e                	sw	a1,12(sp)
1c0073e4:	2b9000ef          	jal	ra,1c007e9c <MD5_Init>
        MD5_Update(&context, (unsigned char *) partition_table,
                   header->nbr_of_entries * sizeof(flash_partition_info_t));
1c0073e8:	00744603          	lbu	a2,7(s0)
        MD5_Update(&context, (unsigned char *) partition_table,
1c0073ec:	45b2                	lw	a1,12(sp)
1c0073ee:	1028                	addi	a0,sp,40
1c0073f0:	0616                	slli	a2,a2,0x5
1c0073f2:	2dd000ef          	jal	ra,1c007ece <MD5_Update>
        MD5_Final(digest, &context);
1c0073f6:	102c                	addi	a1,sp,40
1c0073f8:	0828                	addi	a0,sp,24
1c0073fa:	371000ef          	jal	ra,1c007f6a <MD5_Final>

        if (strncmp((const char *) header->md5, (const char *) digest, sizeof(digest)))
1c0073fe:	4641                	li	a2,16
1c007400:	082c                	addi	a1,sp,24
1c007402:	01440513          	addi	a0,s0,20
1c007406:	5f8030ef          	jal	ra,1c00a9fe <strncmp>
        {
            return PI_ERR_INVALID_CRC;
1c00740a:	47a1                	li	a5,8
        if (strncmp((const char *) header->md5, (const char *) digest, sizeof(digest)))
1c00740c:	e111                	bnez	a0,1c007410 <flash_partition_table_verify+0x50>
        }
    }

    return PI_OK;
1c00740e:	4781                	li	a5,0
}
1c007410:	40be                	lw	ra,204(sp)
1c007412:	442e                	lw	s0,200(sp)
1c007414:	853e                	mv	a0,a5
1c007416:	6169                	addi	sp,sp,208
1c007418:	8082                	ret
        if (part->magic_bytes != PI_PARTITION_MAGIC)
1c00741a:	0207580b          	p.lhu	a6,32(a4!)
1c00741e:	00c81663          	bne	a6,a2,1c00742a <flash_partition_table_verify+0x6a>
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c007422:	0785                	addi	a5,a5,1
1c007424:	0ff7f793          	andi	a5,a5,255
1c007428:	b75d                	j	1c0073ce <flash_partition_table_verify+0xe>
            return PI_ERR_INVALID_STATE;
1c00742a:	478d                	li	a5,3
}
1c00742c:	853e                	mv	a0,a5
1c00742e:	8082                	ret
    return PI_OK;
1c007430:	4781                	li	a5,0
1c007432:	bfed                	j	1c00742c <flash_partition_table_verify+0x6c>

1c007434 <flash_partition_table_load>:

pi_err_t flash_partition_table_load(pi_device_t *flash, const flash_partition_table_t **partition_table,
                                    uint8_t *nbr_of_entries)
{
1c007434:	1101                	addi	sp,sp,-32
1c007436:	ca26                	sw	s1,20(sp)
1c007438:	ce06                	sw	ra,28(sp)
1c00743a:	cc22                	sw	s0,24(sp)
1c00743c:	c84a                	sw	s2,16(sp)
1c00743e:	c64e                	sw	s3,12(sp)
1c007440:	c452                	sw	s4,8(sp)
1c007442:	c256                	sw	s5,4(sp)
    flash_partition_info_t *partitions = NULL;

    if(partition_table == NULL)
    {
        PARTITION_TRACE_ERR("Table argument is NULL");
        return PI_ERR_INVALID_ARG;
1c007444:	4489                	li	s1,2
    if(partition_table == NULL)
1c007446:	c5f9                	beqz	a1,1c007514 <flash_partition_table_load+0xe0>
1c007448:	892a                	mv	s2,a0
    }

// Alloc table containing header
    table = pi_l2_malloc(sizeof(*table));
1c00744a:	02800513          	li	a0,40
1c00744e:	89b2                	mv	s3,a2
1c007450:	8aae                	mv	s5,a1
1c007452:	015010ef          	jal	ra,1c008c66 <pi_l2_malloc>
1c007456:	842a                	mv	s0,a0
    if(table == NULL)
    {
        PARTITION_TRACE_ERR("Unable to allocate partition table in L2.");
        rc = PI_ERR_L2_NO_MEM;
1c007458:	20100493          	li	s1,513
    if(table == NULL)
1c00745c:	cd45                	beqz	a0,1c007514 <flash_partition_table_load+0xe0>
        goto mount_error;
    }

    table_offset_l2 = pi_l2_malloc(sizeof(*table_offset_l2));
1c00745e:	4511                	li	a0,4
1c007460:	007010ef          	jal	ra,1c008c66 <pi_l2_malloc>
1c007464:	84aa                	mv	s1,a0
    if(table_offset_l2 == NULL)
1c007466:	c169                	beqz	a0,1c007528 <flash_partition_table_load+0xf4>
  api->read(device, pi_flash_addr, data, size);
1c007468:	00092783          	lw	a5,0(s2)
1c00746c:	862a                	mv	a2,a0
1c00746e:	4581                	li	a1,0
1c007470:	5b9c                	lw	a5,48(a5)
1c007472:	4691                	li	a3,4
1c007474:	854a                	mv	a0,s2
1c007476:	9782                	jalr	a5
        rc = PI_ERR_L2_NO_MEM;
        goto mount_error;
    }

    pi_flash_read(flash, 0, table_offset_l2, 4);
    if(*table_offset_l2 == 0)
1c007478:	0004aa03          	lw	s4,0(s1)

    return PI_OK;

    mount_error:
    if(table_offset_l2)
        pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c00747c:	4591                	li	a1,4
1c00747e:	8526                	mv	a0,s1
    if(*table_offset_l2 == 0)
1c007480:	0a0a0763          	beqz	s4,1c00752e <flash_partition_table_load+0xfa>
    pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c007484:	7f0010ef          	jal	ra,1c008c74 <pi_l2_free>
1c007488:	00092783          	lw	a5,0(s2)
1c00748c:	02000693          	li	a3,32
1c007490:	00440613          	addi	a2,s0,4
1c007494:	5b9c                	lw	a5,48(a5)
1c007496:	85d2                	mv	a1,s4
1c007498:	854a                	mv	a0,s2
1c00749a:	9782                	jalr	a5
    if(table->header.magic_bytes != PI_PARTITION_TABLE_HEADER_MAGIC)
1c00749c:	00445703          	lhu	a4,4(s0)
1c0074a0:	2ba00793          	li	a5,698
        rc = PI_ERR_NOT_FOUND;
1c0074a4:	4495                	li	s1,5
    if(table->header.magic_bytes != PI_PARTITION_TABLE_HEADER_MAGIC)
1c0074a6:	04f71663          	bne	a4,a5,1c0074f2 <flash_partition_table_load+0xbe>
    if(table->header.format_version != PI_PARTITION_TABLE_FORMAT_VERSION)
1c0074aa:	00644783          	lbu	a5,6(s0)
        rc = PI_ERR_INVALID_VERSION;
1c0074ae:	44a5                	li	s1,9
    if(table->header.format_version != PI_PARTITION_TABLE_FORMAT_VERSION)
1c0074b0:	0417b163          	p.bneimm	a5,1,1c0074f2 <flash_partition_table_load+0xbe>
    table->partitions = pi_l2_malloc(sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c0074b4:	00744503          	lbu	a0,7(s0)
1c0074b8:	0516                	slli	a0,a0,0x5
1c0074ba:	7ac010ef          	jal	ra,1c008c66 <pi_l2_malloc>
1c0074be:	d048                	sw	a0,36(s0)
1c0074c0:	862a                	mv	a2,a0
    if(table->partitions == NULL)
1c0074c2:	c13d                	beqz	a0,1c007528 <flash_partition_table_load+0xf4>
1c0074c4:	00092783          	lw	a5,0(s2)
                  sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c0074c8:	00744683          	lbu	a3,7(s0)
1c0074cc:	020a0593          	addi	a1,s4,32
1c0074d0:	5b9c                	lw	a5,48(a5)
1c0074d2:	0696                	slli	a3,a3,0x5
1c0074d4:	854a                	mv	a0,s2
1c0074d6:	9782                	jalr	a5
    if(table->header.crc_flags)
1c0074d8:	00844783          	lbu	a5,8(s0)
1c0074dc:	c38d                	beqz	a5,1c0074fe <flash_partition_table_load+0xca>
        rc = flash_partition_table_verify(table);
1c0074de:	8522                	mv	a0,s0
1c0074e0:	35c5                	jal	1c0073c0 <flash_partition_table_verify>
1c0074e2:	84aa                	mv	s1,a0
        if(rc != PI_OK)
1c0074e4:	cd09                	beqz	a0,1c0074fe <flash_partition_table_load+0xca>
            pi_l2_free(table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c0074e6:	00744583          	lbu	a1,7(s0)
1c0074ea:	5048                	lw	a0,36(s0)
1c0074ec:	0596                	slli	a1,a1,0x5
1c0074ee:	786010ef          	jal	ra,1c008c74 <pi_l2_free>
    if(table)
        pi_l2_free(table, sizeof(*table));
1c0074f2:	02800593          	li	a1,40
1c0074f6:	8522                	mv	a0,s0
1c0074f8:	77c010ef          	jal	ra,1c008c74 <pi_l2_free>
1c0074fc:	a821                	j	1c007514 <flash_partition_table_load+0xe0>
    table->flash = flash;
1c0074fe:	01242023          	sw	s2,0(s0)
    *partition_table = table;
1c007502:	008aa023          	sw	s0,0(s5)
    return PI_OK;
1c007506:	4481                	li	s1,0
    if(nbr_of_entries)
1c007508:	00098663          	beqz	s3,1c007514 <flash_partition_table_load+0xe0>
        *nbr_of_entries = table->header.nbr_of_entries;
1c00750c:	00744783          	lbu	a5,7(s0)
1c007510:	00f98023          	sb	a5,0(s3)
    return rc;
}
1c007514:	40f2                	lw	ra,28(sp)
1c007516:	4462                	lw	s0,24(sp)
1c007518:	8526                	mv	a0,s1
1c00751a:	4942                	lw	s2,16(sp)
1c00751c:	44d2                	lw	s1,20(sp)
1c00751e:	49b2                	lw	s3,12(sp)
1c007520:	4a22                	lw	s4,8(sp)
1c007522:	4a92                	lw	s5,4(sp)
1c007524:	6105                	addi	sp,sp,32
1c007526:	8082                	ret
        rc = PI_ERR_L2_NO_MEM;
1c007528:	20100493          	li	s1,513
1c00752c:	b7d9                	j	1c0074f2 <flash_partition_table_load+0xbe>
        pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c00752e:	746010ef          	jal	ra,1c008c74 <pi_l2_free>
        rc = PI_ERR_NOT_FOUND;
1c007532:	4495                	li	s1,5
1c007534:	bf7d                	j	1c0074f2 <flash_partition_table_load+0xbe>

1c007536 <flash_partition_table_free>:

void flash_partition_table_free(const flash_partition_table_t *table)
{
1c007536:	1141                	addi	sp,sp,-16
1c007538:	c422                	sw	s0,8(sp)
1c00753a:	c606                	sw	ra,12(sp)
    pi_l2_free((void *) table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c00753c:	00754583          	lbu	a1,7(a0)
{
1c007540:	842a                	mv	s0,a0
    pi_l2_free((void *) table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c007542:	5148                	lw	a0,36(a0)
1c007544:	0596                	slli	a1,a1,0x5
1c007546:	72e010ef          	jal	ra,1c008c74 <pi_l2_free>
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c00754a:	8522                	mv	a0,s0
}
1c00754c:	4422                	lw	s0,8(sp)
1c00754e:	40b2                	lw	ra,12(sp)
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c007550:	02800593          	li	a1,40
}
1c007554:	0141                	addi	sp,sp,16
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c007556:	71e0106f          	j	1c008c74 <pi_l2_free>

1c00755a <flash_partition_find_first>:


const flash_partition_info_t *flash_partition_find_first(const flash_partition_table_t *table, pi_partition_type_t type,
                                                         pi_partition_subtype_t subtype, const char *label)
{
1c00755a:	7179                	addi	sp,sp,-48
1c00755c:	d226                	sw	s1,36(sp)
1c00755e:	d04a                	sw	s2,32(sp)
1c007560:	cc52                	sw	s4,24(sp)
1c007562:	ca56                	sw	s5,20(sp)
1c007564:	d606                	sw	ra,44(sp)
1c007566:	d422                	sw	s0,40(sp)
1c007568:	ce4e                	sw	s3,28(sp)
    const flash_partition_info_t *part = NULL;

    for (uint8_t i = 0; i < table->header.nbr_of_entries; i++)
1c00756a:	00754983          	lbu	s3,7(a0)
{
1c00756e:	892a                	mv	s2,a0
1c007570:	8a2e                	mv	s4,a1
1c007572:	8ab2                	mv	s5,a2
    for (uint8_t i = 0; i < table->header.nbr_of_entries; i++)
1c007574:	4481                	li	s1,0
1c007576:	0ff4f793          	andi	a5,s1,255
1c00757a:	0137ed63          	bltu	a5,s3,1c007594 <flash_partition_find_first+0x3a>
        if(label == NULL)
            return part;
        if(strncmp(label, (char *) &part->label, PI_PARTITION_LABEL_LENGTH) == 0)
            return part;
    }
    return NULL;
1c00757e:	4401                	li	s0,0
}
1c007580:	8522                	mv	a0,s0
1c007582:	50b2                	lw	ra,44(sp)
1c007584:	5422                	lw	s0,40(sp)
1c007586:	5492                	lw	s1,36(sp)
1c007588:	5902                	lw	s2,32(sp)
1c00758a:	49f2                	lw	s3,28(sp)
1c00758c:	4a62                	lw	s4,24(sp)
1c00758e:	4ad2                	lw	s5,20(sp)
1c007590:	6145                	addi	sp,sp,48
1c007592:	8082                	ret
        part = table->partitions + i;
1c007594:	02492783          	lw	a5,36(s2)
1c007598:	00549413          	slli	s0,s1,0x5
1c00759c:	943e                	add	s0,s0,a5
        if(part->type != type || part->subtype != subtype)
1c00759e:	00244783          	lbu	a5,2(s0)
1c0075a2:	03479063          	bne	a5,s4,1c0075c2 <flash_partition_find_first+0x68>
1c0075a6:	00344783          	lbu	a5,3(s0)
1c0075aa:	01579c63          	bne	a5,s5,1c0075c2 <flash_partition_find_first+0x68>
        if(label == NULL)
1c0075ae:	dae9                	beqz	a3,1c007580 <flash_partition_find_first+0x26>
        if(strncmp(label, (char *) &part->label, PI_PARTITION_LABEL_LENGTH) == 0)
1c0075b0:	8536                	mv	a0,a3
1c0075b2:	4641                	li	a2,16
1c0075b4:	00c40593          	addi	a1,s0,12
1c0075b8:	c636                	sw	a3,12(sp)
1c0075ba:	444030ef          	jal	ra,1c00a9fe <strncmp>
1c0075be:	46b2                	lw	a3,12(sp)
1c0075c0:	d161                	beqz	a0,1c007580 <flash_partition_find_first+0x26>
1c0075c2:	0485                	addi	s1,s1,1
1c0075c4:	bf4d                	j	1c007576 <flash_partition_find_first+0x1c>

1c0075c6 <body>:
/*
 * This processes one or more 64-byte data blocks, but does NOT update the bit
 * counters.  There are no alignment requirements.
 */
static const void *body(MD5_CTX *ctx, const void *data, unsigned long size)
{
1c0075c6:	715d                	addi	sp,sp,-80
	MD5_u32plus a, b, c, d;
	MD5_u32plus saved_a, saved_b, saved_c, saved_d;

	ptr = (const unsigned char *)data;

	a = ctx->a;
1c0075c8:	00852283          	lw	t0,8(a0)
1c0075cc:	fc060613          	addi	a2,a2,-64
{
1c0075d0:	de52                	sw	s4,60(sp)
1c0075d2:	dc56                	sw	s5,56(sp)
1c0075d4:	8219                	srli	a2,a2,0x6
	b = ctx->b;
1c0075d6:	00c52803          	lw	a6,12(a0)
	c = ctx->c;
1c0075da:	01052a03          	lw	s4,16(a0)
	d = ctx->d;
1c0075de:	01452a83          	lw	s5,20(a0)
1c0075e2:	0605                	addi	a2,a2,1
{
1c0075e4:	c6a2                	sw	s0,76(sp)
1c0075e6:	c4a6                	sw	s1,72(sp)
1c0075e8:	c2ca                	sw	s2,68(sp)
1c0075ea:	c0ce                	sw	s3,64(sp)
1c0075ec:	da5a                	sw	s6,52(sp)
1c0075ee:	d85e                	sw	s7,48(sp)
1c0075f0:	d662                	sw	s8,44(sp)
1c0075f2:	d466                	sw	s9,40(sp)
1c0075f4:	d26a                	sw	s10,36(sp)
1c0075f6:	d06e                	sw	s11,32(sp)
1c0075f8:	87aa                	mv	a5,a0
	a = ctx->a;
1c0075fa:	cc16                	sw	t0,24(sp)
1c0075fc:	ce32                	sw	a2,28(sp)
1c0075fe:	4362                	lw	t1,24(sp)
		saved_b = b;
		saved_c = c;
		saved_d = d;

/* Round 1 */
		STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
1c007600:	0005a983          	lw	s3,0(a1)
1c007604:	d76aa537          	lui	a0,0xd76aa
1c007608:	47850513          	addi	a0,a0,1144 # d76aa478 <pulp__FC+0xd76aa479>
1c00760c:	00a30733          	add	a4,t1,a0
1c007610:	013706b3          	add	a3,a4,s3
1c007614:	015a4733          	xor	a4,s4,s5
1c007618:	01077733          	and	a4,a4,a6
1c00761c:	0537ac23          	sw	s3,88(a5)
1c007620:	01574733          	xor	a4,a4,s5
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c007624:	41d0                	lw	a2,4(a1)
		STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
1c007626:	9736                	add	a4,a4,a3
1c007628:	e8c7b6b7          	lui	a3,0xe8c7b
1c00762c:	4365                	li	t1,25
1c00762e:	75668693          	addi	a3,a3,1878 # e8c7b756 <pulp__FC+0xe8c7b757>
1c007632:	00da8e33          	add	t3,s5,a3
1c007636:	08675733          	p.ror	a4,a4,t1
1c00763a:	9742                	add	a4,a4,a6
1c00763c:	00ce06b3          	add	a3,t3,a2
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c007640:	01484e33          	xor	t3,a6,s4
1c007644:	cff0                	sw	a2,92(a5)
1c007646:	00ee7e33          	and	t3,t3,a4
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00764a:	0085a883          	lw	a7,8(a1)
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c00764e:	014e4e33          	xor	t3,t3,s4
1c007652:	24207bb7          	lui	s7,0x24207
1c007656:	4d51                	li	s10,20
1c007658:	9e36                	add	t3,t3,a3
1c00765a:	0dbb8b93          	addi	s7,s7,219 # 242070db <__l2_end+0x81fa443>
1c00765e:	017a0533          	add	a0,s4,s7
1c007662:	09ae5e33          	p.ror	t3,t3,s10
1c007666:	9e3a                	add	t3,t3,a4
1c007668:	011506b3          	add	a3,a0,a7
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00766c:	00e84533          	xor	a0,a6,a4
1c007670:	0717a023          	sw	a7,96(a5)
1c007674:	01c57533          	and	a0,a0,t3
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c007678:	00c5a283          	lw	t0,12(a1)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00767c:	01054533          	xor	a0,a0,a6
1c007680:	c1bddc37          	lui	s8,0xc1bdd
1c007684:	4cbd                	li	s9,15
1c007686:	9536                	add	a0,a0,a3
1c007688:	eeec0c13          	addi	s8,s8,-274 # c1bdceee <pulp__FC+0xc1bdceef>
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c00768c:	c432                	sw	a2,8(sp)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00768e:	09955533          	p.ror	a0,a0,s9
1c007692:	01880633          	add	a2,a6,s8
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c007696:	0657a223          	sw	t0,100(a5)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c00769a:	9572                	add	a0,a0,t3
1c00769c:	005606b3          	add	a3,a2,t0
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c0076a0:	01c74633          	xor	a2,a4,t3
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c0076a4:	0105ad83          	lw	s11,16(a1)
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c0076a8:	8e69                	and	a2,a2,a0
1c0076aa:	8e39                	xor	a2,a2,a4
1c0076ac:	f57c1eb7          	lui	t4,0xf57c1
1c0076b0:	4c29                	li	s8,10
1c0076b2:	9636                	add	a2,a2,a3
1c0076b4:	fafe8e93          	addi	t4,t4,-81 # f57c0faf <pulp__FC+0xf57c0fb0>
1c0076b8:	01dd86b3          	add	a3,s11,t4
1c0076bc:	09865633          	p.ror	a2,a2,s8
1c0076c0:	962a                	add	a2,a2,a0
1c0076c2:	9736                	add	a4,a4,a3
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c0076c4:	00ae46b3          	xor	a3,t3,a0
1c0076c8:	07b7a423          	sw	s11,104(a5)
1c0076cc:	8ef1                	and	a3,a3,a2
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c0076ce:	49c0                	lw	s0,20(a1)
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c0076d0:	01c6c6b3          	xor	a3,a3,t3
1c0076d4:	9736                	add	a4,a4,a3
1c0076d6:	4787c6b7          	lui	a3,0x4787c
1c0076da:	62a68693          	addi	a3,a3,1578 # 4787c62a <__l2_end+0x2b86f992>
1c0076de:	00d40fb3          	add	t6,s0,a3
1c0076e2:	08675733          	p.ror	a4,a4,t1
1c0076e6:	9732                	add	a4,a4,a2
1c0076e8:	9e7e                	add	t3,t3,t6
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c0076ea:	00c54fb3          	xor	t6,a0,a2
1c0076ee:	00efffb3          	and	t6,t6,a4
1c0076f2:	d7e0                	sw	s0,108(a5)
1c0076f4:	00afcfb3          	xor	t6,t6,a0
1c0076f8:	9ff2                	add	t6,t6,t3
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c0076fa:	0185ae03          	lw	t3,24(a1)
1c0076fe:	a8304bb7          	lui	s7,0xa8304
1c007702:	613b8b93          	addi	s7,s7,1555 # a8304613 <pulp__FC+0xa8304614>
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c007706:	c646                	sw	a7,12(sp)
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c007708:	09afdfb3          	p.ror	t6,t6,s10
1c00770c:	017e08b3          	add	a7,t3,s7
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c007710:	07c7a823          	sw	t3,112(a5)
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c007714:	9fba                	add	t6,t6,a4
1c007716:	9546                	add	a0,a0,a7
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c007718:	00e648b3          	xor	a7,a2,a4
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00771c:	01c5a903          	lw	s2,28(a1)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c007720:	01f8f8b3          	and	a7,a7,t6
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c007724:	c86e                	sw	s11,16(sp)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c007726:	00c8c8b3          	xor	a7,a7,a2
1c00772a:	fd469db7          	lui	s11,0xfd469
1c00772e:	98aa                	add	a7,a7,a0
1c007730:	501d8d93          	addi	s11,s11,1281 # fd469501 <pulp__FC+0xfd469502>
1c007734:	01b906b3          	add	a3,s2,s11
1c007738:	0998d8b3          	p.ror	a7,a7,s9
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00773c:	0727aa23          	sw	s2,116(a5)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c007740:	98fe                	add	a7,a7,t6
1c007742:	9636                	add	a2,a2,a3
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c007744:	01f746b3          	xor	a3,a4,t6
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c007748:	0205af03          	lw	t5,32(a1)
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c00774c:	0116f6b3          	and	a3,a3,a7
1c007750:	8eb9                	xor	a3,a3,a4
1c007752:	6980aeb7          	lui	t4,0x6980a
1c007756:	9636                	add	a2,a2,a3
1c007758:	8d8e8e93          	addi	t4,t4,-1832 # 698098d8 <__l2_end+0x4d7fcc40>
1c00775c:	01df06b3          	add	a3,t5,t4
1c007760:	09865633          	p.ror	a2,a2,s8
1c007764:	9646                	add	a2,a2,a7
1c007766:	9736                	add	a4,a4,a3
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c007768:	011fc6b3          	xor	a3,t6,a7
1c00776c:	07e7ac23          	sw	t5,120(a5)
1c007770:	8ef1                	and	a3,a3,a2
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c007772:	51c8                	lw	a0,36(a1)
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c007774:	01f6c6b3          	xor	a3,a3,t6
1c007778:	96ba                	add	a3,a3,a4
1c00777a:	8b44f737          	lui	a4,0x8b44f
1c00777e:	7af70713          	addi	a4,a4,1967 # 8b44f7af <pulp__FC+0x8b44f7b0>
1c007782:	00e504b3          	add	s1,a0,a4
1c007786:	0866d6b3          	p.ror	a3,a3,t1
1c00778a:	96b2                	add	a3,a3,a2
1c00778c:	9fa6                	add	t6,t6,s1
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c00778e:	00c8c4b3          	xor	s1,a7,a2
1c007792:	8cf5                	and	s1,s1,a3
1c007794:	dfe8                	sw	a0,124(a5)
1c007796:	0114c4b3          	xor	s1,s1,a7
1c00779a:	94fe                	add	s1,s1,t6
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c00779c:	0285af83          	lw	t6,40(a1)
1c0077a0:	7bd9                	lui	s7,0xffff6
1c0077a2:	bb1b8b93          	addi	s7,s7,-1103 # ffff5bb1 <pulp__FC+0xffff5bb2>
1c0077a6:	017f8eb3          	add	t4,t6,s7
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c0077aa:	09a4d4b3          	p.ror	s1,s1,s10
1c0077ae:	94b6                	add	s1,s1,a3
1c0077b0:	98f6                	add	a7,a7,t4
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c0077b2:	00d64eb3          	xor	t4,a2,a3
1c0077b6:	009efeb3          	and	t4,t4,s1
1c0077ba:	09f7a023          	sw	t6,128(a5)
1c0077be:	00ceceb3          	xor	t4,t4,a2
1c0077c2:	9ec6                	add	t4,t4,a7
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c0077c4:	02c5a883          	lw	a7,44(a1)
1c0077c8:	895cddb7          	lui	s11,0x895cd
1c0077cc:	7bed8d93          	addi	s11,s11,1982 # 895cd7be <pulp__FC+0x895cd7bf>
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c0077d0:	ca2a                	sw	a0,20(sp)
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c0077d2:	099edeb3          	p.ror	t4,t4,s9
1c0077d6:	01b88533          	add	a0,a7,s11
1c0077da:	9ea6                	add	t4,t4,s1
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c0077dc:	0917a223          	sw	a7,132(a5)
1c0077e0:	962a                	add	a2,a2,a0
1c0077e2:	0096c533          	xor	a0,a3,s1
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c0077e6:	0305a383          	lw	t2,48(a1)
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c0077ea:	01d57533          	and	a0,a0,t4
1c0077ee:	8d35                	xor	a0,a0,a3
1c0077f0:	6b901737          	lui	a4,0x6b901
1c0077f4:	9532                	add	a0,a0,a2
1c0077f6:	12270713          	addi	a4,a4,290 # 6b901122 <__l2_end+0x4f8f448a>
1c0077fa:	00e38633          	add	a2,t2,a4
1c0077fe:	09855533          	p.ror	a0,a0,s8
1c007802:	9576                	add	a0,a0,t4
1c007804:	96b2                	add	a3,a3,a2
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c007806:	01d4c633          	xor	a2,s1,t4
1c00780a:	8e69                	and	a2,a2,a0
1c00780c:	8e25                	xor	a2,a2,s1
1c00780e:	0877a423          	sw	t2,136(a5)
1c007812:	96b2                	add	a3,a3,a2
1c007814:	0866d6b3          	p.ror	a3,a3,t1
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c007818:	0345a303          	lw	t1,52(a1)
1c00781c:	fd987db7          	lui	s11,0xfd987
1c007820:	193d8d93          	addi	s11,s11,403 # fd987193 <pulp__FC+0xfd987194>
1c007824:	01b30bb3          	add	s7,t1,s11
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c007828:	00d50733          	add	a4,a0,a3
1c00782c:	94de                	add	s1,s1,s7
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c00782e:	00aecbb3          	xor	s7,t4,a0
1c007832:	00ebfbb3          	and	s7,s7,a4
1c007836:	01dbcbb3          	xor	s7,s7,t4
1c00783a:	94de                	add	s1,s1,s7
1c00783c:	0867a623          	sw	t1,140(a5)
1c007840:	09a4dbb3          	p.ror	s7,s1,s10
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c007844:	5d84                	lw	s1,56(a1)
1c007846:	a6794637          	lui	a2,0xa6794
1c00784a:	38e60613          	addi	a2,a2,910 # a679438e <pulp__FC+0xa679438f>
1c00784e:	00c48b33          	add	s6,s1,a2
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c007852:	9bba                	add	s7,s7,a4
1c007854:	9eda                	add	t4,t4,s6
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c007856:	00e54b33          	xor	s6,a0,a4
1c00785a:	017b7b33          	and	s6,s6,s7
1c00785e:	00ab4b33          	xor	s6,s6,a0
1c007862:	0897a823          	sw	s1,144(a5)
1c007866:	9eda                	add	t4,t4,s6
1c007868:	099edb33          	p.ror	s6,t4,s9
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c00786c:	03c5ae83          	lw	t4,60(a1)
1c007870:	49b416b7          	lui	a3,0x49b41
1c007874:	82168693          	addi	a3,a3,-2015 # 49b40821 <__l2_end+0x2db33b89>
1c007878:	00de8633          	add	a2,t4,a3
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c00787c:	9b5e                	add	s6,s6,s7
1c00787e:	9532                	add	a0,a0,a2
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c007880:	01774633          	xor	a2,a4,s7
1c007884:	01667633          	and	a2,a2,s6
1c007888:	8e39                	xor	a2,a2,a4
1c00788a:	9532                	add	a0,a0,a2
1c00788c:	09855633          	p.ror	a2,a0,s8
1c007890:	4c22                	lw	s8,8(sp)
1c007892:	f61e2d37          	lui	s10,0xf61e2
1c007896:	562d0d13          	addi	s10,s10,1378 # f61e2562 <pulp__FC+0xf61e2563>
1c00789a:	965a                	add	a2,a2,s6
1c00789c:	01ac06b3          	add	a3,s8,s10
1c0078a0:	9736                	add	a4,a4,a3

/* Round 2 */
		STEP(G, a, b, c, d, GET(1), 0xf61e2562, 5)
1c0078a2:	00cb46b3          	xor	a3,s6,a2
1c0078a6:	0176f6b3          	and	a3,a3,s7
1c0078aa:	0166c6b3          	xor	a3,a3,s6
1c0078ae:	4ded                	li	s11,27
1c0078b0:	96ba                	add	a3,a3,a4
1c0078b2:	c040b537          	lui	a0,0xc040b
1c0078b6:	09b6d6b3          	p.ror	a3,a3,s11
1c0078ba:	34050513          	addi	a0,a0,832 # c040b340 <pulp__FC+0xc040b341>
1c0078be:	96b2                	add	a3,a3,a2
1c0078c0:	00ae0733          	add	a4,t3,a0
1c0078c4:	9bba                	add	s7,s7,a4
		STEP(G, d, a, b, c, GET(6), 0xc040b340, 9)
1c0078c6:	00d64733          	xor	a4,a2,a3
1c0078ca:	01677733          	and	a4,a4,s6
1c0078ce:	8f31                	xor	a4,a4,a2
1c0078d0:	4d5d                	li	s10,23
1c0078d2:	975e                	add	a4,a4,s7
1c0078d4:	265e6bb7          	lui	s7,0x265e6
1c0078d8:	09a75733          	p.ror	a4,a4,s10
1c0078dc:	a51b8b93          	addi	s7,s7,-1455 # 265e5a51 <__l2_end+0xa5d8db9>
1c0078e0:	9736                	add	a4,a4,a3
1c0078e2:	01788533          	add	a0,a7,s7
1c0078e6:	955a                	add	a0,a0,s6
		STEP(G, c, d, a, b, GET(11), 0x265e5a51, 14)
1c0078e8:	00e6cb33          	xor	s6,a3,a4
1c0078ec:	00cb7b33          	and	s6,s6,a2
1c0078f0:	00db4b33          	xor	s6,s6,a3
1c0078f4:	4cc9                	li	s9,18
1c0078f6:	9b2a                	add	s6,s6,a0
1c0078f8:	e9b6cc37          	lui	s8,0xe9b6c
1c0078fc:	099b5b33          	p.ror	s6,s6,s9
1c007900:	7aac0c13          	addi	s8,s8,1962 # e9b6c7aa <pulp__FC+0xe9b6c7ab>
1c007904:	9b3a                	add	s6,s6,a4
1c007906:	01898533          	add	a0,s3,s8
1c00790a:	962a                	add	a2,a2,a0
		STEP(G, b, c, d, a, GET(0), 0xe9b6c7aa, 20)
1c00790c:	01674533          	xor	a0,a4,s6
1c007910:	8d75                	and	a0,a0,a3
1c007912:	8d39                	xor	a0,a0,a4
1c007914:	4c31                	li	s8,12
1c007916:	9532                	add	a0,a0,a2
1c007918:	d62f1bb7          	lui	s7,0xd62f1
1c00791c:	09855533          	p.ror	a0,a0,s8
1c007920:	05db8b93          	addi	s7,s7,93 # d62f105d <pulp__FC+0xd62f105e>
1c007924:	955a                	add	a0,a0,s6
1c007926:	01740633          	add	a2,s0,s7
1c00792a:	96b2                	add	a3,a3,a2
		STEP(G, a, b, c, d, GET(5), 0xd62f105d, 5)
1c00792c:	00ab4633          	xor	a2,s6,a0
1c007930:	8e79                	and	a2,a2,a4
1c007932:	01664633          	xor	a2,a2,s6
1c007936:	96b2                	add	a3,a3,a2
1c007938:	02441bb7          	lui	s7,0x2441
1c00793c:	09b6d6b3          	p.ror	a3,a3,s11
1c007940:	453b8b93          	addi	s7,s7,1107 # 2441453 <__L2+0x23c1453>
1c007944:	96aa                	add	a3,a3,a0
1c007946:	017f8633          	add	a2,t6,s7
1c00794a:	9732                	add	a4,a4,a2
		STEP(G, d, a, b, c, GET(10), 0x02441453, 9)
1c00794c:	00d54633          	xor	a2,a0,a3
1c007950:	01667633          	and	a2,a2,s6
1c007954:	8e29                	xor	a2,a2,a0
1c007956:	9732                	add	a4,a4,a2
1c007958:	d8a1ebb7          	lui	s7,0xd8a1e
1c00795c:	09a75733          	p.ror	a4,a4,s10
1c007960:	681b8b93          	addi	s7,s7,1665 # d8a1e681 <pulp__FC+0xd8a1e682>
1c007964:	9736                	add	a4,a4,a3
1c007966:	017e8633          	add	a2,t4,s7
1c00796a:	9b32                	add	s6,s6,a2
		STEP(G, c, d, a, b, GET(15), 0xd8a1e681, 14)
1c00796c:	00e6c633          	xor	a2,a3,a4
1c007970:	8e69                	and	a2,a2,a0
1c007972:	8e35                	xor	a2,a2,a3
1c007974:	4bc2                	lw	s7,16(sp)
1c007976:	9b32                	add	s6,s6,a2
1c007978:	e7d40637          	lui	a2,0xe7d40
1c00797c:	099b5b33          	p.ror	s6,s6,s9
1c007980:	bc860613          	addi	a2,a2,-1080 # e7d3fbc8 <pulp__FC+0xe7d3fbc9>
1c007984:	9b3a                	add	s6,s6,a4
1c007986:	965e                	add	a2,a2,s7
1c007988:	9532                	add	a0,a0,a2
		STEP(G, b, c, d, a, GET(4), 0xe7d3fbc8, 20)
1c00798a:	01674633          	xor	a2,a4,s6
1c00798e:	8e75                	and	a2,a2,a3
1c007990:	8e39                	xor	a2,a2,a4
1c007992:	9532                	add	a0,a0,a2
1c007994:	4652                	lw	a2,20(sp)
1c007996:	21e1dbb7          	lui	s7,0x21e1d
1c00799a:	09855533          	p.ror	a0,a0,s8
1c00799e:	de6b8b93          	addi	s7,s7,-538 # 21e1cde6 <__l2_end+0x5e1014e>
1c0079a2:	955a                	add	a0,a0,s6
1c0079a4:	9bb2                	add	s7,s7,a2
1c0079a6:	96de                	add	a3,a3,s7
		STEP(G, a, b, c, d, GET(9), 0x21e1cde6, 5)
1c0079a8:	00ab4bb3          	xor	s7,s6,a0
1c0079ac:	00ebfbb3          	and	s7,s7,a4
1c0079b0:	016bcbb3          	xor	s7,s7,s6
1c0079b4:	9bb6                	add	s7,s7,a3
1c0079b6:	c3370637          	lui	a2,0xc3370
1c0079ba:	09bbdbb3          	p.ror	s7,s7,s11
1c0079be:	7d660613          	addi	a2,a2,2006 # c33707d6 <pulp__FC+0xc33707d7>
1c0079c2:	9baa                	add	s7,s7,a0
1c0079c4:	9626                	add	a2,a2,s1
1c0079c6:	9732                	add	a4,a4,a2
		STEP(G, d, a, b, c, GET(14), 0xc33707d6, 9)
1c0079c8:	01754633          	xor	a2,a0,s7
1c0079cc:	01667633          	and	a2,a2,s6
1c0079d0:	8e29                	xor	a2,a2,a0
1c0079d2:	963a                	add	a2,a2,a4
1c0079d4:	f4d51737          	lui	a4,0xf4d51
1c0079d8:	09a65633          	p.ror	a2,a2,s10
1c0079dc:	d8770713          	addi	a4,a4,-633 # f4d50d87 <pulp__FC+0xf4d50d88>
1c0079e0:	965e                	add	a2,a2,s7
1c0079e2:	9716                	add	a4,a4,t0
1c0079e4:	9b3a                	add	s6,s6,a4
		STEP(G, c, d, a, b, GET(3), 0xf4d50d87, 14)
1c0079e6:	00cbc733          	xor	a4,s7,a2
1c0079ea:	8f69                	and	a4,a4,a0
1c0079ec:	01774733          	xor	a4,a4,s7
1c0079f0:	9b3a                	add	s6,s6,a4
1c0079f2:	455a1737          	lui	a4,0x455a1
1c0079f6:	099b5b33          	p.ror	s6,s6,s9
1c0079fa:	4ed70713          	addi	a4,a4,1261 # 455a14ed <__l2_end+0x29594855>
1c0079fe:	9b32                	add	s6,s6,a2
1c007a00:	977a                	add	a4,a4,t5
1c007a02:	953a                	add	a0,a0,a4
		STEP(G, b, c, d, a, GET(8), 0x455a14ed, 20)
1c007a04:	01664733          	xor	a4,a2,s6
1c007a08:	01777733          	and	a4,a4,s7
1c007a0c:	8f31                	xor	a4,a4,a2
1c007a0e:	953a                	add	a0,a0,a4
1c007a10:	a9e3f6b7          	lui	a3,0xa9e3f
1c007a14:	09855533          	p.ror	a0,a0,s8
1c007a18:	90568693          	addi	a3,a3,-1787 # a9e3e905 <pulp__FC+0xa9e3e906>
1c007a1c:	955a                	add	a0,a0,s6
1c007a1e:	969a                	add	a3,a3,t1
1c007a20:	9bb6                	add	s7,s7,a3
		STEP(G, a, b, c, d, GET(13), 0xa9e3e905, 5)
1c007a22:	00ab46b3          	xor	a3,s6,a0
1c007a26:	8ef1                	and	a3,a3,a2
1c007a28:	0166c6b3          	xor	a3,a3,s6
1c007a2c:	9bb6                	add	s7,s7,a3
1c007a2e:	09bbd6b3          	p.ror	a3,s7,s11
1c007a32:	4bb2                	lw	s7,12(sp)
1c007a34:	fcefa737          	lui	a4,0xfcefa
1c007a38:	3f870713          	addi	a4,a4,1016 # fcefa3f8 <pulp__FC+0xfcefa3f9>
1c007a3c:	96aa                	add	a3,a3,a0
1c007a3e:	975e                	add	a4,a4,s7
1c007a40:	963a                	add	a2,a2,a4
		STEP(G, d, a, b, c, GET(2), 0xfcefa3f8, 9)
1c007a42:	00d54733          	xor	a4,a0,a3
1c007a46:	01677733          	and	a4,a4,s6
1c007a4a:	8f29                	xor	a4,a4,a0
1c007a4c:	963a                	add	a2,a2,a4
1c007a4e:	09a65733          	p.ror	a4,a2,s10
1c007a52:	676f0637          	lui	a2,0x676f0
1c007a56:	2d960613          	addi	a2,a2,729 # 676f02d9 <__l2_end+0x4b6e3641>
1c007a5a:	9736                	add	a4,a4,a3
1c007a5c:	964a                	add	a2,a2,s2
1c007a5e:	9b32                	add	s6,s6,a2
		STEP(G, c, d, a, b, GET(7), 0x676f02d9, 14)
1c007a60:	00e6c633          	xor	a2,a3,a4
1c007a64:	8e69                	and	a2,a2,a0
1c007a66:	8e35                	xor	a2,a2,a3
1c007a68:	9b32                	add	s6,s6,a2
1c007a6a:	8d2a5637          	lui	a2,0x8d2a5
1c007a6e:	099b5b33          	p.ror	s6,s6,s9
1c007a72:	c8a60613          	addi	a2,a2,-886 # 8d2a4c8a <pulp__FC+0x8d2a4c8b>
1c007a76:	9b3a                	add	s6,s6,a4
1c007a78:	961e                	add	a2,a2,t2
1c007a7a:	9532                	add	a0,a0,a2
		STEP(G, b, c, d, a, GET(12), 0x8d2a4c8a, 20)
1c007a7c:	01674633          	xor	a2,a4,s6
1c007a80:	8e75                	and	a2,a2,a3
1c007a82:	8e39                	xor	a2,a2,a4
1c007a84:	9532                	add	a0,a0,a2
1c007a86:	09855533          	p.ror	a0,a0,s8
1c007a8a:	fffa4637          	lui	a2,0xfffa4
1c007a8e:	955a                	add	a0,a0,s6
1c007a90:	94260613          	addi	a2,a2,-1726 # fffa3942 <pulp__FC+0xfffa3943>

/* Round 3 */
		STEP(H, a, b, c, d, GET(5), 0xfffa3942, 4)
1c007a94:	00ab4bb3          	xor	s7,s6,a0
1c007a98:	9622                	add	a2,a2,s0
1c007a9a:	96b2                	add	a3,a3,a2
1c007a9c:	00ebc633          	xor	a2,s7,a4
1c007aa0:	4cf1                	li	s9,28
1c007aa2:	96b2                	add	a3,a3,a2
1c007aa4:	8771f637          	lui	a2,0x8771f
1c007aa8:	0996d6b3          	p.ror	a3,a3,s9
1c007aac:	68160613          	addi	a2,a2,1665 # 8771f681 <pulp__FC+0x8771f682>
1c007ab0:	96aa                	add	a3,a3,a0
1c007ab2:	967a                	add	a2,a2,t5
1c007ab4:	9732                	add	a4,a4,a2
		STEP(H2, d, a, b, c, GET(8), 0x8771f681, 11)
1c007ab6:	00dbc633          	xor	a2,s7,a3
1c007aba:	4c55                	li	s8,21
1c007abc:	963a                	add	a2,a2,a4
1c007abe:	09865633          	p.ror	a2,a2,s8
1c007ac2:	6d9d6737          	lui	a4,0x6d9d6
1c007ac6:	9636                	add	a2,a2,a3
1c007ac8:	12270713          	addi	a4,a4,290 # 6d9d6122 <__l2_end+0x519c948a>
		STEP(H, c, d, a, b, GET(11), 0x6d9d6122, 16)
1c007acc:	00c6cd33          	xor	s10,a3,a2
1c007ad0:	9746                	add	a4,a4,a7
1c007ad2:	975a                	add	a4,a4,s6
1c007ad4:	00ad4b33          	xor	s6,s10,a0
1c007ad8:	4bc1                	li	s7,16
1c007ada:	975a                	add	a4,a4,s6
1c007adc:	fde54b37          	lui	s6,0xfde54
1c007ae0:	09775733          	p.ror	a4,a4,s7
1c007ae4:	80cb0b13          	addi	s6,s6,-2036 # fde5380c <pulp__FC+0xfde5380d>
1c007ae8:	9732                	add	a4,a4,a2
1c007aea:	9b26                	add	s6,s6,s1
		STEP(H2, b, c, d, a, GET(14), 0xfde5380c, 23)
1c007aec:	00ed4d33          	xor	s10,s10,a4
1c007af0:	955a                	add	a0,a0,s6
1c007af2:	956a                	add	a0,a0,s10
1c007af4:	4b25                	li	s6,9
1c007af6:	09655533          	p.ror	a0,a0,s6
1c007afa:	953a                	add	a0,a0,a4
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c007afc:	00a74d33          	xor	s10,a4,a0
1c007b00:	4da2                	lw	s11,8(sp)
1c007b02:	c06a                	sw	s10,0(sp)
1c007b04:	a4befd37          	lui	s10,0xa4bef
1c007b08:	a44d0d13          	addi	s10,s10,-1468 # a4beea44 <pulp__FC+0xa4beea45>
1c007b0c:	9dea                	add	s11,s11,s10
1c007b0e:	96ee                	add	a3,a3,s11
1c007b10:	4d82                	lw	s11,0(sp)
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c007b12:	09d7aa23          	sw	t4,148(a5)
		a += saved_a;
		b += saved_b;
		c += saved_c;
		d += saved_d;

		ptr += 64;
1c007b16:	04058593          	addi	a1,a1,64
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c007b1a:	00cdcd33          	xor	s10,s11,a2
1c007b1e:	96ea                	add	a3,a3,s10
1c007b20:	4d42                	lw	s10,16(sp)
1c007b22:	4bdeddb7          	lui	s11,0x4bded
1c007b26:	fa9d8d93          	addi	s11,s11,-87 # 4bdecfa9 <__l2_end+0x2fde0311>
1c007b2a:	9d6e                	add	s10,s10,s11
1c007b2c:	966a                	add	a2,a2,s10
		STEP(H2, d, a, b, c, GET(4), 0x4bdecfa9, 11)
1c007b2e:	4d02                	lw	s10,0(sp)
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c007b30:	0996d6b3          	p.ror	a3,a3,s9
1c007b34:	96aa                	add	a3,a3,a0
		STEP(H2, d, a, b, c, GET(4), 0x4bdecfa9, 11)
1c007b36:	00dd4db3          	xor	s11,s10,a3
1c007b3a:	966e                	add	a2,a2,s11
1c007b3c:	09865633          	p.ror	a2,a2,s8
1c007b40:	f6bb5db7          	lui	s11,0xf6bb5
1c007b44:	9636                	add	a2,a2,a3
1c007b46:	b60d8d93          	addi	s11,s11,-1184 # f6bb4b60 <pulp__FC+0xf6bb4b61>
		STEP(H, c, d, a, b, GET(7), 0xf6bb4b60, 16)
1c007b4a:	00c6cd33          	xor	s10,a3,a2
1c007b4e:	9dca                	add	s11,s11,s2
1c007b50:	976e                	add	a4,a4,s11
1c007b52:	00ad4db3          	xor	s11,s10,a0
1c007b56:	976e                	add	a4,a4,s11
1c007b58:	bebfcdb7          	lui	s11,0xbebfc
1c007b5c:	09775733          	p.ror	a4,a4,s7
1c007b60:	c70d8d93          	addi	s11,s11,-912 # bebfbc70 <pulp__FC+0xbebfbc71>
1c007b64:	9732                	add	a4,a4,a2
1c007b66:	9dfe                	add	s11,s11,t6
		STEP(H2, b, c, d, a, GET(10), 0xbebfbc70, 23)
1c007b68:	00ed4d33          	xor	s10,s10,a4
1c007b6c:	956e                	add	a0,a0,s11
1c007b6e:	956a                	add	a0,a0,s10
1c007b70:	09655533          	p.ror	a0,a0,s6
1c007b74:	289b8d37          	lui	s10,0x289b8
1c007b78:	953a                	add	a0,a0,a4
1c007b7a:	ec6d0d13          	addi	s10,s10,-314 # 289b7ec6 <__l2_end+0xc9ab22e>
		STEP(H, a, b, c, d, GET(13), 0x289b7ec6, 4)
1c007b7e:	00a74db3          	xor	s11,a4,a0
1c007b82:	9d1a                	add	s10,s10,t1
1c007b84:	96ea                	add	a3,a3,s10
1c007b86:	00cdcd33          	xor	s10,s11,a2
1c007b8a:	9d36                	add	s10,s10,a3
1c007b8c:	eaa126b7          	lui	a3,0xeaa12
1c007b90:	099d5d33          	p.ror	s10,s10,s9
1c007b94:	7fa68693          	addi	a3,a3,2042 # eaa127fa <pulp__FC+0xeaa127fb>
1c007b98:	9d2a                	add	s10,s10,a0
1c007b9a:	96ce                	add	a3,a3,s3
		STEP(H2, d, a, b, c, GET(0), 0xeaa127fa, 11)
1c007b9c:	01adcdb3          	xor	s11,s11,s10
1c007ba0:	9636                	add	a2,a2,a3
1c007ba2:	966e                	add	a2,a2,s11
1c007ba4:	09865633          	p.ror	a2,a2,s8
1c007ba8:	d4ef3db7          	lui	s11,0xd4ef3
1c007bac:	966a                	add	a2,a2,s10
1c007bae:	085d8d93          	addi	s11,s11,133 # d4ef3085 <pulp__FC+0xd4ef3086>
		STEP(H, c, d, a, b, GET(3), 0xd4ef3085, 16)
1c007bb2:	00cd46b3          	xor	a3,s10,a2
1c007bb6:	9d96                	add	s11,s11,t0
1c007bb8:	976e                	add	a4,a4,s11
1c007bba:	00a6cdb3          	xor	s11,a3,a0
1c007bbe:	9dba                	add	s11,s11,a4
1c007bc0:	04882737          	lui	a4,0x4882
1c007bc4:	097dddb3          	p.ror	s11,s11,s7
1c007bc8:	d0570713          	addi	a4,a4,-763 # 4881d05 <__L2+0x4801d05>
1c007bcc:	9db2                	add	s11,s11,a2
1c007bce:	9772                	add	a4,a4,t3
1c007bd0:	953a                	add	a0,a0,a4
		STEP(H2, b, c, d, a, GET(6), 0x04881d05, 23)
1c007bd2:	01b6c6b3          	xor	a3,a3,s11
1c007bd6:	96aa                	add	a3,a3,a0
1c007bd8:	0966d6b3          	p.ror	a3,a3,s6
1c007bdc:	96ee                	add	a3,a3,s11
		STEP(H, a, b, c, d, GET(9), 0xd9d4d039, 4)
1c007bde:	00ddc533          	xor	a0,s11,a3
1c007be2:	4752                	lw	a4,20(sp)
1c007be4:	c02a                	sw	a0,0(sp)
1c007be6:	d9d4d537          	lui	a0,0xd9d4d
1c007bea:	03950513          	addi	a0,a0,57 # d9d4d039 <pulp__FC+0xd9d4d03a>
1c007bee:	972a                	add	a4,a4,a0
1c007bf0:	9d3a                	add	s10,s10,a4
1c007bf2:	4702                	lw	a4,0(sp)
1c007bf4:	00c74533          	xor	a0,a4,a2
1c007bf8:	9d2a                	add	s10,s10,a0
1c007bfa:	e6dba537          	lui	a0,0xe6dba
1c007bfe:	099d5cb3          	p.ror	s9,s10,s9
1c007c02:	9e550513          	addi	a0,a0,-1563 # e6db99e5 <pulp__FC+0xe6db99e6>
1c007c06:	9cb6                	add	s9,s9,a3
1c007c08:	951e                	add	a0,a0,t2
		STEP(H2, d, a, b, c, GET(12), 0xe6db99e5, 11)
1c007c0a:	01974733          	xor	a4,a4,s9
1c007c0e:	962a                	add	a2,a2,a0
1c007c10:	963a                	add	a2,a2,a4
1c007c12:	09865c33          	p.ror	s8,a2,s8
1c007c16:	1fa28737          	lui	a4,0x1fa28
1c007c1a:	9c66                	add	s8,s8,s9
1c007c1c:	cf870713          	addi	a4,a4,-776 # 1fa27cf8 <__l2_end+0x3a1b060>
		STEP(H, c, d, a, b, GET(15), 0x1fa27cf8, 16)
1c007c20:	018ccd33          	xor	s10,s9,s8
1c007c24:	9776                	add	a4,a4,t4
1c007c26:	9dba                	add	s11,s11,a4
1c007c28:	00dd4733          	xor	a4,s10,a3
1c007c2c:	9dba                	add	s11,s11,a4
1c007c2e:	097ddbb3          	p.ror	s7,s11,s7
1c007c32:	4db2                	lw	s11,12(sp)
1c007c34:	c4ac5737          	lui	a4,0xc4ac5
1c007c38:	66570713          	addi	a4,a4,1637 # c4ac5665 <pulp__FC+0xc4ac5666>
1c007c3c:	9be2                	add	s7,s7,s8
1c007c3e:	976e                	add	a4,a4,s11
		STEP(H2, b, c, d, a, GET(2), 0xc4ac5665, 23)
1c007c40:	017d4d33          	xor	s10,s10,s7
1c007c44:	96ba                	add	a3,a3,a4
1c007c46:	f4292737          	lui	a4,0xf4292
1c007c4a:	96ea                	add	a3,a3,s10
1c007c4c:	24470713          	addi	a4,a4,580 # f4292244 <pulp__FC+0xf4292245>
1c007c50:	0966db33          	p.ror	s6,a3,s6
1c007c54:	99ba                	add	s3,s3,a4
1c007c56:	9b5e                	add	s6,s6,s7
1c007c58:	99e6                	add	s3,s3,s9
		STEP(I, a, b, c, d, GET(0), 0xf4292244, 6)
1c007c5a:	fffc4c93          	not	s9,s8
1c007c5e:	016cecb3          	or	s9,s9,s6
1c007c62:	017cccb3          	xor	s9,s9,s7
1c007c66:	432b0737          	lui	a4,0x432b0
1c007c6a:	4669                	li	a2,26
1c007c6c:	f9770713          	addi	a4,a4,-105 # 432aff97 <__l2_end+0x272a32ff>
1c007c70:	9cce                	add	s9,s9,s3
1c007c72:	08ccdcb3          	p.ror	s9,s9,a2
1c007c76:	993a                	add	s2,s2,a4
1c007c78:	9cda                	add	s9,s9,s6
1c007c7a:	9962                	add	s2,s2,s8
		STEP(I, d, a, b, c, GET(7), 0x432aff97, 10)
1c007c7c:	fffbcc13          	not	s8,s7
1c007c80:	019c6c33          	or	s8,s8,s9
1c007c84:	016c4c33          	xor	s8,s8,s6
1c007c88:	ab942737          	lui	a4,0xab942
1c007c8c:	4559                	li	a0,22
1c007c8e:	9c4a                	add	s8,s8,s2
1c007c90:	3a770713          	addi	a4,a4,935 # ab9423a7 <pulp__FC+0xab9423a8>
1c007c94:	08ac5c33          	p.ror	s8,s8,a0
1c007c98:	94ba                	add	s1,s1,a4
1c007c9a:	9c66                	add	s8,s8,s9
1c007c9c:	94de                	add	s1,s1,s7
		STEP(I, c, d, a, b, GET(14), 0xab9423a7, 15)
1c007c9e:	fffb4b93          	not	s7,s6
1c007ca2:	018bebb3          	or	s7,s7,s8
1c007ca6:	019bcbb3          	xor	s7,s7,s9
1c007caa:	fc93a737          	lui	a4,0xfc93a
1c007cae:	4945                	li	s2,17
1c007cb0:	9ba6                	add	s7,s7,s1
1c007cb2:	03970713          	addi	a4,a4,57 # fc93a039 <pulp__FC+0xfc93a03a>
1c007cb6:	9722                	add	a4,a4,s0
1c007cb8:	092bdbb3          	p.ror	s7,s7,s2
1c007cbc:	9be2                	add	s7,s7,s8
1c007cbe:	9b3a                	add	s6,s6,a4
		STEP(I, b, c, d, a, GET(5), 0xfc93a039, 21)
1c007cc0:	fffcc713          	not	a4,s9
1c007cc4:	01776733          	or	a4,a4,s7
1c007cc8:	01874733          	xor	a4,a4,s8
1c007ccc:	46ad                	li	a3,11
1c007cce:	975a                	add	a4,a4,s6
1c007cd0:	08d75733          	p.ror	a4,a4,a3
1c007cd4:	655b6437          	lui	s0,0x655b6
1c007cd8:	975e                	add	a4,a4,s7
1c007cda:	9c340413          	addi	s0,s0,-1597 # 655b59c3 <__l2_end+0x495a8d2b>
		STEP(I, a, b, c, d, GET(12), 0x655b59c3, 6)
1c007cde:	fffc4493          	not	s1,s8
1c007ce2:	93a2                	add	t2,t2,s0
1c007ce4:	8cd9                	or	s1,s1,a4
1c007ce6:	9c9e                	add	s9,s9,t2
1c007ce8:	0174c4b3          	xor	s1,s1,s7
1c007cec:	9ca6                	add	s9,s9,s1
1c007cee:	08ccdcb3          	p.ror	s9,s9,a2
1c007cf2:	8f0cd3b7          	lui	t2,0x8f0cd
1c007cf6:	9cba                	add	s9,s9,a4
1c007cf8:	c9238393          	addi	t2,t2,-878 # 8f0ccc92 <pulp__FC+0x8f0ccc93>
		STEP(I, d, a, b, c, GET(3), 0x8f0ccc92, 10)
1c007cfc:	fffbc413          	not	s0,s7
1c007d00:	929e                	add	t0,t0,t2
1c007d02:	01946433          	or	s0,s0,s9
1c007d06:	9c16                	add	s8,s8,t0
1c007d08:	8c39                	xor	s0,s0,a4
1c007d0a:	9c22                	add	s8,s8,s0
1c007d0c:	08ac5c33          	p.ror	s8,s8,a0
1c007d10:	ffeff2b7          	lui	t0,0xffeff
1c007d14:	9c66                	add	s8,s8,s9
1c007d16:	47d28293          	addi	t0,t0,1149 # ffeff47d <pulp__FC+0xffeff47e>
		STEP(I, c, d, a, b, GET(10), 0xffeff47d, 15)
1c007d1a:	fff74393          	not	t2,a4
1c007d1e:	9f96                	add	t6,t6,t0
1c007d20:	0183e3b3          	or	t2,t2,s8
1c007d24:	9bfe                	add	s7,s7,t6
1c007d26:	0193c3b3          	xor	t2,t2,s9
1c007d2a:	42a2                	lw	t0,8(sp)
1c007d2c:	9b9e                	add	s7,s7,t2
1c007d2e:	85846fb7          	lui	t6,0x85846
1c007d32:	092bdbb3          	p.ror	s7,s7,s2
1c007d36:	dd1f8f93          	addi	t6,t6,-559 # 85845dd1 <pulp__FC+0x85845dd2>
1c007d3a:	9be2                	add	s7,s7,s8
1c007d3c:	9f96                	add	t6,t6,t0
		STEP(I, b, c, d, a, GET(1), 0x85845dd1, 21)
1c007d3e:	fffcc293          	not	t0,s9
1c007d42:	0172e2b3          	or	t0,t0,s7
1c007d46:	0182c2b3          	xor	t0,t0,s8
1c007d4a:	977e                	add	a4,a4,t6
1c007d4c:	9716                	add	a4,a4,t0
1c007d4e:	08d75733          	p.ror	a4,a4,a3
1c007d52:	6fa88fb7          	lui	t6,0x6fa88
1c007d56:	975e                	add	a4,a4,s7
1c007d58:	e4ff8f93          	addi	t6,t6,-433 # 6fa87e4f <__l2_end+0x53a7b1b7>
		STEP(I, a, b, c, d, GET(8), 0x6fa87e4f, 6)
1c007d5c:	fffc4293          	not	t0,s8
1c007d60:	9f7e                	add	t5,t5,t6
1c007d62:	00e2e2b3          	or	t0,t0,a4
1c007d66:	9cfa                	add	s9,s9,t5
1c007d68:	0172c2b3          	xor	t0,t0,s7
1c007d6c:	9c96                	add	s9,s9,t0
1c007d6e:	08ccdcb3          	p.ror	s9,s9,a2
1c007d72:	fe2cef37          	lui	t5,0xfe2ce
1c007d76:	9cba                	add	s9,s9,a4
1c007d78:	6e0f0f13          	addi	t5,t5,1760 # fe2ce6e0 <pulp__FC+0xfe2ce6e1>
		STEP(I, d, a, b, c, GET(15), 0xfe2ce6e0, 10)
1c007d7c:	fffbcf93          	not	t6,s7
1c007d80:	9efa                	add	t4,t4,t5
1c007d82:	019fefb3          	or	t6,t6,s9
1c007d86:	9c76                	add	s8,s8,t4
1c007d88:	00efcfb3          	xor	t6,t6,a4
1c007d8c:	9c7e                	add	s8,s8,t6
1c007d8e:	08ac5c33          	p.ror	s8,s8,a0
1c007d92:	a3014eb7          	lui	t4,0xa3014
1c007d96:	9c66                	add	s8,s8,s9
1c007d98:	314e8e93          	addi	t4,t4,788 # a3014314 <pulp__FC+0xa3014315>
		STEP(I, c, d, a, b, GET(6), 0xa3014314, 15)
1c007d9c:	fff74f13          	not	t5,a4
1c007da0:	9e76                	add	t3,t3,t4
1c007da2:	018f6f33          	or	t5,t5,s8
1c007da6:	9bf2                	add	s7,s7,t3
1c007da8:	019f4f33          	xor	t5,t5,s9
1c007dac:	9bfa                	add	s7,s7,t5
1c007dae:	092bdbb3          	p.ror	s7,s7,s2
1c007db2:	4e081e37          	lui	t3,0x4e081
1c007db6:	9be2                	add	s7,s7,s8
1c007db8:	1a1e0e13          	addi	t3,t3,417 # 4e0811a1 <__l2_end+0x32074509>
		STEP(I, b, c, d, a, GET(13), 0x4e0811a1, 21)
1c007dbc:	fffcce93          	not	t4,s9
1c007dc0:	9372                	add	t1,t1,t3
1c007dc2:	017eeeb3          	or	t4,t4,s7
1c007dc6:	018eceb3          	xor	t4,t4,s8
1c007dca:	971a                	add	a4,a4,t1
1c007dcc:	9776                	add	a4,a4,t4
1c007dce:	4d42                	lw	s10,16(sp)
1c007dd0:	08d75733          	p.ror	a4,a4,a3
1c007dd4:	f7538337          	lui	t1,0xf7538
1c007dd8:	975e                	add	a4,a4,s7
		STEP(I, a, b, c, d, GET(4), 0xf7537e82, 6)
1c007dda:	fffc4e13          	not	t3,s8
1c007dde:	e8230313          	addi	t1,t1,-382 # f7537e82 <pulp__FC+0xf7537e83>
1c007de2:	936a                	add	t1,t1,s10
1c007de4:	00ee6e33          	or	t3,t3,a4
1c007de8:	017e4e33          	xor	t3,t3,s7
1c007dec:	9c9a                	add	s9,s9,t1
1c007dee:	9cf2                	add	s9,s9,t3
1c007df0:	08ccd633          	p.ror	a2,s9,a2
1c007df4:	bd3af337          	lui	t1,0xbd3af
1c007df8:	963a                	add	a2,a2,a4
1c007dfa:	23530313          	addi	t1,t1,565 # bd3af235 <pulp__FC+0xbd3af236>
		STEP(I, d, a, b, c, GET(11), 0xbd3af235, 10)
1c007dfe:	fffbce13          	not	t3,s7
1c007e02:	989a                	add	a7,a7,t1
1c007e04:	00ce6e33          	or	t3,t3,a2
1c007e08:	00ee4e33          	xor	t3,t3,a4
1c007e0c:	9c46                	add	s8,s8,a7
1c007e0e:	9c72                	add	s8,s8,t3
1c007e10:	08ac5533          	p.ror	a0,s8,a0
1c007e14:	2ad7d8b7          	lui	a7,0x2ad7d
1c007e18:	9532                	add	a0,a0,a2
		STEP(I, c, d, a, b, GET(2), 0x2ad7d2bb, 15)
1c007e1a:	fff74313          	not	t1,a4
1c007e1e:	2bb88893          	addi	a7,a7,699 # 2ad7d2bb <__l2_end+0xed70623>
1c007e22:	98ee                	add	a7,a7,s11
1c007e24:	00a36333          	or	t1,t1,a0
1c007e28:	9bc6                	add	s7,s7,a7
1c007e2a:	00c34333          	xor	t1,t1,a2
1c007e2e:	9b9a                	add	s7,s7,t1
1c007e30:	4dd2                	lw	s11,20(sp)
1c007e32:	092bd933          	p.ror	s2,s7,s2
1c007e36:	eb86d8b7          	lui	a7,0xeb86d
1c007e3a:	992a                	add	s2,s2,a0
1c007e3c:	39188893          	addi	a7,a7,913 # eb86d391 <pulp__FC+0xeb86d392>
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c007e40:	fff64313          	not	t1,a2
		a += saved_a;
1c007e44:	4e62                	lw	t3,24(sp)
	} while (size -= 64);
1c007e46:	4ef2                	lw	t4,28(sp)
1c007e48:	98ee                	add	a7,a7,s11
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c007e4a:	01236333          	or	t1,t1,s2
1c007e4e:	9746                	add	a4,a4,a7
1c007e50:	00a34333          	xor	t1,t1,a0
1c007e54:	971a                	add	a4,a4,t1
1c007e56:	08d75733          	p.ror	a4,a4,a3
		a += saved_a;
1c007e5a:	9e32                	add	t3,t3,a2
	} while (size -= 64);
1c007e5c:	1efd                	addi	t4,t4,-1
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c007e5e:	974a                	add	a4,a4,s2
		a += saved_a;
1c007e60:	cc72                	sw	t3,24(sp)
	} while (size -= 64);
1c007e62:	ce76                	sw	t4,28(sp)
		b += saved_b;
1c007e64:	983a                	add	a6,a6,a4
		c += saved_c;
1c007e66:	9a4a                	add	s4,s4,s2
		d += saved_d;
1c007e68:	9aaa                	add	s5,s5,a0
	} while (size -= 64);
1c007e6a:	f80e9a63          	bnez	t4,1c0075fe <body+0x38>
	ctx->b = b;
	ctx->c = c;
	ctx->d = d;

	return ptr;
}
1c007e6e:	4436                	lw	s0,76(sp)
	ctx->c = c;
1c007e70:	0147a823          	sw	s4,16(a5)
	ctx->d = d;
1c007e74:	0157aa23          	sw	s5,20(a5)
	ctx->a = a;
1c007e78:	01c7a423          	sw	t3,8(a5)
	ctx->b = b;
1c007e7c:	0107a623          	sw	a6,12(a5)
}
1c007e80:	44a6                	lw	s1,72(sp)
1c007e82:	4916                	lw	s2,68(sp)
1c007e84:	4986                	lw	s3,64(sp)
1c007e86:	5a72                	lw	s4,60(sp)
1c007e88:	5ae2                	lw	s5,56(sp)
1c007e8a:	5b52                	lw	s6,52(sp)
1c007e8c:	5bc2                	lw	s7,48(sp)
1c007e8e:	5c32                	lw	s8,44(sp)
1c007e90:	5ca2                	lw	s9,40(sp)
1c007e92:	5d12                	lw	s10,36(sp)
1c007e94:	5d82                	lw	s11,32(sp)
1c007e96:	852e                	mv	a0,a1
1c007e98:	6161                	addi	sp,sp,80
1c007e9a:	8082                	ret

1c007e9c <MD5_Init>:

void MD5_Init(MD5_CTX *ctx)
{
	ctx->a = 0x67452301;
1c007e9c:	674527b7          	lui	a5,0x67452
1c007ea0:	30178793          	addi	a5,a5,769 # 67452301 <__l2_end+0x4b445669>
1c007ea4:	c51c                	sw	a5,8(a0)
	ctx->b = 0xefcdab89;
1c007ea6:	efcdb7b7          	lui	a5,0xefcdb
1c007eaa:	b8978793          	addi	a5,a5,-1143 # efcdab89 <pulp__FC+0xefcdab8a>
1c007eae:	c55c                	sw	a5,12(a0)
	ctx->c = 0x98badcfe;
1c007eb0:	98bae7b7          	lui	a5,0x98bae
1c007eb4:	cfe78793          	addi	a5,a5,-770 # 98badcfe <pulp__FC+0x98badcff>
1c007eb8:	c91c                	sw	a5,16(a0)
	ctx->d = 0x10325476;
1c007eba:	103257b7          	lui	a5,0x10325
1c007ebe:	47678793          	addi	a5,a5,1142 # 10325476 <__l1_end+0x3253f2>
1c007ec2:	c95c                	sw	a5,20(a0)

	ctx->lo = 0;
1c007ec4:	00052023          	sw	zero,0(a0)
	ctx->hi = 0;
1c007ec8:	00052223          	sw	zero,4(a0)
}
1c007ecc:	8082                	ret

1c007ece <MD5_Update>:

void MD5_Update(MD5_CTX *ctx, const void *data, unsigned long size)
{
1c007ece:	1101                	addi	sp,sp,-32
1c007ed0:	cc22                	sw	s0,24(sp)
1c007ed2:	842a                	mv	s0,a0
	MD5_u32plus saved_lo;
	unsigned long used, available;

	saved_lo = ctx->lo;
1c007ed4:	4108                	lw	a0,0(a0)
{
1c007ed6:	ca26                	sw	s1,20(sp)
1c007ed8:	c84a                	sw	s2,16(sp)
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c007eda:	00c507b3          	add	a5,a0,a2
{
1c007ede:	ce06                	sw	ra,28(sp)
1c007ee0:	c64e                	sw	s3,12(sp)
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c007ee2:	c5d7b7b3          	p.bclr	a5,a5,2,29
1c007ee6:	c01c                	sw	a5,0(s0)
{
1c007ee8:	892e                	mv	s2,a1
1c007eea:	84b2                	mv	s1,a2
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c007eec:	00a7f563          	bleu	a0,a5,1c007ef6 <MD5_Update+0x28>
		ctx->hi++;
1c007ef0:	405c                	lw	a5,4(s0)
1c007ef2:	0785                	addi	a5,a5,1
1c007ef4:	c05c                	sw	a5,4(s0)
	ctx->hi += size >> 29;
1c007ef6:	4058                	lw	a4,4(s0)
1c007ef8:	01d4d793          	srli	a5,s1,0x1d

	used = saved_lo & 0x3f;
1c007efc:	f2653533          	p.bclr	a0,a0,25,6
	ctx->hi += size >> 29;
1c007f00:	97ba                	add	a5,a5,a4
1c007f02:	c05c                	sw	a5,4(s0)

	if (used) {
1c007f04:	c129                	beqz	a0,1c007f46 <MD5_Update+0x78>
		available = 64 - used;
1c007f06:	04000993          	li	s3,64
1c007f0a:	40a989b3          	sub	s3,s3,a0
1c007f0e:	0561                	addi	a0,a0,24
1c007f10:	9522                	add	a0,a0,s0

		if (size < available) {
1c007f12:	0134fc63          	bleu	s3,s1,1c007f2a <MD5_Update+0x5c>
			memcpy(&ctx->buffer[used], data, size);
1c007f16:	8626                	mv	a2,s1
1c007f18:	85ca                	mv	a1,s2
		data = body(ctx, data, size & ~(unsigned long)0x3f);
		size &= 0x3f;
	}

	memcpy(ctx->buffer, data, size);
}
1c007f1a:	4462                	lw	s0,24(sp)
1c007f1c:	40f2                	lw	ra,28(sp)
1c007f1e:	44d2                	lw	s1,20(sp)
1c007f20:	4942                	lw	s2,16(sp)
1c007f22:	49b2                	lw	s3,12(sp)
1c007f24:	6105                	addi	sp,sp,32
	memcpy(ctx->buffer, data, size);
1c007f26:	31f0206f          	j	1c00aa44 <memcpy>
		memcpy(&ctx->buffer[used], data, available);
1c007f2a:	85ca                	mv	a1,s2
1c007f2c:	864e                	mv	a2,s3
1c007f2e:	317020ef          	jal	ra,1c00aa44 <memcpy>
		body(ctx, ctx->buffer, 64);
1c007f32:	04000613          	li	a2,64
1c007f36:	01840593          	addi	a1,s0,24
1c007f3a:	8522                	mv	a0,s0
		data = (const unsigned char *)data + available;
1c007f3c:	994e                	add	s2,s2,s3
		size -= available;
1c007f3e:	413484b3          	sub	s1,s1,s3
		body(ctx, ctx->buffer, 64);
1c007f42:	e84ff0ef          	jal	ra,1c0075c6 <body>
	if (size >= 64) {
1c007f46:	03f00793          	li	a5,63
1c007f4a:	0097fb63          	bleu	s1,a5,1c007f60 <MD5_Update+0x92>
		data = body(ctx, data, size & ~(unsigned long)0x3f);
1c007f4e:	ca04b633          	p.bclr	a2,s1,5,0
1c007f52:	85ca                	mv	a1,s2
1c007f54:	8522                	mv	a0,s0
1c007f56:	e70ff0ef          	jal	ra,1c0075c6 <body>
1c007f5a:	892a                	mv	s2,a0
		size &= 0x3f;
1c007f5c:	f264b4b3          	p.bclr	s1,s1,25,6
	memcpy(ctx->buffer, data, size);
1c007f60:	8626                	mv	a2,s1
1c007f62:	85ca                	mv	a1,s2
1c007f64:	01840513          	addi	a0,s0,24
1c007f68:	bf4d                	j	1c007f1a <MD5_Update+0x4c>

1c007f6a <MD5_Final>:
	(dst)[1] = (unsigned char)((src) >> 8); \
	(dst)[2] = (unsigned char)((src) >> 16); \
	(dst)[3] = (unsigned char)((src) >> 24);

void MD5_Final(unsigned char *result, MD5_CTX *ctx)
{
1c007f6a:	1141                	addi	sp,sp,-16
1c007f6c:	c226                	sw	s1,4(sp)
1c007f6e:	84aa                	mv	s1,a0
	unsigned long used, available;

	used = ctx->lo & 0x3f;
1c007f70:	4188                	lw	a0,0(a1)
{
1c007f72:	c422                	sw	s0,8(sp)
1c007f74:	c04a                	sw	s2,0(sp)
	used = ctx->lo & 0x3f;
1c007f76:	f2653533          	p.bclr	a0,a0,25,6

	ctx->buffer[used++] = 0x80;
1c007f7a:	00a58733          	add	a4,a1,a0
{
1c007f7e:	c606                	sw	ra,12(sp)
	ctx->buffer[used++] = 0x80;
1c007f80:	00150793          	addi	a5,a0,1
1c007f84:	f8000693          	li	a3,-128

	available = 64 - used;
1c007f88:	04000613          	li	a2,64
	ctx->buffer[used++] = 0x80;
1c007f8c:	00d70c23          	sb	a3,24(a4)
	available = 64 - used;
1c007f90:	8e1d                	sub	a2,a2,a5

	if (available < 8) {
1c007f92:	471d                	li	a4,7
{
1c007f94:	842e                	mv	s0,a1
1c007f96:	01858913          	addi	s2,a1,24
	if (available < 8) {
1c007f9a:	02c76063          	bltu	a4,a2,1c007fba <MD5_Final+0x50>
		memset(&ctx->buffer[used], 0, available);
1c007f9e:	0565                	addi	a0,a0,25
1c007fa0:	4581                	li	a1,0
1c007fa2:	9522                	add	a0,a0,s0
1c007fa4:	291020ef          	jal	ra,1c00aa34 <memset>
		body(ctx, ctx->buffer, 64);
1c007fa8:	04000613          	li	a2,64
1c007fac:	85ca                	mv	a1,s2
1c007fae:	8522                	mv	a0,s0
1c007fb0:	e16ff0ef          	jal	ra,1c0075c6 <body>
		used = 0;
		available = 64;
1c007fb4:	04000613          	li	a2,64
		used = 0;
1c007fb8:	4781                	li	a5,0
	}

	memset(&ctx->buffer[used], 0, available - 8);
1c007fba:	01878513          	addi	a0,a5,24
1c007fbe:	1661                	addi	a2,a2,-8
1c007fc0:	4581                	li	a1,0
1c007fc2:	9522                	add	a0,a0,s0
1c007fc4:	271020ef          	jal	ra,1c00aa34 <memset>

	ctx->lo <<= 3;
1c007fc8:	401c                	lw	a5,0(s0)
	OUT(&ctx->buffer[56], ctx->lo)
	OUT(&ctx->buffer[60], ctx->hi)

	body(ctx, ctx->buffer, 64);
1c007fca:	85ca                	mv	a1,s2
1c007fcc:	04000613          	li	a2,64
	ctx->lo <<= 3;
1c007fd0:	078e                	slli	a5,a5,0x3
	OUT(&ctx->buffer[56], ctx->lo)
1c007fd2:	873e                	mv	a4,a5
1c007fd4:	04e40823          	sb	a4,80(s0)
1c007fd8:	0087d713          	srli	a4,a5,0x8
	ctx->lo <<= 3;
1c007fdc:	c01c                	sw	a5,0(s0)
	OUT(&ctx->buffer[56], ctx->lo)
1c007fde:	04e408a3          	sb	a4,81(s0)
1c007fe2:	0107d713          	srli	a4,a5,0x10
1c007fe6:	83e1                	srli	a5,a5,0x18
1c007fe8:	04f409a3          	sb	a5,83(s0)
	OUT(&ctx->buffer[60], ctx->hi)
1c007fec:	405c                	lw	a5,4(s0)
	OUT(&ctx->buffer[56], ctx->lo)
1c007fee:	04e40923          	sb	a4,82(s0)
	OUT(&ctx->buffer[60], ctx->hi)
1c007ff2:	873e                	mv	a4,a5
1c007ff4:	04e40a23          	sb	a4,84(s0)
1c007ff8:	0087d713          	srli	a4,a5,0x8
1c007ffc:	04e40aa3          	sb	a4,85(s0)
1c008000:	0107d713          	srli	a4,a5,0x10
1c008004:	83e1                	srli	a5,a5,0x18
1c008006:	04f40ba3          	sb	a5,87(s0)
1c00800a:	04e40b23          	sb	a4,86(s0)
	body(ctx, ctx->buffer, 64);
1c00800e:	8522                	mv	a0,s0
1c008010:	db6ff0ef          	jal	ra,1c0075c6 <body>

	OUT(&result[0], ctx->a)
1c008014:	441c                	lw	a5,8(s0)
	OUT(&result[4], ctx->b)
	OUT(&result[8], ctx->c)
	OUT(&result[12], ctx->d)

	memset(ctx, 0, sizeof(*ctx));
1c008016:	8522                	mv	a0,s0
1c008018:	09800613          	li	a2,152
	OUT(&result[0], ctx->a)
1c00801c:	00f48023          	sb	a5,0(s1)
1c008020:	441c                	lw	a5,8(s0)
	memset(ctx, 0, sizeof(*ctx));
1c008022:	4581                	li	a1,0
	OUT(&result[0], ctx->a)
1c008024:	83a1                	srli	a5,a5,0x8
1c008026:	00f480a3          	sb	a5,1(s1)
1c00802a:	00a45783          	lhu	a5,10(s0)
1c00802e:	00f48123          	sb	a5,2(s1)
1c008032:	00b44783          	lbu	a5,11(s0)
1c008036:	00f481a3          	sb	a5,3(s1)
	OUT(&result[4], ctx->b)
1c00803a:	445c                	lw	a5,12(s0)
1c00803c:	00f48223          	sb	a5,4(s1)
1c008040:	445c                	lw	a5,12(s0)
1c008042:	83a1                	srli	a5,a5,0x8
1c008044:	00f482a3          	sb	a5,5(s1)
1c008048:	00e45783          	lhu	a5,14(s0)
1c00804c:	00f48323          	sb	a5,6(s1)
1c008050:	00f44783          	lbu	a5,15(s0)
1c008054:	00f483a3          	sb	a5,7(s1)
	OUT(&result[8], ctx->c)
1c008058:	481c                	lw	a5,16(s0)
1c00805a:	00f48423          	sb	a5,8(s1)
1c00805e:	481c                	lw	a5,16(s0)
1c008060:	83a1                	srli	a5,a5,0x8
1c008062:	00f484a3          	sb	a5,9(s1)
1c008066:	01245783          	lhu	a5,18(s0)
1c00806a:	00f48523          	sb	a5,10(s1)
1c00806e:	01344783          	lbu	a5,19(s0)
1c008072:	00f485a3          	sb	a5,11(s1)
	OUT(&result[12], ctx->d)
1c008076:	485c                	lw	a5,20(s0)
1c008078:	00f48623          	sb	a5,12(s1)
1c00807c:	485c                	lw	a5,20(s0)
1c00807e:	83a1                	srli	a5,a5,0x8
1c008080:	00f486a3          	sb	a5,13(s1)
1c008084:	01645783          	lhu	a5,22(s0)
1c008088:	00f48723          	sb	a5,14(s1)
1c00808c:	01744783          	lbu	a5,23(s0)
1c008090:	00f487a3          	sb	a5,15(s1)
}
1c008094:	40b2                	lw	ra,12(sp)
1c008096:	4422                	lw	s0,8(sp)
1c008098:	4492                	lw	s1,4(sp)
1c00809a:	4902                	lw	s2,0(sp)
1c00809c:	0141                	addi	sp,sp,16
	memset(ctx, 0, sizeof(*ctx));
1c00809e:	1970206f          	j	1c00aa34 <memset>

1c0080a2 <__internal_semihost>:
    return __internal_semihost(SEMIHOSTING_SYS_SEEK, (long) args);
}

int semihost_flen(int fd)
{
    return __internal_semihost(SEMIHOSTING_SYS_FLEN, (long) fd);
1c0080a2:	01f01013          	slli	zero,zero,0x1f
1c0080a6:	00100073          	ebreak
1c0080aa:	40705013          	srai	zero,zero,0x7
1c0080ae:	8082                	ret

1c0080b0 <semihost_write0>:
1c0080b0:	85aa                	mv	a1,a0
1c0080b2:	4511                	li	a0,4
1c0080b4:	b7fd                	j	1c0080a2 <__internal_semihost>

1c0080b6 <semihost_open>:
1c0080b6:	7139                	addi	sp,sp,-64
1c0080b8:	de06                	sw	ra,60(sp)
1c0080ba:	dc22                	sw	s0,56(sp)
1c0080bc:	c62e                	sw	a1,12(sp)
1c0080be:	842a                	mv	s0,a0
1c0080c0:	15f020ef          	jal	ra,1c00aa1e <strlen>
1c0080c4:	45b2                	lw	a1,12(sp)
1c0080c6:	083c                	addi	a5,sp,24
1c0080c8:	c380                	sw	s0,0(a5)
1c0080ca:	087c                	addi	a5,sp,28
1c0080cc:	c38c                	sw	a1,0(a5)
1c0080ce:	101c                	addi	a5,sp,32
1c0080d0:	c388                	sw	a0,0(a5)
1c0080d2:	082c                	addi	a1,sp,24
1c0080d4:	4505                	li	a0,1
1c0080d6:	37f1                	jal	1c0080a2 <__internal_semihost>
1c0080d8:	50f2                	lw	ra,60(sp)
1c0080da:	5462                	lw	s0,56(sp)
1c0080dc:	6121                	addi	sp,sp,64
1c0080de:	8082                	ret

1c0080e0 <semihost_close>:
1c0080e0:	85aa                	mv	a1,a0
1c0080e2:	4509                	li	a0,2
1c0080e4:	bf7d                	j	1c0080a2 <__internal_semihost>

1c0080e6 <semihost_read>:
1c0080e6:	7179                	addi	sp,sp,-48
1c0080e8:	d606                	sw	ra,44(sp)
1c0080ea:	003c                	addi	a5,sp,8
1c0080ec:	c388                	sw	a0,0(a5)
1c0080ee:	007c                	addi	a5,sp,12
1c0080f0:	c38c                	sw	a1,0(a5)
1c0080f2:	4519                	li	a0,6
1c0080f4:	081c                	addi	a5,sp,16
1c0080f6:	002c                	addi	a1,sp,8
1c0080f8:	c390                	sw	a2,0(a5)
1c0080fa:	3765                	jal	1c0080a2 <__internal_semihost>
1c0080fc:	50b2                	lw	ra,44(sp)
1c0080fe:	6145                	addi	sp,sp,48
1c008100:	8082                	ret

1c008102 <semihost_write>:
1c008102:	7179                	addi	sp,sp,-48
1c008104:	d606                	sw	ra,44(sp)
1c008106:	003c                	addi	a5,sp,8
1c008108:	c388                	sw	a0,0(a5)
1c00810a:	007c                	addi	a5,sp,12
1c00810c:	c38c                	sw	a1,0(a5)
1c00810e:	4515                	li	a0,5
1c008110:	081c                	addi	a5,sp,16
1c008112:	002c                	addi	a1,sp,8
1c008114:	c390                	sw	a2,0(a5)
1c008116:	3771                	jal	1c0080a2 <__internal_semihost>
1c008118:	50b2                	lw	ra,44(sp)
1c00811a:	6145                	addi	sp,sp,48
1c00811c:	8082                	ret

1c00811e <semihost_seek>:
1c00811e:	1101                	addi	sp,sp,-32
1c008120:	c42a                	sw	a0,8(sp)
1c008122:	c62e                	sw	a1,12(sp)
1c008124:	4529                	li	a0,10
1c008126:	002c                	addi	a1,sp,8
1c008128:	ce06                	sw	ra,28(sp)
1c00812a:	3fa5                	jal	1c0080a2 <__internal_semihost>
1c00812c:	40f2                	lw	ra,28(sp)
1c00812e:	6105                	addi	sp,sp,32
1c008130:	8082                	ret

1c008132 <semihost_exit>:
}

int semihost_exit(int code)
{
    return __internal_semihost(SEMIHOSTING_SYS_EXIT, (long) code);
1c008132:	85aa                	mv	a1,a0
1c008134:	4561                	li	a0,24
1c008136:	b7b5                	j	1c0080a2 <__internal_semihost>

1c008138 <__bsp_init_pads>:
  conf->ram_start = CONFIG_HYPERRAM_START;
  conf->ram_size = CONFIG_HYPERRAM_SIZE;
  conf->skip_pads_config = 0;
  conf->hyper_itf = CONFIG_HYPERRAM_HYPER_ITF;
  conf->hyper_cs = CONFIG_HYPERRAM_HYPER_CS;
}
1c008138:	1c00d7b7          	lui	a5,0x1c00d
1c00813c:	ba078793          	addi	a5,a5,-1120 # 1c00cba0 <__bsp_init_pads_done>
1c008140:	4398                	lw	a4,0(a5)
1c008142:	eb05                	bnez	a4,1c008172 <__bsp_init_pads+0x3a>
1c008144:	1101                	addi	sp,sp,-32
1c008146:	ce06                	sw	ra,28(sp)
1c008148:	4705                	li	a4,1
1c00814a:	c398                	sw	a4,0(a5)
1c00814c:	000557b7          	lui	a5,0x55
1c008150:	50078793          	addi	a5,a5,1280 # 55500 <__L1Cl+0x45500>
1c008154:	c03e                	sw	a5,0(sp)
1c008156:	0f0007b7          	lui	a5,0xf000
1c00815a:	c23e                	sw	a5,4(sp)
1c00815c:	004007b7          	lui	a5,0x400
1c008160:	17fd                	addi	a5,a5,-1
1c008162:	850a                	mv	a0,sp
1c008164:	c43e                	sw	a5,8(sp)
1c008166:	c602                	sw	zero,12(sp)
1c008168:	271010ef          	jal	ra,1c009bd8 <pi_pad_init>
1c00816c:	40f2                	lw	ra,28(sp)
1c00816e:	6105                	addi	sp,sp,32
1c008170:	8082                	ret
1c008172:	8082                	ret

1c008174 <bsp_hyperflash_conf_init>:


void bsp_hyperflash_conf_init(struct pi_hyperflash_conf *conf)
{
  conf->hyper_itf = CONFIG_HYPERFLASH_HYPER_ITF;
  conf->hyper_cs = CONFIG_HYPERFLASH_HYPER_CS;
1c008174:	4785                	li	a5,1
  conf->hyper_itf = CONFIG_HYPERFLASH_HYPER_ITF;
1c008176:	00052223          	sw	zero,4(a0)
  conf->hyper_cs = CONFIG_HYPERFLASH_HYPER_CS;
1c00817a:	c51c                	sw	a5,8(a0)
}
1c00817c:	8082                	ret

1c00817e <bsp_hyperflash_open>:
1c00817e:	1141                	addi	sp,sp,-16
1c008180:	c606                	sw	ra,12(sp)
1c008182:	3f5d                	jal	1c008138 <__bsp_init_pads>
1c008184:	40b2                	lw	ra,12(sp)
1c008186:	4501                	li	a0,0
1c008188:	0141                	addi	sp,sp,16
1c00818a:	8082                	ret

1c00818c <cluster_start>:
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00818c:	002047b7          	lui	a5,0x204
1c008190:	00070737          	lui	a4,0x70
1c008194:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c008198:	0ff00713          	li	a4,255
1c00819c:	002046b7          	lui	a3,0x204
1c0081a0:	08e6a223          	sw	a4,132(a3) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0081a4:	20078793          	addi	a5,a5,512
1c0081a8:	00e7a023          	sw	a4,0(a5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0081ac:	00e7a623          	sw	a4,12(a5)
    __rt_team_config(rt_nb_active_pe());
  }

#endif

}
1c0081b0:	8082                	ret

1c0081b2 <__rt_init>:
{
1c0081b2:	1101                	addi	sp,sp,-32
static inline void hal_pmu_bypass_set(unsigned int Value) {
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
}

static inline unsigned int hal_pmu_bypass_get() {
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET);
1c0081b4:	1a104737          	lui	a4,0x1a104
1c0081b8:	ce06                	sw	ra,28(sp)
1c0081ba:	cc22                	sw	s0,24(sp)
1c0081bc:	ca26                	sw	s1,20(sp)
1c0081be:	07072783          	lw	a5,112(a4) # 1a104070 <__l1_end+0xa103fec>
  hal_pmu_bypass_set (ARCHI_REG_FIELD_SET (hal_pmu_bypass_get (), 1, 11, 1) );
1c0081c2:	c0b7c7b3          	p.bset	a5,a5,0,11
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
1c0081c6:	06f72823          	sw	a5,112(a4)
  __rt_bridge_set_available();
1c0081ca:	2b49                	jal	1c00875c <__rt_bridge_set_available>
  cpu_stack_check_enable((int)__rt_fc_stack, (int)__rt_fc_stack + __rt_fc_stack_size);
1c0081cc:	1b0007b7          	lui	a5,0x1b000
1c0081d0:	39878793          	addi	a5,a5,920 # 1b000398 <__rt_fc_stack>
 * Stack checking
 */

static inline void cpu_stack_check_enable(unsigned int base, unsigned int end)
{
  asm volatile ("csrwi 0x7D0, 0" :: );
1c0081d4:	7d005073          	csrwi	0x7d0,0
  asm volatile ("csrw  0x7D1, %0" :: "r" (base));
1c0081d8:	7d179073          	csrw	0x7d1,a5
1c0081dc:	1c00d737          	lui	a4,0x1c00d
1c0081e0:	83072703          	lw	a4,-2000(a4) # 1c00c830 <__rt_fc_stack_size>
1c0081e4:	97ba                	add	a5,a5,a4
  asm volatile ("csrw  0x7D2, %0" :: "r" (end));
1c0081e6:	7d279073          	csrw	0x7d2,a5
  asm volatile ("csrwi 0x7D0, 1" :: );
1c0081ea:	7d00d073          	csrwi	0x7d0,1
  __rt_irq_init();
1c0081ee:	2add                	jal	1c0083e4 <__rt_irq_init>

#include "archi/pulp.h"
#include "archi/soc_eu/soc_eu_v1.h"

static inline void soc_eu_eventMask_set(unsigned int reg, unsigned int value) {
  ARCHI_WRITE(ARCHI_SOC_EU_ADDR, reg, value);
1c0081f0:	54fd                	li	s1,-1
1c0081f2:	1a1067b7          	lui	a5,0x1a106
1c0081f6:	0097a223          	sw	s1,4(a5) # 1a106004 <__l1_end+0xa105f80>
1c0081fa:	0097a423          	sw	s1,8(a5)
  rt_irq_set_handler(ARCHI_FC_EVT_SOC_EVT, __rt_fc_socevents_handler);
1c0081fe:	1c0005b7          	lui	a1,0x1c000
1c008202:	3f458593          	addi	a1,a1,1012 # 1c0003f4 <__rt_fc_socevents_handler>
1c008206:	456d                	li	a0,27
1c008208:	2a3d                	jal	1c008346 <rt_irq_set_handler>
  ARCHI_WRITE(base, EU_CORE_MASK_IRQ_OR, irqMask);
1c00820a:	080007b7          	lui	a5,0x8000
1c00820e:	00204737          	lui	a4,0x204
1c008212:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008216:	00f72423          	sw	a5,8(a4)
  __rt_pmu_init();
1c00821a:	29a010ef          	jal	ra,1c0094b4 <__rt_pmu_init>
  __rt_freq_init();
1c00821e:	6e5000ef          	jal	ra,1c009102 <__rt_freq_init>
1c008222:	002017b7          	lui	a5,0x201
1c008226:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_ICACHE_CTRL_OFFSET, 0xFFFFFFFF);
}

static inline void icache_enable(unsigned int base)
{
  pulp_write32(base, 0xFFFFFFFF);
1c00822a:	c384                	sw	s1,0(a5)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00822c:	01402473          	csrr	s0,uhartid
1c008230:	1c00c4b7          	lui	s1,0x1c00c
  return (hart_id >> 5) & 0x3f;
1c008234:	8415                	srai	s0,s0,0x5
  __rt_utils_init();
1c008236:	24ed                	jal	1c008520 <__rt_utils_init>
1c008238:	f2643433          	p.bclr	s0,s0,25,6
  __rt_allocs_init();
1c00823c:	1a7000ef          	jal	ra,1c008be2 <__rt_allocs_init>
1c008240:	e5048493          	addi	s1,s1,-432 # 1c00be50 <ctor_list+0x4>
  __rt_event_sched_init();
1c008244:	029000ef          	jal	ra,1c008a6c <__rt_event_sched_init>
  __rt_padframe_init();
1c008248:	1e2020ef          	jal	ra,1c00a42a <__rt_padframe_init>
  for(fpp = ctor_list+1;  *fpp != 0;  ++fpp) {
1c00824c:	0044a78b          	p.lw	a5,4(s1!)
1c008250:	ebad                	bnez	a5,1c0082c2 <__rt_init+0x110>
  return __builtin_pulp_read_then_spr_bit_set(reg, val);
1c008252:	300467f3          	csrrsi	a5,mstatus,8
  if (__rt_cbsys_exec(RT_CBSYS_START)) goto error;
1c008256:	4501                	li	a0,0
1c008258:	2c61                	jal	1c0084f0 <__rt_cbsys_exec>
1c00825a:	e539                	bnez	a0,1c0082a8 <__rt_init+0xf6>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00825c:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c008260:	8795                	srai	a5,a5,0x5
1c008262:	f267b7b3          	p.bclr	a5,a5,25,6
        exit(retval);
      }
    }
    else
      return cluster_master_start(NULL);
  } else if (!rt_is_fc()) {
1c008266:	02000713          	li	a4,32
1c00826a:	0ae78363          	beq	a5,a4,1c008310 <__rt_init+0x15e>
    rt_cluster_mount(1, cid, 0, NULL);
1c00826e:	4681                	li	a3,0
1c008270:	4601                	li	a2,0
1c008272:	4581                	li	a1,0
1c008274:	4505                	li	a0,1
  if (rt_cluster_id() != cid)
1c008276:	cba1                	beqz	a5,1c0082c6 <__rt_init+0x114>
    rt_cluster_mount(1, cid, 0, NULL);
1c008278:	78c010ef          	jal	ra,1c009a04 <rt_cluster_mount>
    void *stacks = rt_alloc(RT_ALLOC_CL_DATA+cid, 0x800*rt_nb_active_pe());
1c00827c:	6591                	lui	a1,0x4
1c00827e:	4509                	li	a0,2
1c008280:	0b7000ef          	jal	ra,1c008b36 <rt_alloc>
1c008284:	872a                	mv	a4,a0
    if (stacks == NULL) return -1;
1c008286:	c10d                	beqz	a0,1c0082a8 <__rt_init+0xf6>
    if (rt_cluster_call(NULL, cid, cluster_start, NULL, stacks, 0x800, 0x800, rt_nb_active_pe(), event)) return -1;
1c008288:	6805                	lui	a6,0x1
1c00828a:	80080813          	addi	a6,a6,-2048 # 800 <__rt_stack_size>
1c00828e:	1c008637          	lui	a2,0x1c008
1c008292:	c002                	sw	zero,0(sp)
1c008294:	48a1                	li	a7,8
1c008296:	87c2                	mv	a5,a6
1c008298:	4681                	li	a3,0
1c00829a:	18c60613          	addi	a2,a2,396 # 1c00818c <cluster_start>
1c00829e:	4581                	li	a1,0
1c0082a0:	4501                	li	a0,0
1c0082a2:	6d2010ef          	jal	ra,1c009974 <rt_cluster_call>
1c0082a6:	c52d                	beqz	a0,1c008310 <__rt_init+0x15e>
  rt_fatal("There was an error during runtime initialization\n");
1c0082a8:	1c00c537          	lui	a0,0x1c00c
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0082ac:	01402673          	csrr	a2,uhartid
1c0082b0:	85a2                	mv	a1,s0
1c0082b2:	f4563633          	p.bclr	a2,a2,26,5
1c0082b6:	3f850513          	addi	a0,a0,1016 # 1c00c3f8 <IntegerExpLUT+0x18>
1c0082ba:	2b7020ef          	jal	ra,1c00ad70 <printf>
1c0082be:	237020ef          	jal	ra,1c00acf4 <abort>
    (**fpp)();
1c0082c2:	9782                	jalr	a5
1c0082c4:	b761                	j	1c00824c <__rt_init+0x9a>
    rt_cluster_mount(1, cid, 0, NULL);
1c0082c6:	73e010ef          	jal	ra,1c009a04 <rt_cluster_mount>
    void *stacks = rt_alloc(RT_ALLOC_CL_DATA+cid, 0x800*(rt_nb_active_pe()-1));
1c0082ca:	6591                	lui	a1,0x4
1c0082cc:	80058593          	addi	a1,a1,-2048 # 3800 <__rt_stack_size+0x3000>
1c0082d0:	4509                	li	a0,2
1c0082d2:	065000ef          	jal	ra,1c008b36 <rt_alloc>
    if (stacks == NULL) return -1;
1c0082d6:	d969                	beqz	a0,1c0082a8 <__rt_init+0xf6>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0082d8:	00204737          	lui	a4,0x204
1c0082dc:	0ff00793          	li	a5,255
1c0082e0:	08f72223          	sw	a5,132(a4) # 204084 <__L2+0x184084>
    eu_dispatch_push((unsigned int)__rt_set_slave_stack | 1);
1c0082e4:	1c00c7b7          	lui	a5,0x1c00c
1c0082e8:	d9478793          	addi	a5,a5,-620 # 1c00bd94 <__rt_set_slave_stack>
1c0082ec:	c007c7b3          	p.bset	a5,a5,0,0
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0082f0:	08f72023          	sw	a5,128(a4)
1c0082f4:	6785                	lui	a5,0x1
1c0082f6:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c0082fa:	08f72023          	sw	a5,128(a4)
1c0082fe:	08a72023          	sw	a0,128(a4)
}
1c008302:	4462                	lw	s0,24(sp)
1c008304:	40f2                	lw	ra,28(sp)
1c008306:	44d2                	lw	s1,20(sp)
    cluster_start(NULL);
1c008308:	4501                	li	a0,0
}
1c00830a:	6105                	addi	sp,sp,32
    cluster_start(NULL);
1c00830c:	e81ff06f          	j	1c00818c <cluster_start>
}
1c008310:	40f2                	lw	ra,28(sp)
1c008312:	4462                	lw	s0,24(sp)
1c008314:	44d2                	lw	s1,20(sp)
1c008316:	6105                	addi	sp,sp,32
1c008318:	8082                	ret

1c00831a <__rt_deinit>:
{
1c00831a:	1141                	addi	sp,sp,-16
1c00831c:	c606                	sw	ra,12(sp)
1c00831e:	c422                	sw	s0,8(sp)
}

static inline void cpu_stack_check_disable()
{
  asm volatile ("csrwi 0x7D0, 0" :: );
1c008320:	7d005073          	csrwi	0x7d0,0
  __rt_cbsys_exec(RT_CBSYS_STOP);
1c008324:	4505                	li	a0,1
1c008326:	1c00c437          	lui	s0,0x1c00c
1c00832a:	22d9                	jal	1c0084f0 <__rt_cbsys_exec>
1c00832c:	e8c40413          	addi	s0,s0,-372 # 1c00be8c <dtor_list+0x4>
  for(fpp = dtor_list + 1;  *fpp != 0;  ++fpp) (**fpp)();
1c008330:	0044278b          	p.lw	a5,4(s0!)
1c008334:	e789                	bnez	a5,1c00833e <__rt_deinit+0x24>
}
1c008336:	40b2                	lw	ra,12(sp)
1c008338:	4422                	lw	s0,8(sp)
1c00833a:	0141                	addi	sp,sp,16
1c00833c:	8082                	ret
  for(fpp = dtor_list + 1;  *fpp != 0;  ++fpp) (**fpp)();
1c00833e:	9782                	jalr	a5
1c008340:	bfc5                	j	1c008330 <__rt_deinit+0x16>

1c008342 <pi_open_from_conf>:
#endif


void pi_open_from_conf(struct pi_device *device, void *conf)
{
  device->config = conf;
1c008342:	c14c                	sw	a1,4(a0)
}
1c008344:	8082                	ret

1c008346 <rt_irq_set_handler>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c008346:	014027f3          	csrr	a5,uhartid
  return hal_spr_read(0x305) & ~1;
#else
#if defined(APB_SOC_VERSION) && APB_SOC_VERSION == 1
  return ARCHI_L2_ADDR;
#else
  if (rt_is_fc()) {
1c00834a:	02000713          	li	a4,32
  return (hart_id >> 5) & 0x3f;
1c00834e:	ca5797b3          	p.extractu	a5,a5,5,5
1c008352:	02e79c63          	bne	a5,a4,1c00838a <rt_irq_set_handler+0x44>
#if defined(ARCHI_CORE_HAS_SECURITY) && !defined(ARCHI_CORE_HAS_1_10)
    return __builtin_pulp_spr_read(SR_MTVEC);
1c008356:	30502773          	csrr	a4,mtvec
  irq -= 16;
#endif

  unsigned int base = __rt_get_fc_vector_base();

  unsigned int jmpAddr = base + 0x4 * irq;
1c00835a:	050a                	slli	a0,a0,0x2
  unsigned int S = ((unsigned int) ItHandler - (ItBaseAddr+ItIndex*4));
1c00835c:	8d89                	sub	a1,a1,a0
1c00835e:	8d99                	sub	a1,a1,a4
  R = __BITINSERT(R, __BITEXTRACT(S,  1, 20),  1, 31);
1c008360:	c14586b3          	p.extract	a3,a1,0,20
1c008364:	06f00793          	li	a5,111
1c008368:	c1f6a7b3          	p.insert	a5,a3,0,31
  R = __BITINSERT(R, __BITEXTRACT(S, 10,  1), 10, 21);
1c00836c:	d21586b3          	p.extract	a3,a1,9,1
1c008370:	d356a7b3          	p.insert	a5,a3,9,21
  R = __BITINSERT(R, __BITEXTRACT(S,  1, 11),  1, 20);
1c008374:	c0b586b3          	p.extract	a3,a1,0,11
1c008378:	c146a7b3          	p.insert	a5,a3,0,20
  R = __BITINSERT(R, __BITEXTRACT(S,  8, 12),  8, 12);
1c00837c:	cec585b3          	p.extract	a1,a1,7,12
1c008380:	cec5a7b3          	p.insert	a5,a1,7,12

  *(volatile unsigned int *)jmpAddr = __rt_get_itvec(base, irq, (unsigned int)handler);
1c008384:	00f56723          	p.sw	a5,a4(a0)

#if defined(PLP_FC_HAS_ICACHE)
  flush_all_icache_banks_common(plp_icache_fc_base());
#endif

}
1c008388:	8082                	ret
static inline void plp_ctrl_core_bootaddr_set_remote(int cid, int core, unsigned int bootAddr) {
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
}

static inline unsigned int plp_ctrl_bootaddr_get() {
  return pulp_read32(ARCHI_CLUSTER_CTRL_ADDR + 0x40);
1c00838a:	002007b7          	lui	a5,0x200
1c00838e:	43b8                	lw	a4,64(a5)
1c008390:	b7e9                	j	1c00835a <rt_irq_set_handler+0x14>

1c008392 <illegal_insn_handler_c>:
#include <stdlib.h>

void __attribute__((weak)) illegal_insn_handler_c()
{

}
1c008392:	8082                	ret

1c008394 <__rt_handle_illegal_instr>:


extern RT_FC_GLOBAL_DATA unsigned int __rt_debug_config;
extern RT_FC_GLOBAL_DATA unsigned int __rt_debug_config_trace;

static inline unsigned int rt_debug_config() { return __rt_debug_config; }
1c008394:	1b0017b7          	lui	a5,0x1b001

static inline unsigned int rt_debug_config_trace() { return __rt_debug_config_trace; }

static inline int rt_debug_config_warnings() {
  return ARCHI_REG_FIELD_GET(rt_debug_config(), RT_DEBUG_WARNING_BIT, 1);
1c008398:	b9c7a703          	lw	a4,-1124(a5) # 1b000b9c <__rt_debug_config>

void __rt_handle_illegal_instr()
{
1c00839c:	1141                	addi	sp,sp,-16
1c00839e:	c422                	sw	s0,8(sp)
1c0083a0:	c606                	sw	ra,12(sp)
1c0083a2:	fc173733          	p.bclr	a4,a4,30,1
1c0083a6:	843e                	mv	s0,a5
#ifdef __riscv__
  unsigned int mepc = hal_mepc_read();
  rt_warning("Reached illegal instruction (PC: 0x%x, opcode: 0x%x\n", mepc, *(int *)mepc);
1c0083a8:	c315                	beqz	a4,1c0083cc <__rt_handle_illegal_instr+0x38>
1c0083aa:	341026f3          	csrr	a3,mepc
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0083ae:	01402673          	csrr	a2,uhartid
1c0083b2:	1c00c537          	lui	a0,0x1c00c
1c0083b6:	4298                	lw	a4,0(a3)
  return (hart_id >> 5) & 0x3f;
1c0083b8:	40565593          	srai	a1,a2,0x5
1c0083bc:	f265b5b3          	p.bclr	a1,a1,25,6
1c0083c0:	f4563633          	p.bclr	a2,a2,26,5
1c0083c4:	45050513          	addi	a0,a0,1104 # 1c00c450 <IntegerExpLUT+0x70>
1c0083c8:	1a9020ef          	jal	ra,1c00ad70 <printf>
}

static inline int rt_debug_config_werror() {
  return ARCHI_REG_FIELD_GET(rt_debug_config(), RT_DEBUG_WERROR_BIT, 1);
1c0083cc:	b9c42783          	lw	a5,-1124(s0)
1c0083d0:	c01797b3          	p.extractu	a5,a5,0,1
1c0083d4:	c399                	beqz	a5,1c0083da <__rt_handle_illegal_instr+0x46>
1c0083d6:	11f020ef          	jal	ra,1c00acf4 <abort>
  illegal_insn_handler_c();
#endif
}
1c0083da:	4422                	lw	s0,8(sp)
1c0083dc:	40b2                	lw	ra,12(sp)
1c0083de:	0141                	addi	sp,sp,16
  illegal_insn_handler_c();
1c0083e0:	fb3ff06f          	j	1c008392 <illegal_insn_handler_c>

1c0083e4 <__rt_irq_init>:
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_IRQ_AND, irqMask);
1c0083e4:	57fd                	li	a5,-1
1c0083e6:	00204737          	lui	a4,0x204
1c0083ea:	00f72823          	sw	a5,16(a4) # 204010 <__L2+0x184010>
  else eu_irq_maskClr(mask);
#elif defined(ITC_VERSION)
  hal_itc_enable_clr(mask);
#elif defined(EU_VERSION)
  eu_irq_maskClr(mask);
  if (hal_is_fc()) eu_evt_maskClr(mask);
1c0083ee:	02000713          	li	a4,32
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0083f2:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c0083f6:	ca5797b3          	p.extractu	a5,a5,5,5
1c0083fa:	00e79763          	bne	a5,a4,1c008408 <__rt_irq_init+0x24>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0083fe:	57fd                	li	a5,-1
1c008400:	00204737          	lui	a4,0x204
1c008404:	00f72223          	sw	a5,4(a4) # 204004 <__L2+0x184004>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c008408:	014027f3          	csrr	a5,uhartid
#if defined(ARCHI_CORE_RISCV_ITC)
  hal_spr_write(0x305, base);
#else
#if defined(APB_SOC_VERSION) && APB_SOC_VERSION == 1
#else
  if (rt_is_fc()) {
1c00840c:	02000713          	li	a4,32
  return (hart_id >> 5) & 0x3f;
1c008410:	ca5797b3          	p.extractu	a5,a5,5,5
1c008414:	00e79963          	bne	a5,a4,1c008426 <__rt_irq_init+0x42>
#if defined(ARCHI_CORE_HAS_SECURITY)
    __builtin_pulp_spr_write(SR_MTVEC, base);
1c008418:	1c0007b7          	lui	a5,0x1c000
1c00841c:	00078793          	mv	a5,a5
1c008420:	30579073          	csrw	mtvec,a5
1c008424:	8082                	ret
  pulp_write32(ARCHI_CLUSTER_CTRL_ADDR + 0x40, bootAddr);
1c008426:	1c0007b7          	lui	a5,0x1c000
1c00842a:	00200737          	lui	a4,0x200
1c00842e:	00078793          	mv	a5,a5
1c008432:	c33c                	sw	a5,64(a4)
  rt_irq_mask_clr(-1);

  // As the FC code may not be at the beginning of the L2, set the
  // vector base to get proper interrupt handlers
  __rt_set_fc_vector_base((int)rt_irq_vector_base());
}
1c008434:	8082                	ret

1c008436 <__rt_fc_cluster_lock_req>:
      rt_free(RT_ALLOC_FC_RET_DATA, (void *)cbsys, sizeof(rt_cbsys_t));     
      return;
    }

    prev = cbsys;
    cbsys = cbsys->next;
1c008436:	300476f3          	csrrci	a3,mstatus,8
1c00843a:	08a54703          	lbu	a4,138(a0)
1c00843e:	411c                	lw	a5,0(a0)
1c008440:	c321                	beqz	a4,1c008480 <__rt_fc_cluster_lock_req+0x4a>
1c008442:	4398                	lw	a4,0(a5)
1c008444:	cf09                	beqz	a4,1c00845e <__rt_fc_cluster_lock_req+0x28>
1c008446:	43d8                	lw	a4,4(a5)
1c008448:	cb09                	beqz	a4,1c00845a <__rt_fc_cluster_lock_req+0x24>
1c00844a:	4798                	lw	a4,8(a5)
1c00844c:	c348                	sw	a0,4(a4)
1c00844e:	c788                	sw	a0,8(a5)
1c008450:	00052223          	sw	zero,4(a0)
1c008454:	30069073          	csrw	mstatus,a3
1c008458:	8082                	ret
1c00845a:	c3c8                	sw	a0,4(a5)
1c00845c:	bfcd                	j	1c00844e <__rt_fc_cluster_lock_req+0x18>
1c00845e:	4705                	li	a4,1
1c008460:	08e50423          	sb	a4,136(a0)
1c008464:	4705                	li	a4,1
1c008466:	c398                	sw	a4,0(a5)
1c008468:	08954783          	lbu	a5,137(a0)
1c00846c:	00201737          	lui	a4,0x201
1c008470:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c008474:	04078793          	addi	a5,a5,64 # 1c000040 <__irq_vector_base+0x40>
1c008478:	07da                	slli	a5,a5,0x16
1c00847a:	0007e723          	p.sw	zero,a4(a5)
1c00847e:	bfd9                	j	1c008454 <__rt_fc_cluster_lock_req+0x1e>
1c008480:	43d8                	lw	a4,4(a5)
1c008482:	e719                	bnez	a4,1c008490 <__rt_fc_cluster_lock_req+0x5a>
1c008484:	0007a023          	sw	zero,0(a5)
1c008488:	4785                	li	a5,1
1c00848a:	08f50423          	sb	a5,136(a0)
1c00848e:	bfe9                	j	1c008468 <__rt_fc_cluster_lock_req+0x32>
1c008490:	4350                	lw	a2,4(a4)
1c008492:	c3d0                	sw	a2,4(a5)
1c008494:	4785                	li	a5,1
1c008496:	08f70423          	sb	a5,136(a4)
1c00849a:	08974783          	lbu	a5,137(a4)
1c00849e:	00201737          	lui	a4,0x201
1c0084a2:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c0084a6:	04078793          	addi	a5,a5,64
1c0084aa:	07da                	slli	a5,a5,0x16
1c0084ac:	0007e723          	p.sw	zero,a4(a5)
1c0084b0:	bfe1                	j	1c008488 <__rt_fc_cluster_lock_req+0x52>

1c0084b2 <__rt_cbsys_add>:
  }
}

int __rt_cbsys_add(__rt_cbsys_e cbsys_id, int (*cb)(void *), void *cb_arg)
{
1c0084b2:	1101                	addi	sp,sp,-32
1c0084b4:	cc22                	sw	s0,24(sp)
1c0084b6:	ca26                	sw	s1,20(sp)
1c0084b8:	842a                	mv	s0,a0
1c0084ba:	84ae                	mv	s1,a1
  rt_cbsys_t *cbsys = (rt_cbsys_t *)rt_alloc(RT_ALLOC_FC_RET_DATA, sizeof(rt_cbsys_t));
1c0084bc:	4501                	li	a0,0
1c0084be:	45b1                	li	a1,12
1c0084c0:	c632                	sw	a2,12(sp)
{
1c0084c2:	ce06                	sw	ra,28(sp)
  rt_cbsys_t *cbsys = (rt_cbsys_t *)rt_alloc(RT_ALLOC_FC_RET_DATA, sizeof(rt_cbsys_t));
1c0084c4:	2d8d                	jal	1c008b36 <rt_alloc>
  if (cbsys == NULL) return -1;
1c0084c6:	4632                	lw	a2,12(sp)
1c0084c8:	c115                	beqz	a0,1c0084ec <__rt_cbsys_add+0x3a>

  cbsys->callback = cb;
  cbsys->arg = cb_arg;
  cbsys->next = cbsys_first[cbsys_id];
1c0084ca:	1b0017b7          	lui	a5,0x1b001
1c0084ce:	040a                	slli	s0,s0,0x2
1c0084d0:	ba078793          	addi	a5,a5,-1120 # 1b000ba0 <cbsys_first>
1c0084d4:	97a2                	add	a5,a5,s0
1c0084d6:	4398                	lw	a4,0(a5)
  cbsys->callback = cb;
1c0084d8:	c104                	sw	s1,0(a0)
  cbsys->arg = cb_arg;
1c0084da:	c150                	sw	a2,4(a0)
  cbsys->next = cbsys_first[cbsys_id];
1c0084dc:	c518                	sw	a4,8(a0)
  cbsys_first[cbsys_id] = cbsys;
1c0084de:	c388                	sw	a0,0(a5)

  return 0;
1c0084e0:	4501                	li	a0,0
}
1c0084e2:	40f2                	lw	ra,28(sp)
1c0084e4:	4462                	lw	s0,24(sp)
1c0084e6:	44d2                	lw	s1,20(sp)
1c0084e8:	6105                	addi	sp,sp,32
1c0084ea:	8082                	ret
  if (cbsys == NULL) return -1;
1c0084ec:	557d                	li	a0,-1
1c0084ee:	bfd5                	j	1c0084e2 <__rt_cbsys_add+0x30>

1c0084f0 <__rt_cbsys_exec>:


int __rt_cbsys_exec(__rt_cbsys_e cbsys_id)
{
1c0084f0:	1141                	addi	sp,sp,-16
1c0084f2:	c422                	sw	s0,8(sp)
  rt_cbsys_t *cbsys = cbsys_first[cbsys_id];
1c0084f4:	1b001437          	lui	s0,0x1b001
1c0084f8:	050a                	slli	a0,a0,0x2
1c0084fa:	ba040413          	addi	s0,s0,-1120 # 1b000ba0 <cbsys_first>
1c0084fe:	20a47403          	p.lw	s0,a0(s0)
{
1c008502:	c606                	sw	ra,12(sp)
  while (cbsys)
1c008504:	e411                	bnez	s0,1c008510 <__rt_cbsys_exec+0x20>
  {
    if (cbsys->callback(cbsys->arg)) return -1;
    cbsys = cbsys->next;
  }

  return 0;
1c008506:	4501                	li	a0,0
}
1c008508:	40b2                	lw	ra,12(sp)
1c00850a:	4422                	lw	s0,8(sp)
1c00850c:	0141                	addi	sp,sp,16
1c00850e:	8082                	ret
    if (cbsys->callback(cbsys->arg)) return -1;
1c008510:	401c                	lw	a5,0(s0)
1c008512:	4048                	lw	a0,4(s0)
1c008514:	9782                	jalr	a5
1c008516:	e119                	bnez	a0,1c00851c <__rt_cbsys_exec+0x2c>
    cbsys = cbsys->next;
1c008518:	4400                	lw	s0,8(s0)
1c00851a:	b7ed                	j	1c008504 <__rt_cbsys_exec+0x14>
    if (cbsys->callback(cbsys->arg)) return -1;
1c00851c:	557d                	li	a0,-1
1c00851e:	b7ed                	j	1c008508 <__rt_cbsys_exec+0x18>

1c008520 <__rt_utils_init>:

RT_FC_BOOT_CODE void __rt_utils_init()
{
  for (int i=0; i<RT_CBSYS_NB; i++)
  {
    cbsys_first[i] = NULL;
1c008520:	1b0017b7          	lui	a5,0x1b001
1c008524:	ba078793          	addi	a5,a5,-1120 # 1b000ba0 <cbsys_first>
1c008528:	0007a023          	sw	zero,0(a5)
1c00852c:	0007a223          	sw	zero,4(a5)
1c008530:	0007a423          	sw	zero,8(a5)
1c008534:	0007a623          	sw	zero,12(a5)
1c008538:	0007a823          	sw	zero,16(a5)
1c00853c:	0007aa23          	sw	zero,20(a5)
  }
}
1c008540:	8082                	ret

1c008542 <__rt_fc_lock>:

void __rt_fc_lock(rt_fc_lock_t *lock)
{
1c008542:	1141                	addi	sp,sp,-16
1c008544:	c422                	sw	s0,8(sp)
1c008546:	842a                	mv	s0,a0
1c008548:	c606                	sw	ra,12(sp)
1c00854a:	c226                	sw	s1,4(sp)
1c00854c:	c04a                	sw	s2,0(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00854e:	300474f3          	csrrci	s1,mstatus,8
#if defined(ARCHI_HAS_FC)
  int irq = rt_irq_disable();
  while(lock->locked)
1c008552:	401c                	lw	a5,0(s0)
1c008554:	eb99                	bnez	a5,1c00856a <__rt_fc_lock+0x28>
  {
    //lock->fc_wait = __rt_thread_current;
    __rt_event_execute(rt_event_internal_sched(), 1);
  }
  lock->locked = 1;
1c008556:	4785                	li	a5,1
1c008558:	c01c                	sw	a5,0(s0)
  __builtin_pulp_spr_write(reg, val);
1c00855a:	30049073          	csrw	mstatus,s1
  while (rt_tas_lock_32((uint32_t)&lock->lock) == -1)
  {

  }
#endif
}
1c00855e:	40b2                	lw	ra,12(sp)
1c008560:	4422                	lw	s0,8(sp)
1c008562:	4492                	lw	s1,4(sp)
1c008564:	4902                	lw	s2,0(sp)
1c008566:	0141                	addi	sp,sp,16
1c008568:	8082                	ret
    __rt_event_execute(rt_event_internal_sched(), 1);
1c00856a:	4585                	li	a1,1
1c00856c:	01c00513          	li	a0,28
1c008570:	2989                	jal	1c0089c2 <__rt_event_execute>
1c008572:	b7c5                	j	1c008552 <__rt_fc_lock+0x10>

1c008574 <__rt_fc_unlock>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008574:	300476f3          	csrrci	a3,mstatus,8

static int __rt_fc_unlock_to_cluster(rt_fc_lock_t *lock)
{
#if defined(ARCHI_HAS_CLUSTER)
  if (lock->waiting) {
1c008578:	415c                	lw	a5,4(a0)
1c00857a:	e791                	bnez	a5,1c008586 <__rt_fc_unlock+0x12>
{
#if defined(ARCHI_HAS_FC)
  int irq = rt_irq_disable();
  if (!__rt_fc_unlock_to_cluster(lock))
  {
    lock->locked = 0;    
1c00857c:	00052023          	sw	zero,0(a0)
  __builtin_pulp_spr_write(reg, val);
1c008580:	30069073          	csrw	mstatus,a3
  }
  rt_irq_restore(irq);
#else
  rt_tas_unlock_32((uint32_t)&lock->lock, 0);
#endif
}
1c008584:	8082                	ret
    lock->waiting = req->next;
1c008586:	43d8                	lw	a4,4(a5)
1c008588:	c158                	sw	a4,4(a0)
    req->done = 1;
1c00858a:	4705                	li	a4,1
1c00858c:	08e78423          	sb	a4,136(a5)
    __rt_cluster_notif_req_done(req->cid);
1c008590:	0897c783          	lbu	a5,137(a5)
  pulp_write32(evtAddr, coreSet);
1c008594:	00201737          	lui	a4,0x201
1c008598:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c00859c:	04078793          	addi	a5,a5,64
1c0085a0:	07da                	slli	a5,a5,0x16
  pulp_write32(evtAddr, coreSet);
1c0085a2:	0007e723          	p.sw	zero,a4(a5)
1c0085a6:	bfe9                	j	1c008580 <__rt_fc_unlock+0xc>

1c0085a8 <__rt_fc_cluster_lock>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0085a8:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c0085ac:	8795                	srai	a5,a5,0x5
1c0085ae:	f267b7b3          	p.bclr	a5,a5,25,6
#if defined(ARCHI_HAS_FC)

void __rt_fc_cluster_lock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req)
{
  req->lock = lock;
  req->cid = rt_cluster_id();
1c0085b2:	08f584a3          	sb	a5,137(a1)
  req->done = 0;
  req->req_lock = 1;
1c0085b6:	4785                	li	a5,1
1c0085b8:	08f58523          	sb	a5,138(a1)
  event->arg[0] = (uintptr_t)callback;
1c0085bc:	1c0087b7          	lui	a5,0x1c008
1c0085c0:	43678793          	addi	a5,a5,1078 # 1c008436 <__rt_fc_cluster_lock_req>
  req->lock = lock;
1c0085c4:	c188                	sw	a0,0(a1)
  req->done = 0;
1c0085c6:	08058423          	sb	zero,136(a1)
  event->implem.pending = 0;
1c0085ca:	0205a623          	sw	zero,44(a1)
  event->implem.keep = 0;
1c0085ce:	0205a823          	sw	zero,48(a1)
  event->arg[0] = (uintptr_t)callback;
1c0085d2:	c5dc                	sw	a5,12(a1)
  event->arg[1] = (uintptr_t)arg;
1c0085d4:	c98c                	sw	a1,16(a1)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_fc_cluster_lock_req, (void *)req);
1c0085d6:	05a1                	addi	a1,a1,8

// This function will push an event from cluster to FC and the event callback
// will be executed directly from within the interrupt handler
static inline void __rt_cluster_push_fc_irq_event(rt_event_t *event)
{
  __rt_cluster_push_fc_event((rt_event_t *)(((unsigned int)event) | 0x1));
1c0085d8:	c005c533          	p.bset	a0,a1,0,0
1c0085dc:	2b00106f          	j	1c00988c <__rt_cluster_push_fc_event>

1c0085e0 <__rt_fc_cluster_unlock>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0085e0:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c0085e4:	8795                	srai	a5,a5,0x5
1c0085e6:	f267b7b3          	p.bclr	a5,a5,25,6
}

void __rt_fc_cluster_unlock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req)
{
  req->lock = lock;
  req->cid = rt_cluster_id();
1c0085ea:	08f584a3          	sb	a5,137(a1)
  event->arg[0] = (uintptr_t)callback;
1c0085ee:	1c0087b7          	lui	a5,0x1c008
1c0085f2:	43678793          	addi	a5,a5,1078 # 1c008436 <__rt_fc_cluster_lock_req>
  req->lock = lock;
1c0085f6:	c188                	sw	a0,0(a1)
  req->done = 0;
1c0085f8:	08058423          	sb	zero,136(a1)
  req->req_lock = 0;
1c0085fc:	08058523          	sb	zero,138(a1)
  event->implem.pending = 0;
1c008600:	0205a623          	sw	zero,44(a1)
  event->implem.keep = 0;
1c008604:	0205a823          	sw	zero,48(a1)
  event->arg[0] = (uintptr_t)callback;
1c008608:	c5dc                	sw	a5,12(a1)
  event->arg[1] = (uintptr_t)arg;
1c00860a:	c98c                	sw	a1,16(a1)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_fc_cluster_lock_req, (void *)req);
1c00860c:	05a1                	addi	a1,a1,8
1c00860e:	c005c533          	p.bset	a0,a1,0,0
1c008612:	27a0106f          	j	1c00988c <__rt_cluster_push_fc_event>

1c008616 <__rt_event_enqueue>:

    __rt_wait_event_check(event, call_event);
  }

  rt_irq_restore(irq);
}
1c008616:	01c02683          	lw	a3,28(zero) # 1c <__rt_sched>
1c00861a:	00052023          	sw	zero,0(a0)
1c00861e:	01c00713          	li	a4,28
1c008622:	c689                	beqz	a3,1c00862c <__rt_event_enqueue+0x16>
1c008624:	435c                	lw	a5,4(a4)
1c008626:	c388                	sw	a0,0(a5)
1c008628:	c348                	sw	a0,4(a4)
1c00862a:	8082                	ret
1c00862c:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c008630:	bfe5                	j	1c008628 <__rt_event_enqueue+0x12>

1c008632 <__rt_bridge_check_bridge_req.part.5>:
1c008632:	1c00c737          	lui	a4,0x1c00c
1c008636:	77070793          	addi	a5,a4,1904 # 1c00c770 <__hal_debug_struct>
1c00863a:	0a47a783          	lw	a5,164(a5)
1c00863e:	77070713          	addi	a4,a4,1904
1c008642:	c789                	beqz	a5,1c00864c <__rt_bridge_check_bridge_req.part.5+0x1a>
1c008644:	4f94                	lw	a3,24(a5)
1c008646:	e681                	bnez	a3,1c00864e <__rt_bridge_check_bridge_req.part.5+0x1c>
1c008648:	0af72623          	sw	a5,172(a4)
1c00864c:	8082                	ret
1c00864e:	479c                	lw	a5,8(a5)
1c008650:	bfcd                	j	1c008642 <__rt_bridge_check_bridge_req.part.5+0x10>

1c008652 <__rt_bridge_wait>:
1c008652:	014027f3          	csrr	a5,uhartid
1c008656:	02000713          	li	a4,32
1c00865a:	ca5797b3          	p.extractu	a5,a5,5,5
1c00865e:	02e79c63          	bne	a5,a4,1c008696 <__rt_bridge_wait+0x44>
1c008662:	1141                	addi	sp,sp,-16
1c008664:	c422                	sw	s0,8(sp)
1c008666:	1a106437          	lui	s0,0x1a106
1c00866a:	c606                	sw	ra,12(sp)
1c00866c:	00442783          	lw	a5,4(s0) # 1a106004 <__l1_end+0xa105f80>
1c008670:	c187b7b3          	p.bclr	a5,a5,0,24
1c008674:	00f42223          	sw	a5,4(s0)
1c008678:	4585                	li	a1,1
1c00867a:	03800513          	li	a0,56
1c00867e:	187000ef          	jal	ra,1c009004 <__rt_periph_wait_event>
1c008682:	00442783          	lw	a5,4(s0)
1c008686:	c187c7b3          	p.bset	a5,a5,0,24
1c00868a:	00f42223          	sw	a5,4(s0)
1c00868e:	40b2                	lw	ra,12(sp)
1c008690:	4422                	lw	s0,8(sp)
1c008692:	0141                	addi	sp,sp,16
1c008694:	8082                	ret
1c008696:	8082                	ret

1c008698 <__rt_bridge_handle_notif>:
1c008698:	1141                	addi	sp,sp,-16
1c00869a:	c422                	sw	s0,8(sp)
1c00869c:	1c00c437          	lui	s0,0x1c00c
1c0086a0:	77040793          	addi	a5,s0,1904 # 1c00c770 <__hal_debug_struct>
1c0086a4:	0a47a783          	lw	a5,164(a5)
1c0086a8:	c606                	sw	ra,12(sp)
1c0086aa:	c226                	sw	s1,4(sp)
1c0086ac:	c04a                	sw	s2,0(sp)
1c0086ae:	77040413          	addi	s0,s0,1904
1c0086b2:	c399                	beqz	a5,1c0086b8 <__rt_bridge_handle_notif+0x20>
1c0086b4:	4bd8                	lw	a4,20(a5)
1c0086b6:	e31d                	bnez	a4,1c0086dc <__rt_bridge_handle_notif+0x44>
1c0086b8:	0b442783          	lw	a5,180(s0)
1c0086bc:	c791                	beqz	a5,1c0086c8 <__rt_bridge_handle_notif+0x30>
1c0086be:	43a8                	lw	a0,64(a5)
1c0086c0:	0a042a23          	sw	zero,180(s0)
1c0086c4:	f53ff0ef          	jal	ra,1c008616 <__rt_event_enqueue>
1c0086c8:	0ac42783          	lw	a5,172(s0)
1c0086cc:	ef85                	bnez	a5,1c008704 <__rt_bridge_handle_notif+0x6c>
1c0086ce:	4422                	lw	s0,8(sp)
1c0086d0:	40b2                	lw	ra,12(sp)
1c0086d2:	4492                	lw	s1,4(sp)
1c0086d4:	4902                	lw	s2,0(sp)
1c0086d6:	0141                	addi	sp,sp,16
1c0086d8:	f5bff06f          	j	1c008632 <__rt_bridge_check_bridge_req.part.5>
1c0086dc:	4784                	lw	s1,8(a5)
1c0086de:	4fd8                	lw	a4,28(a5)
1c0086e0:	0a942223          	sw	s1,164(s0)
1c0086e4:	cb01                	beqz	a4,1c0086f4 <__rt_bridge_handle_notif+0x5c>
1c0086e6:	0b042703          	lw	a4,176(s0)
1c0086ea:	c798                	sw	a4,8(a5)
1c0086ec:	0af42823          	sw	a5,176(s0)
1c0086f0:	87a6                	mv	a5,s1
1c0086f2:	b7c1                	j	1c0086b2 <__rt_bridge_handle_notif+0x1a>
1c0086f4:	43a8                	lw	a0,64(a5)
1c0086f6:	30047973          	csrrci	s2,mstatus,8
1c0086fa:	f1dff0ef          	jal	ra,1c008616 <__rt_event_enqueue>
1c0086fe:	30091073          	csrw	mstatus,s2
1c008702:	b7fd                	j	1c0086f0 <__rt_bridge_handle_notif+0x58>
1c008704:	40b2                	lw	ra,12(sp)
1c008706:	4422                	lw	s0,8(sp)
1c008708:	4492                	lw	s1,4(sp)
1c00870a:	4902                	lw	s2,0(sp)
1c00870c:	0141                	addi	sp,sp,16
1c00870e:	8082                	ret

1c008710 <__rt_bridge_check_connection>:
1c008710:	1c00c6b7          	lui	a3,0x1c00c
1c008714:	77068693          	addi	a3,a3,1904 # 1c00c770 <__hal_debug_struct>
1c008718:	469c                	lw	a5,8(a3)
1c00871a:	e3a1                	bnez	a5,1c00875a <__rt_bridge_check_connection+0x4a>
1c00871c:	1a1047b7          	lui	a5,0x1a104
1c008720:	07478793          	addi	a5,a5,116 # 1a104074 <__l1_end+0xa103ff0>
1c008724:	4398                	lw	a4,0(a5)
1c008726:	8325                	srli	a4,a4,0x9
1c008728:	f8373733          	p.bclr	a4,a4,28,3
1c00872c:	02773763          	p.bneimm	a4,7,1c00875a <__rt_bridge_check_connection+0x4a>
1c008730:	1141                	addi	sp,sp,-16
1c008732:	c422                	sw	s0,8(sp)
1c008734:	c606                	sw	ra,12(sp)
1c008736:	4705                	li	a4,1
1c008738:	c698                	sw	a4,8(a3)
1c00873a:	4709                	li	a4,2
1c00873c:	c398                	sw	a4,0(a5)
1c00873e:	843e                	mv	s0,a5
1c008740:	401c                	lw	a5,0(s0)
1c008742:	83a5                	srli	a5,a5,0x9
1c008744:	f837b7b3          	p.bclr	a5,a5,28,3
1c008748:	0077a663          	p.beqimm	a5,7,1c008754 <__rt_bridge_check_connection+0x44>
1c00874c:	40b2                	lw	ra,12(sp)
1c00874e:	4422                	lw	s0,8(sp)
1c008750:	0141                	addi	sp,sp,16
1c008752:	8082                	ret
1c008754:	effff0ef          	jal	ra,1c008652 <__rt_bridge_wait>
1c008758:	b7e5                	j	1c008740 <__rt_bridge_check_connection+0x30>
1c00875a:	8082                	ret

1c00875c <__rt_bridge_set_available>:
1c00875c:	1c00c7b7          	lui	a5,0x1c00c
1c008760:	77078793          	addi	a5,a5,1904 # 1c00c770 <__hal_debug_struct>
1c008764:	4798                	lw	a4,8(a5)
1c008766:	1a1047b7          	lui	a5,0x1a104
1c00876a:	07478793          	addi	a5,a5,116 # 1a104074 <__l1_end+0xa103ff0>
1c00876e:	e701                	bnez	a4,1c008776 <__rt_bridge_set_available+0x1a>
1c008770:	4721                	li	a4,8
1c008772:	c398                	sw	a4,0(a5)
1c008774:	8082                	ret
1c008776:	4709                	li	a4,2
1c008778:	bfed                	j	1c008772 <__rt_bridge_set_available+0x16>

1c00877a <__rt_bridge_send_notif>:
1c00877a:	1141                	addi	sp,sp,-16
1c00877c:	c606                	sw	ra,12(sp)
1c00877e:	f93ff0ef          	jal	ra,1c008710 <__rt_bridge_check_connection>
1c008782:	1c00c7b7          	lui	a5,0x1c00c
1c008786:	77078793          	addi	a5,a5,1904 # 1c00c770 <__hal_debug_struct>
1c00878a:	479c                	lw	a5,8(a5)
1c00878c:	c789                	beqz	a5,1c008796 <__rt_bridge_send_notif+0x1c>
1c00878e:	1a1047b7          	lui	a5,0x1a104
1c008792:	4719                	li	a4,6
1c008794:	dbf8                	sw	a4,116(a5)
1c008796:	40b2                	lw	ra,12(sp)
1c008798:	0141                	addi	sp,sp,16
1c00879a:	8082                	ret

1c00879c <__rt_bridge_clear_notif>:
  #endif
  }
}

void __rt_bridge_clear_notif()
{
1c00879c:	1141                	addi	sp,sp,-16
1c00879e:	c606                	sw	ra,12(sp)
  hal_debug_struct_t *debug_struct = hal_debug_struct_get();

  __rt_bridge_check_connection();
1c0087a0:	f71ff0ef          	jal	ra,1c008710 <__rt_bridge_check_connection>

  if (debug_struct->bridge.connected)
1c0087a4:	1c00c7b7          	lui	a5,0x1c00c
1c0087a8:	77078793          	addi	a5,a5,1904 # 1c00c770 <__hal_debug_struct>
1c0087ac:	479c                	lw	a5,8(a5)
1c0087ae:	c789                	beqz	a5,1c0087b8 <__rt_bridge_clear_notif+0x1c>
  {
    __rt_bridge_set_available();
  }
}
1c0087b0:	40b2                	lw	ra,12(sp)
1c0087b2:	0141                	addi	sp,sp,16
    __rt_bridge_set_available();
1c0087b4:	fa9ff06f          	j	1c00875c <__rt_bridge_set_available>
}
1c0087b8:	40b2                	lw	ra,12(sp)
1c0087ba:	0141                	addi	sp,sp,16
1c0087bc:	8082                	ret

1c0087be <__rt_bridge_printf_flush>:
{
1c0087be:	1141                	addi	sp,sp,-16
1c0087c0:	c422                	sw	s0,8(sp)
1c0087c2:	c606                	sw	ra,12(sp)
  if (debug_struct->bridge.connected)
1c0087c4:	1c00c437          	lui	s0,0x1c00c
  __rt_bridge_check_connection();
1c0087c8:	f49ff0ef          	jal	ra,1c008710 <__rt_bridge_check_connection>
  if (debug_struct->bridge.connected)
1c0087cc:	77040793          	addi	a5,s0,1904 # 1c00c770 <__hal_debug_struct>
1c0087d0:	479c                	lw	a5,8(a5)
1c0087d2:	c39d                	beqz	a5,1c0087f8 <__rt_bridge_printf_flush+0x3a>
1c0087d4:	77040413          	addi	s0,s0,1904
  return *(volatile uint32_t *)&debug_struct->putc_current == 0;
}

static inline int hal_debug_is_busy(hal_debug_struct_t *debug_struct)
{
  return *(volatile uint32_t *)&debug_struct->pending_putchar;
1c0087d8:	485c                	lw	a5,20(s0)
    if (hal_debug_is_busy(hal_debug_struct_get()) || !hal_debug_is_empty(hal_debug_struct_get()))
1c0087da:	e399                	bnez	a5,1c0087e0 <__rt_bridge_printf_flush+0x22>
  return *(volatile uint32_t *)&debug_struct->putc_current == 0;
1c0087dc:	4c1c                	lw	a5,24(s0)
1c0087de:	cf89                	beqz	a5,1c0087f8 <__rt_bridge_printf_flush+0x3a>
      __rt_bridge_send_notif();
1c0087e0:	f9bff0ef          	jal	ra,1c00877a <__rt_bridge_send_notif>
  return *(volatile uint32_t *)&debug_struct->pending_putchar;
1c0087e4:	485c                	lw	a5,20(s0)
      while(hal_debug_is_busy(hal_debug_struct_get()))
1c0087e6:	e791                	bnez	a5,1c0087f2 <__rt_bridge_printf_flush+0x34>
}
1c0087e8:	4422                	lw	s0,8(sp)
1c0087ea:	40b2                	lw	ra,12(sp)
1c0087ec:	0141                	addi	sp,sp,16
      __rt_bridge_clear_notif();
1c0087ee:	fafff06f          	j	1c00879c <__rt_bridge_clear_notif>
        __rt_bridge_wait();
1c0087f2:	e61ff0ef          	jal	ra,1c008652 <__rt_bridge_wait>
1c0087f6:	b7fd                	j	1c0087e4 <__rt_bridge_printf_flush+0x26>
}
1c0087f8:	40b2                	lw	ra,12(sp)
1c0087fa:	4422                	lw	s0,8(sp)
1c0087fc:	0141                	addi	sp,sp,16
1c0087fe:	8082                	ret

1c008800 <__rt_bridge_req_shutdown>:
{
1c008800:	1141                	addi	sp,sp,-16
1c008802:	c606                	sw	ra,12(sp)
1c008804:	c422                	sw	s0,8(sp)
  __rt_bridge_check_connection();
1c008806:	f0bff0ef          	jal	ra,1c008710 <__rt_bridge_check_connection>
  if (debug_struct->bridge.connected)
1c00880a:	1c00c7b7          	lui	a5,0x1c00c
1c00880e:	77078793          	addi	a5,a5,1904 # 1c00c770 <__hal_debug_struct>
1c008812:	479c                	lw	a5,8(a5)
1c008814:	c7a9                	beqz	a5,1c00885e <__rt_bridge_req_shutdown+0x5e>




static inline unsigned int apb_soc_jtag_reg_read() {
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c008816:	1a104437          	lui	s0,0x1a104
    __rt_bridge_printf_flush();
1c00881a:	fa5ff0ef          	jal	ra,1c0087be <__rt_bridge_printf_flush>
1c00881e:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa103ff0>
1c008822:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) == 7)
1c008824:	83a5                	srli	a5,a5,0x9
1c008826:	f837b7b3          	p.bclr	a5,a5,28,3
1c00882a:	0277ae63          	p.beqimm	a5,7,1c008866 <__rt_bridge_req_shutdown+0x66>
}

static inline void apb_soc_jtag_reg_write(unsigned int value) {
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET, value);
1c00882e:	4791                	li	a5,4
1c008830:	c01c                	sw	a5,0(s0)
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c008832:	1a104437          	lui	s0,0x1a104
1c008836:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa103ff0>
1c00883a:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) != 7)
1c00883c:	83a5                	srli	a5,a5,0x9
1c00883e:	f837b7b3          	p.bclr	a5,a5,28,3
1c008842:	0277b563          	p.bneimm	a5,7,1c00886c <__rt_bridge_req_shutdown+0x6c>
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET, value);
1c008846:	00042023          	sw	zero,0(s0)
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c00884a:	1a104437          	lui	s0,0x1a104
1c00884e:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa103ff0>
1c008852:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) == 7)
1c008854:	83a5                	srli	a5,a5,0x9
1c008856:	f837b7b3          	p.bclr	a5,a5,28,3
1c00885a:	0077ac63          	p.beqimm	a5,7,1c008872 <__rt_bridge_req_shutdown+0x72>
}
1c00885e:	40b2                	lw	ra,12(sp)
1c008860:	4422                	lw	s0,8(sp)
1c008862:	0141                	addi	sp,sp,16
1c008864:	8082                	ret
      __rt_bridge_wait();
1c008866:	dedff0ef          	jal	ra,1c008652 <__rt_bridge_wait>
1c00886a:	bf65                	j	1c008822 <__rt_bridge_req_shutdown+0x22>
      __rt_bridge_wait();
1c00886c:	de7ff0ef          	jal	ra,1c008652 <__rt_bridge_wait>
1c008870:	b7e9                	j	1c00883a <__rt_bridge_req_shutdown+0x3a>
      __rt_bridge_wait();
1c008872:	de1ff0ef          	jal	ra,1c008652 <__rt_bridge_wait>
1c008876:	bff1                	j	1c008852 <__rt_bridge_req_shutdown+0x52>

1c008878 <__rt_bridge_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_bridge_init()
{
  hal_bridge_t *bridge = hal_bridge_get();
  
  bridge->first_req = 0;
1c008878:	1c00c7b7          	lui	a5,0x1c00c
  bridge->notif_req_addr = ARCHI_FC_ITC_ADDR + ITC_STATUS_SET_OFFSET;
  bridge->notif_req_value = 1<<RT_BRIDGE_ENQUEUE_EVENT;
#else
#if defined(EU_VERSION) && EU_VERSION >= 3
#if defined(ARCHI_HAS_FC)
  bridge->notif_req_addr = ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_BRIDGE_ENQUEUE_EVENT << 2);
1c00887c:	1b201737          	lui	a4,0x1b201
  bridge->first_req = 0;
1c008880:	77078793          	addi	a5,a5,1904 # 1c00c770 <__hal_debug_struct>
  bridge->notif_req_addr = ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_BRIDGE_ENQUEUE_EVENT << 2);
1c008884:	e1070713          	addi	a4,a4,-496 # 1b200e10 <__fc_tcdm_end+0x1ffa40>
1c008888:	0ae7ac23          	sw	a4,184(a5)
  bridge->notif_req_value = 1;
1c00888c:	4705                	li	a4,1
  bridge->first_req = 0;
1c00888e:	0a07a223          	sw	zero,164(a5)
  bridge->first_bridge_req = 0;
1c008892:	0a07a623          	sw	zero,172(a5)
  bridge->target_req = 0;
1c008896:	0a07aa23          	sw	zero,180(a5)
  bridge->notif_req_value = 1;
1c00889a:	0ae7ae23          	sw	a4,188(a5)
#endif
#endif
#endif

  __rt_bridge_eeprom_handle = NULL;
1c00889e:	00400793          	li	a5,4
1c0088a2:	0007a823          	sw	zero,16(a5)
  __rt_bridge_flash_handle = NULL;
1c0088a6:	0007a023          	sw	zero,0(a5)
}
1c0088aa:	8082                	ret

1c0088ac <__rt_event_init>:
{
  __rt_event_execute(sched, 0);
  rt_wait_for_interrupt();
  rt_irq_enable();
  rt_irq_disable();
}
1c0088ac:	1141                	addi	sp,sp,-16
1c0088ae:	c422                	sw	s0,8(sp)
1c0088b0:	c606                	sw	ra,12(sp)
1c0088b2:	842a                	mv	s0,a0
1c0088b4:	02052223          	sw	zero,36(a0)
1c0088b8:	02052423          	sw	zero,40(a0)
1c0088bc:	45c1                	li	a1,16
1c0088be:	4501                	li	a0,0
1c0088c0:	2c9d                	jal	1c008b36 <rt_alloc>
1c0088c2:	dc68                	sw	a0,124(s0)
1c0088c4:	02042a23          	sw	zero,52(s0)
1c0088c8:	00042223          	sw	zero,4(s0)
1c0088cc:	40b2                	lw	ra,12(sp)
1c0088ce:	4422                	lw	s0,8(sp)
1c0088d0:	0141                	addi	sp,sp,16
1c0088d2:	8082                	ret

1c0088d4 <__rt_wait_event_prepare_blocking>:
1c0088d4:	01800793          	li	a5,24
1c0088d8:	4388                	lw	a0,0(a5)
1c0088da:	4118                	lw	a4,0(a0)
1c0088dc:	02052423          	sw	zero,40(a0)
1c0088e0:	00052223          	sw	zero,4(a0)
1c0088e4:	c398                	sw	a4,0(a5)
1c0088e6:	4785                	li	a5,1
1c0088e8:	d15c                	sw	a5,36(a0)
1c0088ea:	8082                	ret

1c0088ec <rt_event_alloc>:
1c0088ec:	1101                	addi	sp,sp,-32
1c0088ee:	c64e                	sw	s3,12(sp)
1c0088f0:	89ae                	mv	s3,a1
1c0088f2:	ce06                	sw	ra,28(sp)
1c0088f4:	cc22                	sw	s0,24(sp)
1c0088f6:	ca26                	sw	s1,20(sp)
1c0088f8:	c84a                	sw	s2,16(sp)
1c0088fa:	c452                	sw	s4,8(sp)
1c0088fc:	c256                	sw	s5,4(sp)
1c0088fe:	30047a73          	csrrci	s4,mstatus,8
1c008902:	014027f3          	csrr	a5,uhartid
1c008906:	8795                	srai	a5,a5,0x5
1c008908:	f267b7b3          	p.bclr	a5,a5,25,6
1c00890c:	02000713          	li	a4,32
1c008910:	00278513          	addi	a0,a5,2
1c008914:	00e79363          	bne	a5,a4,1c00891a <rt_event_alloc+0x2e>
1c008918:	4505                	li	a0,1
1c00891a:	00799593          	slli	a1,s3,0x7
1c00891e:	2c21                	jal	1c008b36 <rt_alloc>
1c008920:	842a                	mv	s0,a0
1c008922:	557d                	li	a0,-1
1c008924:	c819                	beqz	s0,1c00893a <rt_event_alloc+0x4e>
1c008926:	01800493          	li	s1,24
1c00892a:	4901                	li	s2,0
1c00892c:	00448a93          	addi	s5,s1,4
1c008930:	01394e63          	blt	s2,s3,1c00894c <rt_event_alloc+0x60>
1c008934:	300a1073          	csrw	mstatus,s4
1c008938:	4501                	li	a0,0
1c00893a:	40f2                	lw	ra,28(sp)
1c00893c:	4462                	lw	s0,24(sp)
1c00893e:	44d2                	lw	s1,20(sp)
1c008940:	4942                	lw	s2,16(sp)
1c008942:	49b2                	lw	s3,12(sp)
1c008944:	4a22                	lw	s4,8(sp)
1c008946:	4a92                	lw	s5,4(sp)
1c008948:	6105                	addi	sp,sp,32
1c00894a:	8082                	ret
1c00894c:	8522                	mv	a0,s0
1c00894e:	85d6                	mv	a1,s5
1c008950:	f5dff0ef          	jal	ra,1c0088ac <__rt_event_init>
1c008954:	409c                	lw	a5,0(s1)
1c008956:	0905                	addi	s2,s2,1
1c008958:	c01c                	sw	a5,0(s0)
1c00895a:	c080                	sw	s0,0(s1)
1c00895c:	08040413          	addi	s0,s0,128
1c008960:	bfc1                	j	1c008930 <rt_event_alloc+0x44>

1c008962 <rt_event_get>:
1c008962:	30047773          	csrrci	a4,mstatus,8
1c008966:	01800793          	li	a5,24
1c00896a:	4388                	lw	a0,0(a5)
1c00896c:	c509                	beqz	a0,1c008976 <rt_event_get+0x14>
1c00896e:	4114                	lw	a3,0(a0)
1c008970:	c14c                	sw	a1,4(a0)
1c008972:	c510                	sw	a2,8(a0)
1c008974:	c394                	sw	a3,0(a5)
1c008976:	30071073          	csrw	mstatus,a4
1c00897a:	8082                	ret

1c00897c <rt_event_get_blocking>:
1c00897c:	30047773          	csrrci	a4,mstatus,8
1c008980:	01800793          	li	a5,24
1c008984:	4388                	lw	a0,0(a5)
1c008986:	c909                	beqz	a0,1c008998 <rt_event_get_blocking+0x1c>
1c008988:	4114                	lw	a3,0(a0)
1c00898a:	00052223          	sw	zero,4(a0)
1c00898e:	00052423          	sw	zero,8(a0)
1c008992:	c394                	sw	a3,0(a5)
1c008994:	4785                	li	a5,1
1c008996:	d15c                	sw	a5,36(a0)
1c008998:	30071073          	csrw	mstatus,a4
1c00899c:	8082                	ret

1c00899e <rt_event_push>:
1c00899e:	30047773          	csrrci	a4,mstatus,8
1c0089a2:	01800693          	li	a3,24
1c0089a6:	42d4                	lw	a3,4(a3)
1c0089a8:	00052023          	sw	zero,0(a0)
1c0089ac:	01800793          	li	a5,24
1c0089b0:	e691                	bnez	a3,1c0089bc <rt_event_push+0x1e>
1c0089b2:	c3c8                	sw	a0,4(a5)
1c0089b4:	c788                	sw	a0,8(a5)
1c0089b6:	30071073          	csrw	mstatus,a4
1c0089ba:	8082                	ret
1c0089bc:	4794                	lw	a3,8(a5)
1c0089be:	c288                	sw	a0,0(a3)
1c0089c0:	bfd5                	j	1c0089b4 <rt_event_push+0x16>

1c0089c2 <__rt_event_execute>:
1c0089c2:	1141                	addi	sp,sp,-16
1c0089c4:	c422                	sw	s0,8(sp)
1c0089c6:	01800793          	li	a5,24
1c0089ca:	43dc                	lw	a5,4(a5)
1c0089cc:	c606                	sw	ra,12(sp)
1c0089ce:	c226                	sw	s1,4(sp)
1c0089d0:	01800413          	li	s0,24
1c0089d4:	ef81                	bnez	a5,1c0089ec <__rt_event_execute+0x2a>
1c0089d6:	c1b9                	beqz	a1,1c008a1c <__rt_event_execute+0x5a>
1c0089d8:	002047b7          	lui	a5,0x204
1c0089dc:	0387e703          	p.elw	a4,56(a5) # 204038 <__L2+0x184038>
1c0089e0:	300467f3          	csrrsi	a5,mstatus,8
1c0089e4:	300477f3          	csrrci	a5,mstatus,8
1c0089e8:	405c                	lw	a5,4(s0)
1c0089ea:	cb8d                	beqz	a5,1c008a1c <__rt_event_execute+0x5a>
1c0089ec:	4485                	li	s1,1
1c0089ee:	4398                	lw	a4,0(a5)
1c0089f0:	5794                	lw	a3,40(a5)
1c0089f2:	00978a23          	sb	s1,20(a5)
1c0089f6:	c058                	sw	a4,4(s0)
1c0089f8:	4788                	lw	a0,8(a5)
1c0089fa:	43d8                	lw	a4,4(a5)
1c0089fc:	e691                	bnez	a3,1c008a08 <__rt_event_execute+0x46>
1c0089fe:	53d4                	lw	a3,36(a5)
1c008a00:	e681                	bnez	a3,1c008a08 <__rt_event_execute+0x46>
1c008a02:	4014                	lw	a3,0(s0)
1c008a04:	c394                	sw	a3,0(a5)
1c008a06:	c01c                	sw	a5,0(s0)
1c008a08:	0207a223          	sw	zero,36(a5)
1c008a0c:	c711                	beqz	a4,1c008a18 <__rt_event_execute+0x56>
1c008a0e:	300467f3          	csrrsi	a5,mstatus,8
1c008a12:	9702                	jalr	a4
1c008a14:	300477f3          	csrrci	a5,mstatus,8
1c008a18:	405c                	lw	a5,4(s0)
1c008a1a:	fbf1                	bnez	a5,1c0089ee <__rt_event_execute+0x2c>
1c008a1c:	40b2                	lw	ra,12(sp)
1c008a1e:	4422                	lw	s0,8(sp)
1c008a20:	4492                	lw	s1,4(sp)
1c008a22:	0141                	addi	sp,sp,16
1c008a24:	8082                	ret

1c008a26 <__rt_wait_event>:
  } while(event);

}

void __rt_wait_event(rt_event_t *event)
{
1c008a26:	1141                	addi	sp,sp,-16
1c008a28:	c422                	sw	s0,8(sp)
1c008a2a:	c606                	sw	ra,12(sp)
1c008a2c:	842a                	mv	s0,a0
  while (event->implem.pending || event->implem.saved_pending) {
1c008a2e:	505c                	lw	a5,36(s0)
1c008a30:	ef81                	bnez	a5,1c008a48 <__rt_wait_event+0x22>
1c008a32:	585c                	lw	a5,52(s0)
1c008a34:	eb91                	bnez	a5,1c008a48 <__rt_wait_event+0x22>
    __rt_event_execute(NULL, 1);
  }

  event->next = __rt_first_free;
1c008a36:	01800793          	li	a5,24
1c008a3a:	4398                	lw	a4,0(a5)
  __rt_first_free = event;
}
1c008a3c:	40b2                	lw	ra,12(sp)
  event->next = __rt_first_free;
1c008a3e:	c018                	sw	a4,0(s0)
  __rt_first_free = event;
1c008a40:	c380                	sw	s0,0(a5)
}
1c008a42:	4422                	lw	s0,8(sp)
1c008a44:	0141                	addi	sp,sp,16
1c008a46:	8082                	ret
    __rt_event_execute(NULL, 1);
1c008a48:	4585                	li	a1,1
1c008a4a:	4501                	li	a0,0
1c008a4c:	f77ff0ef          	jal	ra,1c0089c2 <__rt_event_execute>
1c008a50:	bff9                	j	1c008a2e <__rt_wait_event+0x8>

1c008a52 <rt_event_wait>:

void rt_event_wait(rt_event_t *event)
{
1c008a52:	1141                	addi	sp,sp,-16
1c008a54:	c606                	sw	ra,12(sp)
1c008a56:	c422                	sw	s0,8(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008a58:	30047473          	csrrci	s0,mstatus,8
  int irq = rt_irq_disable();
__rt_wait_event(event);
1c008a5c:	fcbff0ef          	jal	ra,1c008a26 <__rt_wait_event>
  __builtin_pulp_spr_write(reg, val);
1c008a60:	30041073          	csrw	mstatus,s0
  rt_irq_restore(irq);
}
1c008a64:	40b2                	lw	ra,12(sp)
1c008a66:	4422                	lw	s0,8(sp)
1c008a68:	0141                	addi	sp,sp,16
1c008a6a:	8082                	ret

1c008a6c <__rt_event_sched_init>:

void __rt_event_sched_init()
{
  __rt_first_free = NULL;
1c008a6c:	01800513          	li	a0,24
1c008a70:	00052023          	sw	zero,0(a0)
  sched->first = NULL;
1c008a74:	00052223          	sw	zero,4(a0)
  rt_event_sched_init(&__rt_sched);
  // Push one event ot the runtime scheduler as some runtime services need
  // one event.
  rt_event_alloc(&__rt_sched, 1);
1c008a78:	4585                	li	a1,1
1c008a7a:	0511                	addi	a0,a0,4
1c008a7c:	e71ff06f          	j	1c0088ec <rt_event_alloc>

1c008a80 <pi_task_push_delayed_us>:
}

void pi_task_push_delayed_us(pi_task_t *task, uint32_t delay)
{
  rt_event_push_delayed(task, delay);
1c008a80:	ac15                	j	1c008cb4 <rt_event_push_delayed>

1c008a82 <rt_user_alloc_init>:
  rt_alloc_cluster(RT_ALLOC_PERIPH, size, (rt_alloc_req_t *)req);
}

void pi_cl_l2_free(void *chunk, int size, pi_cl_free_req_t *req)
{
  rt_free_cluster(RT_ALLOC_PERIPH, chunk, size, (rt_free_req_t *)req);
1c008a82:	00758793          	addi	a5,a1,7
1c008a86:	c407b7b3          	p.bclr	a5,a5,2,0
1c008a8a:	40b785b3          	sub	a1,a5,a1
1c008a8e:	c11c                	sw	a5,0(a0)
1c008a90:	8e0d                	sub	a2,a2,a1
1c008a92:	00c05763          	blez	a2,1c008aa0 <rt_user_alloc_init+0x1e>
1c008a96:	c4063633          	p.bclr	a2,a2,2,0
1c008a9a:	c390                	sw	a2,0(a5)
1c008a9c:	0007a223          	sw	zero,4(a5)
1c008aa0:	8082                	ret

1c008aa2 <rt_user_alloc>:
1c008aa2:	411c                	lw	a5,0(a0)
1c008aa4:	059d                	addi	a1,a1,7
1c008aa6:	c405b5b3          	p.bclr	a1,a1,2,0
1c008aaa:	4701                	li	a4,0
1c008aac:	cb89                	beqz	a5,1c008abe <rt_user_alloc+0x1c>
1c008aae:	4394                	lw	a3,0(a5)
1c008ab0:	43d0                	lw	a2,4(a5)
1c008ab2:	00b6c863          	blt	a3,a1,1c008ac2 <rt_user_alloc+0x20>
1c008ab6:	00b69b63          	bne	a3,a1,1c008acc <rt_user_alloc+0x2a>
1c008aba:	c719                	beqz	a4,1c008ac8 <rt_user_alloc+0x26>
1c008abc:	c350                	sw	a2,4(a4)
1c008abe:	853e                	mv	a0,a5
1c008ac0:	8082                	ret
1c008ac2:	873e                	mv	a4,a5
1c008ac4:	87b2                	mv	a5,a2
1c008ac6:	b7dd                	j	1c008aac <rt_user_alloc+0xa>
1c008ac8:	c110                	sw	a2,0(a0)
1c008aca:	bfd5                	j	1c008abe <rt_user_alloc+0x1c>
1c008acc:	00b78833          	add	a6,a5,a1
1c008ad0:	40b685b3          	sub	a1,a3,a1
1c008ad4:	00b82023          	sw	a1,0(a6)
1c008ad8:	00c82223          	sw	a2,4(a6)
1c008adc:	c701                	beqz	a4,1c008ae4 <rt_user_alloc+0x42>
1c008ade:	01072223          	sw	a6,4(a4)
1c008ae2:	bff1                	j	1c008abe <rt_user_alloc+0x1c>
1c008ae4:	01052023          	sw	a6,0(a0)
1c008ae8:	bfd9                	j	1c008abe <rt_user_alloc+0x1c>

1c008aea <rt_user_free>:
1c008aea:	411c                	lw	a5,0(a0)
1c008aec:	061d                	addi	a2,a2,7
1c008aee:	c4063633          	p.bclr	a2,a2,2,0
1c008af2:	4701                	li	a4,0
1c008af4:	c399                	beqz	a5,1c008afa <rt_user_free+0x10>
1c008af6:	02b7e763          	bltu	a5,a1,1c008b24 <rt_user_free+0x3a>
1c008afa:	00c586b3          	add	a3,a1,a2
1c008afe:	02d79663          	bne	a5,a3,1c008b2a <rt_user_free+0x40>
1c008b02:	4394                	lw	a3,0(a5)
1c008b04:	43dc                	lw	a5,4(a5)
1c008b06:	9636                	add	a2,a2,a3
1c008b08:	c190                	sw	a2,0(a1)
1c008b0a:	c1dc                	sw	a5,4(a1)
1c008b0c:	c31d                	beqz	a4,1c008b32 <rt_user_free+0x48>
1c008b0e:	4314                	lw	a3,0(a4)
1c008b10:	00d707b3          	add	a5,a4,a3
1c008b14:	00f59d63          	bne	a1,a5,1c008b2e <rt_user_free+0x44>
1c008b18:	419c                	lw	a5,0(a1)
1c008b1a:	97b6                	add	a5,a5,a3
1c008b1c:	c31c                	sw	a5,0(a4)
1c008b1e:	41dc                	lw	a5,4(a1)
1c008b20:	c35c                	sw	a5,4(a4)
1c008b22:	8082                	ret
1c008b24:	873e                	mv	a4,a5
1c008b26:	43dc                	lw	a5,4(a5)
1c008b28:	b7f1                	j	1c008af4 <rt_user_free+0xa>
1c008b2a:	c190                	sw	a2,0(a1)
1c008b2c:	bff9                	j	1c008b0a <rt_user_free+0x20>
1c008b2e:	c34c                	sw	a1,4(a4)
1c008b30:	8082                	ret
1c008b32:	c10c                	sw	a1,0(a0)
1c008b34:	8082                	ret

1c008b36 <rt_alloc>:
1c008b36:	4785                	li	a5,1
1c008b38:	00a7fb63          	bleu	a0,a5,1c008b4e <rt_alloc+0x18>
1c008b3c:	1c00d7b7          	lui	a5,0x1c00d
1c008b40:	bd07a783          	lw	a5,-1072(a5) # 1c00cbd0 <__rt_alloc_l1>
1c008b44:	1579                	addi	a0,a0,-2
1c008b46:	050a                	slli	a0,a0,0x2
1c008b48:	953e                	add	a0,a0,a5
1c008b4a:	f59ff06f          	j	1c008aa2 <rt_user_alloc>
1c008b4e:	00153763          	p.bneimm	a0,1,1c008b5c <rt_alloc+0x26>
1c008b52:	1c00d537          	lui	a0,0x1c00d
1c008b56:	bd850513          	addi	a0,a0,-1064 # 1c00cbd8 <__rt_alloc_fc_tcdm>
1c008b5a:	bfc5                	j	1c008b4a <rt_alloc+0x14>
1c008b5c:	1c00d537          	lui	a0,0x1c00d
1c008b60:	bd450513          	addi	a0,a0,-1068 # 1c00cbd4 <__rt_alloc_l2>
1c008b64:	b7dd                	j	1c008b4a <rt_alloc+0x14>

1c008b66 <rt_free>:
1c008b66:	4785                	li	a5,1
1c008b68:	00a7fb63          	bleu	a0,a5,1c008b7e <rt_free+0x18>
1c008b6c:	1c00d7b7          	lui	a5,0x1c00d
1c008b70:	bd07a783          	lw	a5,-1072(a5) # 1c00cbd0 <__rt_alloc_l1>
1c008b74:	1579                	addi	a0,a0,-2
1c008b76:	050a                	slli	a0,a0,0x2
1c008b78:	953e                	add	a0,a0,a5
1c008b7a:	f71ff06f          	j	1c008aea <rt_user_free>
1c008b7e:	c511                	beqz	a0,1c008b8a <rt_free+0x24>
1c008b80:	1c00d537          	lui	a0,0x1c00d
1c008b84:	bd850513          	addi	a0,a0,-1064 # 1c00cbd8 <__rt_alloc_fc_tcdm>
1c008b88:	bfcd                	j	1c008b7a <rt_free+0x14>
1c008b8a:	1c00d537          	lui	a0,0x1c00d
1c008b8e:	bd450513          	addi	a0,a0,-1068 # 1c00cbd4 <__rt_alloc_l2>
1c008b92:	b7e5                	j	1c008b7a <rt_free+0x14>

1c008b94 <__rt_alloc_init_l1>:
1c008b94:	1c00d7b7          	lui	a5,0x1c00d
1c008b98:	bd07a703          	lw	a4,-1072(a5) # 1c00cbd0 <__rt_alloc_l1>
1c008b9c:	100007b7          	lui	a5,0x10000
1c008ba0:	01651593          	slli	a1,a0,0x16
1c008ba4:	6641                	lui	a2,0x10
1c008ba6:	050a                	slli	a0,a0,0x2
1c008ba8:	08478793          	addi	a5,a5,132 # 10000084 <__l1_end>
1c008bac:	f7c60613          	addi	a2,a2,-132 # ff7c <__l1_heap_size>
1c008bb0:	95be                	add	a1,a1,a5
1c008bb2:	953a                	add	a0,a0,a4
1c008bb4:	ecfff06f          	j	1c008a82 <rt_user_alloc_init>

1c008bb8 <__rt_alloc_init_l1_for_fc>:
1c008bb8:	100005b7          	lui	a1,0x10000
1c008bbc:	01651793          	slli	a5,a0,0x16
1c008bc0:	08458593          	addi	a1,a1,132 # 10000084 <__l1_end>
1c008bc4:	00b78733          	add	a4,a5,a1
1c008bc8:	050a                	slli	a0,a0,0x2
1c008bca:	0791                	addi	a5,a5,4
1c008bcc:	6641                	lui	a2,0x10
1c008bce:	1c00d6b7          	lui	a3,0x1c00d
1c008bd2:	f7860613          	addi	a2,a2,-136 # ff78 <__rt_stack_size+0xf778>
1c008bd6:	95be                	add	a1,a1,a5
1c008bd8:	953a                	add	a0,a0,a4
1c008bda:	bce6a823          	sw	a4,-1072(a3) # 1c00cbd0 <__rt_alloc_l1>
1c008bde:	ea5ff06f          	j	1c008a82 <rt_user_alloc_init>

1c008be2 <__rt_allocs_init>:
1c008be2:	1c00d5b7          	lui	a1,0x1c00d
1c008be6:	c9858793          	addi	a5,a1,-872 # 1c00cc98 <__l2_end>
1c008bea:	1c080637          	lui	a2,0x1c080
1c008bee:	1c00d537          	lui	a0,0x1c00d
1c008bf2:	1141                	addi	sp,sp,-16
1c008bf4:	8e1d                	sub	a2,a2,a5
1c008bf6:	c9858593          	addi	a1,a1,-872
1c008bfa:	bd450513          	addi	a0,a0,-1068 # 1c00cbd4 <__rt_alloc_l2>
1c008bfe:	c606                	sw	ra,12(sp)
1c008c00:	c422                	sw	s0,8(sp)
1c008c02:	e81ff0ef          	jal	ra,1c008a82 <rt_user_alloc_init>
1c008c06:	1b0015b7          	lui	a1,0x1b001
1c008c0a:	3d058793          	addi	a5,a1,976 # 1b0013d0 <__fc_tcdm_end>
1c008c0e:	1b004637          	lui	a2,0x1b004
1c008c12:	1c00d437          	lui	s0,0x1c00d
1c008c16:	8e1d                	sub	a2,a2,a5
1c008c18:	3d058593          	addi	a1,a1,976
1c008c1c:	bd840513          	addi	a0,s0,-1064 # 1c00cbd8 <__rt_alloc_fc_tcdm>
1c008c20:	e63ff0ef          	jal	ra,1c008a82 <rt_user_alloc_init>
1c008c24:	014027f3          	csrr	a5,uhartid
1c008c28:	ca5797b3          	p.extractu	a5,a5,5,5
1c008c2c:	e799                	bnez	a5,1c008c3a <__rt_allocs_init+0x58>
1c008c2e:	4422                	lw	s0,8(sp)
1c008c30:	40b2                	lw	ra,12(sp)
1c008c32:	4501                	li	a0,0
1c008c34:	0141                	addi	sp,sp,16
1c008c36:	f83ff06f          	j	1c008bb8 <__rt_alloc_init_l1_for_fc>
1c008c3a:	bd840513          	addi	a0,s0,-1064
1c008c3e:	4591                	li	a1,4
1c008c40:	e63ff0ef          	jal	ra,1c008aa2 <rt_user_alloc>
1c008c44:	40b2                	lw	ra,12(sp)
1c008c46:	4422                	lw	s0,8(sp)
1c008c48:	1c00d7b7          	lui	a5,0x1c00d
1c008c4c:	bca7a823          	sw	a0,-1072(a5) # 1c00cbd0 <__rt_alloc_l1>
1c008c50:	0141                	addi	sp,sp,16
1c008c52:	8082                	ret

1c008c54 <pi_cl_l1_malloc>:
}

void *pi_cl_l1_malloc(struct pi_device *device, uint32_t size)
{
  return rt_alloc(RT_ALLOC_CL_DATA, size);
1c008c54:	4509                	li	a0,2
1c008c56:	ee1ff06f          	j	1c008b36 <rt_alloc>

1c008c5a <pi_cl_l1_free>:
  if (flags >= RT_ALLOC_CL_DATA) return rt_user_free(rt_alloc_l1(flags - RT_ALLOC_CL_DATA), _chunk, size);
1c008c5a:	1c00d7b7          	lui	a5,0x1c00d
1c008c5e:	bd07a503          	lw	a0,-1072(a5) # 1c00cbd0 <__rt_alloc_l1>
1c008c62:	e89ff06f          	j	1c008aea <rt_user_free>

1c008c66 <pi_l2_malloc>:
    return rt_user_alloc(rt_alloc_l2(), size);
1c008c66:	85aa                	mv	a1,a0
1c008c68:	1c00d537          	lui	a0,0x1c00d
1c008c6c:	bd450513          	addi	a0,a0,-1068 # 1c00cbd4 <__rt_alloc_l2>
1c008c70:	e33ff06f          	j	1c008aa2 <rt_user_alloc>

1c008c74 <pi_l2_free>:
    rt_user_free(rt_alloc_l2(), _chunk, size);
1c008c74:	862e                	mv	a2,a1
1c008c76:	85aa                	mv	a1,a0
1c008c78:	1c00d537          	lui	a0,0x1c00d
1c008c7c:	bd450513          	addi	a0,a0,-1068 # 1c00cbd4 <__rt_alloc_l2>
1c008c80:	e6bff06f          	j	1c008aea <rt_user_free>

1c008c84 <__rt_time_poweroff>:
  rt_event_wait(event);
}

void pi_time_wait_us(int time_us)
{
  rt_time_wait_us(time_us);
1c008c84:	002007b7          	lui	a5,0x200
1c008c88:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c008c8c:	0087a783          	lw	a5,8(a5)
1c008c90:	1c00d737          	lui	a4,0x1c00d
1c008c94:	baf72223          	sw	a5,-1116(a4) # 1c00cba4 <timer_count>
1c008c98:	4501                	li	a0,0
1c008c9a:	8082                	ret

1c008c9c <__rt_time_poweron>:
1c008c9c:	1c00d7b7          	lui	a5,0x1c00d
1c008ca0:	ba47a703          	lw	a4,-1116(a5) # 1c00cba4 <timer_count>
1c008ca4:	002007b7          	lui	a5,0x200
1c008ca8:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c008cac:	00e7a423          	sw	a4,8(a5)
1c008cb0:	4501                	li	a0,0
1c008cb2:	8082                	ret

1c008cb4 <rt_event_push_delayed>:
1c008cb4:	30047373          	csrrci	t1,mstatus,8
1c008cb8:	1c00d637          	lui	a2,0x1c00d
1c008cbc:	bdc62703          	lw	a4,-1060(a2) # 1c00cbdc <first_delayed>
1c008cc0:	002007b7          	lui	a5,0x200
1c008cc4:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c008cc8:	0087a783          	lw	a5,8(a5)
1c008ccc:	46f9                	li	a3,30
1c008cce:	0405e5b3          	p.max	a1,a1,zero
1c008cd2:	02d5c5b3          	div	a1,a1,a3
1c008cd6:	800006b7          	lui	a3,0x80000
1c008cda:	fff6c693          	not	a3,a3
1c008cde:	00d7f833          	and	a6,a5,a3
1c008ce2:	0585                	addi	a1,a1,1
1c008ce4:	97ae                	add	a5,a5,a1
1c008ce6:	dd1c                	sw	a5,56(a0)
1c008ce8:	982e                	add	a6,a6,a1
1c008cea:	4781                	li	a5,0
1c008cec:	c719                	beqz	a4,1c008cfa <rt_event_push_delayed+0x46>
1c008cee:	03872883          	lw	a7,56(a4)
1c008cf2:	00d8f8b3          	and	a7,a7,a3
1c008cf6:	0108e863          	bltu	a7,a6,1c008d06 <rt_event_push_delayed+0x52>
1c008cfa:	cb89                	beqz	a5,1c008d0c <rt_event_push_delayed+0x58>
1c008cfc:	cfc8                	sw	a0,28(a5)
1c008cfe:	cd58                	sw	a4,28(a0)
1c008d00:	30031073          	csrw	mstatus,t1
1c008d04:	8082                	ret
1c008d06:	87ba                	mv	a5,a4
1c008d08:	4f58                	lw	a4,28(a4)
1c008d0a:	b7cd                	j	1c008cec <rt_event_push_delayed+0x38>
1c008d0c:	002007b7          	lui	a5,0x200
1c008d10:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c008d14:	bca62e23          	sw	a0,-1060(a2)
1c008d18:	cd58                	sw	a4,28(a0)
1c008d1a:	0087a703          	lw	a4,8(a5)
1c008d1e:	95ba                	add	a1,a1,a4
1c008d20:	00b7a823          	sw	a1,16(a5)
1c008d24:	08500713          	li	a4,133
1c008d28:	00e7a023          	sw	a4,0(a5)
1c008d2c:	bfd1                	j	1c008d00 <rt_event_push_delayed+0x4c>

1c008d2e <rt_time_wait_us>:
1c008d2e:	1101                	addi	sp,sp,-32
1c008d30:	85aa                	mv	a1,a0
1c008d32:	4501                	li	a0,0
1c008d34:	ce06                	sw	ra,28(sp)
1c008d36:	cc22                	sw	s0,24(sp)
1c008d38:	c62e                	sw	a1,12(sp)
1c008d3a:	c43ff0ef          	jal	ra,1c00897c <rt_event_get_blocking>
1c008d3e:	45b2                	lw	a1,12(sp)
1c008d40:	842a                	mv	s0,a0
1c008d42:	f73ff0ef          	jal	ra,1c008cb4 <rt_event_push_delayed>
1c008d46:	8522                	mv	a0,s0
1c008d48:	4462                	lw	s0,24(sp)
1c008d4a:	40f2                	lw	ra,28(sp)
1c008d4c:	6105                	addi	sp,sp,32
1c008d4e:	d05ff06f          	j	1c008a52 <rt_event_wait>

1c008d52 <__rt_time_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_time_init()
{
  int err = 0;

  first_delayed = NULL;
1c008d52:	1c00d7b7          	lui	a5,0x1c00d
1c008d56:	bc07ae23          	sw	zero,-1060(a5) # 1c00cbdc <first_delayed>
//

#ifndef LANGUAGE_ASSEMBLY

static inline uint32_t timer_cfg_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CFG_LO_OFFSET); }
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c008d5a:	002007b7          	lui	a5,0x200
{
1c008d5e:	1141                	addi	sp,sp,-16
1c008d60:	08300713          	li	a4,131
1c008d64:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c008d68:	c606                	sw	ra,12(sp)
1c008d6a:	c422                	sw	s0,8(sp)
1c008d6c:	00e7a023          	sw	a4,0(a5)
    TIMER_CFG_LO_RESET(1)  |
    TIMER_CFG_LO_CCFG(1)
  );

#if defined(ARCHI_HAS_FC)
  rt_irq_set_handler(ARCHI_FC_EVT_TIMER0_HI, __rt_timer_handler);
1c008d70:	1c0095b7          	lui	a1,0x1c009
1c008d74:	dde58593          	addi	a1,a1,-546 # 1c008dde <__rt_timer_handler>
1c008d78:	452d                	li	a0,11
1c008d7a:	dccff0ef          	jal	ra,1c008346 <rt_irq_set_handler>
  ARCHI_WRITE(base, EU_CORE_MASK_IRQ_OR, irqMask);
1c008d7e:	6785                	lui	a5,0x1
1c008d80:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c008d84:	00204737          	lui	a4,0x204
1c008d88:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008d8c:	00f72423          	sw	a5,8(a4)
#else
  rt_irq_set_handler(ARCHI_EVT_TIMER0_HI, __rt_timer_handler);
  rt_irq_mask_set(1<<ARCHI_EVT_TIMER0_HI);
#endif

  err |= __rt_cbsys_add(RT_CBSYS_POWEROFF, __rt_time_poweroff, NULL);
1c008d90:	1c0095b7          	lui	a1,0x1c009
1c008d94:	4601                	li	a2,0
1c008d96:	c8458593          	addi	a1,a1,-892 # 1c008c84 <__rt_time_poweroff>
1c008d9a:	4509                	li	a0,2
1c008d9c:	f16ff0ef          	jal	ra,1c0084b2 <__rt_cbsys_add>
  err |= __rt_cbsys_add(RT_CBSYS_POWERON, __rt_time_poweron, NULL);
1c008da0:	1c0095b7          	lui	a1,0x1c009
  err |= __rt_cbsys_add(RT_CBSYS_POWEROFF, __rt_time_poweroff, NULL);
1c008da4:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_POWERON, __rt_time_poweron, NULL);
1c008da6:	4601                	li	a2,0
1c008da8:	c9c58593          	addi	a1,a1,-868 # 1c008c9c <__rt_time_poweron>
1c008dac:	450d                	li	a0,3
1c008dae:	f04ff0ef          	jal	ra,1c0084b2 <__rt_cbsys_add>
1c008db2:	8d41                	or	a0,a0,s0

  if (err) rt_fatal("Unable to initialize time driver\n");
1c008db4:	c10d                	beqz	a0,1c008dd6 <__rt_time_init+0x84>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c008db6:	01402673          	csrr	a2,uhartid
1c008dba:	1c00c537          	lui	a0,0x1c00c
  return (hart_id >> 5) & 0x3f;
1c008dbe:	40565593          	srai	a1,a2,0x5
1c008dc2:	f265b5b3          	p.bclr	a1,a1,25,6
1c008dc6:	f4563633          	p.bclr	a2,a2,26,5
1c008dca:	4ac50513          	addi	a0,a0,1196 # 1c00c4ac <IntegerExpLUT+0xcc>
1c008dce:	7a3010ef          	jal	ra,1c00ad70 <printf>
1c008dd2:	723010ef          	jal	ra,1c00acf4 <abort>
}
1c008dd6:	40b2                	lw	ra,12(sp)
1c008dd8:	4422                	lw	s0,8(sp)
1c008dda:	0141                	addi	sp,sp,16
1c008ddc:	8082                	ret

1c008dde <__rt_timer_handler>:
#if defined(__LLVM__)
void __rt_timer_handler()
#else
void __attribute__((interrupt)) __rt_timer_handler()
#endif
{
1c008dde:	7179                	addi	sp,sp,-48
1c008de0:	d032                	sw	a2,32(sp)
  rt_event_t *event = first_delayed;
1c008de2:	1c00d637          	lui	a2,0x1c00d
{
1c008de6:	ca3e                	sw	a5,20(sp)
  rt_event_t *event = first_delayed;
1c008de8:	bdc62783          	lw	a5,-1060(a2) # 1c00cbdc <first_delayed>
{
1c008dec:	ce36                	sw	a3,28(sp)

static inline uint32_t timer_cfg_hi_get(uint32_t base) { return ARCHI_READ(base, TIMER_CFG_HI_OFFSET); }
static inline void timer_cfg_hi_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_HI_OFFSET, value); }

static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c008dee:	002006b7          	lui	a3,0x200
1c008df2:	40468693          	addi	a3,a3,1028 # 200404 <__L2+0x180404>
1c008df6:	d61a                	sw	t1,44(sp)
1c008df8:	d42a                	sw	a0,40(sp)
1c008dfa:	d22e                	sw	a1,36(sp)
1c008dfc:	cc3a                	sw	a4,24(sp)
1c008dfe:	c842                	sw	a6,16(sp)
1c008e00:	c646                	sw	a7,12(sp)
1c008e02:	c472                	sw	t3,8(sp)
1c008e04:	c276                	sw	t4,4(sp)
1c008e06:	0086a683          	lw	a3,8(a3)
1c008e0a:	01c00593          	li	a1,28
1c008e0e:	01c02503          	lw	a0,28(zero) # 1c <__rt_sched>
1c008e12:	41cc                	lw	a1,4(a1)

  uint32_t current_time = timer_count_get(timer_base_fc(0, 1));

  // First dequeue and push to their scheduler all events with the same number of
  // ticks as they were waiting for the same time.
  while (event && (current_time - event->implem.time) < 0x7fffffff)
1c008e14:	80000337          	lui	t1,0x80000
1c008e18:	4801                	li	a6,0
1c008e1a:	4881                	li	a7,0
1c008e1c:	01c00e93          	li	t4,28
1c008e20:	ffe34313          	xori	t1,t1,-2
1c008e24:	e7ad                	bnez	a5,1c008e8e <__rt_timer_handler+0xb0>
1c008e26:	00088463          	beqz	a7,1c008e2e <__rt_timer_handler+0x50>
1c008e2a:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c008e2e:	00080463          	beqz	a6,1c008e36 <__rt_timer_handler+0x58>
1c008e32:	00bea223          	sw	a1,4(t4)
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c008e36:	002007b7          	lui	a5,0x200
1c008e3a:	08100713          	li	a4,129
1c008e3e:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
    event = next;
  }

  // Update the wait list with the next waiting event which has a different number
  // of ticks
  first_delayed = event;
1c008e42:	bc062e23          	sw	zero,-1060(a2)
1c008e46:	00e7a023          	sw	a4,0(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_BUFFER_CLEAR, evtMask);
1c008e4a:	6785                	lui	a5,0x1
1c008e4c:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c008e50:	00204737          	lui	a4,0x204
1c008e54:	02f72423          	sw	a5,40(a4) # 204028 <__L2+0x184028>
    rt_irq_clr(1 << ARCHI_FC_EVT_TIMER0_HI);
#else
    rt_irq_clr(1 << ARCHI_EVT_TIMER0_HI);
#endif
  }
}
1c008e58:	5332                	lw	t1,44(sp)
1c008e5a:	5522                	lw	a0,40(sp)
1c008e5c:	5592                	lw	a1,36(sp)
1c008e5e:	5602                	lw	a2,32(sp)
1c008e60:	46f2                	lw	a3,28(sp)
1c008e62:	4762                	lw	a4,24(sp)
1c008e64:	47d2                	lw	a5,20(sp)
1c008e66:	4842                	lw	a6,16(sp)
1c008e68:	48b2                	lw	a7,12(sp)
1c008e6a:	4e22                	lw	t3,8(sp)
1c008e6c:	4e92                	lw	t4,4(sp)
1c008e6e:	6145                	addi	sp,sp,48
1c008e70:	30200073          	mret
  event->next = NULL;
1c008e74:	0007a023          	sw	zero,0(a5)
    rt_event_t *next = event->implem.next;
1c008e78:	01c7ae03          	lw	t3,28(a5)
  if (sched->first == NULL) {
1c008e7c:	c511                	beqz	a0,1c008e88 <__rt_timer_handler+0xaa>
    sched->last->next = event;
1c008e7e:	c19c                	sw	a5,0(a1)
    event = next;
1c008e80:	85be                	mv	a1,a5
1c008e82:	4805                	li	a6,1
1c008e84:	87f2                	mv	a5,t3
1c008e86:	bf79                	j	1c008e24 <__rt_timer_handler+0x46>
  if (sched->first == NULL) {
1c008e88:	853e                	mv	a0,a5
1c008e8a:	4885                	li	a7,1
1c008e8c:	bfd5                	j	1c008e80 <__rt_timer_handler+0xa2>
  while (event && (current_time - event->implem.time) < 0x7fffffff)
1c008e8e:	0387ae03          	lw	t3,56(a5)
1c008e92:	41c68e33          	sub	t3,a3,t3
1c008e96:	fdc37fe3          	bleu	t3,t1,1c008e74 <__rt_timer_handler+0x96>
1c008e9a:	00088463          	beqz	a7,1c008ea2 <__rt_timer_handler+0xc4>
1c008e9e:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c008ea2:	00080463          	beqz	a6,1c008eaa <__rt_timer_handler+0xcc>
1c008ea6:	00bea223          	sw	a1,4(t4)
static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c008eaa:	00200737          	lui	a4,0x200
1c008eae:	40470713          	addi	a4,a4,1028 # 200404 <__L2+0x180404>
  first_delayed = event;
1c008eb2:	bcf62e23          	sw	a5,-1060(a2)
1c008eb6:	00872603          	lw	a2,8(a4)
      first_delayed->implem.time - current_time
1c008eba:	5f9c                	lw	a5,56(a5)
1c008ebc:	40d786b3          	sub	a3,a5,a3
1c008ec0:	96b2                	add	a3,a3,a2

static inline uint32_t timer_cnt_hi_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_HI_OFFSET); }
static inline void timer_cnt_hi_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CNT_HI_OFFSET, value); }

static inline uint32_t timer_cmp_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CMP_LO_OFFSET); }
static inline void timer_cmp_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CMP_LO_OFFSET, value); }
1c008ec2:	00d72823          	sw	a3,16(a4)
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c008ec6:	08500793          	li	a5,133
1c008eca:	00f72023          	sw	a5,0(a4)
}
1c008ece:	b769                	j	1c008e58 <__rt_timer_handler+0x7a>

1c008ed0 <rt_periph_copy>:
  }

  __rt_socevents_status[index] &= ~(1<<event);

  rt_irq_restore(irq);
}
1c008ed0:	7179                	addi	sp,sp,-48
1c008ed2:	d422                	sw	s0,40(sp)
1c008ed4:	842a                	mv	s0,a0
1c008ed6:	d606                	sw	ra,44(sp)
1c008ed8:	d226                	sw	s1,36(sp)
1c008eda:	d04a                	sw	s2,32(sp)
1c008edc:	30047973          	csrrci	s2,mstatus,8
1c008ee0:	4015d493          	srai	s1,a1,0x1
1c008ee4:	1a102537          	lui	a0,0x1a102
1c008ee8:	049e                	slli	s1,s1,0x7
1c008eea:	94aa                	add	s1,s1,a0
1c008eec:	00459513          	slli	a0,a1,0x4
1c008ef0:	8941                	andi	a0,a0,16
1c008ef2:	94aa                	add	s1,s1,a0
1c008ef4:	853e                	mv	a0,a5
1c008ef6:	ef89                	bnez	a5,1c008f10 <rt_periph_copy+0x40>
1c008ef8:	ce2e                	sw	a1,28(sp)
1c008efa:	cc32                	sw	a2,24(sp)
1c008efc:	ca36                	sw	a3,20(sp)
1c008efe:	c83a                	sw	a4,16(sp)
1c008f00:	c63e                	sw	a5,12(sp)
1c008f02:	9d3ff0ef          	jal	ra,1c0088d4 <__rt_wait_event_prepare_blocking>
1c008f06:	47b2                	lw	a5,12(sp)
1c008f08:	4742                	lw	a4,16(sp)
1c008f0a:	46d2                	lw	a3,20(sp)
1c008f0c:	4662                	lw	a2,24(sp)
1c008f0e:	45f2                	lw	a1,28(sp)
1c008f10:	e419                	bnez	s0,1c008f1e <rt_periph_copy+0x4e>
1c008f12:	03850413          	addi	s0,a0,56 # 1a102038 <__l1_end+0xa101fb4>
1c008f16:	04052223          	sw	zero,68(a0)
1c008f1a:	04052a23          	sw	zero,84(a0)
1c008f1e:	00c42803          	lw	a6,12(s0)
1c008f22:	c054                	sw	a3,4(s0)
1c008f24:	cc08                	sw	a0,24(s0)
1c008f26:	f6483833          	p.bclr	a6,a6,27,4
1c008f2a:	4891                	li	a7,4
1c008f2c:	c0474733          	p.bset	a4,a4,0,4
1c008f30:	0908e163          	bltu	a7,a6,1c008fb2 <rt_periph_copy+0xe2>
1c008f34:	03000893          	li	a7,48
1c008f38:	0596                	slli	a1,a1,0x5
1c008f3a:	98ae                	add	a7,a7,a1
1c008f3c:	0008a303          	lw	t1,0(a7)
1c008f40:	00042a23          	sw	zero,20(s0)
1c008f44:	03000813          	li	a6,48
1c008f48:	02031b63          	bnez	t1,1c008f7e <rt_periph_copy+0xae>
1c008f4c:	0088a023          	sw	s0,0(a7)
1c008f50:	00b808b3          	add	a7,a6,a1
1c008f54:	0088a303          	lw	t1,8(a7)
1c008f58:	0088a223          	sw	s0,4(a7)
1c008f5c:	02031663          	bnez	t1,1c008f88 <rt_periph_copy+0xb8>
1c008f60:	00848893          	addi	a7,s1,8
1c008f64:	0008a883          	lw	a7,0(a7)
1c008f68:	0208f893          	andi	a7,a7,32
1c008f6c:	00089e63          	bnez	a7,1c008f88 <rt_periph_copy+0xb8>
1c008f70:	00c4a023          	sw	a2,0(s1)
1c008f74:	00d4a223          	sw	a3,4(s1)
1c008f78:	00e4a423          	sw	a4,8(s1)
1c008f7c:	a005                	j	1c008f9c <rt_periph_copy+0xcc>
1c008f7e:	0048a883          	lw	a7,4(a7)
1c008f82:	0088aa23          	sw	s0,20(a7)
1c008f86:	b7e9                	j	1c008f50 <rt_periph_copy+0x80>
1c008f88:	00042823          	sw	zero,16(s0)
1c008f8c:	c010                	sw	a2,0(s0)
1c008f8e:	c054                	sw	a3,4(s0)
1c008f90:	c418                	sw	a4,8(s0)
1c008f92:	00031563          	bnez	t1,1c008f9c <rt_periph_copy+0xcc>
1c008f96:	982e                	add	a6,a6,a1
1c008f98:	00882423          	sw	s0,8(a6)
1c008f9c:	e399                	bnez	a5,1c008fa2 <rt_periph_copy+0xd2>
1c008f9e:	a89ff0ef          	jal	ra,1c008a26 <__rt_wait_event>
1c008fa2:	30091073          	csrw	mstatus,s2
1c008fa6:	50b2                	lw	ra,44(sp)
1c008fa8:	5422                	lw	s0,40(sp)
1c008faa:	5492                	lw	s1,36(sp)
1c008fac:	5902                	lw	s2,32(sp)
1c008fae:	6145                	addi	sp,sp,48
1c008fb0:	8082                	ret
1c008fb2:	fe6835e3          	p.bneimm	a6,6,1c008f9c <rt_periph_copy+0xcc>
1c008fb6:	03000893          	li	a7,48
1c008fba:	0596                	slli	a1,a1,0x5
1c008fbc:	98ae                	add	a7,a7,a1
1c008fbe:	0008a303          	lw	t1,0(a7)
1c008fc2:	00042a23          	sw	zero,20(s0)
1c008fc6:	03000813          	li	a6,48
1c008fca:	00031f63          	bnez	t1,1c008fe8 <rt_periph_copy+0x118>
1c008fce:	0088a023          	sw	s0,0(a7)
1c008fd2:	95c2                	add	a1,a1,a6
1c008fd4:	c1c0                	sw	s0,4(a1)
1c008fd6:	00031e63          	bnez	t1,1c008ff2 <rt_periph_copy+0x122>
1c008fda:	02442803          	lw	a6,36(s0)
1c008fde:	1a1025b7          	lui	a1,0x1a102
1c008fe2:	1b05a023          	sw	a6,416(a1) # 1a1021a0 <__l1_end+0xa10211c>
1c008fe6:	b769                	j	1c008f70 <rt_periph_copy+0xa0>
1c008fe8:	0048a883          	lw	a7,4(a7)
1c008fec:	0088aa23          	sw	s0,20(a7)
1c008ff0:	b7cd                	j	1c008fd2 <rt_periph_copy+0x102>
1c008ff2:	c418                	sw	a4,8(s0)
1c008ff4:	4598                	lw	a4,8(a1)
1c008ff6:	c010                	sw	a2,0(s0)
1c008ff8:	c054                	sw	a3,4(s0)
1c008ffa:	00042823          	sw	zero,16(s0)
1c008ffe:	ff59                	bnez	a4,1c008f9c <rt_periph_copy+0xcc>
1c009000:	c580                	sw	s0,8(a1)
1c009002:	bf69                	j	1c008f9c <rt_periph_copy+0xcc>

1c009004 <__rt_periph_wait_event>:
1c009004:	30047673          	csrrci	a2,mstatus,8
1c009008:	477d                	li	a4,31
1c00900a:	4781                	li	a5,0
1c00900c:	00a75463          	ble	a0,a4,1c009014 <__rt_periph_wait_event+0x10>
1c009010:	1501                	addi	a0,a0,-32
1c009012:	4785                	li	a5,1
1c009014:	00279713          	slli	a4,a5,0x2
1c009018:	4685                	li	a3,1
1c00901a:	03000793          	li	a5,48
1c00901e:	00a696b3          	sll	a3,a3,a0
1c009022:	97ba                	add	a5,a5,a4
1c009024:	00204837          	lui	a6,0x204
1c009028:	2807a703          	lw	a4,640(a5)
1c00902c:	8f75                	and	a4,a4,a3
1c00902e:	cf19                	beqz	a4,1c00904c <__rt_periph_wait_event+0x48>
1c009030:	c999                	beqz	a1,1c009046 <__rt_periph_wait_event+0x42>
1c009032:	2807a683          	lw	a3,640(a5)
1c009036:	4705                	li	a4,1
1c009038:	00a71533          	sll	a0,a4,a0
1c00903c:	fff54513          	not	a0,a0
1c009040:	8d75                	and	a0,a0,a3
1c009042:	28a7a023          	sw	a0,640(a5)
1c009046:	30061073          	csrw	mstatus,a2
1c00904a:	8082                	ret
1c00904c:	03886703          	p.elw	a4,56(a6) # 204038 <__L2+0x184038>
1c009050:	30046773          	csrrsi	a4,mstatus,8
1c009054:	30047773          	csrrci	a4,mstatus,8
1c009058:	bfc1                	j	1c009028 <__rt_periph_wait_event+0x24>

1c00905a <__rt_periph_init>:
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
    rt_periph_channel_t *channel = &periph_channels[i];
    channel->first = NULL;
    channel->firstToEnqueue = NULL;
    channel->base = hal_udma_channel_base(i);
    channel->callback = udma_event_handler;
1c00905a:	1c000537          	lui	a0,0x1c000
1c00905e:	03000693          	li	a3,48
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
1c009062:	4601                	li	a2,0
1c009064:	03000713          	li	a4,48
static inline unsigned int hal_udma_periph_base(int id) {
  return ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_PERIPH_OFFSET(id);
}

static inline __attribute__((always_inline)) unsigned int hal_udma_channel_base(int id) {
  return ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_PERIPH_OFFSET(id>>1) + UDMA_CHANNEL_OFFSET(id&1);
1c009068:	1a1028b7          	lui	a7,0x1a102
    channel->callback = udma_event_handler;
1c00906c:	2b450513          	addi	a0,a0,692 # 1c0002b4 <udma_event_handler>
1c009070:	014950fb          	lp.setupi	x1,20,1c009094 <__rt_periph_init+0x3a>
1c009074:	40165793          	srai	a5,a2,0x1
1c009078:	00461813          	slli	a6,a2,0x4
1c00907c:	079e                	slli	a5,a5,0x7
1c00907e:	97c6                	add	a5,a5,a7
1c009080:	01087813          	andi	a6,a6,16
1c009084:	97c2                	add	a5,a5,a6
    channel->first = NULL;
1c009086:	0006a023          	sw	zero,0(a3)
    channel->firstToEnqueue = NULL;
1c00908a:	0006a423          	sw	zero,8(a3)
    channel->base = hal_udma_channel_base(i);
1c00908e:	c6dc                	sw	a5,12(a3)
    channel->callback = udma_event_handler;
1c009090:	cec8                	sw	a0,28(a3)
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
1c009092:	0605                	addi	a2,a2,1
1c009094:	02068693          	addi	a3,a3,32
  }
  
  for (int i=0; i<ARCHI_SOC_EVENT_UDMA_NB_EXTRA_EVT; i++)
  {
    __rt_udma_extra_callback[i] = __rt_soc_evt_no_udma;
1c009098:	1c0006b7          	lui	a3,0x1c000
1c00909c:	28870613          	addi	a2,a4,648
1c0090a0:	45e68693          	addi	a3,a3,1118 # 1c00045e <__rt_soc_evt_no_udma>
1c0090a4:	00a250fb          	lp.setupi	x1,10,1c0090ac <__rt_periph_init+0x52>
1c0090a8:	00d6222b          	p.sw	a3,4(a2!)
1c0090ac:	0001                	nop
  }

  __rt_socevents_status[0] = 0;
1c0090ae:	28072023          	sw	zero,640(a4)
  __rt_socevents_status[1] = 0;
1c0090b2:	28072223          	sw	zero,644(a4)
}
1c0090b6:	8082                	ret

1c0090b8 <rt_freq_set_and_get>:
void rt_freq_wait_convergence(int fll)
{
}

int rt_freq_set_and_get(rt_freq_domain_e domain, unsigned int freq, unsigned int *out_freq)
{
1c0090b8:	1141                	addi	sp,sp,-16
1c0090ba:	c226                	sw	s1,4(sp)
1c0090bc:	84ae                	mv	s1,a1
1c0090be:	c606                	sw	ra,12(sp)
1c0090c0:	c422                	sw	s0,8(sp)
1c0090c2:	c04a                	sw	s2,0(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0090c4:	30047973          	csrrci	s2,mstatus,8
  __asm__ __volatile__ ("" : : : "memory");
1c0090c8:	1c00d437          	lui	s0,0x1c00d
  int irq = rt_irq_disable();
  int err = 0;

  rt_trace(RT_TRACE_FREQ, "Setting domain frequency (domain: %d, freq: %d)\n", domain, freq);

  if (domain == RT_FREQ_DOMAIN_CL)
1c0090cc:	00153f63          	p.bneimm	a0,1,1c0090ea <rt_freq_set_and_get+0x32>
  {
    // On cluster side, this is straight forward as the fll is not shared
    __rt_fll_set_freq(__RT_FLL_CL, freq);
    __rt_freq_domains[RT_FREQ_DOMAIN_CL] = freq;
1c0090d0:	be040413          	addi	s0,s0,-1056 # 1c00cbe0 <__rt_freq_domains>
    __rt_fll_set_freq(__RT_FLL_CL, freq);
1c0090d4:	294d                	jal	1c009586 <__rt_fll_set_freq>
    __rt_freq_domains[RT_FREQ_DOMAIN_CL] = freq;
1c0090d6:	c044                	sw	s1,4(s0)
  __builtin_pulp_spr_write(reg, val);
1c0090d8:	30091073          	csrw	mstatus,s2
  }

  rt_irq_restore(irq);

  return err;
}
1c0090dc:	40b2                	lw	ra,12(sp)
1c0090de:	4422                	lw	s0,8(sp)
1c0090e0:	4492                	lw	s1,4(sp)
1c0090e2:	4902                	lw	s2,0(sp)
1c0090e4:	4501                	li	a0,0
1c0090e6:	0141                	addi	sp,sp,16
1c0090e8:	8082                	ret
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_BEFORE);
1c0090ea:	4511                	li	a0,4
1c0090ec:	c04ff0ef          	jal	ra,1c0084f0 <__rt_cbsys_exec>
    __rt_fll_set_freq(0, freq);
1c0090f0:	85a6                	mv	a1,s1
1c0090f2:	4501                	li	a0,0
1c0090f4:	2949                	jal	1c009586 <__rt_fll_set_freq>
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_AFTER);
1c0090f6:	4515                	li	a0,5
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = freq;
1c0090f8:	be942023          	sw	s1,-1056(s0)
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_AFTER);
1c0090fc:	bf4ff0ef          	jal	ra,1c0084f0 <__rt_cbsys_exec>
1c009100:	bfe1                	j	1c0090d8 <rt_freq_set_and_get+0x20>

1c009102 <__rt_freq_init>:

void __rt_freq_init()
{
1c009102:	1141                	addi	sp,sp,-16
1c009104:	c422                	sw	s0,8(sp)
1c009106:	c606                	sw	ra,12(sp)

  __rt_flls_constructor();
1c009108:	29b5                	jal	1c009584 <__rt_flls_constructor>
  return __rt_platform;
1c00910a:	1c00d7b7          	lui	a5,0x1c00d

  // On all chips only FLL 0 is initialized here as it is shared between periph and soc
  // while FLL 1 is used for cluster only and thus is initialized when the cluster is set on.
  if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00910e:	83c7a783          	lw	a5,-1988(a5) # 1c00c83c <__rt_platform>
1c009112:	1c00d437          	lui	s0,0x1c00d
1c009116:	0017ae63          	p.beqimm	a5,1,1c009132 <__rt_freq_init+0x30>
  {
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = __rt_fll_init(__RT_FLL_FC);
1c00911a:	4501                	li	a0,0
1c00911c:	2991                	jal	1c009570 <__rt_fll_init>
1c00911e:	bea42023          	sw	a0,-1056(s0) # 1c00cbe0 <__rt_freq_domains>
  }
  else
  {
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = 40000000;
  }
  __rt_freq_domains[RT_FREQ_DOMAIN_CL] = 0;
1c009122:	be040413          	addi	s0,s0,-1056
1c009126:	00042223          	sw	zero,4(s0)

}
1c00912a:	40b2                	lw	ra,12(sp)
1c00912c:	4422                	lw	s0,8(sp)
1c00912e:	0141                	addi	sp,sp,16
1c009130:	8082                	ret
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = 40000000;
1c009132:	026267b7          	lui	a5,0x2626
1c009136:	a0078793          	addi	a5,a5,-1536 # 2625a00 <__L2+0x25a5a00>
1c00913a:	bef42023          	sw	a5,-1056(s0)
1c00913e:	b7d5                	j	1c009122 <__rt_freq_init+0x20>

1c009140 <SetFllMultDivFactors>:
  if (PMURetentionState.Fields.BootType != COLD_BOOT && PMURetentionState.Fields.ClusterWakeUpState) {
          // ChangePowerSystemState(POWER_SYSTEM_STATE(PMURetentionState.Fields.WakeupState, PMURetentionState.Fields.ClusterWakeUpState), 0);
    __rt_pmu_cluster_power_up(NULL, NULL);
    if (PMU_ClusterIsRunning() && PMURetentionState.Fields.FllClusterRetention) InitOneFll(FLL_CLUSTER, 1);
  }
}
1c009140:	100517b3          	p.fl1	a5,a0
1c009144:	4769                	li	a4,26
1c009146:	8f1d                	sub	a4,a4,a5
1c009148:	4785                	li	a5,1
1c00914a:	04f76733          	p.max	a4,a4,a5
1c00914e:	47a1                	li	a5,8
1c009150:	04f74733          	p.min	a4,a4,a5
1c009154:	fff70693          	addi	a3,a4,-1
1c009158:	00f55793          	srli	a5,a0,0xf
1c00915c:	00d797b3          	sll	a5,a5,a3
1c009160:	c19c                	sw	a5,0(a1)
1c009162:	07be                	slli	a5,a5,0xf
1c009164:	c218                	sw	a4,0(a2)
1c009166:	00d7d533          	srl	a0,a5,a3
1c00916a:	8082                	ret

1c00916c <soc_eu_fcEventMask_setEvent>:
1c00916c:	47fd                	li	a5,31
1c00916e:	4721                	li	a4,8
1c009170:	00f50463          	beq	a0,a5,1c009178 <soc_eu_fcEventMask_setEvent+0xc>
1c009174:	1501                	addi	a0,a0,-32
1c009176:	4711                	li	a4,4
1c009178:	1a1066b7          	lui	a3,0x1a106
1c00917c:	20e6f603          	p.lw	a2,a4(a3)
1c009180:	4785                	li	a5,1
1c009182:	00a79533          	sll	a0,a5,a0
1c009186:	fff54513          	not	a0,a0
1c00918a:	8d71                	and	a0,a0,a2
1c00918c:	00a6e723          	p.sw	a0,a4(a3)
1c009190:	8082                	ret

1c009192 <__rt_pmu_cluster_power_down>:
1c009192:	1c00d7b7          	lui	a5,0x1c00d
1c009196:	83c7a783          	lw	a5,-1988(a5) # 1c00c83c <__rt_platform>
1c00919a:	0817a363          	p.beqimm	a5,1,1c009220 <__rt_pmu_cluster_power_down+0x8e>
1c00919e:	1141                	addi	sp,sp,-16
1c0091a0:	1a1046b7          	lui	a3,0x1a104
1c0091a4:	c606                	sw	ra,12(sp)
1c0091a6:	c422                	sw	s0,8(sp)
1c0091a8:	c226                	sw	s1,4(sp)
1c0091aa:	c04a                	sw	s2,0(sp)
1c0091ac:	0706a683          	lw	a3,112(a3) # 1a104070 <__l1_end+0xa103fec>
1c0091b0:	1c00d737          	lui	a4,0x1c00d
1c0091b4:	84470713          	addi	a4,a4,-1980 # 1c00c844 <SystemStateToSCUFastSeq>
1c0091b8:	00874783          	lbu	a5,8(a4)
1c0091bc:	8436                	mv	s0,a3
1c0091be:	c0079933          	p.extractu	s2,a5,0,0
1c0091c2:	04193963          	p.bneimm	s2,1,1c009214 <__rt_pmu_cluster_power_down+0x82>
1c0091c6:	01069613          	slli	a2,a3,0x10
1c0091ca:	04064563          	bltz	a2,1c009214 <__rt_pmu_cluster_power_down+0x82>
1c0091ce:	c007b7b3          	p.bclr	a5,a5,0,0
1c0091d2:	c0a92433          	p.insert	s0,s2,0,10
1c0091d6:	1a1044b7          	lui	s1,0x1a104
1c0091da:	00f70423          	sb	a5,8(a4)
1c0091de:	0684a823          	sw	s0,112(s1) # 1a104070 <__l1_end+0xa103fec>
1c0091e2:	4585                	li	a1,1
1c0091e4:	02300513          	li	a0,35
1c0091e8:	e1dff0ef          	jal	ra,1c009004 <__rt_periph_wait_event>
1c0091ec:	4785                	li	a5,1
1c0091ee:	00f4a623          	sw	a5,12(s1)
1c0091f2:	c0302433          	p.insert	s0,zero,0,3
1c0091f6:	0684a823          	sw	s0,112(s1)
1c0091fa:	c0d92433          	p.insert	s0,s2,0,13
1c0091fe:	0684a823          	sw	s0,112(s1)
1c009202:	4422                	lw	s0,8(sp)
1c009204:	40b2                	lw	ra,12(sp)
1c009206:	4492                	lw	s1,4(sp)
1c009208:	4902                	lw	s2,0(sp)
1c00920a:	4585                	li	a1,1
1c00920c:	457d                	li	a0,31
1c00920e:	0141                	addi	sp,sp,16
1c009210:	df5ff06f          	j	1c009004 <__rt_periph_wait_event>
1c009214:	40b2                	lw	ra,12(sp)
1c009216:	4422                	lw	s0,8(sp)
1c009218:	4492                	lw	s1,4(sp)
1c00921a:	4902                	lw	s2,0(sp)
1c00921c:	0141                	addi	sp,sp,16
1c00921e:	8082                	ret
1c009220:	8082                	ret

1c009222 <SetFllFrequency>:
1c009222:	7179                	addi	sp,sp,-48
1c009224:	d422                	sw	s0,40(sp)
1c009226:	d226                	sw	s1,36(sp)
1c009228:	1c00d437          	lui	s0,0x1c00d
1c00922c:	84aa                	mv	s1,a0
1c00922e:	d606                	sw	ra,44(sp)
1c009230:	852e                	mv	a0,a1
1c009232:	84440413          	addi	s0,s0,-1980 # 1c00c844 <SystemStateToSCUFastSeq>
1c009236:	0014be63          	p.bneimm	s1,1,1c009252 <SetFllFrequency+0x30>
1c00923a:	00844783          	lbu	a5,8(s0)
1c00923e:	c0079733          	p.extractu	a4,a5,0,0
1c009242:	08172763          	p.beqimm	a4,1,1c0092d0 <SetFllFrequency+0xae>
1c009246:	4501                	li	a0,0
1c009248:	50b2                	lw	ra,44(sp)
1c00924a:	5422                	lw	s0,40(sp)
1c00924c:	5492                	lw	s1,36(sp)
1c00924e:	6145                	addi	sp,sp,48
1c009250:	8082                	ret
1c009252:	ce2d                	beqz	a2,1c0092cc <SetFllFrequency+0xaa>
1c009254:	00844783          	lbu	a5,8(s0)
1c009258:	03200713          	li	a4,50
1c00925c:	c21797b3          	p.extractu	a5,a5,1,1
1c009260:	97a2                	add	a5,a5,s0
1c009262:	00a7c783          	lbu	a5,10(a5)
1c009266:	00e787db          	p.mac	a5,a5,a4,zero
1c00926a:	22678793          	addi	a5,a5,550
1c00926e:	ecad                	bnez	s1,1c0092e8 <SetFllFrequency+0xc6>
1c009270:	0007a6b7          	lui	a3,0x7a
1c009274:	eb237737          	lui	a4,0xeb237
1c009278:	12068693          	addi	a3,a3,288 # 7a120 <__L1Cl+0x6a120>
1c00927c:	c8070713          	addi	a4,a4,-896 # eb236c80 <pulp__FC+0xeb236c81>
1c009280:	42d78733          	p.mac	a4,a5,a3
1c009284:	fcb761e3          	bltu	a4,a1,1c009246 <SetFllFrequency+0x24>
1c009288:	c62a                	sw	a0,12(sp)
1c00928a:	d76ff0ef          	jal	ra,1c008800 <__rt_bridge_req_shutdown>
1c00928e:	4532                	lw	a0,12(sp)
1c009290:	0870                	addi	a2,sp,28
1c009292:	082c                	addi	a1,sp,24
1c009294:	eadff0ef          	jal	ra,1c009140 <SetFllMultDivFactors>
1c009298:	4762                	lw	a4,24(sp)
1c00929a:	800007b7          	lui	a5,0x80000
1c00929e:	1a1006b7          	lui	a3,0x1a100
1c0092a2:	de0727b3          	p.insert	a5,a4,15,0
1c0092a6:	4772                	lw	a4,28(sp)
1c0092a8:	c7a727b3          	p.insert	a5,a4,3,26
1c0092ac:	00449713          	slli	a4,s1,0x4
1c0092b0:	0711                	addi	a4,a4,4
1c0092b2:	00f6e723          	p.sw	a5,a4(a3)
1c0092b6:	00249793          	slli	a5,s1,0x2
1c0092ba:	943e                	add	s0,s0,a5
1c0092bc:	d008                	sw	a0,32(s0)
1c0092be:	c808                	sw	a0,16(s0)
1c0092c0:	f4c1                	bnez	s1,1c009248 <SetFllFrequency+0x26>
1c0092c2:	c62a                	sw	a0,12(sp)
1c0092c4:	c98ff0ef          	jal	ra,1c00875c <__rt_bridge_set_available>
1c0092c8:	4532                	lw	a0,12(sp)
1c0092ca:	bfbd                	j	1c009248 <SetFllFrequency+0x26>
1c0092cc:	f0f1                	bnez	s1,1c009290 <SetFllFrequency+0x6e>
1c0092ce:	bf6d                	j	1c009288 <SetFllFrequency+0x66>
1c0092d0:	d261                	beqz	a2,1c009290 <SetFllFrequency+0x6e>
1c0092d2:	c21797b3          	p.extractu	a5,a5,1,1
1c0092d6:	97a2                	add	a5,a5,s0
1c0092d8:	00a7c783          	lbu	a5,10(a5) # 8000000a <pulp__FC+0x8000000b>
1c0092dc:	03200713          	li	a4,50
1c0092e0:	00e787db          	p.mac	a5,a5,a4,zero
1c0092e4:	22678793          	addi	a5,a5,550
1c0092e8:	0006b6b7          	lui	a3,0x6b
1c0092ec:	eaf5a737          	lui	a4,0xeaf5a
1c0092f0:	6c068693          	addi	a3,a3,1728 # 6b6c0 <__L1Cl+0x5b6c0>
1c0092f4:	5c070713          	addi	a4,a4,1472 # eaf5a5c0 <pulp__FC+0xeaf5a5c1>
1c0092f8:	42d78733          	p.mac	a4,a5,a3
1c0092fc:	f8a77ae3          	bleu	a0,a4,1c009290 <SetFllFrequency+0x6e>
1c009300:	b799                	j	1c009246 <SetFllFrequency+0x24>

1c009302 <InitOneFll>:
1c009302:	7179                	addi	sp,sp,-48
1c009304:	00451713          	slli	a4,a0,0x4
1c009308:	ce4e                	sw	s3,28(sp)
1c00930a:	1a1007b7          	lui	a5,0x1a100
1c00930e:	00470993          	addi	s3,a4,4
1c009312:	d606                	sw	ra,44(sp)
1c009314:	d422                	sw	s0,40(sp)
1c009316:	d226                	sw	s1,36(sp)
1c009318:	d04a                	sw	s2,32(sp)
1c00931a:	2137f783          	p.lw	a5,s3(a5)
1c00931e:	1c00d437          	lui	s0,0x1c00d
1c009322:	84440413          	addi	s0,s0,-1980 # 1c00c844 <SystemStateToSCUFastSeq>
1c009326:	00251913          	slli	s2,a0,0x2
1c00932a:	c585                	beqz	a1,1c009352 <InitOneFll+0x50>
1c00932c:	c7a79733          	p.extractu	a4,a5,3,26
1c009330:	1007d7b3          	p.exthz	a5,a5
1c009334:	07be                	slli	a5,a5,0xf
1c009336:	c701                	beqz	a4,1c00933e <InitOneFll+0x3c>
1c009338:	177d                	addi	a4,a4,-1
1c00933a:	00e7d7b3          	srl	a5,a5,a4
1c00933e:	944a                	add	s0,s0,s2
1c009340:	d01c                	sw	a5,32(s0)
1c009342:	c81c                	sw	a5,16(s0)
1c009344:	50b2                	lw	ra,44(sp)
1c009346:	5422                	lw	s0,40(sp)
1c009348:	5492                	lw	s1,36(sp)
1c00934a:	5902                	lw	s2,32(sp)
1c00934c:	49f2                	lw	s3,28(sp)
1c00934e:	6145                	addi	sp,sp,48
1c009350:	8082                	ret
1c009352:	0007d363          	bgez	a5,1c009358 <InitOneFll+0x56>
1c009356:	c105                	beqz	a0,1c009376 <InitOneFll+0x74>
1c009358:	810047b7          	lui	a5,0x81004
1c00935c:	1a1006b7          	lui	a3,0x1a100
1c009360:	00870613          	addi	a2,a4,8
1c009364:	10778793          	addi	a5,a5,263 # 81004107 <pulp__FC+0x81004108>
1c009368:	00f6e623          	p.sw	a5,a2(a3)
1c00936c:	014c04b7          	lui	s1,0x14c0
1c009370:	0731                	addi	a4,a4,12
1c009372:	0096e723          	p.sw	s1,a4(a3)
1c009376:	02faf537          	lui	a0,0x2faf
1c00937a:	0070                	addi	a2,sp,12
1c00937c:	002c                	addi	a1,sp,8
1c00937e:	08050513          	addi	a0,a0,128 # 2faf080 <__L2+0x2f2f080>
1c009382:	dbfff0ef          	jal	ra,1c009140 <SetFllMultDivFactors>
1c009386:	47a2                	lw	a5,8(sp)
1c009388:	c00004b7          	lui	s1,0xc0000
1c00938c:	de07a4b3          	p.insert	s1,a5,15,0
1c009390:	47b2                	lw	a5,12(sp)
1c009392:	c7a7a4b3          	p.insert	s1,a5,3,26
1c009396:	1a1007b7          	lui	a5,0x1a100
1c00939a:	0097e9a3          	p.sw	s1,s3(a5)
1c00939e:	944a                	add	s0,s0,s2
1c0093a0:	d008                	sw	a0,32(s0)
1c0093a2:	c808                	sw	a0,16(s0)
1c0093a4:	b745                	j	1c009344 <InitOneFll+0x42>

1c0093a6 <__rt_pmu_cluster_power_up>:
1c0093a6:	1141                	addi	sp,sp,-16
1c0093a8:	c226                	sw	s1,4(sp)
1c0093aa:	1c00d4b7          	lui	s1,0x1c00d
1c0093ae:	c606                	sw	ra,12(sp)
1c0093b0:	c422                	sw	s0,8(sp)
1c0093b2:	c04a                	sw	s2,0(sp)
1c0093b4:	84448793          	addi	a5,s1,-1980 # 1c00c844 <SystemStateToSCUFastSeq>
1c0093b8:	0087c783          	lbu	a5,8(a5) # 1a100008 <__l1_end+0xa0fff84>
1c0093bc:	4501                	li	a0,0
1c0093be:	c00797b3          	p.extractu	a5,a5,0,0
1c0093c2:	e785                	bnez	a5,1c0093ea <__rt_pmu_cluster_power_up+0x44>
1c0093c4:	1c00d7b7          	lui	a5,0x1c00d
1c0093c8:	83c7a783          	lw	a5,-1988(a5) # 1c00c83c <__rt_platform>
1c0093cc:	84448493          	addi	s1,s1,-1980
1c0093d0:	0217b363          	p.bneimm	a5,1,1c0093f6 <__rt_pmu_cluster_power_up+0x50>
1c0093d4:	1a1047b7          	lui	a5,0x1a104
1c0093d8:	0007a623          	sw	zero,12(a5) # 1a10400c <__l1_end+0xa103f88>
1c0093dc:	0084c783          	lbu	a5,8(s1)
1c0093e0:	4505                	li	a0,1
1c0093e2:	c007c7b3          	p.bset	a5,a5,0,0
1c0093e6:	00f48423          	sb	a5,8(s1)
1c0093ea:	40b2                	lw	ra,12(sp)
1c0093ec:	4422                	lw	s0,8(sp)
1c0093ee:	4492                	lw	s1,4(sp)
1c0093f0:	4902                	lw	s2,0(sp)
1c0093f2:	0141                	addi	sp,sp,16
1c0093f4:	8082                	ret
1c0093f6:	1a104437          	lui	s0,0x1a104
1c0093fa:	07042403          	lw	s0,112(s0) # 1a104070 <__l1_end+0xa103fec>
1c0093fe:	c0a417b3          	p.extractu	a5,s0,0,10
1c009402:	ef89                	bnez	a5,1c00941c <__rt_pmu_cluster_power_up+0x76>
1c009404:	4785                	li	a5,1
1c009406:	c0a7a433          	p.insert	s0,a5,0,10
1c00940a:	1a1047b7          	lui	a5,0x1a104
1c00940e:	0687a823          	sw	s0,112(a5) # 1a104070 <__l1_end+0xa103fec>
1c009412:	4585                	li	a1,1
1c009414:	02300513          	li	a0,35
1c009418:	bedff0ef          	jal	ra,1c009004 <__rt_periph_wait_event>
1c00941c:	4785                	li	a5,1
1c00941e:	c037a433          	p.insert	s0,a5,0,3
1c009422:	1a104937          	lui	s2,0x1a104
1c009426:	06892823          	sw	s0,112(s2) # 1a104070 <__l1_end+0xa103fec>
1c00942a:	4585                	li	a1,1
1c00942c:	457d                	li	a0,31
1c00942e:	bd7ff0ef          	jal	ra,1c009004 <__rt_periph_wait_event>
1c009432:	00092623          	sw	zero,12(s2)
1c009436:	c0d02433          	p.insert	s0,zero,0,13
1c00943a:	06892823          	sw	s0,112(s2)
1c00943e:	c0a02433          	p.insert	s0,zero,0,10
1c009442:	06892823          	sw	s0,112(s2)
1c009446:	4585                	li	a1,1
1c009448:	02300513          	li	a0,35
1c00944c:	bb9ff0ef          	jal	ra,1c009004 <__rt_periph_wait_event>
1c009450:	01c4c783          	lbu	a5,28(s1)
1c009454:	0207f793          	andi	a5,a5,32
1c009458:	e789                	bnez	a5,1c009462 <__rt_pmu_cluster_power_up+0xbc>
1c00945a:	4581                	li	a1,0
1c00945c:	4505                	li	a0,1
1c00945e:	ea5ff0ef          	jal	ra,1c009302 <InitOneFll>
1c009462:	c0e44433          	p.bset	s0,s0,0,14
1c009466:	1a1047b7          	lui	a5,0x1a104
1c00946a:	0687a823          	sw	s0,112(a5) # 1a104070 <__l1_end+0xa103fec>
1c00946e:	b7bd                	j	1c0093dc <__rt_pmu_cluster_power_up+0x36>

1c009470 <InitFlls>:

  }
}

void  __attribute__ ((noinline)) InitFlls()
{
1c009470:	1141                	addi	sp,sp,-16
1c009472:	c422                	sw	s0,8(sp)
  __rt_bridge_req_shutdown();

  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c009474:	1c00d437          	lui	s0,0x1c00d
{
1c009478:	c606                	sw	ra,12(sp)
  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c00947a:	84440413          	addi	s0,s0,-1980 # 1c00c844 <SystemStateToSCUFastSeq>
  __rt_bridge_req_shutdown();
1c00947e:	b82ff0ef          	jal	ra,1c008800 <__rt_bridge_req_shutdown>
  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c009482:	01c44583          	lbu	a1,28(s0)
1c009486:	4501                	li	a0,0
1c009488:	c04595b3          	p.extractu	a1,a1,0,4
1c00948c:	e77ff0ef          	jal	ra,1c009302 <InitOneFll>
#define PMU_ERROR_CLUSTER_STATE_CHANGE_FAILED   (0x1<<4)

extern void 		   InitPMUDriver();

static inline int 	   PMU_ClusterIsDown()    { return (CLUSTER_STATE(PMUState.State)==CLUSTER_OFF);}
static inline int 	   PMU_ClusterIsRunning() { return (CLUSTER_STATE(PMUState.State)==CLUSTER_ON);}
1c009490:	00844783          	lbu	a5,8(s0)
1c009494:	c00797b3          	p.extractu	a5,a5,0,0
  if (PMU_ClusterIsRunning()) InitOneFll(FLL_CLUSTER, PMURetentionState.Fields.FllClusterRetention);
1c009498:	0017b963          	p.bneimm	a5,1,1c0094aa <InitFlls+0x3a>
1c00949c:	01c44583          	lbu	a1,28(s0)
1c0094a0:	4505                	li	a0,1
1c0094a2:	c05595b3          	p.extractu	a1,a1,0,5
1c0094a6:	e5dff0ef          	jal	ra,1c009302 <InitOneFll>

#ifdef __RT_USE_BRIDGE
  __rt_bridge_set_available();
#endif
}
1c0094aa:	4422                	lw	s0,8(sp)
1c0094ac:	40b2                	lw	ra,12(sp)
1c0094ae:	0141                	addi	sp,sp,16
  __rt_bridge_set_available();
1c0094b0:	aacff06f          	j	1c00875c <__rt_bridge_set_available>

1c0094b4 <__rt_pmu_init>:
1c0094b4:	1c00d7b7          	lui	a5,0x1c00d
  if (rt_platform() == ARCHI_PLATFORM_FPGA) {
1c0094b8:	83c7a783          	lw	a5,-1988(a5) # 1c00c83c <__rt_platform>
1c0094bc:	0a17a963          	p.beqimm	a5,1,1c00956e <__rt_pmu_init+0xba>
{
1c0094c0:	1141                	addi	sp,sp,-16
  __rt_wakeup_use_fast = 0;
1c0094c2:	1c00d7b7          	lui	a5,0x1c00d
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, PMU_DCDC_CONFIG_OFFSET);
1c0094c6:	1a104637          	lui	a2,0x1a104
{
1c0094ca:	c606                	sw	ra,12(sp)
  __rt_wakeup_use_fast = 0;
1c0094cc:	be07a423          	sw	zero,-1048(a5) # 1c00cbe8 <__rt_wakeup_use_fast>
1c0094d0:	10062703          	lw	a4,256(a2) # 1a104100 <__l1_end+0xa10407c>
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, PMU_RETENTION_CONFIG_OFFSET);
1c0094d4:	10462683          	lw	a3,260(a2)
  PMURetentionState.Raw = GetRetentiveState();
1c0094d8:	1c00d7b7          	lui	a5,0x1c00d
1c0094dc:	84478793          	addi	a5,a5,-1980 # 1c00c844 <SystemStateToSCUFastSeq>
1c0094e0:	cfd4                	sw	a3,28(a5)
  PMUState.State = RetPMUStateToPMUState[PMURetentionState.Fields.WakeupState];
1c0094e2:	c2e696b3          	p.extractu	a3,a3,1,14
1c0094e6:	96be                	add	a3,a3,a5
1c0094e8:	0286c683          	lbu	a3,40(a3) # 1a100028 <__l1_end+0xa0fffa4>
  PMUState.DCDC_Settings[REGU_OFF] = 0;
1c0094ec:	000786a3          	sb	zero,13(a5)
  PMUState.State = RetPMUStateToPMUState[PMURetentionState.Fields.WakeupState];
1c0094f0:	00d78423          	sb	a3,8(a5)
  PMUState.DCDC_Settings[REGU_NV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Nominal*8);
1c0094f4:	c80716b3          	p.extractu	a3,a4,4,0
1c0094f8:	00d78523          	sb	a3,10(a5)
  PMUState.DCDC_Settings[REGU_LV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Low*8);
1c0094fc:	c90716b3          	p.extractu	a3,a4,4,16
  PMUState.DCDC_Settings[REGU_RET] = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Retentive*8);
1c009500:	c9871733          	p.extractu	a4,a4,4,24
  PMUState.DCDC_Settings[REGU_LV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Low*8);
1c009504:	00d785a3          	sb	a3,11(a5)
  PMUState.DCDC_Settings[REGU_RET] = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Retentive*8);
1c009508:	00e78623          	sb	a4,12(a5)
  Bypass.Raw = GetPMUBypass();
1c00950c:	07062783          	lw	a5,112(a2)
  Bypass.Fields.Bypass = 1;
1c009510:	4705                	li	a4,1
1c009512:	c00727b3          	p.insert	a5,a4,0,0
  Bypass.Fields.BypassClock = 1;
1c009516:	c09727b3          	p.insert	a5,a4,0,9
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
1c00951a:	06f62823          	sw	a5,112(a2)
  InitFlls();
1c00951e:	f53ff0ef          	jal	ra,1c009470 <InitFlls>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_CLUSTER_ON_OFF);
1c009522:	457d                	li	a0,31
1c009524:	c49ff0ef          	jal	ra,1c00916c <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_MSP);
1c009528:	02000513          	li	a0,32
1c00952c:	c41ff0ef          	jal	ra,1c00916c <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_MODE_CHANGED);
1c009530:	02100513          	li	a0,33
1c009534:	c39ff0ef          	jal	ra,1c00916c <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_OK);
1c009538:	02200513          	li	a0,34
1c00953c:	c31ff0ef          	jal	ra,1c00916c <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_DELAYED);
1c009540:	02300513          	li	a0,35
1c009544:	c29ff0ef          	jal	ra,1c00916c <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_PICL_OK);
1c009548:	02400513          	li	a0,36
1c00954c:	c21ff0ef          	jal	ra,1c00916c <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_SCU_OK);
1c009550:	02500513          	li	a0,37
1c009554:	c19ff0ef          	jal	ra,1c00916c <soc_eu_fcEventMask_setEvent>
  PMU_Write(DLC_IMR, 0x7);
1c009558:	1a1077b7          	lui	a5,0x1a107
1c00955c:	471d                	li	a4,7
1c00955e:	00e7a623          	sw	a4,12(a5) # 1a10700c <__l1_end+0xa106f88>
  PMU_Write(DLC_IFR, (MAESTRO_EVENT_PICL_OK|MAESTRO_EVENT_SCU_OK));
1c009562:	4761                	li	a4,24
1c009564:	00e7a823          	sw	a4,16(a5)
}
1c009568:	40b2                	lw	ra,12(sp)
1c00956a:	0141                	addi	sp,sp,16
1c00956c:	8082                	ret
1c00956e:	8082                	ret

1c009570 <__rt_fll_init>:


unsigned int __rt_fll_init(int fll)
{
  return FllsFrequency[fll];
1c009570:	00251793          	slli	a5,a0,0x2
1c009574:	1c00d537          	lui	a0,0x1c00d
1c009578:	84450513          	addi	a0,a0,-1980 # 1c00c844 <SystemStateToSCUFastSeq>
1c00957c:	953e                	add	a0,a0,a5
}
1c00957e:	5108                	lw	a0,32(a0)
1c009580:	8082                	ret

1c009582 <__rt_fll_deinit>:

void __rt_fll_deinit(int fll)
{
}
1c009582:	8082                	ret

1c009584 <__rt_flls_constructor>:

void __rt_flls_constructor()
{
}
1c009584:	8082                	ret

1c009586 <__rt_fll_set_freq>:

unsigned int __rt_fll_set_freq(int fll, unsigned int frequency)
{
  return SetFllFrequency(fll, frequency, 0);
1c009586:	4601                	li	a2,0
1c009588:	c9bff06f          	j	1c009222 <SetFllFrequency>

1c00958c <__rt_init_cluster_data>:
{
#if defined(EU_VERSION) && EU_VERSION >= 3
  eu_evt_maskSet((1<<PULP_DISPATCH_EVENT) | (1<<PULP_HW_BAR_EVENT) | (1<<PULP_MUTEX_EVENT));
  rt_team_fork(rt_nb_pe(), cluster_pe_start, NULL);
#endif
}
1c00958c:	04050713          	addi	a4,a0,64
1c009590:	00400793          	li	a5,4
1c009594:	01671613          	slli	a2,a4,0x16
1c009598:	e6c7b7b3          	p.bclr	a5,a5,19,12
1c00959c:	1c00d6b7          	lui	a3,0x1c00d
1c0095a0:	97b2                	add	a5,a5,a2
1c0095a2:	c1868693          	addi	a3,a3,-1000 # 1c00cc18 <_bss_end>
1c0095a6:	08000713          	li	a4,128
1c0095aa:	8f95                	sub	a5,a5,a3
1c0095ac:	00f685b3          	add	a1,a3,a5
1c0095b0:	02e04963          	bgtz	a4,1c0095e2 <__rt_init_cluster_data+0x56>
1c0095b4:	1c00d7b7          	lui	a5,0x1c00d
1c0095b8:	02800713          	li	a4,40
1c0095bc:	bf078793          	addi	a5,a5,-1040 # 1c00cbf0 <__rt_fc_cluster_data>
1c0095c0:	42e507b3          	p.mac	a5,a0,a4
1c0095c4:	00201737          	lui	a4,0x201
1c0095c8:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c0095cc:	9732                	add	a4,a4,a2
1c0095ce:	cb98                	sw	a4,16(a5)
1c0095d0:	00400713          	li	a4,4
1c0095d4:	e6c73733          	p.bclr	a4,a4,19,12
1c0095d8:	9732                	add	a4,a4,a2
1c0095da:	0007a423          	sw	zero,8(a5)
1c0095de:	cbd8                	sw	a4,20(a5)
1c0095e0:	8082                	ret
1c0095e2:	0046a80b          	p.lw	a6,4(a3!)
1c0095e6:	1771                	addi	a4,a4,-4
1c0095e8:	0105a023          	sw	a6,0(a1)
1c0095ec:	b7c1                	j	1c0095ac <__rt_init_cluster_data+0x20>

1c0095ee <__rt_cluster_init>:
1c0095ee:	1c00d537          	lui	a0,0x1c00d
1c0095f2:	1141                	addi	sp,sp,-16
1c0095f4:	02800613          	li	a2,40
1c0095f8:	4581                	li	a1,0
1c0095fa:	bf050513          	addi	a0,a0,-1040 # 1c00cbf0 <__rt_fc_cluster_data>
1c0095fe:	c606                	sw	ra,12(sp)
1c009600:	434010ef          	jal	ra,1c00aa34 <memset>
1c009604:	1c00c5b7          	lui	a1,0x1c00c
1c009608:	db858593          	addi	a1,a1,-584 # 1c00bdb8 <__rt_dma_2d>
1c00960c:	4525                	li	a0,9
1c00960e:	d39fe0ef          	jal	ra,1c008346 <rt_irq_set_handler>
1c009612:	1c0005b7          	lui	a1,0x1c000
1c009616:	17458593          	addi	a1,a1,372 # 1c000174 <__rt_remote_enqueue_event>
1c00961a:	4505                	li	a0,1
1c00961c:	d2bfe0ef          	jal	ra,1c008346 <rt_irq_set_handler>
1c009620:	4789                	li	a5,2
1c009622:	00204737          	lui	a4,0x204
1c009626:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
1c00962a:	00f72423          	sw	a5,8(a4)
1c00962e:	1c0005b7          	lui	a1,0x1c000
1c009632:	13c58593          	addi	a1,a1,316 # 1c00013c <__rt_bridge_enqueue_event>
1c009636:	4511                	li	a0,4
1c009638:	d0ffe0ef          	jal	ra,1c008346 <rt_irq_set_handler>
1c00963c:	47c1                	li	a5,16
1c00963e:	00204737          	lui	a4,0x204
1c009642:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
1c009646:	00f72423          	sw	a5,8(a4)
1c00964a:	40b2                	lw	ra,12(sp)
1c00964c:	4501                	li	a0,0
1c00964e:	0141                	addi	sp,sp,16
1c009650:	8082                	ret

1c009652 <__rt_cluster_mount_step>:
{
1c009652:	7179                	addi	sp,sp,-48
1c009654:	ce4e                	sw	s3,28(sp)
1c009656:	cc52                	sw	s4,24(sp)
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c009658:	1c000a37          	lui	s4,0x1c000
  return (void *)(ARCHI_CLUSTER_GLOBAL_ADDR(cid) + ((int)data & 0xFFF));
1c00965c:	00400993          	li	s3,4
1c009660:	080a0a13          	addi	s4,s4,128 # 1c000080 <_start>
{
1c009664:	d422                	sw	s0,40(sp)
1c009666:	d606                	sw	ra,44(sp)
1c009668:	d226                	sw	s1,36(sp)
1c00966a:	d04a                	sw	s2,32(sp)
1c00966c:	ca56                	sw	s5,20(sp)
1c00966e:	842a                	mv	s0,a0
1c009670:	e6c9b9b3          	p.bclr	s3,s3,19,12
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c009674:	ce0a3a33          	p.bclr	s4,s4,7,0
    switch (cluster->state)
1c009678:	4c5c                	lw	a5,28(s0)
1c00967a:	0217ad63          	p.beqimm	a5,1,1c0096b4 <__rt_cluster_mount_step+0x62>
1c00967e:	0c27a663          	p.beqimm	a5,2,1c00974a <__rt_cluster_mount_step+0xf8>
1c009682:	e3e1                	bnez	a5,1c009742 <__rt_cluster_mount_step+0xf0>
  int cid = cluster->cid;
1c009684:	5018                	lw	a4,32(s0)
  cluster->powered_up = 0;
1c009686:	00042c23          	sw	zero,24(s0)
  if (cid == 0)
1c00968a:	eb01                	bnez	a4,1c00969a <__rt_cluster_mount_step+0x48>
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c00968c:	5048                	lw	a0,36(s0)
1c00968e:	006c                	addi	a1,sp,12
    int pending = 0;
1c009690:	c602                	sw	zero,12(sp)
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c009692:	d15ff0ef          	jal	ra,1c0093a6 <__rt_pmu_cluster_power_up>
    return pending;
1c009696:	47b2                	lw	a5,12(sp)
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c009698:	cc08                	sw	a0,24(s0)
    cluster->state++;
1c00969a:	4c58                	lw	a4,28(s0)
1c00969c:	0705                	addi	a4,a4,1
1c00969e:	cc58                	sw	a4,28(s0)
  while(!end)
1c0096a0:	dfe1                	beqz	a5,1c009678 <__rt_cluster_mount_step+0x26>
}
1c0096a2:	50b2                	lw	ra,44(sp)
1c0096a4:	5422                	lw	s0,40(sp)
1c0096a6:	5492                	lw	s1,36(sp)
1c0096a8:	5902                	lw	s2,32(sp)
1c0096aa:	49f2                	lw	s3,28(sp)
1c0096ac:	4a62                	lw	s4,24(sp)
1c0096ae:	4ad2                	lw	s5,20(sp)
1c0096b0:	6145                	addi	sp,sp,48
1c0096b2:	8082                	ret
1c0096b4:	02042a83          	lw	s5,32(s0)
1c0096b8:	040a8493          	addi	s1,s5,64
1c0096bc:	04da                	slli	s1,s1,0x16
1c0096be:	009987b3          	add	a5,s3,s1
  pool->first_call_fc_for_cl = NULL;
1c0096c2:	0007a023          	sw	zero,0(a5)
  pool->first_call_fc = NULL;
1c0096c6:	0007a223          	sw	zero,4(a5)
  pool->last_call_fc = NULL;
1c0096ca:	0007a423          	sw	zero,8(a5)
  __rt_cluster_fc_task_lock = 0;
1c0096ce:	100007b7          	lui	a5,0x10000
1c0096d2:	0807a023          	sw	zero,128(a5) # 10000080 <__rt_cluster_fc_task_lock>
  return __rt_platform;
1c0096d6:	1c00d7b7          	lui	a5,0x1c00d
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c0096da:	83c7a783          	lw	a5,-1988(a5) # 1c00c83c <__rt_platform>
1c0096de:	0017af63          	p.beqimm	a5,1,1c0096fc <__rt_cluster_mount_step+0xaa>
      int init_freq = __rt_fll_init(__RT_FLL_CL);
1c0096e2:	4505                	li	a0,1
1c0096e4:	e8dff0ef          	jal	ra,1c009570 <__rt_fll_init>

  #if defined(FLL_VERSION)

  static inline int rt_freq_get(rt_freq_domain_e domain)
  {
    return __rt_freq_domains[domain];
1c0096e8:	1c00d7b7          	lui	a5,0x1c00d
1c0096ec:	be078793          	addi	a5,a5,-1056 # 1c00cbe0 <__rt_freq_domains>
1c0096f0:	43cc                	lw	a1,4(a5)
      if (freq)
1c0096f2:	c9b1                	beqz	a1,1c009746 <__rt_cluster_mount_step+0xf4>
    return rt_freq_set_and_get(domain, freq, NULL);
1c0096f4:	4601                	li	a2,0
1c0096f6:	4505                	li	a0,1
1c0096f8:	9c1ff0ef          	jal	ra,1c0090b8 <rt_freq_set_and_get>
    IP_WRITE(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid), ARCHI_CLUSTER_CTRL_CLUSTER_CLK_GATE, 1);
1c0096fc:	00200937          	lui	s2,0x200
1c009700:	01248733          	add	a4,s1,s2
1c009704:	4785                	li	a5,1
1c009706:	02f72023          	sw	a5,32(a4)
    __rt_init_cluster_data(cid);
1c00970a:	8556                	mv	a0,s5
1c00970c:	e81ff0ef          	jal	ra,1c00958c <__rt_init_cluster_data>
    __rt_alloc_init_l1(cid);
1c009710:	8556                	mv	a0,s5
1c009712:	c82ff0ef          	jal	ra,1c008b94 <__rt_alloc_init_l1>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_ICACHE_CTRL_OFFSET, 0xFFFFFFFF);
1c009716:	002017b7          	lui	a5,0x201
1c00971a:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
1c00971e:	577d                	li	a4,-1
1c009720:	04090913          	addi	s2,s2,64 # 200040 <__L2+0x180040>
1c009724:	00e4e7a3          	p.sw	a4,a5(s1)
1c009728:	9926                	add	s2,s2,s1
1c00972a:	008250fb          	lp.setupi	x1,8,1c009732 <__rt_cluster_mount_step+0xe0>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
1c00972e:	0149222b          	p.sw	s4,4(s2!)
1c009732:	0001                	nop
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + EOC_FETCH_OFFSET, mask);
1c009734:	002007b7          	lui	a5,0x200
1c009738:	07a1                	addi	a5,a5,8
1c00973a:	0ff00713          	li	a4,255
1c00973e:	00e4e7a3          	p.sw	a4,a5(s1)
    switch (cluster->state)
1c009742:	4781                	li	a5,0
1c009744:	bf99                	j	1c00969a <__rt_cluster_mount_step+0x48>
    __rt_freq_domains[domain] = freq;
1c009746:	c3c8                	sw	a0,4(a5)
1c009748:	bf55                	j	1c0096fc <__rt_cluster_mount_step+0xaa>
        __rt_event_restore(cluster->mount_event);
1c00974a:	505c                	lw	a5,36(s0)
  event->implem.pending = event->implem.saved_pending;
1c00974c:	5bd8                	lw	a4,52(a5)
1c00974e:	d3d8                	sw	a4,36(a5)
  event->arg[0] = (uintptr_t)event->implem.saved_callback;
1c009750:	57d8                	lw	a4,44(a5)
1c009752:	c3d8                	sw	a4,4(a5)
  event->arg[1] = (uintptr_t)event->implem.saved_arg;
1c009754:	5b98                	lw	a4,48(a5)
1c009756:	c798                	sw	a4,8(a5)
  event->implem.saved_pending = 0;
1c009758:	0207aa23          	sw	zero,52(a5) # 200034 <__L2+0x180034>
        __rt_event_enqueue(cluster->mount_event);
1c00975c:	505c                	lw	a5,36(s0)
  if (sched->first) {
1c00975e:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
1c009762:	01c00693          	li	a3,28
  event->next = NULL;
1c009766:	0007a023          	sw	zero,0(a5)
  if (sched->first) {
1c00976a:	c611                	beqz	a2,1c009776 <__rt_cluster_mount_step+0x124>
    sched->last->next = event;
1c00976c:	42d8                	lw	a4,4(a3)
1c00976e:	c31c                	sw	a5,0(a4)
  sched->last = event;
1c009770:	c2dc                	sw	a5,4(a3)
        end = 1;
1c009772:	4785                	li	a5,1
1c009774:	b71d                	j	1c00969a <__rt_cluster_mount_step+0x48>
    sched->first = event;
1c009776:	00f02e23          	sw	a5,28(zero) # 1c <__rt_sched>
1c00977a:	bfdd                	j	1c009770 <__rt_cluster_mount_step+0x11e>

1c00977c <pi_cluster_conf_init>:
  conf->id = 0;
1c00977c:	00052223          	sw	zero,4(a0)
}
1c009780:	8082                	ret

1c009782 <pi_cluster_open>:
{
1c009782:	1101                	addi	sp,sp,-32
1c009784:	ce06                	sw	ra,28(sp)
1c009786:	cc22                	sw	s0,24(sp)
1c009788:	ca26                	sw	s1,20(sp)
1c00978a:	c84a                	sw	s2,16(sp)
1c00978c:	c64e                	sw	s3,12(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00978e:	30047973          	csrrci	s2,mstatus,8
  struct pi_cluster_conf *conf = (struct pi_cluster_conf *)cluster_dev->config;
1c009792:	00452983          	lw	s3,4(a0)
  cluster_dev->data = (void *)&__rt_fc_cluster_data[cid];
1c009796:	1c00d4b7          	lui	s1,0x1c00d
1c00979a:	02800793          	li	a5,40
  int cid = conf->id;
1c00979e:	0049a703          	lw	a4,4(s3)
  cluster_dev->data = (void *)&__rt_fc_cluster_data[cid];
1c0097a2:	bf048493          	addi	s1,s1,-1040 # 1c00cbf0 <__rt_fc_cluster_data>
1c0097a6:	42f704b3          	p.mac	s1,a4,a5
1c0097aa:	c504                	sw	s1,8(a0)
  rt_event_t *event = __rt_wait_event_prepare_blocking();
1c0097ac:	928ff0ef          	jal	ra,1c0088d4 <__rt_wait_event_prepare_blocking>
  if (rt_is_fc() || (cid && !rt_has_fc()))
1c0097b0:	02000713          	li	a4,32
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0097b4:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c0097b8:	ca5797b3          	p.extractu	a5,a5,5,5
  rt_event_t *event = __rt_wait_event_prepare_blocking();
1c0097bc:	842a                	mv	s0,a0
  if (rt_is_fc() || (cid && !rt_has_fc()))
1c0097be:	04e79563          	bne	a5,a4,1c009808 <pi_cluster_open+0x86>
  event->implem.saved_pending = event->implem.pending;
1c0097c2:	515c                	lw	a5,36(a0)
    cluster->state = RT_CLUSTER_MOUNT_START;
1c0097c4:	0004ae23          	sw	zero,28(s1)
    cluster->mount_event = event;
1c0097c8:	d0c8                	sw	a0,36(s1)
1c0097ca:	d95c                	sw	a5,52(a0)
  event->implem.saved_callback = (void (*)(void *))event->arg[0];
1c0097cc:	415c                	lw	a5,4(a0)
  event->implem.keep = 0;
1c0097ce:	02052423          	sw	zero,40(a0)
  event->implem.saved_callback = (void (*)(void *))event->arg[0];
1c0097d2:	d55c                	sw	a5,44(a0)
  event->implem.saved_arg = (void *)event->arg[1];
1c0097d4:	451c                	lw	a5,8(a0)
  event->arg[1] = (uintptr_t)arg;
1c0097d6:	c504                	sw	s1,8(a0)
  event->implem.saved_arg = (void *)event->arg[1];
1c0097d8:	d91c                	sw	a5,48(a0)
  event->arg[0] = (uintptr_t)callback;
1c0097da:	1c0097b7          	lui	a5,0x1c009
1c0097de:	65278793          	addi	a5,a5,1618 # 1c009652 <__rt_cluster_mount_step>
1c0097e2:	c15c                	sw	a5,4(a0)
  event->implem.pending = 1;  
1c0097e4:	4785                	li	a5,1
1c0097e6:	d15c                	sw	a5,36(a0)
    __rt_cluster_mount_step((void *)cluster);
1c0097e8:	8526                	mv	a0,s1
1c0097ea:	e69ff0ef          	jal	ra,1c009652 <__rt_cluster_mount_step>
  __rt_wait_event(event);
1c0097ee:	8522                	mv	a0,s0
1c0097f0:	a36ff0ef          	jal	ra,1c008a26 <__rt_wait_event>
  __builtin_pulp_spr_write(reg, val);
1c0097f4:	30091073          	csrw	mstatus,s2
}
1c0097f8:	40f2                	lw	ra,28(sp)
1c0097fa:	4462                	lw	s0,24(sp)
1c0097fc:	44d2                	lw	s1,20(sp)
1c0097fe:	4942                	lw	s2,16(sp)
1c009800:	49b2                	lw	s3,12(sp)
1c009802:	4501                	li	a0,0
1c009804:	6105                	addi	sp,sp,32
1c009806:	8082                	ret
  if (__rt_cluster_mount(&__rt_fc_cluster_data[cid], conf->id, 0, event))
1c009808:	0049a483          	lw	s1,4(s3)
    __rt_init_cluster_data(cid);
1c00980c:	8526                	mv	a0,s1
1c00980e:	d7fff0ef          	jal	ra,1c00958c <__rt_init_cluster_data>
1c009812:	04048513          	addi	a0,s1,64
1c009816:	002017b7          	lui	a5,0x201
1c00981a:	055a                	slli	a0,a0,0x16
1c00981c:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
1c009820:	577d                	li	a4,-1
1c009822:	00e567a3          	p.sw	a4,a5(a0)
1c009826:	002007b7          	lui	a5,0x200
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c00982a:	1c000737          	lui	a4,0x1c000
1c00982e:	04478793          	addi	a5,a5,68 # 200044 <__L2+0x180044>
1c009832:	08070713          	addi	a4,a4,128 # 1c000080 <_start>
1c009836:	97aa                	add	a5,a5,a0
1c009838:	ce073733          	p.bclr	a4,a4,7,0
1c00983c:	007250fb          	lp.setupi	x1,7,1c009844 <pi_cluster_open+0xc2>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
1c009840:	00e7a22b          	p.sw	a4,4(a5!)
1c009844:	0001                	nop
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + EOC_FETCH_OFFSET, mask);
1c009846:	002007b7          	lui	a5,0x200
1c00984a:	07a1                	addi	a5,a5,8
1c00984c:	577d                	li	a4,-1
1c00984e:	00e567a3          	p.sw	a4,a5(a0)
    rt_event_push(event);
1c009852:	8522                	mv	a0,s0
1c009854:	94aff0ef          	jal	ra,1c00899e <rt_event_push>
1c009858:	bf59                	j	1c0097ee <pi_cluster_open+0x6c>

1c00985a <pi_cluster_close>:
  __rt_cluster_unmount(data->cid, 0, NULL);
1c00985a:	451c                	lw	a5,8(a0)
{
1c00985c:	1101                	addi	sp,sp,-32
1c00985e:	cc22                	sw	s0,24(sp)
  __rt_cluster_unmount(data->cid, 0, NULL);
1c009860:	5380                	lw	s0,32(a5)
1c009862:	1c00d7b7          	lui	a5,0x1c00d
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c009866:	83c7a783          	lw	a5,-1988(a5) # 1c00c83c <__rt_platform>
{
1c00986a:	ce06                	sw	ra,28(sp)
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c00986c:	0017a563          	p.beqimm	a5,1,1c009876 <pi_cluster_close+0x1c>
      __rt_fll_deinit(__RT_FLL_CL);
1c009870:	4505                	li	a0,1
1c009872:	d11ff0ef          	jal	ra,1c009582 <__rt_fll_deinit>
    int pending = 0;
1c009876:	c602                	sw	zero,12(sp)
  if (cid == 0) __rt_pmu_cluster_power_down(event, &pending);
1c009878:	e409                	bnez	s0,1c009882 <pi_cluster_close+0x28>
1c00987a:	006c                	addi	a1,sp,12
1c00987c:	4501                	li	a0,0
1c00987e:	915ff0ef          	jal	ra,1c009192 <__rt_pmu_cluster_power_down>
}
1c009882:	40f2                	lw	ra,28(sp)
1c009884:	4462                	lw	s0,24(sp)
1c009886:	4501                	li	a0,0
1c009888:	6105                	addi	sp,sp,32
1c00988a:	8082                	ret

1c00988c <__rt_cluster_push_fc_event>:
  while (rt_tas_lock_32((int)&__rt_cluster_fc_task_lock) == -1)
1c00988c:	100006b7          	lui	a3,0x10000
1c009890:	08068693          	addi	a3,a3,128 # 10000080 <__rt_cluster_fc_task_lock>
  return addr | (1<<ARCHI_L1_TAS_BIT);
1c009894:	c146c5b3          	p.bset	a1,a3,0,20
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009898:	4709                	li	a4,2
1c00989a:	002047b7          	lui	a5,0x204
  signed int result = *(volatile signed int *)__rt_tas_addr(addr);
1c00989e:	4190                	lw	a2,0(a1)
1c0098a0:	05f62063          	p.beqimm	a2,-1,1c0098e0 <__rt_cluster_push_fc_event+0x54>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0098a4:	01402773          	csrr	a4,uhartid
  while(data->events != NULL)
1c0098a8:	1c00d7b7          	lui	a5,0x1c00d
  return (hart_id >> 5) & 0x3f;
1c0098ac:	8715                	srai	a4,a4,0x5
1c0098ae:	f2673733          	p.bclr	a4,a4,25,6
1c0098b2:	02800613          	li	a2,40
1c0098b6:	bf078793          	addi	a5,a5,-1040 # 1c00cbf0 <__rt_fc_cluster_data>
1c0098ba:	42c707b3          	p.mac	a5,a4,a2
1c0098be:	4609                	li	a2,2
1c0098c0:	00204737          	lui	a4,0x204
1c0098c4:	43cc                	lw	a1,4(a5)
1c0098c6:	e585                	bnez	a1,1c0098ee <__rt_cluster_push_fc_event+0x62>
  data->events = event;
1c0098c8:	c3c8                	sw	a0,4(a5)
  pulp_write32(evtAddr, coreSet);
1c0098ca:	1b2017b7          	lui	a5,0x1b201
1c0098ce:	e007a223          	sw	zero,-508(a5) # 1b200e04 <__fc_tcdm_end+0x1ffa34>
  *(volatile signed int *)addr = value;
1c0098d2:	0006a023          	sw	zero,0(a3)
1c0098d6:	002047b7          	lui	a5,0x204
1c0098da:	1007a223          	sw	zero,260(a5) # 204104 <__L2+0x184104>
}
1c0098de:	8082                	ret
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0098e0:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0098e4:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0098e8:	00e7a223          	sw	a4,4(a5)
1c0098ec:	bf4d                	j	1c00989e <__rt_cluster_push_fc_event+0x12>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0098ee:	00c72423          	sw	a2,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0098f2:	03c76583          	p.elw	a1,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0098f6:	00c72223          	sw	a2,4(a4)
1c0098fa:	b7e9                	j	1c0098c4 <__rt_cluster_push_fc_event+0x38>

1c0098fc <__rt_cluster_new>:
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c0098fc:	1c0095b7          	lui	a1,0x1c009
{
1c009900:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c009902:	4601                	li	a2,0
1c009904:	5ee58593          	addi	a1,a1,1518 # 1c0095ee <__rt_cluster_init>
1c009908:	4501                	li	a0,0
{
1c00990a:	c606                	sw	ra,12(sp)
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c00990c:	ba7fe0ef          	jal	ra,1c0084b2 <__rt_cbsys_add>
  if (err) rt_fatal("Unable to initialize time driver\n");
1c009910:	c10d                	beqz	a0,1c009932 <__rt_cluster_new+0x36>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c009912:	01402673          	csrr	a2,uhartid
1c009916:	1c00c537          	lui	a0,0x1c00c
  return (hart_id >> 5) & 0x3f;
1c00991a:	40565593          	srai	a1,a2,0x5
1c00991e:	f265b5b3          	p.bclr	a1,a1,25,6
1c009922:	f4563633          	p.bclr	a2,a2,26,5
1c009926:	4ac50513          	addi	a0,a0,1196 # 1c00c4ac <IntegerExpLUT+0xcc>
1c00992a:	446010ef          	jal	ra,1c00ad70 <printf>
1c00992e:	3c6010ef          	jal	ra,1c00acf4 <abort>
}
1c009932:	40b2                	lw	ra,12(sp)
1c009934:	0141                	addi	sp,sp,16
1c009936:	8082                	ret

1c009938 <__rt_cluster_pulpos_emu_init>:
static struct pi_device *__rt_fc_cluster_device;
static struct pi_cluster_task __rt_pulpos_emu_global_cluster_task;


static void __attribute__((constructor)) __rt_cluster_pulpos_emu_init()
{
1c009938:	1141                	addi	sp,sp,-16
  int nb_cluster = rt_nb_cluster();

  __rt_fc_cluster_device = rt_alloc(RT_ALLOC_FC_DATA, sizeof(struct pi_device)*nb_cluster);
1c00993a:	45b1                	li	a1,12
1c00993c:	4505                	li	a0,1
{
1c00993e:	c606                	sw	ra,12(sp)
  __rt_fc_cluster_device = rt_alloc(RT_ALLOC_FC_DATA, sizeof(struct pi_device)*nb_cluster);
1c009940:	9f6ff0ef          	jal	ra,1c008b36 <rt_alloc>
1c009944:	1c00d7b7          	lui	a5,0x1c00d
1c009948:	baa7a423          	sw	a0,-1112(a5) # 1c00cba8 <__rt_fc_cluster_device>
  if (__rt_fc_cluster_device == NULL) {
1c00994c:	e10d                	bnez	a0,1c00996e <__rt_cluster_pulpos_emu_init+0x36>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00994e:	01402673          	csrr	a2,uhartid
    rt_fatal("Unable to allocate cluster control structure\n");
1c009952:	1c00c537          	lui	a0,0x1c00c
  return (hart_id >> 5) & 0x3f;
1c009956:	40565593          	srai	a1,a2,0x5
1c00995a:	f265b5b3          	p.bclr	a1,a1,25,6
1c00995e:	f4563633          	p.bclr	a2,a2,26,5
1c009962:	4f450513          	addi	a0,a0,1268 # 1c00c4f4 <IntegerExpLUT+0x114>
1c009966:	40a010ef          	jal	ra,1c00ad70 <printf>
1c00996a:	38a010ef          	jal	ra,1c00acf4 <abort>
    return;
  }
}
1c00996e:	40b2                	lw	ra,12(sp)
1c009970:	0141                	addi	sp,sp,16
1c009972:	8082                	ret

1c009974 <rt_cluster_call>:

int rt_cluster_call(rt_cluster_call_t *_call, int cid, void (*entry)(void *arg), void *arg, void *stacks, int master_stack_size, int slave_stack_size, int nb_pe, rt_event_t *event)
{
1c009974:	7139                	addi	sp,sp,-64
1c009976:	d84a                	sw	s2,48(sp)
1c009978:	4906                	lw	s2,64(sp)
1c00997a:	dc22                	sw	s0,56(sp)
1c00997c:	842e                	mv	s0,a1
1c00997e:	de06                	sw	ra,60(sp)
1c009980:	da26                	sw	s1,52(sp)
1c009982:	d64e                	sw	s3,44(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009984:	300479f3          	csrrci	s3,mstatus,8
  __asm__ __volatile__ ("" : : : "memory");
1c009988:	84ca                	mv	s1,s2
  if (likely(event != NULL)) return event;
1c00998a:	02091163          	bnez	s2,1c0099ac <rt_cluster_call+0x38>
  return __rt_wait_event_prepare_blocking();
1c00998e:	ce32                	sw	a2,28(sp)
1c009990:	cc36                	sw	a3,24(sp)
1c009992:	ca3a                	sw	a4,20(sp)
1c009994:	c83e                	sw	a5,16(sp)
1c009996:	c642                	sw	a6,12(sp)
1c009998:	c446                	sw	a7,8(sp)
1c00999a:	f3bfe0ef          	jal	ra,1c0088d4 <__rt_wait_event_prepare_blocking>
1c00999e:	48a2                	lw	a7,8(sp)
1c0099a0:	4832                	lw	a6,12(sp)
1c0099a2:	47c2                	lw	a5,16(sp)
1c0099a4:	4752                	lw	a4,20(sp)
1c0099a6:	46e2                	lw	a3,24(sp)
1c0099a8:	4672                	lw	a2,28(sp)
1c0099aa:	84aa                	mv	s1,a0
static inline struct pi_cluster_task *pi_cluster_task(struct pi_cluster_task *task, void (*entry)(void*), void *arg)
{
    #if defined(PMSIS_DRIVERS)
    memset(task, 0, sizeof(struct pi_cluster_task));
    #endif  /* PMSIS_DRIVERS */
    task->entry = entry;
1c0099ac:	1c00d5b7          	lui	a1,0x1c00d
1c0099b0:	9b858513          	addi	a0,a1,-1608 # 1c00c9b8 <__rt_pulpos_emu_global_cluster_task>
  struct pi_cluster_task *task = &__rt_pulpos_emu_global_cluster_task;

  pi_cluster_task(task, entry, arg);

  task->stacks = stacks;
  task->stack_size = master_stack_size;
1c0099b4:	c55c                	sw	a5,12(a0)
  task->slave_stack_size = slave_stack_size;
  task->nb_cores = nb_pe;

  if (pi_cluster_send_task_to_cl_async(&__rt_fc_cluster_device[cid], task, call_event))
1c0099b6:	1c00d7b7          	lui	a5,0x1c00d
1c0099ba:	c110                	sw	a2,0(a0)
    task->arg = arg;
1c0099bc:	c154                	sw	a3,4(a0)
  task->stacks = stacks;
1c0099be:	c518                	sw	a4,8(a0)
  task->slave_stack_size = slave_stack_size;
1c0099c0:	01052823          	sw	a6,16(a0)
  task->nb_cores = nb_pe;
1c0099c4:	01152a23          	sw	a7,20(a0)
  if (pi_cluster_send_task_to_cl_async(&__rt_fc_cluster_device[cid], task, call_event))
1c0099c8:	ba87a503          	lw	a0,-1112(a5) # 1c00cba8 <__rt_fc_cluster_device>
1c0099cc:	47b1                	li	a5,12
1c0099ce:	8626                	mv	a2,s1
1c0099d0:	42f40533          	p.mac	a0,s0,a5
1c0099d4:	9b858593          	addi	a1,a1,-1608
1c0099d8:	2061                	jal	1c009a60 <pi_cluster_send_task_to_cl_async>
1c0099da:	842a                	mv	s0,a0
1c0099dc:	cd01                	beqz	a0,1c0099f4 <rt_cluster_call+0x80>
  __builtin_pulp_spr_write(reg, val);
1c0099de:	30099073          	csrw	mstatus,s3
  {
  	rt_irq_restore(irq);
  	return -1;
1c0099e2:	547d                	li	s0,-1
  __rt_wait_event_check(event, call_event);

  rt_irq_restore(irq);

  return 0;
}
1c0099e4:	8522                	mv	a0,s0
1c0099e6:	50f2                	lw	ra,60(sp)
1c0099e8:	5462                	lw	s0,56(sp)
1c0099ea:	54d2                	lw	s1,52(sp)
1c0099ec:	5942                	lw	s2,48(sp)
1c0099ee:	59b2                	lw	s3,44(sp)
1c0099f0:	6121                	addi	sp,sp,64
1c0099f2:	8082                	ret
  if (event == NULL) __rt_wait_event(call_event);
1c0099f4:	00091563          	bnez	s2,1c0099fe <rt_cluster_call+0x8a>
1c0099f8:	8526                	mv	a0,s1
1c0099fa:	82cff0ef          	jal	ra,1c008a26 <__rt_wait_event>
1c0099fe:	30099073          	csrw	mstatus,s3
  return 0;
1c009a02:	b7cd                	j	1c0099e4 <rt_cluster_call+0x70>

1c009a04 <rt_cluster_mount>:

void rt_cluster_mount(int mount, int cid, int flags, rt_event_t *event)
{
1c009a04:	7139                	addi	sp,sp,-64
1c009a06:	dc22                	sw	s0,56(sp)
1c009a08:	da26                	sw	s1,52(sp)
1c009a0a:	d84a                	sw	s2,48(sp)
1c009a0c:	4431                	li	s0,12
1c009a0e:	1c00d4b7          	lui	s1,0x1c00d
1c009a12:	de06                	sw	ra,60(sp)
1c009a14:	d64e                	sw	s3,44(sp)
1c009a16:	8936                	mv	s2,a3
1c009a18:	02858433          	mul	s0,a1,s0
1c009a1c:	ba848493          	addi	s1,s1,-1112 # 1c00cba8 <__rt_fc_cluster_device>
  if (mount)
1c009a20:	c91d                	beqz	a0,1c009a56 <rt_cluster_mount+0x52>
  {
    struct pi_cluster_conf conf;
    pi_cluster_conf_init(&conf);
1c009a22:	0028                	addi	a0,sp,8
1c009a24:	89ae                	mv	s3,a1
1c009a26:	d57ff0ef          	jal	ra,1c00977c <pi_cluster_conf_init>
    pi_open_from_conf(&__rt_fc_cluster_device[cid], &conf);
1c009a2a:	4088                	lw	a0,0(s1)
1c009a2c:	002c                	addi	a1,sp,8
1c009a2e:	9522                	add	a0,a0,s0
1c009a30:	913fe0ef          	jal	ra,1c008342 <pi_open_from_conf>
    conf.id = cid;
    pi_cluster_open(&__rt_fc_cluster_device[cid]);
1c009a34:	4088                	lw	a0,0(s1)
    conf.id = cid;
1c009a36:	c64e                	sw	s3,12(sp)
    pi_cluster_open(&__rt_fc_cluster_device[cid]);
1c009a38:	9522                	add	a0,a0,s0
1c009a3a:	d49ff0ef          	jal	ra,1c009782 <pi_cluster_open>
  else
  {
    pi_cluster_close(&__rt_fc_cluster_device[cid]);
  }

  if (event)
1c009a3e:	00090563          	beqz	s2,1c009a48 <rt_cluster_mount+0x44>
    rt_event_push(event);
1c009a42:	854a                	mv	a0,s2
1c009a44:	f5bfe0ef          	jal	ra,1c00899e <rt_event_push>
}
1c009a48:	50f2                	lw	ra,60(sp)
1c009a4a:	5462                	lw	s0,56(sp)
1c009a4c:	54d2                	lw	s1,52(sp)
1c009a4e:	5942                	lw	s2,48(sp)
1c009a50:	59b2                	lw	s3,44(sp)
1c009a52:	6121                	addi	sp,sp,64
1c009a54:	8082                	ret
    pi_cluster_close(&__rt_fc_cluster_device[cid]);
1c009a56:	4088                	lw	a0,0(s1)
1c009a58:	9522                	add	a0,a0,s0
1c009a5a:	e01ff0ef          	jal	ra,1c00985a <pi_cluster_close>
1c009a5e:	b7c5                	j	1c009a3e <rt_cluster_mount+0x3a>

1c009a60 <pi_cluster_send_task_to_cl_async>:
  }
}
#endif

int pi_cluster_send_task_to_cl_async(struct pi_device *device, struct pi_cluster_task *task, pi_task_t *async_task)
{
1c009a60:	1101                	addi	sp,sp,-32
1c009a62:	ca26                	sw	s1,20(sp)
  rt_fc_cluster_data_t *data = (rt_fc_cluster_data_t *)device->data;
1c009a64:	4504                	lw	s1,8(a0)
{
1c009a66:	cc22                	sw	s0,24(sp)
1c009a68:	c256                	sw	s5,4(sp)
1c009a6a:	842e                	mv	s0,a1
1c009a6c:	8ab2                	mv	s5,a2
1c009a6e:	ce06                	sw	ra,28(sp)
1c009a70:	c84a                	sw	s2,16(sp)
1c009a72:	c64e                	sw	s3,12(sp)
1c009a74:	c452                	sw	s4,8(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009a76:	30047a73          	csrrci	s4,mstatus,8

  int lock = __rt_cluster_lock(data);

  __rt_task_init(async_task);
  
  task->implem.pending = 1;
1c009a7a:	4785                	li	a5,1
  task->done = 0;
1c009a7c:	00060a23          	sb	zero,20(a2)
1c009a80:	d1dc                	sw	a5,36(a1)

  rt_cluster_call_pool_t *cl_data = data->pool;

  if (task->nb_cores == 0)
1c009a82:	49dc                	lw	a5,20(a1)
  rt_cluster_call_pool_t *cl_data = data->pool;
1c009a84:	0144a983          	lw	s3,20(s1)
  if (task->nb_cores == 0)
1c009a88:	e399                	bnez	a5,1c009a8e <pi_cluster_send_task_to_cl_async+0x2e>
    task->nb_cores = pi_cl_cluster_nb_cores();
1c009a8a:	47a1                	li	a5,8
1c009a8c:	c9dc                	sw	a5,20(a1)

  if (task->stacks == NULL)
1c009a8e:	441c                	lw	a5,8(s0)
1c009a90:	ef85                	bnez	a5,1c009ac8 <pi_cluster_send_task_to_cl_async+0x68>
  {
    if (task->stack_size == 0)
1c009a92:	445c                	lw	a5,12(s0)
1c009a94:	eb81                	bnez	a5,1c009aa4 <pi_cluster_send_task_to_cl_async+0x44>
    {
      task->stack_size = 0x800;
1c009a96:	6785                	lui	a5,0x1
1c009a98:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c009a9c:	c45c                	sw	a5,12(s0)
      task->slave_stack_size = 0x400;
1c009a9e:	40000793          	li	a5,1024
1c009aa2:	c81c                	sw	a5,16(s0)
    }

    if (task->slave_stack_size == 0)
1c009aa4:	481c                	lw	a5,16(s0)
1c009aa6:	00c42903          	lw	s2,12(s0)
1c009aaa:	e399                	bnez	a5,1c009ab0 <pi_cluster_send_task_to_cl_async+0x50>
      task->slave_stack_size = task->stack_size;
1c009aac:	01242823          	sw	s2,16(s0)

    int stacks_size = task->stack_size + task->slave_stack_size * (task->nb_cores - 1);
1c009ab0:	485c                	lw	a5,20(s0)
1c009ab2:	4818                	lw	a4,16(s0)

    if (data->stacks == NULL || stacks_size != data->stacks_size)
1c009ab4:	448c                	lw	a1,8(s1)
    int stacks_size = task->stack_size + task->slave_stack_size * (task->nb_cores - 1);
1c009ab6:	17fd                	addi	a5,a5,-1
1c009ab8:	42e78933          	p.mac	s2,a5,a4
    if (data->stacks == NULL || stacks_size != data->stacks_size)
1c009abc:	c9b5                	beqz	a1,1c009b30 <pi_cluster_send_task_to_cl_async+0xd0>
1c009abe:	44d0                	lw	a2,12(s1)
1c009ac0:	05261f63          	bne	a2,s2,1c009b1e <pi_cluster_send_task_to_cl_async+0xbe>

      if (data->stacks == NULL)
        goto error;
    }

    task->stacks = data->stacks;
1c009ac4:	449c                	lw	a5,8(s1)
1c009ac6:	c41c                	sw	a5,8(s0)

  task->completion_callback = async_task;
#ifdef ARCHI_HAS_CC
  task->implem.core_mask = (1<<(task->nb_cores-1)) - 1;
#else
  task->implem.core_mask = (1<<task->nb_cores) - 1;
1c009ac8:	4858                	lw	a4,20(s0)
1c009aca:	4785                	li	a5,1
  task->completion_callback = async_task;
1c009acc:	01542c23          	sw	s5,24(s0)
  task->implem.core_mask = (1<<task->nb_cores) - 1;
1c009ad0:	00e797b3          	sll	a5,a5,a4
1c009ad4:	17fd                	addi	a5,a5,-1
1c009ad6:	d41c                	sw	a5,40(s0)
#endif

  task->next = NULL;
1c009ad8:	02042023          	sw	zero,32(s0)

  rt_compiler_barrier();

  if (cl_data->last_call_fc)
1c009adc:	0089a783          	lw	a5,8(s3)
1c009ae0:	cbb5                	beqz	a5,1c009b54 <pi_cluster_send_task_to_cl_async+0xf4>
  {
    cl_data->last_call_fc->next = task;
1c009ae2:	d380                	sw	s0,32(a5)
  else
  {
    cl_data->first_call_fc = task;
  }

  cl_data->last_call_fc = task;
1c009ae4:	0089a423          	sw	s0,8(s3)

  rt_compiler_barrier();
  
  if (cl_data->first_call_fc_for_cl == NULL)
1c009ae8:	0009a783          	lw	a5,0(s3)
1c009aec:	e399                	bnez	a5,1c009af2 <pi_cluster_send_task_to_cl_async+0x92>
    cl_data->first_call_fc_for_cl = task;
1c009aee:	0089a023          	sw	s0,0(s3)
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c009af2:	509c                	lw	a5,32(s1)
  pulp_write32(evtAddr, coreSet);
1c009af4:	00201737          	lui	a4,0x201
1c009af8:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c009afc:	04078793          	addi	a5,a5,64
1c009b00:	07da                	slli	a5,a5,0x16
  pulp_write32(evtAddr, coreSet);
1c009b02:	0007e723          	p.sw	zero,a4(a5)
  __builtin_pulp_spr_write(reg, val);
1c009b06:	300a1073          	csrw	mstatus,s4
  rt_compiler_barrier();
  eu_evt_trig(eu_evt_trig_cluster_addr(data->cid, RT_CLUSTER_CALL_EVT), 0);

  __rt_cluster_unlock(data, lock);

  return 0;
1c009b0a:	4501                	li	a0,0

error:
  __rt_cluster_unlock(data, lock);
  return -1;
}
1c009b0c:	40f2                	lw	ra,28(sp)
1c009b0e:	4462                	lw	s0,24(sp)
1c009b10:	44d2                	lw	s1,20(sp)
1c009b12:	4942                	lw	s2,16(sp)
1c009b14:	49b2                	lw	s3,12(sp)
1c009b16:	4a22                	lw	s4,8(sp)
1c009b18:	4a92                	lw	s5,4(sp)
1c009b1a:	6105                	addi	sp,sp,32
1c009b1c:	8082                	ret

#if defined(ARCHI_HAS_L1)

extern rt_alloc_t *__rt_alloc_l1;

static inline rt_alloc_t *rt_alloc_l1(int cid) { return &__rt_alloc_l1[cid]; }
1c009b1e:	509c                	lw	a5,32(s1)
1c009b20:	1c00d737          	lui	a4,0x1c00d
1c009b24:	bd072503          	lw	a0,-1072(a4) # 1c00cbd0 <__rt_alloc_l1>
1c009b28:	078a                	slli	a5,a5,0x2
        rt_user_free(rt_alloc_l1(data->cid), data->stacks, data->stacks_size);
1c009b2a:	953e                	add	a0,a0,a5
1c009b2c:	fbffe0ef          	jal	ra,1c008aea <rt_user_free>
1c009b30:	509c                	lw	a5,32(s1)
1c009b32:	1c00d737          	lui	a4,0x1c00d
1c009b36:	bd072503          	lw	a0,-1072(a4) # 1c00cbd0 <__rt_alloc_l1>
1c009b3a:	078a                	slli	a5,a5,0x2
      data->stacks_size = stacks_size;
1c009b3c:	0124a623          	sw	s2,12(s1)
      data->stacks = rt_user_alloc(rt_alloc_l1(data->cid), stacks_size);
1c009b40:	85ca                	mv	a1,s2
1c009b42:	953e                	add	a0,a0,a5
1c009b44:	f5ffe0ef          	jal	ra,1c008aa2 <rt_user_alloc>
1c009b48:	c488                	sw	a0,8(s1)
      if (data->stacks == NULL)
1c009b4a:	fd2d                	bnez	a0,1c009ac4 <pi_cluster_send_task_to_cl_async+0x64>
1c009b4c:	300a1073          	csrw	mstatus,s4
  return -1;
1c009b50:	557d                	li	a0,-1
1c009b52:	bf6d                	j	1c009b0c <pi_cluster_send_task_to_cl_async+0xac>
    cl_data->first_call_fc = task;
1c009b54:	0089a223          	sw	s0,4(s3)
1c009b58:	b771                	j	1c009ae4 <pi_cluster_send_task_to_cl_async+0x84>

1c009b5a <pi_cluster_send_task_to_cl>:



int pi_cluster_send_task_to_cl(struct pi_device *device, struct pi_cluster_task *task)
{
1c009b5a:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c009b5c:	4785                	li	a5,1
  pi_task_t fc_task;

  pi_task_block(&fc_task);

  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c009b5e:	860a                	mv	a2,sp
{
1c009b60:	c522                	sw	s0,136(sp)
1c009b62:	c706                	sw	ra,140(sp)
1c009b64:	c326                	sw	s1,132(sp)
1c009b66:	c14a                	sw	s2,128(sp)
1c009b68:	cc3e                	sw	a5,24(sp)
  task->arg[0] = (uint32_t)0;
1c009b6a:	c202                	sw	zero,4(sp)
  task->implem.keep = 1;
1c009b6c:	d43e                	sw	a5,40(sp)
1c009b6e:	00010a23          	sb	zero,20(sp)
  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c009b72:	eefff0ef          	jal	ra,1c009a60 <pi_cluster_send_task_to_cl_async>
  {
    return -1;
1c009b76:	547d                	li	s0,-1
  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c009b78:	e509                	bnez	a0,1c009b82 <pi_cluster_send_task_to_cl+0x28>
1c009b7a:	842a                	mv	s0,a0
  while(!task->done)
1c009b7c:	01410783          	lb	a5,20(sp)
1c009b80:	cb81                	beqz	a5,1c009b90 <pi_cluster_send_task_to_cl+0x36>
  }

  pi_task_wait_on(&fc_task);

  return 0;
}
1c009b82:	8522                	mv	a0,s0
1c009b84:	40ba                	lw	ra,140(sp)
1c009b86:	442a                	lw	s0,136(sp)
1c009b88:	449a                	lw	s1,132(sp)
1c009b8a:	490a                	lw	s2,128(sp)
1c009b8c:	6149                	addi	sp,sp,144
1c009b8e:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009b90:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c009b94:	4585                	li	a1,1
1c009b96:	01c00513          	li	a0,28
1c009b9a:	e29fe0ef          	jal	ra,1c0089c2 <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c009b9e:	30091073          	csrw	mstatus,s2
1c009ba2:	bfe9                	j	1c009b7c <pi_cluster_send_task_to_cl+0x22>

1c009ba4 <pi_pad_set_function>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009ba4:	300476f3          	csrrci	a3,mstatus,8
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c009ba8:	068417b7          	lui	a5,0x6841
  unsigned int padBit = APB_SOC_PADFUN_BIT(pad);
1c009bac:	00151713          	slli	a4,a0,0x1
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c009bb0:	05078793          	addi	a5,a5,80 # 6841050 <__L2+0x67c1050>
  unsigned int padfunId = APB_SOC_PADFUN_NO(pad);
1c009bb4:	8111                	srli	a0,a0,0x4
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c009bb6:	953e                	add	a0,a0,a5
1c009bb8:	050a                	slli	a0,a0,0x2
  unsigned int padBit = APB_SOC_PADFUN_BIT(pad);
1c009bba:	8b79                	andi	a4,a4,30
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c009bbc:	4110                	lw	a2,0(a0)
  unsigned int oldval = hal_apb_soc_padfun_get(padfunId) & ~(((1<<APB_SOC_PADFUN_SIZE)-1) << padBit);
1c009bbe:	478d                	li	a5,3
1c009bc0:	00e797b3          	sll	a5,a5,a4
1c009bc4:	fff7c793          	not	a5,a5
1c009bc8:	8ff1                	and	a5,a5,a2
  unsigned int newVal = oldval | (func << padBit);
1c009bca:	00e595b3          	sll	a1,a1,a4
1c009bce:	8ddd                	or	a1,a1,a5
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id), value);
1c009bd0:	c10c                	sw	a1,0(a0)
  __builtin_pulp_spr_write(reg, val);
1c009bd2:	30069073          	csrw	mstatus,a3
void pi_pad_set_function(pi_pad_e pad, pi_pad_func_e function)
{
  int irq = rt_irq_disable();
  hal_apb_soc_pad_set_function(pad, function);
  rt_irq_restore(irq);
}
1c009bd6:	8082                	ret

1c009bd8 <pi_pad_init>:

void pi_pad_init(uint32_t pad_values[])
{
  for (int i=0; i<ARCHI_APB_SOC_PADFUN_NB; i++)
  {
    hal_apb_soc_padfun_set(i, pad_values[i]);
1c009bd8:	4114                	lw	a3,0(a0)
1c009bda:	1a1047b7          	lui	a5,0x1a104
1c009bde:	14078713          	addi	a4,a5,320 # 1a104140 <__l1_end+0xa1040bc>
1c009be2:	c314                	sw	a3,0(a4)
1c009be4:	4154                	lw	a3,4(a0)
1c009be6:	14478713          	addi	a4,a5,324
1c009bea:	14878793          	addi	a5,a5,328
1c009bee:	c314                	sw	a3,0(a4)
1c009bf0:	4518                	lw	a4,8(a0)
1c009bf2:	c398                	sw	a4,0(a5)
  }  
}
1c009bf4:	8082                	ret

1c009bf6 <l2_memcpy>:
  req = __pi_hyper_cluster_reqs_first;
  if (req)
  {
    __pi_hyper_cluster_req_exec(req);
  }
}
1c009bf6:	87aa                	mv	a5,a0
1c009bf8:	962e                	add	a2,a2,a1
1c009bfa:	00c59363          	bne	a1,a2,1c009c00 <l2_memcpy+0xa>
1c009bfe:	8082                	ret
1c009c00:	0015c70b          	p.lbu	a4,1(a1!)
1c009c04:	00e780ab          	p.sb	a4,1(a5!)
1c009c08:	bfcd                	j	1c009bfa <l2_memcpy+0x4>

1c009c0a <rt_event_enqueue>:
1c009c0a:	300476f3          	csrrci	a3,mstatus,8
1c009c0e:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
1c009c12:	00052023          	sw	zero,0(a0)
1c009c16:	01c00713          	li	a4,28
1c009c1a:	c619                	beqz	a2,1c009c28 <rt_event_enqueue+0x1e>
1c009c1c:	435c                	lw	a5,4(a4)
1c009c1e:	c388                	sw	a0,0(a5)
1c009c20:	c348                	sw	a0,4(a4)
1c009c22:	30069073          	csrw	mstatus,a3
1c009c26:	8082                	ret
1c009c28:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c009c2c:	bfd5                	j	1c009c20 <rt_event_enqueue+0x16>

1c009c2e <pi_task_wait_on.isra.4>:
1c009c2e:	1141                	addi	sp,sp,-16
1c009c30:	c422                	sw	s0,8(sp)
1c009c32:	c226                	sw	s1,4(sp)
1c009c34:	c606                	sw	ra,12(sp)
1c009c36:	c04a                	sw	s2,0(sp)
1c009c38:	842a                	mv	s0,a0
1c009c3a:	00040783          	lb	a5,0(s0)
1c009c3e:	c799                	beqz	a5,1c009c4c <pi_task_wait_on.isra.4+0x1e>
1c009c40:	40b2                	lw	ra,12(sp)
1c009c42:	4422                	lw	s0,8(sp)
1c009c44:	4492                	lw	s1,4(sp)
1c009c46:	4902                	lw	s2,0(sp)
1c009c48:	0141                	addi	sp,sp,16
1c009c4a:	8082                	ret
1c009c4c:	30047973          	csrrci	s2,mstatus,8
1c009c50:	4585                	li	a1,1
1c009c52:	01c00513          	li	a0,28
1c009c56:	d6dfe0ef          	jal	ra,1c0089c2 <__rt_event_execute>
1c009c5a:	30091073          	csrw	mstatus,s2
1c009c5e:	bff1                	j	1c009c3a <pi_task_wait_on.isra.4+0xc>

1c009c60 <__pi_hyper_pin_settings>:
1c009c60:	1141                	addi	sp,sp,-16
1c009c62:	c422                	sw	s0,8(sp)
1c009c64:	1c00c437          	lui	s0,0x1c00c
1c009c68:	54840413          	addi	s0,s0,1352 # 1c00c548 <__hyper_pad>
1c009c6c:	c226                	sw	s1,4(sp)
1c009c6e:	c606                	sw	ra,12(sp)
1c009c70:	03440493          	addi	s1,s0,52
1c009c74:	0044250b          	p.lw	a0,4(s0!)
1c009c78:	458d                	li	a1,3
1c009c7a:	f2bff0ef          	jal	ra,1c009ba4 <pi_pad_set_function>
1c009c7e:	fe941be3          	bne	s0,s1,1c009c74 <__pi_hyper_pin_settings+0x14>
1c009c82:	40b2                	lw	ra,12(sp)
1c009c84:	4422                	lw	s0,8(sp)
1c009c86:	4492                	lw	s1,4(sp)
1c009c88:	0141                	addi	sp,sp,16
1c009c8a:	8082                	ret

1c009c8c <__pi_hyper_pin_reset_settings>:
1c009c8c:	1141                	addi	sp,sp,-16
1c009c8e:	c422                	sw	s0,8(sp)
1c009c90:	1c00c437          	lui	s0,0x1c00c
1c009c94:	54840413          	addi	s0,s0,1352 # 1c00c548 <__hyper_pad>
1c009c98:	c226                	sw	s1,4(sp)
1c009c9a:	c606                	sw	ra,12(sp)
1c009c9c:	03440493          	addi	s1,s0,52
1c009ca0:	0044250b          	p.lw	a0,4(s0!)
1c009ca4:	4581                	li	a1,0
1c009ca6:	effff0ef          	jal	ra,1c009ba4 <pi_pad_set_function>
1c009caa:	fe941be3          	bne	s0,s1,1c009ca0 <__pi_hyper_pin_reset_settings+0x14>
1c009cae:	40b2                	lw	ra,12(sp)
1c009cb0:	4422                	lw	s0,8(sp)
1c009cb2:	4492                	lw	s1,4(sp)
1c009cb4:	0141                	addi	sp,sp,16
1c009cb6:	8082                	ret

1c009cb8 <pi_hyper_conf_init>:
1c009cb8:	57fd                	li	a5,-1
1c009cba:	00f50223          	sb	a5,4(a0)
1c009cbe:	4785                	li	a5,1
1c009cc0:	c55c                	sw	a5,12(a0)
1c009cc2:	00052423          	sw	zero,8(a0)
1c009cc6:	8082                	ret

1c009cc8 <pi_hyper_open>:
1c009cc8:	1141                	addi	sp,sp,-16
1c009cca:	c422                	sw	s0,8(sp)
1c009ccc:	c04a                	sw	s2,0(sp)
1c009cce:	842a                	mv	s0,a0
1c009cd0:	00452903          	lw	s2,4(a0)
1c009cd4:	4541                	li	a0,16
1c009cd6:	c606                	sw	ra,12(sp)
1c009cd8:	c226                	sw	s1,4(sp)
1c009cda:	f8dfe0ef          	jal	ra,1c008c66 <pi_l2_malloc>
1c009cde:	c10d                	beqz	a0,1c009d00 <pi_hyper_open+0x38>
1c009ce0:	00c92783          	lw	a5,12(s2)
1c009ce4:	84aa                	mv	s1,a0
1c009ce6:	0017bf63          	p.bneimm	a5,1,1c009d04 <pi_hyper_open+0x3c>
1c009cea:	000f4637          	lui	a2,0xf4
1c009cee:	24060613          	addi	a2,a2,576 # f4240 <__L2+0x74240>
1c009cf2:	4581                	li	a1,0
1c009cf4:	2789                	jal	1c00a436 <rt_extern_alloc_init>
1c009cf6:	c519                	beqz	a0,1c009d04 <pi_hyper_open+0x3c>
1c009cf8:	45c1                	li	a1,16
1c009cfa:	8526                	mv	a0,s1
1c009cfc:	f79fe0ef          	jal	ra,1c008c74 <pi_l2_free>
1c009d00:	557d                	li	a0,-1
1c009d02:	a0f1                	j	1c009dce <pi_hyper_open+0x106>
1c009d04:	478d                	li	a5,3
1c009d06:	c0dc                	sw	a5,4(s1)
1c009d08:	00892783          	lw	a5,8(s2)
1c009d0c:	c49c                	sw	a5,8(s1)
1c009d0e:	00c92783          	lw	a5,12(s2)
1c009d12:	c4dc                	sw	a5,12(s1)
1c009d14:	1c00d7b7          	lui	a5,0x1c00d
1c009d18:	bb078793          	addi	a5,a5,-1104 # 1c00cbb0 <__rt_hyper_open_count>
1c009d1c:	4398                	lw	a4,0(a5)
1c009d1e:	00170693          	addi	a3,a4,1
1c009d22:	c394                	sw	a3,0(a5)
1c009d24:	e739                	bnez	a4,1c009d72 <pi_hyper_open+0xaa>
1c009d26:	1a1067b7          	lui	a5,0x1a106
1c009d2a:	0087a703          	lw	a4,8(a5) # 1a106008 <__l1_end+0xa105f84>
1c009d2e:	c0673733          	p.bclr	a4,a4,0,6
1c009d32:	00e7a423          	sw	a4,8(a5)
1c009d36:	0087a703          	lw	a4,8(a5)
1c009d3a:	c0773733          	p.bclr	a4,a4,0,7
1c009d3e:	00e7a423          	sw	a4,8(a5)
1c009d42:	1a1027b7          	lui	a5,0x1a102
1c009d46:	78078793          	addi	a5,a5,1920 # 1a102780 <__l1_end+0xa1026fc>
1c009d4a:	4398                	lw	a4,0(a5)
1c009d4c:	c0374733          	p.bset	a4,a4,0,3
1c009d50:	c398                	sw	a4,0(a5)
1c009d52:	1c0007b7          	lui	a5,0x1c000
1c009d56:	4c878793          	addi	a5,a5,1224 # 1c0004c8 <__rt_hyper_handle_copy>
1c009d5a:	10f02623          	sw	a5,268(zero) # 10c <_l1_preload_size+0x8c>
1c009d5e:	0e002823          	sw	zero,240(zero) # f0 <_l1_preload_size+0x70>
1c009d62:	12f02623          	sw	a5,300(zero) # 12c <_l1_preload_size+0xac>
1c009d66:	10002823          	sw	zero,272(zero) # 110 <_l1_preload_size+0x90>
1c009d6a:	30f02423          	sw	a5,776(zero) # 308 <__rt_hyper_udma_handle>
1c009d6e:	ef3ff0ef          	jal	ra,1c009c60 <__pi_hyper_pin_settings>
1c009d72:	00c92783          	lw	a5,12(s2)
1c009d76:	00892703          	lw	a4,8(s2)
1c009d7a:	17fd                	addi	a5,a5,-1
1c009d7c:	0017b793          	seqz	a5,a5
1c009d80:	078a                	slli	a5,a5,0x2
1c009d82:	ef21                	bnez	a4,1c009dda <pi_hyper_open+0x112>
1c009d84:	1a102737          	lui	a4,0x1a102
1c009d88:	1b470613          	addi	a2,a4,436 # 1a1021b4 <__l1_end+0xa102130>
1c009d8c:	4214                	lw	a3,0(a2)
1c009d8e:	6591                	lui	a1,0x4
1c009d90:	fff58513          	addi	a0,a1,-1 # 3fff <__rt_stack_size+0x37ff>
1c009d94:	73b6f693          	andi	a3,a3,1851
1c009d98:	8fd5                	or	a5,a5,a3
1c009d9a:	c21c                	sw	a5,0(a2)
1c009d9c:	1a870793          	addi	a5,a4,424
1c009da0:	4394                	lw	a3,0(a5)
1c009da2:	f0058593          	addi	a1,a1,-256
1c009da6:	8ee9                	and	a3,a3,a0
1c009da8:	8eed                	and	a3,a3,a1
1c009daa:	1006c6b3          	p.exths	a3,a3
1c009dae:	c394                	sw	a3,0(a5)
1c009db0:	4214                	lw	a3,0(a2)
1c009db2:	7376f693          	andi	a3,a3,1847
1c009db6:	c214                	sw	a3,0(a2)
1c009db8:	4398                	lw	a4,0(a5)
1c009dba:	668d                	lui	a3,0x3
1c009dbc:	0ff68693          	addi	a3,a3,255 # 30ff <__rt_stack_size+0x28ff>
1c009dc0:	8f69                	and	a4,a4,a0
1c009dc2:	8f75                	and	a4,a4,a3
1c009dc4:	c4874733          	p.bset	a4,a4,2,8
1c009dc8:	c398                	sw	a4,0(a5)
1c009dca:	c404                	sw	s1,8(s0)
1c009dcc:	4501                	li	a0,0
1c009dce:	40b2                	lw	ra,12(sp)
1c009dd0:	4422                	lw	s0,8(sp)
1c009dd2:	4492                	lw	s1,4(sp)
1c009dd4:	4902                	lw	s2,0(sp)
1c009dd6:	0141                	addi	sp,sp,16
1c009dd8:	8082                	ret
1c009dda:	1a102737          	lui	a4,0x1a102
1c009dde:	1c470613          	addi	a2,a4,452 # 1a1021c4 <__l1_end+0xa102140>
1c009de2:	4214                	lw	a3,0(a2)
1c009de4:	1b870713          	addi	a4,a4,440
1c009de8:	03b6f693          	andi	a3,a3,59
1c009dec:	8fd5                	or	a5,a5,a3
1c009dee:	c21c                	sw	a5,0(a2)
1c009df0:	431c                	lw	a5,0(a4)
1c009df2:	6691                	lui	a3,0x4
1c009df4:	fff68593          	addi	a1,a3,-1 # 3fff <__rt_stack_size+0x37ff>
1c009df8:	8fed                	and	a5,a5,a1
1c009dfa:	f0068693          	addi	a3,a3,-256
1c009dfe:	8ff5                	and	a5,a5,a3
1c009e00:	c007c7b3          	p.bset	a5,a5,0,0
1c009e04:	1007c7b3          	p.exths	a5,a5
1c009e08:	c31c                	sw	a5,0(a4)
1c009e0a:	4214                	lw	a3,0(a2)
1c009e0c:	0376f693          	andi	a3,a3,55
1c009e10:	c214                	sw	a3,0(a2)
1c009e12:	431c                	lw	a5,0(a4)
1c009e14:	668d                	lui	a3,0x3
1c009e16:	0ff68693          	addi	a3,a3,255 # 30ff <__rt_stack_size+0x28ff>
1c009e1a:	8fed                	and	a5,a5,a1
1c009e1c:	8ff5                	and	a5,a5,a3
1c009e1e:	c487c7b3          	p.bset	a5,a5,2,8
1c009e22:	c31c                	sw	a5,0(a4)
1c009e24:	b75d                	j	1c009dca <pi_hyper_open+0x102>

1c009e26 <pi_hyper_close>:
1c009e26:	1c00d737          	lui	a4,0x1c00d
1c009e2a:	bb070713          	addi	a4,a4,-1104 # 1c00cbb0 <__rt_hyper_open_count>
1c009e2e:	431c                	lw	a5,0(a4)
1c009e30:	1141                	addi	sp,sp,-16
1c009e32:	c422                	sw	s0,8(sp)
1c009e34:	c606                	sw	ra,12(sp)
1c009e36:	17fd                	addi	a5,a5,-1
1c009e38:	c31c                	sw	a5,0(a4)
1c009e3a:	4500                	lw	s0,8(a0)
1c009e3c:	e7ad                	bnez	a5,1c009ea6 <pi_hyper_close+0x80>
1c009e3e:	404c                	lw	a1,4(s0)
1c009e40:	47fd                	li	a5,31
1c009e42:	00159693          	slli	a3,a1,0x1
1c009e46:	06d7dc63          	ble	a3,a5,1c009ebe <pi_hyper_close+0x98>
1c009e4a:	fe068513          	addi	a0,a3,-32
1c009e4e:	4611                	li	a2,4
1c009e50:	1a1067b7          	lui	a5,0x1a106
1c009e54:	20c7f803          	p.lw	a6,a2(a5)
1c009e58:	4705                	li	a4,1
1c009e5a:	00a71733          	sll	a4,a4,a0
1c009e5e:	01076733          	or	a4,a4,a6
1c009e62:	00e7e623          	p.sw	a4,a2(a5)
1c009e66:	00168713          	addi	a4,a3,1
1c009e6a:	47fd                	li	a5,31
1c009e6c:	4621                	li	a2,8
1c009e6e:	00e7d563          	ble	a4,a5,1c009e78 <pi_hyper_close+0x52>
1c009e72:	fe168713          	addi	a4,a3,-31
1c009e76:	4611                	li	a2,4
1c009e78:	1a1066b7          	lui	a3,0x1a106
1c009e7c:	20c6f503          	p.lw	a0,a2(a3)
1c009e80:	4785                	li	a5,1
1c009e82:	00e79733          	sll	a4,a5,a4
1c009e86:	8f49                	or	a4,a4,a0
1c009e88:	00e6e623          	p.sw	a4,a2(a3)
1c009e8c:	1a102737          	lui	a4,0x1a102
1c009e90:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa1026fc>
1c009e94:	4314                	lw	a3,0(a4)
1c009e96:	00b797b3          	sll	a5,a5,a1
1c009e9a:	fff7c793          	not	a5,a5
1c009e9e:	8ff5                	and	a5,a5,a3
1c009ea0:	c31c                	sw	a5,0(a4)
1c009ea2:	debff0ef          	jal	ra,1c009c8c <__pi_hyper_pin_reset_settings>
1c009ea6:	445c                	lw	a5,12(s0)
1c009ea8:	0017b463          	p.bneimm	a5,1,1c009eb0 <pi_hyper_close+0x8a>
1c009eac:	8522                	mv	a0,s0
1c009eae:	23c5                	jal	1c00a48e <rt_extern_alloc_deinit>
1c009eb0:	8522                	mv	a0,s0
1c009eb2:	4422                	lw	s0,8(sp)
1c009eb4:	40b2                	lw	ra,12(sp)
1c009eb6:	45c1                	li	a1,16
1c009eb8:	0141                	addi	sp,sp,16
1c009eba:	dbbfe06f          	j	1c008c74 <pi_l2_free>
1c009ebe:	8536                	mv	a0,a3
1c009ec0:	4621                	li	a2,8
1c009ec2:	b779                	j	1c009e50 <pi_hyper_close+0x2a>

1c009ec4 <__pi_hyper_copy_aligned>:
1c009ec4:	40155793          	srai	a5,a0,0x1
1c009ec8:	1a102837          	lui	a6,0x1a102
1c009ecc:	079e                	slli	a5,a5,0x7
1c009ece:	0512                	slli	a0,a0,0x4
1c009ed0:	97c2                	add	a5,a5,a6
1c009ed2:	8941                	andi	a0,a0,16
1c009ed4:	953e                	add	a0,a0,a5
1c009ed6:	20000813          	li	a6,512
1c009eda:	30800793          	li	a5,776
1c009ede:	02d87c63          	bleu	a3,a6,1c009f16 <__pi_hyper_copy_aligned+0x52>
1c009ee2:	cbd4                	sw	a3,20(a5)
1c009ee4:	1c0006b7          	lui	a3,0x1c000
1c009ee8:	56068693          	addi	a3,a3,1376 # 1c000560 <__rt_hyper_handle_burst>
1c009eec:	c394                	sw	a3,0(a5)
1c009eee:	c3c8                	sw	a0,4(a5)
1c009ef0:	c790                	sw	a2,8(a5)
1c009ef2:	c7cc                	sw	a1,12(a5)
1c009ef4:	0107a823          	sw	a6,16(a5) # 1a106010 <__l1_end+0xa105f8c>
1c009ef8:	20000693          	li	a3,512
1c009efc:	cf98                	sw	a4,24(a5)
1c009efe:	1a1027b7          	lui	a5,0x1a102
1c009f02:	1ac7a023          	sw	a2,416(a5) # 1a1021a0 <__l1_end+0xa10211c>
1c009f06:	00b52023          	sw	a1,0(a0)
1c009f0a:	00d52223          	sw	a3,4(a0)
1c009f0e:	47c1                	li	a5,16
1c009f10:	00f52423          	sw	a5,8(a0)
1c009f14:	8082                	ret
1c009f16:	0007a823          	sw	zero,16(a5)
1c009f1a:	b7cd                	j	1c009efc <__pi_hyper_copy_aligned+0x38>

1c009f1c <__pi_hyper_copy_exec>:
1c009f1c:	30800813          	li	a6,776
1c009f20:	00e82e23          	sw	a4,28(a6) # 1a10201c <__l1_end+0xa101f98>
1c009f24:	fa25b833          	p.bclr	a6,a1,29,2
1c009f28:	30800793          	li	a5,776
1c009f2c:	00081a63          	bnez	a6,1c009f40 <__pi_hyper_copy_exec+0x24>
1c009f30:	fc163833          	p.bclr	a6,a2,30,1
1c009f34:	00081663          	bnez	a6,1c009f40 <__pi_hyper_copy_exec+0x24>
1c009f38:	fa26b833          	p.bclr	a6,a3,29,2
1c009f3c:	00080863          	beqz	a6,1c009f4c <__pi_hyper_copy_exec+0x30>
1c009f40:	fc153833          	p.bclr	a6,a0,30,1
1c009f44:	00080663          	beqz	a6,1c009f50 <__pi_hyper_copy_exec+0x34>
1c009f48:	0026b463          	p.bneimm	a3,2,1c009f50 <__pi_hyper_copy_exec+0x34>
1c009f4c:	f79ff06f          	j	1c009ec4 <__pi_hyper_copy_aligned>
1c009f50:	d388                	sw	a0,32(a5)
1c009f52:	853a                	mv	a0,a4
1c009f54:	d3d0                	sw	a2,36(a5)
1c009f56:	d78c                	sw	a1,40(a5)
1c009f58:	d7d4                	sw	a3,44(a5)
1c009f5a:	02078823          	sb	zero,48(a5)
1c009f5e:	dbd8                	sw	a4,52(a5)
1c009f60:	aa31                	j	1c00a07c <__pi_hyper_copy_misaligned>

1c009f62 <__pi_hyper_copy>:
1c009f62:	1141                	addi	sp,sp,-16
1c009f64:	c606                	sw	ra,12(sp)
1c009f66:	c422                	sw	s0,8(sp)
1c009f68:	30047473          	csrrci	s0,mstatus,8
1c009f6c:	c781                	beqz	a5,1c009f74 <__pi_hyper_copy+0x12>
1c009f6e:	010007b7          	lui	a5,0x1000
1c009f72:	963e                	add	a2,a2,a5
1c009f74:	30800813          	li	a6,776
1c009f78:	01c82803          	lw	a6,28(a6)
1c009f7c:	30800793          	li	a5,776
1c009f80:	02080963          	beqz	a6,1c009fb2 <__pi_hyper_copy+0x50>
1c009f84:	0387a803          	lw	a6,56(a5) # 1000038 <__L2+0xf80038>
1c009f88:	02080363          	beqz	a6,1c009fae <__pi_hyper_copy+0x4c>
1c009f8c:	03c7a803          	lw	a6,60(a5)
1c009f90:	00e82e23          	sw	a4,28(a6)
1c009f94:	dfd8                	sw	a4,60(a5)
1c009f96:	00072e23          	sw	zero,28(a4)
1c009f9a:	df08                	sw	a0,56(a4)
1c009f9c:	df4c                	sw	a1,60(a4)
1c009f9e:	c330                	sw	a2,64(a4)
1c009fa0:	c374                	sw	a3,68(a4)
1c009fa2:	30041073          	csrw	mstatus,s0
1c009fa6:	40b2                	lw	ra,12(sp)
1c009fa8:	4422                	lw	s0,8(sp)
1c009faa:	0141                	addi	sp,sp,16
1c009fac:	8082                	ret
1c009fae:	df98                	sw	a4,56(a5)
1c009fb0:	b7d5                	j	1c009f94 <__pi_hyper_copy+0x32>
1c009fb2:	f6bff0ef          	jal	ra,1c009f1c <__pi_hyper_copy_exec>
1c009fb6:	b7f5                	j	1c009fa2 <__pi_hyper_copy+0x40>

1c009fb8 <pi_hyper_read_async>:
1c009fb8:	451c                	lw	a5,8(a0)
1c009fba:	00070a23          	sb	zero,20(a4)
1c009fbe:	8832                	mv	a6,a2
1c009fc0:	43c8                	lw	a0,4(a5)
1c009fc2:	479c                	lw	a5,8(a5)
1c009fc4:	862e                	mv	a2,a1
1c009fc6:	0506                	slli	a0,a0,0x1
1c009fc8:	85c2                	mv	a1,a6
1c009fca:	f99ff06f          	j	1c009f62 <__pi_hyper_copy>

1c009fce <pi_hyper_read>:
1c009fce:	7175                	addi	sp,sp,-144
1c009fd0:	4785                	li	a5,1
1c009fd2:	870a                	mv	a4,sp
1c009fd4:	c706                	sw	ra,140(sp)
1c009fd6:	cc3e                	sw	a5,24(sp)
1c009fd8:	d43e                	sw	a5,40(sp)
1c009fda:	c202                	sw	zero,4(sp)
1c009fdc:	00010a23          	sb	zero,20(sp)
1c009fe0:	fd9ff0ef          	jal	ra,1c009fb8 <pi_hyper_read_async>
1c009fe4:	0848                	addi	a0,sp,20
1c009fe6:	c49ff0ef          	jal	ra,1c009c2e <pi_task_wait_on.isra.4>
1c009fea:	40ba                	lw	ra,140(sp)
1c009fec:	6149                	addi	sp,sp,144
1c009fee:	8082                	ret

1c009ff0 <pi_hyper_write_async>:
1c009ff0:	451c                	lw	a5,8(a0)
1c009ff2:	00070a23          	sb	zero,20(a4)
1c009ff6:	8832                	mv	a6,a2
1c009ff8:	43c8                	lw	a0,4(a5)
1c009ffa:	479c                	lw	a5,8(a5)
1c009ffc:	862e                	mv	a2,a1
1c009ffe:	0506                	slli	a0,a0,0x1
1c00a000:	85c2                	mv	a1,a6
1c00a002:	0505                	addi	a0,a0,1
1c00a004:	f5fff06f          	j	1c009f62 <__pi_hyper_copy>

1c00a008 <pi_hyper_write>:
1c00a008:	7175                	addi	sp,sp,-144
1c00a00a:	4785                	li	a5,1
1c00a00c:	870a                	mv	a4,sp
1c00a00e:	c706                	sw	ra,140(sp)
1c00a010:	cc3e                	sw	a5,24(sp)
1c00a012:	d43e                	sw	a5,40(sp)
1c00a014:	c202                	sw	zero,4(sp)
1c00a016:	00010a23          	sb	zero,20(sp)
1c00a01a:	fd7ff0ef          	jal	ra,1c009ff0 <pi_hyper_write_async>
1c00a01e:	0848                	addi	a0,sp,20
1c00a020:	c0fff0ef          	jal	ra,1c009c2e <pi_task_wait_on.isra.4>
1c00a024:	40ba                	lw	ra,140(sp)
1c00a026:	6149                	addi	sp,sp,144
1c00a028:	8082                	ret

1c00a02a <exec_pending_task>:
1c00a02a:	30800793          	li	a5,776
1c00a02e:	5f98                	lw	a4,56(a5)
1c00a030:	c729                	beqz	a4,1c00a07a <exec_pending_task+0x50>
1c00a032:	4f54                	lw	a3,28(a4)
1c00a034:	03872803          	lw	a6,56(a4)
1c00a038:	5f4c                	lw	a1,60(a4)
1c00a03a:	df94                	sw	a3,56(a5)
1c00a03c:	ee883533          	p.bclr	a0,a6,23,8
1c00a040:	ce881833          	p.extractu	a6,a6,7,8
1c00a044:	4330                	lw	a2,64(a4)
1c00a046:	4374                	lw	a3,68(a4)
1c00a048:	00081463          	bnez	a6,1c00a050 <exec_pending_task+0x26>
1c00a04c:	ed1ff06f          	j	1c009f1c <__pi_hyper_copy_exec>
1c00a050:	04c72803          	lw	a6,76(a4)
1c00a054:	04872883          	lw	a7,72(a4)
1c00a058:	d388                	sw	a0,32(a5)
1c00a05a:	d3d0                	sw	a2,36(a5)
1c00a05c:	853a                	mv	a0,a4
1c00a05e:	0506d633          	p.minu	a2,a3,a6
1c00a062:	cfd8                	sw	a4,28(a5)
1c00a064:	d78c                	sw	a1,40(a5)
1c00a066:	d7d0                	sw	a2,44(a5)
1c00a068:	02078823          	sb	zero,48(a5)
1c00a06c:	dbd8                	sw	a4,52(a5)
1c00a06e:	c3b4                	sw	a3,64(a5)
1c00a070:	0507a223          	sw	a6,68(a5)
1c00a074:	0517a423          	sw	a7,72(a5)
1c00a078:	a011                	j	1c00a07c <__pi_hyper_copy_misaligned>
1c00a07a:	8082                	ret

1c00a07c <__pi_hyper_copy_misaligned>:
1c00a07c:	7179                	addi	sp,sp,-48
1c00a07e:	d422                	sw	s0,40(sp)
1c00a080:	30800793          	li	a5,776
1c00a084:	ce4e                	sw	s3,28(sp)
1c00a086:	89aa                	mv	s3,a0
1c00a088:	5388                	lw	a0,32(a5)
1c00a08a:	d606                	sw	ra,44(sp)
1c00a08c:	d226                	sw	s1,36(sp)
1c00a08e:	d04a                	sw	s2,32(sp)
1c00a090:	cc52                	sw	s4,24(sp)
1c00a092:	ca56                	sw	s5,20(sp)
1c00a094:	c85a                	sw	s6,16(sp)
1c00a096:	c65e                	sw	s7,12(sp)
1c00a098:	c462                	sw	s8,8(sp)
1c00a09a:	fc1537b3          	p.bclr	a5,a0,30,1
1c00a09e:	30800413          	li	s0,776
1c00a0a2:	e7a1                	bnez	a5,1c00a0ea <__pi_hyper_copy_misaligned+0x6e>
1c00a0a4:	1c00dc37          	lui	s8,0x1c00d
1c00a0a8:	9e4c0913          	addi	s2,s8,-1564 # 1c00c9e4 <__pi_hyper_temp_buffer>
1c00a0ac:	4a0d                	li	s4,3
1c00a0ae:	07c00a93          	li	s5,124
1c00a0b2:	00190b13          	addi	s6,s2,1
1c00a0b6:	5408                	lw	a0,40(s0)
1c00a0b8:	5444                	lw	s1,44(s0)
1c00a0ba:	5050                	lw	a2,36(s0)
1c00a0bc:	00350793          	addi	a5,a0,3
1c00a0c0:	c207b7b3          	p.bclr	a5,a5,1,0
1c00a0c4:	8f89                	sub	a5,a5,a0
1c00a0c6:	8bbe                	mv	s7,a5
1c00a0c8:	009a6363          	bltu	s4,s1,1c00a0ce <__pi_hyper_copy_misaligned+0x52>
1c00a0cc:	8ba6                	mv	s7,s1
1c00a0ce:	1c0b8663          	beqz	s7,1c00a29a <__pi_hyper_copy_misaligned+0x21e>
1c00a0d2:	03044783          	lbu	a5,48(s0)
1c00a0d6:	16079f63          	bnez	a5,1c00a254 <__pi_hyper_copy_misaligned+0x1d8>
1c00a0da:	4701                	li	a4,0
1c00a0dc:	4691                	li	a3,4
1c00a0de:	c0063633          	p.bclr	a2,a2,0,0
1c00a0e2:	9e4c0593          	addi	a1,s8,-1564
1c00a0e6:	5008                	lw	a0,32(s0)
1c00a0e8:	a889                	j	1c00a13a <__pi_hyper_copy_misaligned+0xbe>
1c00a0ea:	540c                	lw	a1,40(s0)
1c00a0ec:	04442883          	lw	a7,68(s0)
1c00a0f0:	04842303          	lw	t1,72(s0)
1c00a0f4:	00358793          	addi	a5,a1,3
1c00a0f8:	5050                	lw	a2,36(s0)
1c00a0fa:	5454                	lw	a3,44(s0)
1c00a0fc:	4038                	lw	a4,64(s0)
1c00a0fe:	c207b7b3          	p.bclr	a5,a5,1,0
1c00a102:	8f8d                	sub	a5,a5,a1
1c00a104:	41130333          	sub	t1,t1,a7
1c00a108:	4801                	li	a6,0
1c00a10a:	4e0d                	li	t3,3
1c00a10c:	84be                	mv	s1,a5
1c00a10e:	00de6363          	bltu	t3,a3,1c00a114 <__pi_hyper_copy_misaligned+0x98>
1c00a112:	84b6                	mv	s1,a3
1c00a114:	c4b5                	beqz	s1,1c00a180 <__pi_hyper_copy_misaligned+0x104>
1c00a116:	00080563          	beqz	a6,1c00a120 <__pi_hyper_copy_misaligned+0xa4>
1c00a11a:	d050                	sw	a2,36(s0)
1c00a11c:	d454                	sw	a3,44(s0)
1c00a11e:	c038                	sw	a4,64(s0)
1c00a120:	03044703          	lbu	a4,48(s0)
1c00a124:	1c00d937          	lui	s2,0x1c00d
1c00a128:	9e490793          	addi	a5,s2,-1564 # 1c00c9e4 <__pi_hyper_temp_buffer>
1c00a12c:	ef09                	bnez	a4,1c00a146 <__pi_hyper_copy_misaligned+0xca>
1c00a12e:	4691                	li	a3,4
1c00a130:	c0063633          	p.bclr	a2,a2,0,0
1c00a134:	9e490593          	addi	a1,s2,-1564
1c00a138:	157d                	addi	a0,a0,-1
1c00a13a:	d8bff0ef          	jal	ra,1c009ec4 <__pi_hyper_copy_aligned>
1c00a13e:	4785                	li	a5,1
1c00a140:	02f40823          	sb	a5,48(s0)
1c00a144:	aa3d                	j	1c00a282 <__pi_hyper_copy_misaligned+0x206>
1c00a146:	fc163533          	p.bclr	a0,a2,30,1
1c00a14a:	953e                	add	a0,a0,a5
1c00a14c:	8626                	mv	a2,s1
1c00a14e:	02040823          	sb	zero,48(s0)
1c00a152:	aa5ff0ef          	jal	ra,1c009bf6 <l2_memcpy>
1c00a156:	5050                	lw	a2,36(s0)
1c00a158:	5008                	lw	a0,32(s0)
1c00a15a:	4701                	li	a4,0
1c00a15c:	4691                	li	a3,4
1c00a15e:	c0063633          	p.bclr	a2,a2,0,0
1c00a162:	9e490593          	addi	a1,s2,-1564
1c00a166:	d5fff0ef          	jal	ra,1c009ec4 <__pi_hyper_copy_aligned>
1c00a16a:	505c                	lw	a5,36(s0)
1c00a16c:	97a6                	add	a5,a5,s1
1c00a16e:	d05c                	sw	a5,36(s0)
1c00a170:	541c                	lw	a5,40(s0)
1c00a172:	97a6                	add	a5,a5,s1
1c00a174:	d41c                	sw	a5,40(s0)
1c00a176:	545c                	lw	a5,44(s0)
1c00a178:	409784b3          	sub	s1,a5,s1
1c00a17c:	d444                	sw	s1,44(s0)
1c00a17e:	a211                	j	1c00a282 <__pi_hyper_copy_misaligned+0x206>
1c00a180:	c2d1                	beqz	a3,1c00a204 <__pi_hyper_copy_misaligned+0x188>
1c00a182:	00080563          	beqz	a6,1c00a18c <__pi_hyper_copy_misaligned+0x110>
1c00a186:	d050                	sw	a2,36(s0)
1c00a188:	d454                	sw	a3,44(s0)
1c00a18a:	c038                	sw	a4,64(s0)
1c00a18c:	97b2                	add	a5,a5,a2
1c00a18e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00a192:	c206b4b3          	p.bclr	s1,a3,1,0
1c00a196:	ef89                	bnez	a5,1c00a1b0 <__pi_hyper_copy_misaligned+0x134>
1c00a198:	4701                	li	a4,0
1c00a19a:	86a6                	mv	a3,s1
1c00a19c:	d29ff0ef          	jal	ra,1c009ec4 <__pi_hyper_copy_aligned>
1c00a1a0:	505c                	lw	a5,36(s0)
1c00a1a2:	5454                	lw	a3,44(s0)
1c00a1a4:	97a6                	add	a5,a5,s1
1c00a1a6:	d05c                	sw	a5,36(s0)
1c00a1a8:	541c                	lw	a5,40(s0)
1c00a1aa:	97a6                	add	a5,a5,s1
1c00a1ac:	d41c                	sw	a5,40(s0)
1c00a1ae:	a881                	j	1c00a1fe <__pi_hyper_copy_misaligned+0x182>
1c00a1b0:	03044703          	lbu	a4,48(s0)
1c00a1b4:	1c00d937          	lui	s2,0x1c00d
1c00a1b8:	9e490793          	addi	a5,s2,-1564 # 1c00c9e4 <__pi_hyper_temp_buffer>
1c00a1bc:	db2d                	beqz	a4,1c00a12e <__pi_hyper_copy_misaligned+0xb2>
1c00a1be:	07c00693          	li	a3,124
1c00a1c2:	04d4d4b3          	p.minu	s1,s1,a3
1c00a1c6:	00178513          	addi	a0,a5,1
1c00a1ca:	fff48613          	addi	a2,s1,-1
1c00a1ce:	02040823          	sb	zero,48(s0)
1c00a1d2:	a25ff0ef          	jal	ra,1c009bf6 <l2_memcpy>
1c00a1d6:	5050                	lw	a2,36(s0)
1c00a1d8:	5008                	lw	a0,32(s0)
1c00a1da:	86a6                	mv	a3,s1
1c00a1dc:	4701                	li	a4,0
1c00a1de:	c0063633          	p.bclr	a2,a2,0,0
1c00a1e2:	9e490593          	addi	a1,s2,-1564
1c00a1e6:	cdfff0ef          	jal	ra,1c009ec4 <__pi_hyper_copy_aligned>
1c00a1ea:	505c                	lw	a5,36(s0)
1c00a1ec:	5454                	lw	a3,44(s0)
1c00a1ee:	17fd                	addi	a5,a5,-1
1c00a1f0:	97a6                	add	a5,a5,s1
1c00a1f2:	d05c                	sw	a5,36(s0)
1c00a1f4:	541c                	lw	a5,40(s0)
1c00a1f6:	0685                	addi	a3,a3,1
1c00a1f8:	17fd                	addi	a5,a5,-1
1c00a1fa:	97a6                	add	a5,a5,s1
1c00a1fc:	d41c                	sw	a5,40(s0)
1c00a1fe:	409684b3          	sub	s1,a3,s1
1c00a202:	bfad                	j	1c00a17c <__pi_hyper_copy_misaligned+0x100>
1c00a204:	e719                	bnez	a4,1c00a212 <__pi_hyper_copy_misaligned+0x196>
1c00a206:	00080c63          	beqz	a6,1c00a21e <__pi_hyper_copy_misaligned+0x1a2>
1c00a20a:	d050                	sw	a2,36(s0)
1c00a20c:	02042623          	sw	zero,44(s0)
1c00a210:	a029                	j	1c00a21a <__pi_hyper_copy_misaligned+0x19e>
1c00a212:	02e8ea63          	bltu	a7,a4,1c00a246 <__pi_hyper_copy_misaligned+0x1ca>
1c00a216:	fe081ae3          	bnez	a6,1c00a20a <__pi_hyper_copy_misaligned+0x18e>
1c00a21a:	04042023          	sw	zero,64(s0)
1c00a21e:	854e                	mv	a0,s3
1c00a220:	02042a23          	sw	zero,52(s0)
1c00a224:	00042e23          	sw	zero,28(s0)
1c00a228:	9e3ff0ef          	jal	ra,1c009c0a <rt_event_enqueue>
1c00a22c:	5422                	lw	s0,40(sp)
1c00a22e:	50b2                	lw	ra,44(sp)
1c00a230:	5492                	lw	s1,36(sp)
1c00a232:	5902                	lw	s2,32(sp)
1c00a234:	49f2                	lw	s3,28(sp)
1c00a236:	4a62                	lw	s4,24(sp)
1c00a238:	4ad2                	lw	s5,20(sp)
1c00a23a:	4b42                	lw	s6,16(sp)
1c00a23c:	4bb2                	lw	s7,12(sp)
1c00a23e:	4c22                	lw	s8,8(sp)
1c00a240:	6145                	addi	sp,sp,48
1c00a242:	de9ff06f          	j	1c00a02a <exec_pending_task>
1c00a246:	41170733          	sub	a4,a4,a7
1c00a24a:	961a                	add	a2,a2,t1
1c00a24c:	4805                	li	a6,1
1c00a24e:	04e8d6b3          	p.minu	a3,a7,a4
1c00a252:	bd6d                	j	1c00a10c <__pi_hyper_copy_misaligned+0x90>
1c00a254:	fc1635b3          	p.bclr	a1,a2,30,1
1c00a258:	95ca                	add	a1,a1,s2
1c00a25a:	865e                	mv	a2,s7
1c00a25c:	02040823          	sb	zero,48(s0)
1c00a260:	997ff0ef          	jal	ra,1c009bf6 <l2_memcpy>
1c00a264:	505c                	lw	a5,36(s0)
1c00a266:	97de                	add	a5,a5,s7
1c00a268:	d05c                	sw	a5,36(s0)
1c00a26a:	541c                	lw	a5,40(s0)
1c00a26c:	97de                	add	a5,a5,s7
1c00a26e:	d41c                	sw	a5,40(s0)
1c00a270:	545c                	lw	a5,44(s0)
1c00a272:	41778bb3          	sub	s7,a5,s7
1c00a276:	03742623          	sw	s7,44(s0)
1c00a27a:	e20b9ee3          	bnez	s7,1c00a0b6 <__pi_hyper_copy_misaligned+0x3a>
1c00a27e:	545c                	lw	a5,44(s0)
1c00a280:	c7a5                	beqz	a5,1c00a2e8 <__pi_hyper_copy_misaligned+0x26c>
1c00a282:	50b2                	lw	ra,44(sp)
1c00a284:	5422                	lw	s0,40(sp)
1c00a286:	5492                	lw	s1,36(sp)
1c00a288:	5902                	lw	s2,32(sp)
1c00a28a:	49f2                	lw	s3,28(sp)
1c00a28c:	4a62                	lw	s4,24(sp)
1c00a28e:	4ad2                	lw	s5,20(sp)
1c00a290:	4b42                	lw	s6,16(sp)
1c00a292:	4bb2                	lw	s7,12(sp)
1c00a294:	4c22                	lw	s8,8(sp)
1c00a296:	6145                	addi	sp,sp,48
1c00a298:	8082                	ret
1c00a29a:	d0f5                	beqz	s1,1c00a27e <__pi_hyper_copy_misaligned+0x202>
1c00a29c:	97b2                	add	a5,a5,a2
1c00a29e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00a2a2:	c204b4b3          	p.bclr	s1,s1,1,0
1c00a2a6:	e791                	bnez	a5,1c00a2b2 <__pi_hyper_copy_misaligned+0x236>
1c00a2a8:	85aa                	mv	a1,a0
1c00a2aa:	4701                	li	a4,0
1c00a2ac:	86a6                	mv	a3,s1
1c00a2ae:	5008                	lw	a0,32(s0)
1c00a2b0:	b5f5                	j	1c00a19c <__pi_hyper_copy_misaligned+0x120>
1c00a2b2:	03044783          	lbu	a5,48(s0)
1c00a2b6:	0554d4b3          	p.minu	s1,s1,s5
1c00a2ba:	e789                	bnez	a5,1c00a2c4 <__pi_hyper_copy_misaligned+0x248>
1c00a2bc:	4701                	li	a4,0
1c00a2be:	00448693          	addi	a3,s1,4
1c00a2c2:	bd31                	j	1c00a0de <__pi_hyper_copy_misaligned+0x62>
1c00a2c4:	8626                	mv	a2,s1
1c00a2c6:	85da                	mv	a1,s6
1c00a2c8:	02040823          	sb	zero,48(s0)
1c00a2cc:	92bff0ef          	jal	ra,1c009bf6 <l2_memcpy>
1c00a2d0:	505c                	lw	a5,36(s0)
1c00a2d2:	5454                	lw	a3,44(s0)
1c00a2d4:	97a6                	add	a5,a5,s1
1c00a2d6:	d05c                	sw	a5,36(s0)
1c00a2d8:	541c                	lw	a5,40(s0)
1c00a2da:	97a6                	add	a5,a5,s1
1c00a2dc:	409684b3          	sub	s1,a3,s1
1c00a2e0:	d41c                	sw	a5,40(s0)
1c00a2e2:	d444                	sw	s1,44(s0)
1c00a2e4:	dcc9                	beqz	s1,1c00a27e <__pi_hyper_copy_misaligned+0x202>
1c00a2e6:	bbc1                	j	1c00a0b6 <__pi_hyper_copy_misaligned+0x3a>
1c00a2e8:	4038                	lw	a4,64(s0)
1c00a2ea:	db15                	beqz	a4,1c00a21e <__pi_hyper_copy_misaligned+0x1a2>
1c00a2ec:	407c                	lw	a5,68(s0)
1c00a2ee:	00e7ff63          	bleu	a4,a5,1c00a30c <__pi_hyper_copy_misaligned+0x290>
1c00a2f2:	8f1d                	sub	a4,a4,a5
1c00a2f4:	c038                	sw	a4,64(s0)
1c00a2f6:	4034                	lw	a3,64(s0)
1c00a2f8:	d29d                	beqz	a3,1c00a21e <__pi_hyper_copy_misaligned+0x1a2>
1c00a2fa:	5058                	lw	a4,36(s0)
1c00a2fc:	4430                	lw	a2,72(s0)
1c00a2fe:	9732                	add	a4,a4,a2
1c00a300:	8f1d                	sub	a4,a4,a5
1c00a302:	04d7d7b3          	p.minu	a5,a5,a3
1c00a306:	d058                	sw	a4,36(s0)
1c00a308:	d45c                	sw	a5,44(s0)
1c00a30a:	b375                	j	1c00a0b6 <__pi_hyper_copy_misaligned+0x3a>
1c00a30c:	04042023          	sw	zero,64(s0)
1c00a310:	b7dd                	j	1c00a2f6 <__pi_hyper_copy_misaligned+0x27a>

1c00a312 <__pi_hyper_copy_2d>:
1c00a312:	1141                	addi	sp,sp,-16
1c00a314:	c606                	sw	ra,12(sp)
1c00a316:	c422                	sw	s0,8(sp)
1c00a318:	30047473          	csrrci	s0,mstatus,8
1c00a31c:	00088563          	beqz	a7,1c00a326 <__pi_hyper_copy_2d+0x14>
1c00a320:	010008b7          	lui	a7,0x1000
1c00a324:	9646                	add	a2,a2,a7
1c00a326:	30800893          	li	a7,776
1c00a32a:	01c8ae03          	lw	t3,28(a7) # 100001c <__L2+0xf8001c>
1c00a32e:	30800313          	li	t1,776
1c00a332:	040e0563          	beqz	t3,1c00a37c <__pi_hyper_copy_2d+0x6a>
1c00a336:	03832883          	lw	a7,56(t1) # 80000038 <pulp__FC+0x80000039>
1c00a33a:	02088e63          	beqz	a7,1c00a376 <__pi_hyper_copy_2d+0x64>
1c00a33e:	03c32883          	lw	a7,60(t1)
1c00a342:	0108ae23          	sw	a6,28(a7)
1c00a346:	c0854533          	p.bset	a0,a0,0,8
1c00a34a:	03032e23          	sw	a6,60(t1)
1c00a34e:	00082e23          	sw	zero,28(a6)
1c00a352:	02a82c23          	sw	a0,56(a6)
1c00a356:	02b82e23          	sw	a1,60(a6)
1c00a35a:	04c82023          	sw	a2,64(a6)
1c00a35e:	04d82223          	sw	a3,68(a6)
1c00a362:	04e82423          	sw	a4,72(a6)
1c00a366:	04f82623          	sw	a5,76(a6)
1c00a36a:	30041073          	csrw	mstatus,s0
1c00a36e:	40b2                	lw	ra,12(sp)
1c00a370:	4422                	lw	s0,8(sp)
1c00a372:	0141                	addi	sp,sp,16
1c00a374:	8082                	ret
1c00a376:	03032c23          	sw	a6,56(t1)
1c00a37a:	b7f1                	j	1c00a346 <__pi_hyper_copy_2d+0x34>
1c00a37c:	02a8a023          	sw	a0,32(a7)
1c00a380:	02c8a223          	sw	a2,36(a7)
1c00a384:	8542                	mv	a0,a6
1c00a386:	04f6d633          	p.minu	a2,a3,a5
1c00a38a:	0108ae23          	sw	a6,28(a7)
1c00a38e:	02b8a423          	sw	a1,40(a7)
1c00a392:	02c8a623          	sw	a2,44(a7)
1c00a396:	02088823          	sb	zero,48(a7)
1c00a39a:	0308aa23          	sw	a6,52(a7)
1c00a39e:	04d8a023          	sw	a3,64(a7)
1c00a3a2:	04f8a223          	sw	a5,68(a7)
1c00a3a6:	04e8a423          	sw	a4,72(a7)
1c00a3aa:	cd3ff0ef          	jal	ra,1c00a07c <__pi_hyper_copy_misaligned>
1c00a3ae:	bf75                	j	1c00a36a <__pi_hyper_copy_2d+0x58>

1c00a3b0 <pi_hyper_read_2d_async>:
1c00a3b0:	8332                	mv	t1,a2
1c00a3b2:	4510                	lw	a2,8(a0)
1c00a3b4:	00080a23          	sb	zero,20(a6)
1c00a3b8:	4248                	lw	a0,4(a2)
1c00a3ba:	00862883          	lw	a7,8(a2)
1c00a3be:	862e                	mv	a2,a1
1c00a3c0:	0506                	slli	a0,a0,0x1
1c00a3c2:	859a                	mv	a1,t1
1c00a3c4:	f4fff06f          	j	1c00a312 <__pi_hyper_copy_2d>

1c00a3c8 <__rt_hyper_resume_emu_task>:
  __pi_hyper_copy_misaligned(__rt_hyper_pending_emu_task);
1c00a3c8:	33c02503          	lw	a0,828(zero) # 33c <__rt_hyper_pending_emu_task>
1c00a3cc:	cb1ff06f          	j	1c00a07c <__pi_hyper_copy_misaligned>

1c00a3d0 <__rt_hyper_resume_copy>:
  exec_pending_task();
1c00a3d0:	c5bff06f          	j	1c00a02a <exec_pending_task>

1c00a3d4 <__rt_hyper_init>:
  __pi_hyper_cluster_reqs_first = NULL;
1c00a3d4:	1c00d737          	lui	a4,0x1c00d
  __rt_hyper_end_task = NULL;
1c00a3d8:	30800793          	li	a5,776
  __pi_hyper_cluster_reqs_first = NULL;
1c00a3dc:	ba072623          	sw	zero,-1108(a4) # 1c00cbac <__pi_hyper_cluster_reqs_first>
  __rt_hyper_pending_emu_channel = -1;
1c00a3e0:	577d                	li	a4,-1
1c00a3e2:	d398                	sw	a4,32(a5)
  __rt_hyper_open_count = 0;
1c00a3e4:	1c00d737          	lui	a4,0x1c00d
  __rt_hyper_end_task = NULL;
1c00a3e8:	0007ac23          	sw	zero,24(a5)
  __rt_hyper_current_task = NULL;
1c00a3ec:	0007ae23          	sw	zero,28(a5)
  __rt_hyper_pending_tasks = NULL;
1c00a3f0:	0207ac23          	sw	zero,56(a5)
  __rt_hyper_open_count = 0;
1c00a3f4:	ba072823          	sw	zero,-1104(a4) # 1c00cbb0 <__rt_hyper_open_count>
  __rt_hyper_pending_emu_size = 0;
1c00a3f8:	0207a623          	sw	zero,44(a5)
  __rt_hyper_pending_emu_size_2d = 0;
1c00a3fc:	0407a023          	sw	zero,64(a5)
}
1c00a400:	8082                	ret

1c00a402 <rt_padframe_set>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a402:	300476f3          	csrrci	a3,mstatus,8

void rt_padframe_set(rt_padframe_profile_t *profile)
{
  int irq = rt_irq_disable();

  unsigned int *config = profile->config;
1c00a406:	4158                	lw	a4,4(a0)
1c00a408:	1a1047b7          	lui	a5,0x1a104
1c00a40c:	14078613          	addi	a2,a5,320 # 1a104140 <__l1_end+0xa1040bc>

  for (int i=0; i<ARCHI_APB_SOC_PADFUN_NB; i++)
  {
    hal_apb_soc_padfun_set(i, config[i]);
1c00a410:	430c                	lw	a1,0(a4)
1c00a412:	c20c                	sw	a1,0(a2)
1c00a414:	434c                	lw	a1,4(a4)
1c00a416:	14478613          	addi	a2,a5,324
1c00a41a:	14878793          	addi	a5,a5,328
1c00a41e:	c20c                	sw	a1,0(a2)
1c00a420:	4718                	lw	a4,8(a4)
1c00a422:	c398                	sw	a4,0(a5)
  __builtin_pulp_spr_write(reg, val);
1c00a424:	30069073          	csrw	mstatus,a3
  }

  rt_irq_restore(irq);
}
1c00a428:	8082                	ret

1c00a42a <__rt_padframe_init>:
  rt_padframe_set(&__rt_padframe_profiles[0]);
1c00a42a:	1c00c537          	lui	a0,0x1c00c
1c00a42e:	75850513          	addi	a0,a0,1880 # 1c00c758 <__rt_padframe_profiles>
1c00a432:	fd1ff06f          	j	1c00a402 <rt_padframe_set>

1c00a436 <rt_extern_alloc_init>:
  }
  printf("=============================================\n");
}

int rt_extern_alloc_init(rt_extern_alloc_t *a, void *addr, int size)
{
1c00a436:	1101                	addi	sp,sp,-32
1c00a438:	c84a                	sw	s2,16(sp)
1c00a43a:	ce06                	sw	ra,28(sp)
1c00a43c:	cc22                	sw	s0,24(sp)
1c00a43e:	ca26                	sw	s1,20(sp)
1c00a440:	892a                	mv	s2,a0
  if (size)
1c00a442:	c229                	beqz	a2,1c00a484 <rt_extern_alloc_init+0x4e>
  {
    unsigned int start_addr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c00a444:	00758493          	addi	s1,a1,7
1c00a448:	842e                	mv	s0,a1
  return (rt_alloc_chunk_extern_t *)rt_alloc(RT_ALLOC_FC_DATA, sizeof(rt_alloc_chunk_extern_t));
1c00a44a:	4505                	li	a0,1
1c00a44c:	45b1                	li	a1,12
1c00a44e:	c632                	sw	a2,12(sp)
1c00a450:	ee6fe0ef          	jal	ra,1c008b36 <rt_alloc>
    unsigned int start_addr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c00a454:	c404b4b3          	p.bclr	s1,s1,2,0
    rt_alloc_chunk_extern_t *chunk = __rt_alloc_chunk();
    if (chunk == NULL) return -1;
1c00a458:	4632                	lw	a2,12(sp)
1c00a45a:	c905                	beqz	a0,1c00a48a <rt_extern_alloc_init+0x54>
    size = size - (start_addr - (unsigned int)addr);
1c00a45c:	9432                	add	s0,s0,a2
1c00a45e:	8c05                	sub	s0,s0,s1
  }
  else
  {
    a->first_free = NULL;
  }
  return 0;
1c00a460:	4601                	li	a2,0
    if (size > 0) {
1c00a462:	00805a63          	blez	s0,1c00a476 <rt_extern_alloc_init+0x40>
      a->first_free = chunk;
1c00a466:	00a92023          	sw	a0,0(s2)
      chunk->size = ALIGN_DOWN(size, MIN_CHUNK_SIZE);
1c00a46a:	c4043433          	p.bclr	s0,s0,2,0
1c00a46e:	c100                	sw	s0,0(a0)
      chunk->next = NULL;
1c00a470:	00052223          	sw	zero,4(a0)
      chunk->addr = start_addr;
1c00a474:	c504                	sw	s1,8(a0)
}
1c00a476:	40f2                	lw	ra,28(sp)
1c00a478:	4462                	lw	s0,24(sp)
1c00a47a:	44d2                	lw	s1,20(sp)
1c00a47c:	4942                	lw	s2,16(sp)
1c00a47e:	8532                	mv	a0,a2
1c00a480:	6105                	addi	sp,sp,32
1c00a482:	8082                	ret
    a->first_free = NULL;
1c00a484:	00052023          	sw	zero,0(a0)
1c00a488:	b7fd                	j	1c00a476 <rt_extern_alloc_init+0x40>
    if (chunk == NULL) return -1;
1c00a48a:	567d                	li	a2,-1
1c00a48c:	b7ed                	j	1c00a476 <rt_extern_alloc_init+0x40>

1c00a48e <rt_extern_alloc_deinit>:
  rt_free(RT_ALLOC_FC_DATA, (void *)pt, sizeof(rt_alloc_chunk_extern_t));
1c00a48e:	410c                	lw	a1,0(a0)
1c00a490:	4631                	li	a2,12
1c00a492:	4505                	li	a0,1
1c00a494:	ed2fe06f          	j	1c008b66 <rt_free>

1c00a498 <__pi_gpio_handler>:
  }
}


void __pi_gpio_handler(void *arg)
{
1c00a498:	1141                	addi	sp,sp,-16
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_INTTYPE(id));
}

static inline unsigned int hal_gpio_intstatus_get()
{
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_INTSTATUS);
1c00a49a:	1a1017b7          	lui	a5,0x1a101
  (void) arg;

  /* Retrieve IRQ status from GPIO. Handle task if needed. */
  pi_gpio_t *gpio = &__rt_gpio[0];
  gpio->irq_status = hal_gpio_intstatus_get();
1c00a49e:	1c00d6b7          	lui	a3,0x1c00d
{
1c00a4a2:	c422                	sw	s0,8(sp)
1c00a4a4:	4f80                	lw	s0,24(a5)
  gpio->irq_status = hal_gpio_intstatus_get();
1c00a4a6:	a6468793          	addi	a5,a3,-1436 # 1c00ca64 <__rt_gpio>
{
1c00a4aa:	c226                	sw	s1,4(sp)

  if (gpio->cb != NULL)
1c00a4ac:	4bc4                	lw	s1,20(a5)
{
1c00a4ae:	c606                	sw	ra,12(sp)
  gpio->irq_status = hal_gpio_intstatus_get();
1c00a4b0:	c780                	sw	s0,8(a5)
  if (gpio->cb != NULL)
1c00a4b2:	cc91                	beqz	s1,1c00a4ce <__pi_gpio_handler+0x36>
    if (irq_mask & tmp_cb->pin_mask)
1c00a4b4:	409c                	lw	a5,0(s1)
1c00a4b6:	8fe1                	and	a5,a5,s0
1c00a4b8:	c781                	beqz	a5,1c00a4c0 <__pi_gpio_handler+0x28>
      tmp_cb->handler(tmp_cb->args);
1c00a4ba:	40dc                	lw	a5,4(s1)
1c00a4bc:	4488                	lw	a0,8(s1)
1c00a4be:	9782                	jalr	a5
    tmp_cb = tmp_cb->next;
1c00a4c0:	44c4                	lw	s1,12(s1)
  while (tmp_cb != NULL)
1c00a4c2:	f8ed                	bnez	s1,1c00a4b4 <__pi_gpio_handler+0x1c>
      }
      irq_mask = irq_mask >> 1;
      pin++;
    }
  }
}
1c00a4c4:	40b2                	lw	ra,12(sp)
1c00a4c6:	4422                	lw	s0,8(sp)
1c00a4c8:	4492                	lw	s1,4(sp)
1c00a4ca:	0141                	addi	sp,sp,16
1c00a4cc:	8082                	ret
1c00a4ce:	a6468693          	addi	a3,a3,-1436
    irq_mask = (gpio->irq_status & gpio->input_mask);
1c00a4d2:	46dc                	lw	a5,12(a3)
    uint8_t pin = 0;
1c00a4d4:	4701                	li	a4,0
    irq_mask = (gpio->irq_status & gpio->input_mask);
1c00a4d6:	8fe1                	and	a5,a5,s0
1c00a4d8:	01c00513          	li	a0,28
    while (irq_mask)
1c00a4dc:	d7e5                	beqz	a5,1c00a4c4 <__pi_gpio_handler+0x2c>
      if (irq_mask & 0x1)
1c00a4de:	fc17b633          	p.bclr	a2,a5,30,1
1c00a4e2:	c615                	beqz	a2,1c00a50e <__pi_gpio_handler+0x76>
        task = gpio->event_task[pin];
1c00a4e4:	00470613          	addi	a2,a4,4
1c00a4e8:	060a                	slli	a2,a2,0x2
1c00a4ea:	9636                	add	a2,a2,a3
1c00a4ec:	4610                	lw	a2,8(a2)
        if (task != NULL)
1c00a4ee:	c205                	beqz	a2,1c00a50e <__pi_gpio_handler+0x76>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a4f0:	30047873          	csrrci	a6,mstatus,8
  if (sched->first) {
1c00a4f4:	01c02883          	lw	a7,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c00a4f8:	00062023          	sw	zero,0(a2)
  if (sched->first) {
1c00a4fc:	00088e63          	beqz	a7,1c00a518 <__pi_gpio_handler+0x80>
    sched->last->next = event;
1c00a500:	00452883          	lw	a7,4(a0)
1c00a504:	00c8a023          	sw	a2,0(a7)
  sched->last = event;
1c00a508:	c150                	sw	a2,4(a0)
  __builtin_pulp_spr_write(reg, val);
1c00a50a:	30081073          	csrw	mstatus,a6
      pin++;
1c00a50e:	0705                	addi	a4,a4,1
      irq_mask = irq_mask >> 1;
1c00a510:	8385                	srli	a5,a5,0x1
      pin++;
1c00a512:	0ff77713          	andi	a4,a4,255
1c00a516:	b7d9                	j	1c00a4dc <__pi_gpio_handler+0x44>
    sched->first = event;
1c00a518:	00c02e23          	sw	a2,28(zero) # 1c <__rt_sched>
1c00a51c:	b7f5                	j	1c00a508 <__pi_gpio_handler+0x70>

1c00a51e <__rt_i2s_resume>:
  conf->pdm = 1;
  conf->dual = 0;
  conf->width = 16;
  conf->id = -1;
  conf->flags = 0;
}
1c00a51e:	1c00d7b7          	lui	a5,0x1c00d
1c00a522:	4d18                	lw	a4,24(a0)
1c00a524:	be07a783          	lw	a5,-1056(a5) # 1c00cbe0 <__rt_freq_domains>
1c00a528:	068416b7          	lui	a3,0x6841
1c00a52c:	90968693          	addi	a3,a3,-1783 # 6840909 <__L2+0x67c0909>
1c00a530:	02e7c7b3          	div	a5,a5,a4
1c00a534:	02954703          	lbu	a4,41(a0)
1c00a538:	177d                	addi	a4,a4,-1
1c00a53a:	c0874733          	p.bset	a4,a4,0,8
1c00a53e:	17fd                	addi	a5,a5,-1
1c00a540:	8785                	srai	a5,a5,0x1
1c00a542:	07c2                	slli	a5,a5,0x10
1c00a544:	8fd9                	or	a5,a5,a4
1c00a546:	02554703          	lbu	a4,37(a0)
1c00a54a:	9736                	add	a4,a4,a3
1c00a54c:	070a                	slli	a4,a4,0x2
1c00a54e:	c31c                	sw	a5,0(a4)
1c00a550:	8082                	ret

1c00a552 <__rt_i2s_setfreq_after>:
1c00a552:	1141                	addi	sp,sp,-16
1c00a554:	1c00d7b7          	lui	a5,0x1c00d
1c00a558:	c422                	sw	s0,8(sp)
1c00a55a:	bb47a403          	lw	s0,-1100(a5) # 1c00cbb4 <__rt_i2s_first>
1c00a55e:	c606                	sw	ra,12(sp)
1c00a560:	e411                	bnez	s0,1c00a56c <__rt_i2s_setfreq_after+0x1a>
1c00a562:	40b2                	lw	ra,12(sp)
1c00a564:	4422                	lw	s0,8(sp)
1c00a566:	4501                	li	a0,0
1c00a568:	0141                	addi	sp,sp,16
1c00a56a:	8082                	ret
1c00a56c:	02844783          	lbu	a5,40(s0)
1c00a570:	c781                	beqz	a5,1c00a578 <__rt_i2s_setfreq_after+0x26>
1c00a572:	8522                	mv	a0,s0
1c00a574:	fabff0ef          	jal	ra,1c00a51e <__rt_i2s_resume>
1c00a578:	4c40                	lw	s0,28(s0)
1c00a57a:	b7dd                	j	1c00a560 <__rt_i2s_setfreq_after+0xe>

1c00a57c <__rt_i2s_setfreq_before>:
1c00a57c:	1c00d7b7          	lui	a5,0x1c00d
1c00a580:	bb47a783          	lw	a5,-1100(a5) # 1c00cbb4 <__rt_i2s_first>
1c00a584:	068416b7          	lui	a3,0x6841
1c00a588:	90968693          	addi	a3,a3,-1783 # 6840909 <__L2+0x67c0909>
1c00a58c:	e399                	bnez	a5,1c00a592 <__rt_i2s_setfreq_before+0x16>
1c00a58e:	4501                	li	a0,0
1c00a590:	8082                	ret
1c00a592:	0287c703          	lbu	a4,40(a5)
1c00a596:	c719                	beqz	a4,1c00a5a4 <__rt_i2s_setfreq_before+0x28>
1c00a598:	0257c703          	lbu	a4,37(a5)
1c00a59c:	9736                	add	a4,a4,a3
1c00a59e:	070a                	slli	a4,a4,0x2
1c00a5a0:	00072023          	sw	zero,0(a4)
1c00a5a4:	4fdc                	lw	a5,28(a5)
1c00a5a6:	b7dd                	j	1c00a58c <__rt_i2s_setfreq_before+0x10>

1c00a5a8 <__rt_i2s_init>:
{
  // In case the peripheral clock can dynamically change, we need to be notified
  // when this happens so that the I2S channels are stopped and resumed
  int err = 0;

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00a5a8:	1c00a5b7          	lui	a1,0x1c00a
{
1c00a5ac:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00a5ae:	4601                	li	a2,0
1c00a5b0:	57c58593          	addi	a1,a1,1404 # 1c00a57c <__rt_i2s_setfreq_before>
1c00a5b4:	4511                	li	a0,4
{
1c00a5b6:	c606                	sw	ra,12(sp)
1c00a5b8:	c422                	sw	s0,8(sp)
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00a5ba:	ef9fd0ef          	jal	ra,1c0084b2 <__rt_cbsys_add>

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_i2s_setfreq_after, NULL);
1c00a5be:	1c00a5b7          	lui	a1,0x1c00a
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c00a5c2:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_i2s_setfreq_after, NULL);
1c00a5c4:	4601                	li	a2,0
1c00a5c6:	55258593          	addi	a1,a1,1362 # 1c00a552 <__rt_i2s_setfreq_after>
1c00a5ca:	4515                	li	a0,5
1c00a5cc:	ee7fd0ef          	jal	ra,1c0084b2 <__rt_cbsys_add>
1c00a5d0:	8d41                	or	a0,a0,s0

  if (err) rt_fatal("Unable to initialize i2s driver\n");
1c00a5d2:	c105                	beqz	a0,1c00a5f2 <__rt_i2s_init+0x4a>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00a5d4:	01402673          	csrr	a2,uhartid
1c00a5d8:	1c00c537          	lui	a0,0x1c00c
  return (hart_id >> 5) & 0x3f;
1c00a5dc:	40565593          	srai	a1,a2,0x5
1c00a5e0:	f265b5b3          	p.bclr	a1,a1,25,6
1c00a5e4:	f4563633          	p.bclr	a2,a2,26,5
1c00a5e8:	59850513          	addi	a0,a0,1432 # 1c00c598 <__hyper_pad+0x50>
1c00a5ec:	784000ef          	jal	ra,1c00ad70 <printf>
1c00a5f0:	2711                	jal	1c00acf4 <abort>
}
1c00a5f2:	40b2                	lw	ra,12(sp)
1c00a5f4:	4422                	lw	s0,8(sp)
1c00a5f6:	0141                	addi	sp,sp,16
1c00a5f8:	8082                	ret

1c00a5fa <__rt_himax_init>:
    .capture   = &__rt_himax_capture
};

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_himax_init()
{
  camera_isAwaked = 0;
1c00a5fa:	1b0017b7          	lui	a5,0x1b001
1c00a5fe:	ba078c23          	sb	zero,-1096(a5) # 1b000bb8 <camera_isAwaked>
}
1c00a602:	8082                	ret

1c00a604 <__rt_rtc_init>:
}


RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_rtc_init()
{
  __rtc_handler = NULL;
1c00a604:	35800793          	li	a5,856
1c00a608:	0207ac23          	sw	zero,56(a5)
  dev_rtc.open_count = 0;
1c00a60c:	02078823          	sb	zero,48(a5)
  __rt_rtc_init_done = 0;
1c00a610:	0207aa23          	sw	zero,52(a5)
}
1c00a614:	8082                	ret

1c00a616 <__rt_spim_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_spim_init()
{
  for (int i=0; i<ARCHI_UDMA_NB_SPIM; i++)
  {
    __rt_spim_open_count[i] = 0;
1c00a616:	1c00d7b7          	lui	a5,0x1c00d
1c00a61a:	bb878793          	addi	a5,a5,-1096 # 1c00cbb8 <__rt_spim_open_count>
1c00a61e:	0007a023          	sw	zero,0(a5)
1c00a622:	0007a223          	sw	zero,4(a5)
  }
}
1c00a626:	8082                	ret

1c00a628 <__rt_io_end_of_flush>:
  if (rt_iodev() == RT_IODEV_UART)
  {
    __rt_io_start(NULL);
    __rt_cbsys_add(RT_CBSYS_STOP, __rt_io_stop, NULL);
    __rt_io_pending_flush = 0;
    rt_event_alloc(NULL, 1);
1c00a628:	1c00d7b7          	lui	a5,0x1c00d
1c00a62c:	bc07a223          	sw	zero,-1084(a5) # 1c00cbc4 <__rt_io_pending_flush>
1c00a630:	00052c23          	sw	zero,24(a0)
1c00a634:	8082                	ret

1c00a636 <__rt_io_uart_wait_req>:
1c00a636:	1141                	addi	sp,sp,-16
1c00a638:	c226                	sw	s1,4(sp)
1c00a63a:	84aa                	mv	s1,a0
1c00a63c:	c606                	sw	ra,12(sp)
1c00a63e:	c422                	sw	s0,8(sp)
1c00a640:	c04a                	sw	s2,0(sp)
1c00a642:	30047973          	csrrci	s2,mstatus,8
1c00a646:	1c00d437          	lui	s0,0x1c00d
1c00a64a:	bc040413          	addi	s0,s0,-1088 # 1c00cbc0 <__rt_io_event_current>
1c00a64e:	4008                	lw	a0,0(s0)
1c00a650:	c509                	beqz	a0,1c00a65a <__rt_io_uart_wait_req+0x24>
1c00a652:	c00fe0ef          	jal	ra,1c008a52 <rt_event_wait>
1c00a656:	00042023          	sw	zero,0(s0)
1c00a65a:	4785                	li	a5,1
1c00a65c:	08f48023          	sb	a5,128(s1)
1c00a660:	0814c783          	lbu	a5,129(s1)
1c00a664:	00201737          	lui	a4,0x201
1c00a668:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00a66c:	04078793          	addi	a5,a5,64
1c00a670:	07da                	slli	a5,a5,0x16
1c00a672:	0007e723          	p.sw	zero,a4(a5)
1c00a676:	30091073          	csrw	mstatus,s2
1c00a67a:	40b2                	lw	ra,12(sp)
1c00a67c:	4422                	lw	s0,8(sp)
1c00a67e:	4492                	lw	s1,4(sp)
1c00a680:	4902                	lw	s2,0(sp)
1c00a682:	0141                	addi	sp,sp,16
1c00a684:	8082                	ret

1c00a686 <__rt_do_putc_host>:
1c00a686:	1c00d737          	lui	a4,0x1c00d
1c00a68a:	bc870793          	addi	a5,a4,-1080 # 1c00cbc8 <__rt_putc_host_buffer_index>
1c00a68e:	4390                	lw	a2,0(a5)
1c00a690:	bc870713          	addi	a4,a4,-1080
1c00a694:	00160693          	addi	a3,a2,1
1c00a698:	c394                	sw	a3,0(a5)
1c00a69a:	1c00d7b7          	lui	a5,0x1c00d
1c00a69e:	87078593          	addi	a1,a5,-1936 # 1c00c870 <__rt_putc_host_buffer>
1c00a6a2:	00a5c623          	p.sb	a0,a2(a1)
1c00a6a6:	07f00593          	li	a1,127
1c00a6aa:	87078613          	addi	a2,a5,-1936
1c00a6ae:	00b68463          	beq	a3,a1,1c00a6b6 <__rt_do_putc_host+0x30>
1c00a6b2:	00a53a63          	p.bneimm	a0,10,1c00a6c6 <__rt_do_putc_host+0x40>
1c00a6b6:	87078513          	addi	a0,a5,-1936
1c00a6ba:	000646a3          	p.sb	zero,a3(a2)
1c00a6be:	00072023          	sw	zero,0(a4)
1c00a6c2:	9effd06f          	j	1c0080b0 <semihost_write0>
1c00a6c6:	8082                	ret

1c00a6c8 <__rt_io_start>:
1c00a6c8:	1101                	addi	sp,sp,-32
1c00a6ca:	0028                	addi	a0,sp,8
1c00a6cc:	ce06                	sw	ra,28(sp)
1c00a6ce:	cc22                	sw	s0,24(sp)
1c00a6d0:	3ee010ef          	jal	ra,1c00babe <rt_uart_conf_init>
1c00a6d4:	4585                	li	a1,1
1c00a6d6:	4501                	li	a0,0
1c00a6d8:	a14fe0ef          	jal	ra,1c0088ec <rt_event_alloc>
1c00a6dc:	547d                	li	s0,-1
1c00a6de:	ed0d                	bnez	a0,1c00a718 <__rt_io_start+0x50>
1c00a6e0:	1c00d7b7          	lui	a5,0x1c00d
1c00a6e4:	8387a783          	lw	a5,-1992(a5) # 1c00c838 <__rt_iodev_uart_baudrate>
1c00a6e8:	842a                	mv	s0,a0
1c00a6ea:	1c00d537          	lui	a0,0x1c00d
1c00a6ee:	01c00593          	li	a1,28
1c00a6f2:	afc50513          	addi	a0,a0,-1284 # 1c00cafc <__rt_io_event>
1c00a6f6:	c43e                	sw	a5,8(sp)
1c00a6f8:	9b4fe0ef          	jal	ra,1c0088ac <__rt_event_init>
1c00a6fc:	1c00d7b7          	lui	a5,0x1c00d
1c00a700:	b9c7a503          	lw	a0,-1124(a5) # 1c00cb9c <__rt_iodev_uart_channel>
1c00a704:	4681                	li	a3,0
1c00a706:	4601                	li	a2,0
1c00a708:	002c                	addi	a1,sp,8
1c00a70a:	0511                	addi	a0,a0,4
1c00a70c:	3c2010ef          	jal	ra,1c00bace <__rt_uart_open>
1c00a710:	1c00d7b7          	lui	a5,0x1c00d
1c00a714:	bca7a623          	sw	a0,-1076(a5) # 1c00cbcc <_rt_io_uart>
1c00a718:	8522                	mv	a0,s0
1c00a71a:	40f2                	lw	ra,28(sp)
1c00a71c:	4462                	lw	s0,24(sp)
1c00a71e:	6105                	addi	sp,sp,32
1c00a720:	8082                	ret

1c00a722 <rt_event_execute.isra.4.constprop.12>:
1c00a722:	1141                	addi	sp,sp,-16
1c00a724:	c606                	sw	ra,12(sp)
1c00a726:	c422                	sw	s0,8(sp)
1c00a728:	30047473          	csrrci	s0,mstatus,8
1c00a72c:	4585                	li	a1,1
1c00a72e:	01c00513          	li	a0,28
1c00a732:	a90fe0ef          	jal	ra,1c0089c2 <__rt_event_execute>
1c00a736:	30041073          	csrw	mstatus,s0
1c00a73a:	40b2                	lw	ra,12(sp)
1c00a73c:	4422                	lw	s0,8(sp)
1c00a73e:	0141                	addi	sp,sp,16
1c00a740:	8082                	ret

1c00a742 <__rt_io_lock>:
1c00a742:	1c00c7b7          	lui	a5,0x1c00c
1c00a746:	7807a783          	lw	a5,1920(a5) # 1c00c780 <__hal_debug_struct+0x10>
1c00a74a:	cf81                	beqz	a5,1c00a762 <__rt_io_lock+0x20>
1c00a74c:	1c00d7b7          	lui	a5,0x1c00d
1c00a750:	bcc7a783          	lw	a5,-1076(a5) # 1c00cbcc <_rt_io_uart>
1c00a754:	e799                	bnez	a5,1c00a762 <__rt_io_lock+0x20>
1c00a756:	1c00d7b7          	lui	a5,0x1c00d
1c00a75a:	8347a783          	lw	a5,-1996(a5) # 1c00c834 <__rt_iodev>
1c00a75e:	0427b963          	p.bneimm	a5,2,1c00a7b0 <__rt_io_lock+0x6e>
1c00a762:	7135                	addi	sp,sp,-160
1c00a764:	014027f3          	csrr	a5,uhartid
1c00a768:	cf06                	sw	ra,156(sp)
1c00a76a:	ca5797b3          	p.extractu	a5,a5,5,5
1c00a76e:	02000713          	li	a4,32
1c00a772:	1b001537          	lui	a0,0x1b001
1c00a776:	00e79963          	bne	a5,a4,1c00a788 <__rt_io_lock+0x46>
1c00a77a:	bbc50513          	addi	a0,a0,-1092 # 1b000bbc <__rt_io_fc_lock>
1c00a77e:	dc5fd0ef          	jal	ra,1c008542 <__rt_fc_lock>
1c00a782:	40fa                	lw	ra,156(sp)
1c00a784:	610d                	addi	sp,sp,160
1c00a786:	8082                	ret
1c00a788:	004c                	addi	a1,sp,4
1c00a78a:	bbc50513          	addi	a0,a0,-1092
1c00a78e:	e1bfd0ef          	jal	ra,1c0085a8 <__rt_fc_cluster_lock>
1c00a792:	4689                	li	a3,2
1c00a794:	00204737          	lui	a4,0x204
1c00a798:	08c14783          	lbu	a5,140(sp)
1c00a79c:	0ff7f793          	andi	a5,a5,255
1c00a7a0:	f3ed                	bnez	a5,1c00a782 <__rt_io_lock+0x40>
1c00a7a2:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00a7a6:	03c76783          	p.elw	a5,60(a4)
1c00a7aa:	00d72223          	sw	a3,4(a4)
1c00a7ae:	b7ed                	j	1c00a798 <__rt_io_lock+0x56>
1c00a7b0:	8082                	ret

1c00a7b2 <__rt_putc_host_cluster_req>:
1c00a7b2:	1141                	addi	sp,sp,-16
1c00a7b4:	c422                	sw	s0,8(sp)
1c00a7b6:	c606                	sw	ra,12(sp)
1c00a7b8:	842a                	mv	s0,a0
1c00a7ba:	08954503          	lbu	a0,137(a0)
1c00a7be:	ec9ff0ef          	jal	ra,1c00a686 <__rt_do_putc_host>
1c00a7c2:	08844783          	lbu	a5,136(s0)
1c00a7c6:	4705                	li	a4,1
1c00a7c8:	08e42223          	sw	a4,132(s0)
1c00a7cc:	00201737          	lui	a4,0x201
1c00a7d0:	40b2                	lw	ra,12(sp)
1c00a7d2:	4422                	lw	s0,8(sp)
1c00a7d4:	04078793          	addi	a5,a5,64
1c00a7d8:	07da                	slli	a5,a5,0x16
1c00a7da:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00a7de:	0007e723          	p.sw	zero,a4(a5)
1c00a7e2:	0141                	addi	sp,sp,16
1c00a7e4:	8082                	ret

1c00a7e6 <__rt_io_unlock>:
1c00a7e6:	1c00c7b7          	lui	a5,0x1c00c
1c00a7ea:	7807a783          	lw	a5,1920(a5) # 1c00c780 <__hal_debug_struct+0x10>
1c00a7ee:	cf81                	beqz	a5,1c00a806 <__rt_io_unlock+0x20>
1c00a7f0:	1c00d7b7          	lui	a5,0x1c00d
1c00a7f4:	bcc7a783          	lw	a5,-1076(a5) # 1c00cbcc <_rt_io_uart>
1c00a7f8:	e799                	bnez	a5,1c00a806 <__rt_io_unlock+0x20>
1c00a7fa:	1c00d7b7          	lui	a5,0x1c00d
1c00a7fe:	8347a783          	lw	a5,-1996(a5) # 1c00c834 <__rt_iodev>
1c00a802:	0427b963          	p.bneimm	a5,2,1c00a854 <__rt_io_unlock+0x6e>
1c00a806:	7135                	addi	sp,sp,-160
1c00a808:	014027f3          	csrr	a5,uhartid
1c00a80c:	cf06                	sw	ra,156(sp)
1c00a80e:	ca5797b3          	p.extractu	a5,a5,5,5
1c00a812:	02000713          	li	a4,32
1c00a816:	1b001537          	lui	a0,0x1b001
1c00a81a:	00e79963          	bne	a5,a4,1c00a82c <__rt_io_unlock+0x46>
1c00a81e:	bbc50513          	addi	a0,a0,-1092 # 1b000bbc <__rt_io_fc_lock>
1c00a822:	d53fd0ef          	jal	ra,1c008574 <__rt_fc_unlock>
1c00a826:	40fa                	lw	ra,156(sp)
1c00a828:	610d                	addi	sp,sp,160
1c00a82a:	8082                	ret
1c00a82c:	004c                	addi	a1,sp,4
1c00a82e:	bbc50513          	addi	a0,a0,-1092
1c00a832:	daffd0ef          	jal	ra,1c0085e0 <__rt_fc_cluster_unlock>
1c00a836:	4689                	li	a3,2
1c00a838:	00204737          	lui	a4,0x204
1c00a83c:	08c14783          	lbu	a5,140(sp)
1c00a840:	0ff7f793          	andi	a5,a5,255
1c00a844:	f3ed                	bnez	a5,1c00a826 <__rt_io_unlock+0x40>
1c00a846:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00a84a:	03c76783          	p.elw	a5,60(a4)
1c00a84e:	00d72223          	sw	a3,4(a4)
1c00a852:	b7ed                	j	1c00a83c <__rt_io_unlock+0x56>
1c00a854:	8082                	ret

1c00a856 <__rt_io_uart_flush.constprop.11>:
1c00a856:	7171                	addi	sp,sp,-176
1c00a858:	d522                	sw	s0,168(sp)
1c00a85a:	d706                	sw	ra,172(sp)
1c00a85c:	d326                	sw	s1,164(sp)
1c00a85e:	d14a                	sw	s2,160(sp)
1c00a860:	cf4e                	sw	s3,156(sp)
1c00a862:	cd52                	sw	s4,152(sp)
1c00a864:	1c00d437          	lui	s0,0x1c00d
1c00a868:	bc442783          	lw	a5,-1084(s0) # 1c00cbc4 <__rt_io_pending_flush>
1c00a86c:	bc440993          	addi	s3,s0,-1084
1c00a870:	efad                	bnez	a5,1c00a8ea <__rt_io_uart_flush.constprop.11+0x94>
1c00a872:	1c00c637          	lui	a2,0x1c00c
1c00a876:	77060793          	addi	a5,a2,1904 # 1c00c770 <__hal_debug_struct>
1c00a87a:	4f80                	lw	s0,24(a5)
1c00a87c:	77060a13          	addi	s4,a2,1904
1c00a880:	cc29                	beqz	s0,1c00a8da <__rt_io_uart_flush.constprop.11+0x84>
1c00a882:	1c00d737          	lui	a4,0x1c00d
1c00a886:	014027f3          	csrr	a5,uhartid
1c00a88a:	bcc72483          	lw	s1,-1076(a4) # 1c00cbcc <_rt_io_uart>
1c00a88e:	ca5797b3          	p.extractu	a5,a5,5,5
1c00a892:	02000713          	li	a4,32
1c00a896:	1c00c937          	lui	s2,0x1c00c
1c00a89a:	06e79263          	bne	a5,a4,1c00a8fe <__rt_io_uart_flush.constprop.11+0xa8>
1c00a89e:	1c00a5b7          	lui	a1,0x1c00a
1c00a8a2:	4785                	li	a5,1
1c00a8a4:	77060613          	addi	a2,a2,1904
1c00a8a8:	62858593          	addi	a1,a1,1576 # 1c00a628 <__rt_io_end_of_flush>
1c00a8ac:	4501                	li	a0,0
1c00a8ae:	00f9a023          	sw	a5,0(s3)
1c00a8b2:	8b0fe0ef          	jal	ra,1c008962 <rt_event_get>
1c00a8b6:	40cc                	lw	a1,4(s1)
1c00a8b8:	87aa                	mv	a5,a0
1c00a8ba:	4701                	li	a4,0
1c00a8bc:	0586                	slli	a1,a1,0x1
1c00a8be:	86a2                	mv	a3,s0
1c00a8c0:	78c90613          	addi	a2,s2,1932 # 1c00c78c <__hal_debug_struct+0x1c>
1c00a8c4:	0585                	addi	a1,a1,1
1c00a8c6:	4501                	li	a0,0
1c00a8c8:	e08fe0ef          	jal	ra,1c008ed0 <rt_periph_copy>
1c00a8cc:	f1bff0ef          	jal	ra,1c00a7e6 <__rt_io_unlock>
1c00a8d0:	0009a783          	lw	a5,0(s3)
1c00a8d4:	e395                	bnez	a5,1c00a8f8 <__rt_io_uart_flush.constprop.11+0xa2>
1c00a8d6:	e6dff0ef          	jal	ra,1c00a742 <__rt_io_lock>
1c00a8da:	50ba                	lw	ra,172(sp)
1c00a8dc:	542a                	lw	s0,168(sp)
1c00a8de:	549a                	lw	s1,164(sp)
1c00a8e0:	590a                	lw	s2,160(sp)
1c00a8e2:	49fa                	lw	s3,156(sp)
1c00a8e4:	4a6a                	lw	s4,152(sp)
1c00a8e6:	614d                	addi	sp,sp,176
1c00a8e8:	8082                	ret
1c00a8ea:	efdff0ef          	jal	ra,1c00a7e6 <__rt_io_unlock>
1c00a8ee:	e35ff0ef          	jal	ra,1c00a722 <rt_event_execute.isra.4.constprop.12>
1c00a8f2:	e51ff0ef          	jal	ra,1c00a742 <__rt_io_lock>
1c00a8f6:	bf8d                	j	1c00a868 <__rt_io_uart_flush.constprop.11+0x12>
1c00a8f8:	e2bff0ef          	jal	ra,1c00a722 <rt_event_execute.isra.4.constprop.12>
1c00a8fc:	bfd1                	j	1c00a8d0 <__rt_io_uart_flush.constprop.11+0x7a>
1c00a8fe:	868a                	mv	a3,sp
1c00a900:	8622                	mv	a2,s0
1c00a902:	78c90593          	addi	a1,s2,1932
1c00a906:	8526                	mv	a0,s1
1c00a908:	2a2010ef          	jal	ra,1c00bbaa <rt_uart_cluster_write>
1c00a90c:	4689                	li	a3,2
1c00a90e:	00204737          	lui	a4,0x204
1c00a912:	08c14783          	lbu	a5,140(sp)
1c00a916:	0ff7f793          	andi	a5,a5,255
1c00a91a:	c781                	beqz	a5,1c00a922 <__rt_io_uart_flush.constprop.11+0xcc>
1c00a91c:	000a2c23          	sw	zero,24(s4)
1c00a920:	bf6d                	j	1c00a8da <__rt_io_uart_flush.constprop.11+0x84>
1c00a922:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00a926:	03c76783          	p.elw	a5,60(a4)
1c00a92a:	00d72223          	sw	a3,4(a4)
1c00a92e:	b7d5                	j	1c00a912 <__rt_io_uart_flush.constprop.11+0xbc>

1c00a930 <__rt_io_uart_wait_pending>:
1c00a930:	7135                	addi	sp,sp,-160
1c00a932:	cd22                	sw	s0,152(sp)
1c00a934:	cf06                	sw	ra,156(sp)
1c00a936:	1c00d437          	lui	s0,0x1c00d
1c00a93a:	bc442783          	lw	a5,-1084(s0) # 1c00cbc4 <__rt_io_pending_flush>
1c00a93e:	eb85                	bnez	a5,1c00a96e <__rt_io_uart_wait_pending+0x3e>
1c00a940:	1c00d437          	lui	s0,0x1c00d
1c00a944:	bc040413          	addi	s0,s0,-1088 # 1c00cbc0 <__rt_io_event_current>
1c00a948:	4008                	lw	a0,0(s0)
1c00a94a:	cd11                	beqz	a0,1c00a966 <__rt_io_uart_wait_pending+0x36>
1c00a94c:	014027f3          	csrr	a5,uhartid
1c00a950:	8795                	srai	a5,a5,0x5
1c00a952:	f267b7b3          	p.bclr	a5,a5,25,6
1c00a956:	02000713          	li	a4,32
1c00a95a:	02e79163          	bne	a5,a4,1c00a97c <__rt_io_uart_wait_pending+0x4c>
1c00a95e:	8f4fe0ef          	jal	ra,1c008a52 <rt_event_wait>
1c00a962:	00042023          	sw	zero,0(s0)
1c00a966:	40fa                	lw	ra,156(sp)
1c00a968:	446a                	lw	s0,152(sp)
1c00a96a:	610d                	addi	sp,sp,160
1c00a96c:	8082                	ret
1c00a96e:	e79ff0ef          	jal	ra,1c00a7e6 <__rt_io_unlock>
1c00a972:	db1ff0ef          	jal	ra,1c00a722 <rt_event_execute.isra.4.constprop.12>
1c00a976:	dcdff0ef          	jal	ra,1c00a742 <__rt_io_lock>
1c00a97a:	b7c1                	j	1c00a93a <__rt_io_uart_wait_pending+0xa>
1c00a97c:	08f106a3          	sb	a5,141(sp)
1c00a980:	1c00a7b7          	lui	a5,0x1c00a
1c00a984:	63678793          	addi	a5,a5,1590 # 1c00a636 <__rt_io_uart_wait_req>
1c00a988:	4705                	li	a4,1
1c00a98a:	c83e                	sw	a5,16(sp)
1c00a98c:	0068                	addi	a0,sp,12
1c00a98e:	1c00d7b7          	lui	a5,0x1c00d
1c00a992:	b2e7a023          	sw	a4,-1248(a5) # 1c00cb20 <__rt_io_event+0x24>
1c00a996:	08010623          	sb	zero,140(sp)
1c00a99a:	d802                	sw	zero,48(sp)
1c00a99c:	da02                	sw	zero,52(sp)
1c00a99e:	ca2a                	sw	a0,20(sp)
1c00a9a0:	eedfe0ef          	jal	ra,1c00988c <__rt_cluster_push_fc_event>
1c00a9a4:	4689                	li	a3,2
1c00a9a6:	00204737          	lui	a4,0x204
1c00a9aa:	08c14783          	lbu	a5,140(sp)
1c00a9ae:	0ff7f793          	andi	a5,a5,255
1c00a9b2:	fbd5                	bnez	a5,1c00a966 <__rt_io_uart_wait_pending+0x36>
1c00a9b4:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c00a9b8:	03c76783          	p.elw	a5,60(a4)
1c00a9bc:	00d72223          	sw	a3,4(a4)
1c00a9c0:	b7ed                	j	1c00a9aa <__rt_io_uart_wait_pending+0x7a>

1c00a9c2 <__rt_io_stop>:
1c00a9c2:	1141                	addi	sp,sp,-16
1c00a9c4:	c422                	sw	s0,8(sp)
1c00a9c6:	1c00d437          	lui	s0,0x1c00d
1c00a9ca:	c606                	sw	ra,12(sp)
1c00a9cc:	bcc40413          	addi	s0,s0,-1076 # 1c00cbcc <_rt_io_uart>
1c00a9d0:	f61ff0ef          	jal	ra,1c00a930 <__rt_io_uart_wait_pending>
1c00a9d4:	4008                	lw	a0,0(s0)
1c00a9d6:	4581                	li	a1,0
1c00a9d8:	184010ef          	jal	ra,1c00bb5c <rt_uart_close>
1c00a9dc:	40b2                	lw	ra,12(sp)
1c00a9de:	00042023          	sw	zero,0(s0)
1c00a9e2:	4422                	lw	s0,8(sp)
1c00a9e4:	4501                	li	a0,0
1c00a9e6:	0141                	addi	sp,sp,16
1c00a9e8:	8082                	ret

1c00a9ea <strcmp>:
1c00a9ea:	0015478b          	p.lbu	a5,1(a0!)
1c00a9ee:	0015c70b          	p.lbu	a4,1(a1!)
1c00a9f2:	c399                	beqz	a5,1c00a9f8 <strcmp+0xe>
1c00a9f4:	fee78be3          	beq	a5,a4,1c00a9ea <strcmp>
1c00a9f8:	40e78533          	sub	a0,a5,a4
1c00a9fc:	8082                	ret

1c00a9fe <strncmp>:
1c00a9fe:	ce11                	beqz	a2,1c00aa1a <strncmp+0x1c>
1c00aa00:	962a                	add	a2,a2,a0
1c00aa02:	0015478b          	p.lbu	a5,1(a0!)
1c00aa06:	0015c70b          	p.lbu	a4,1(a1!)
1c00aa0a:	00e79563          	bne	a5,a4,1c00aa14 <strncmp+0x16>
1c00aa0e:	00c50363          	beq	a0,a2,1c00aa14 <strncmp+0x16>
1c00aa12:	fbe5                	bnez	a5,1c00aa02 <strncmp+0x4>
1c00aa14:	40e78533          	sub	a0,a5,a4
1c00aa18:	8082                	ret
1c00aa1a:	4501                	li	a0,0
1c00aa1c:	8082                	ret

1c00aa1e <strlen>:
1c00aa1e:	87aa                	mv	a5,a0
1c00aa20:	0007c703          	lbu	a4,0(a5)
1c00aa24:	00178693          	addi	a3,a5,1
1c00aa28:	e701                	bnez	a4,1c00aa30 <strlen+0x12>
1c00aa2a:	40a78533          	sub	a0,a5,a0
1c00aa2e:	8082                	ret
1c00aa30:	87b6                	mv	a5,a3
1c00aa32:	b7fd                	j	1c00aa20 <strlen+0x2>

1c00aa34 <memset>:
1c00aa34:	962a                	add	a2,a2,a0
1c00aa36:	87aa                	mv	a5,a0
1c00aa38:	00c79363          	bne	a5,a2,1c00aa3e <memset+0xa>
1c00aa3c:	8082                	ret
1c00aa3e:	00b780ab          	p.sb	a1,1(a5!)
1c00aa42:	bfdd                	j	1c00aa38 <memset+0x4>

1c00aa44 <memcpy>:
1c00aa44:	00a5e733          	or	a4,a1,a0
1c00aa48:	fa273733          	p.bclr	a4,a4,29,2
1c00aa4c:	87aa                	mv	a5,a0
1c00aa4e:	c709                	beqz	a4,1c00aa58 <memcpy+0x14>
1c00aa50:	962e                	add	a2,a2,a1
1c00aa52:	00c59f63          	bne	a1,a2,1c00aa70 <memcpy+0x2c>
1c00aa56:	8082                	ret
1c00aa58:	fa263733          	p.bclr	a4,a2,29,2
1c00aa5c:	fb75                	bnez	a4,1c00aa50 <memcpy+0xc>
1c00aa5e:	962e                	add	a2,a2,a1
1c00aa60:	00c59363          	bne	a1,a2,1c00aa66 <memcpy+0x22>
1c00aa64:	8082                	ret
1c00aa66:	0045a70b          	p.lw	a4,4(a1!)
1c00aa6a:	00e7a22b          	p.sw	a4,4(a5!)
1c00aa6e:	bfcd                	j	1c00aa60 <memcpy+0x1c>
1c00aa70:	0015c70b          	p.lbu	a4,1(a1!)
1c00aa74:	00e780ab          	p.sb	a4,1(a5!)
1c00aa78:	bfe9                	j	1c00aa52 <memcpy+0xe>

1c00aa7a <strchr>:
1c00aa7a:	0ff5f593          	andi	a1,a1,255
1c00aa7e:	00054703          	lbu	a4,0(a0)
1c00aa82:	87aa                	mv	a5,a0
1c00aa84:	0505                	addi	a0,a0,1
1c00aa86:	00b70563          	beq	a4,a1,1c00aa90 <strchr+0x16>
1c00aa8a:	fb75                	bnez	a4,1c00aa7e <strchr+0x4>
1c00aa8c:	c191                	beqz	a1,1c00aa90 <strchr+0x16>
1c00aa8e:	4781                	li	a5,0
1c00aa90:	853e                	mv	a0,a5
1c00aa92:	8082                	ret

1c00aa94 <__rt_putc_debug_bridge>:
1c00aa94:	1141                	addi	sp,sp,-16
1c00aa96:	c422                	sw	s0,8(sp)
1c00aa98:	1c00c437          	lui	s0,0x1c00c
1c00aa9c:	c226                	sw	s1,4(sp)
1c00aa9e:	c606                	sw	ra,12(sp)
1c00aaa0:	84aa                	mv	s1,a0
1c00aaa2:	77040413          	addi	s0,s0,1904 # 1c00c770 <__hal_debug_struct>
1c00aaa6:	485c                	lw	a5,20(s0)
1c00aaa8:	c791                	beqz	a5,1c00aab4 <__rt_putc_debug_bridge+0x20>
1c00aaaa:	06400513          	li	a0,100
1c00aaae:	a80fe0ef          	jal	ra,1c008d2e <rt_time_wait_us>
1c00aab2:	bfd5                	j	1c00aaa6 <__rt_putc_debug_bridge+0x12>
1c00aab4:	4c1c                	lw	a5,24(s0)
1c00aab6:	00178713          	addi	a4,a5,1
1c00aaba:	97a2                	add	a5,a5,s0
1c00aabc:	00978e23          	sb	s1,28(a5)
1c00aac0:	cc18                	sw	a4,24(s0)
1c00aac2:	4c14                	lw	a3,24(s0)
1c00aac4:	08000793          	li	a5,128
1c00aac8:	00f68463          	beq	a3,a5,1c00aad0 <__rt_putc_debug_bridge+0x3c>
1c00aacc:	00a4b663          	p.bneimm	s1,10,1c00aad8 <__rt_putc_debug_bridge+0x44>
1c00aad0:	c701                	beqz	a4,1c00aad8 <__rt_putc_debug_bridge+0x44>
1c00aad2:	c858                	sw	a4,20(s0)
1c00aad4:	00042c23          	sw	zero,24(s0)
1c00aad8:	4c1c                	lw	a5,24(s0)
1c00aada:	e799                	bnez	a5,1c00aae8 <__rt_putc_debug_bridge+0x54>
1c00aadc:	4422                	lw	s0,8(sp)
1c00aade:	40b2                	lw	ra,12(sp)
1c00aae0:	4492                	lw	s1,4(sp)
1c00aae2:	0141                	addi	sp,sp,16
1c00aae4:	cdbfd06f          	j	1c0087be <__rt_bridge_printf_flush>
1c00aae8:	40b2                	lw	ra,12(sp)
1c00aaea:	4422                	lw	s0,8(sp)
1c00aaec:	4492                	lw	s1,4(sp)
1c00aaee:	0141                	addi	sp,sp,16
1c00aaf0:	8082                	ret

1c00aaf2 <__rt_putc_uart>:
1c00aaf2:	1101                	addi	sp,sp,-32
1c00aaf4:	c62a                	sw	a0,12(sp)
1c00aaf6:	ce06                	sw	ra,28(sp)
1c00aaf8:	e39ff0ef          	jal	ra,1c00a930 <__rt_io_uart_wait_pending>
1c00aafc:	1c00c7b7          	lui	a5,0x1c00c
1c00ab00:	77078793          	addi	a5,a5,1904 # 1c00c770 <__hal_debug_struct>
1c00ab04:	4f94                	lw	a3,24(a5)
1c00ab06:	4532                	lw	a0,12(sp)
1c00ab08:	00168713          	addi	a4,a3,1
1c00ab0c:	cf98                	sw	a4,24(a5)
1c00ab0e:	97b6                	add	a5,a5,a3
1c00ab10:	00a78e23          	sb	a0,28(a5)
1c00ab14:	08000793          	li	a5,128
1c00ab18:	00f70463          	beq	a4,a5,1c00ab20 <__rt_putc_uart+0x2e>
1c00ab1c:	00a53663          	p.bneimm	a0,10,1c00ab28 <__rt_putc_uart+0x36>
1c00ab20:	40f2                	lw	ra,28(sp)
1c00ab22:	6105                	addi	sp,sp,32
1c00ab24:	d33ff06f          	j	1c00a856 <__rt_io_uart_flush.constprop.11>
1c00ab28:	40f2                	lw	ra,28(sp)
1c00ab2a:	6105                	addi	sp,sp,32
1c00ab2c:	8082                	ret

1c00ab2e <tfp_putc.isra.9>:
1c00ab2e:	1c00d7b7          	lui	a5,0x1c00d
1c00ab32:	8347a783          	lw	a5,-1996(a5) # 1c00c834 <__rt_iodev>
1c00ab36:	7135                	addi	sp,sp,-160
1c00ab38:	cf06                	sw	ra,156(sp)
1c00ab3a:	0427bf63          	p.bneimm	a5,2,1c00ab98 <tfp_putc.isra.9+0x6a>
1c00ab3e:	014027f3          	csrr	a5,uhartid
1c00ab42:	8795                	srai	a5,a5,0x5
1c00ab44:	f267b7b3          	p.bclr	a5,a5,25,6
1c00ab48:	02000713          	li	a4,32
1c00ab4c:	00e79763          	bne	a5,a4,1c00ab5a <tfp_putc.isra.9+0x2c>
1c00ab50:	b37ff0ef          	jal	ra,1c00a686 <__rt_do_putc_host>
1c00ab54:	40fa                	lw	ra,156(sp)
1c00ab56:	610d                	addi	sp,sp,160
1c00ab58:	8082                	ret
1c00ab5a:	08f10623          	sb	a5,140(sp)
1c00ab5e:	1c00a7b7          	lui	a5,0x1c00a
1c00ab62:	4705                	li	a4,1
1c00ab64:	7b278793          	addi	a5,a5,1970 # 1c00a7b2 <__rt_putc_host_cluster_req>
1c00ab68:	08a106a3          	sb	a0,141(sp)
1c00ab6c:	0048                	addi	a0,sp,4
1c00ab6e:	d63a                	sw	a4,44(sp)
1c00ab70:	c43e                	sw	a5,8(sp)
1c00ab72:	c502                	sw	zero,136(sp)
1c00ab74:	ce02                	sw	zero,28(sp)
1c00ab76:	c62a                	sw	a0,12(sp)
1c00ab78:	00010c23          	sb	zero,24(sp)
1c00ab7c:	d11fe0ef          	jal	ra,1c00988c <__rt_cluster_push_fc_event>
1c00ab80:	4709                	li	a4,2
1c00ab82:	002047b7          	lui	a5,0x204
1c00ab86:	46aa                	lw	a3,136(sp)
1c00ab88:	f6f1                	bnez	a3,1c00ab54 <tfp_putc.isra.9+0x26>
1c00ab8a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c00ab8e:	03c7e683          	p.elw	a3,60(a5)
1c00ab92:	00e7a223          	sw	a4,4(a5)
1c00ab96:	bfc5                	j	1c00ab86 <tfp_putc.isra.9+0x58>
1c00ab98:	1c00d7b7          	lui	a5,0x1c00d
1c00ab9c:	bcc7a783          	lw	a5,-1076(a5) # 1c00cbcc <_rt_io_uart>
1c00aba0:	c781                	beqz	a5,1c00aba8 <tfp_putc.isra.9+0x7a>
1c00aba2:	f51ff0ef          	jal	ra,1c00aaf2 <__rt_putc_uart>
1c00aba6:	b77d                	j	1c00ab54 <tfp_putc.isra.9+0x26>
1c00aba8:	1c00c7b7          	lui	a5,0x1c00c
1c00abac:	7807a783          	lw	a5,1920(a5) # 1c00c780 <__hal_debug_struct+0x10>
1c00abb0:	c395                	beqz	a5,1c00abd4 <tfp_putc.isra.9+0xa6>
1c00abb2:	014027f3          	csrr	a5,uhartid
1c00abb6:	00379713          	slli	a4,a5,0x3
1c00abba:	1a1106b7          	lui	a3,0x1a110
1c00abbe:	ee873733          	p.bclr	a4,a4,23,8
1c00abc2:	9736                	add	a4,a4,a3
1c00abc4:	6689                	lui	a3,0x2
1c00abc6:	078a                	slli	a5,a5,0x2
1c00abc8:	f8068693          	addi	a3,a3,-128 # 1f80 <__rt_stack_size+0x1780>
1c00abcc:	8ff5                	and	a5,a5,a3
1c00abce:	00a767a3          	p.sw	a0,a5(a4)
1c00abd2:	b749                	j	1c00ab54 <tfp_putc.isra.9+0x26>
1c00abd4:	ec1ff0ef          	jal	ra,1c00aa94 <__rt_putc_debug_bridge>
1c00abd8:	bfb5                	j	1c00ab54 <tfp_putc.isra.9+0x26>

1c00abda <puts>:
1c00abda:	1141                	addi	sp,sp,-16
1c00abdc:	c422                	sw	s0,8(sp)
1c00abde:	c606                	sw	ra,12(sp)
1c00abe0:	842a                	mv	s0,a0
1c00abe2:	b61ff0ef          	jal	ra,1c00a742 <__rt_io_lock>
1c00abe6:	0014450b          	p.lbu	a0,1(s0!)
1c00abea:	c501                	beqz	a0,1c00abf2 <puts+0x18>
1c00abec:	f43ff0ef          	jal	ra,1c00ab2e <tfp_putc.isra.9>
1c00abf0:	bfdd                	j	1c00abe6 <puts+0xc>
1c00abf2:	4529                	li	a0,10
1c00abf4:	f3bff0ef          	jal	ra,1c00ab2e <tfp_putc.isra.9>
1c00abf8:	befff0ef          	jal	ra,1c00a7e6 <__rt_io_unlock>
1c00abfc:	40b2                	lw	ra,12(sp)
1c00abfe:	4422                	lw	s0,8(sp)
1c00ac00:	4501                	li	a0,0
1c00ac02:	0141                	addi	sp,sp,16
1c00ac04:	8082                	ret

1c00ac06 <fputc_locked>:
1c00ac06:	1141                	addi	sp,sp,-16
1c00ac08:	c422                	sw	s0,8(sp)
1c00ac0a:	842a                	mv	s0,a0
1c00ac0c:	0ff57513          	andi	a0,a0,255
1c00ac10:	c606                	sw	ra,12(sp)
1c00ac12:	f1dff0ef          	jal	ra,1c00ab2e <tfp_putc.isra.9>
1c00ac16:	8522                	mv	a0,s0
1c00ac18:	40b2                	lw	ra,12(sp)
1c00ac1a:	4422                	lw	s0,8(sp)
1c00ac1c:	0141                	addi	sp,sp,16
1c00ac1e:	8082                	ret

1c00ac20 <fputc>:
1c00ac20:	1141                	addi	sp,sp,-16
1c00ac22:	c606                	sw	ra,12(sp)
1c00ac24:	c422                	sw	s0,8(sp)
1c00ac26:	842a                	mv	s0,a0
1c00ac28:	b1bff0ef          	jal	ra,1c00a742 <__rt_io_lock>
1c00ac2c:	0ff47513          	andi	a0,s0,255
1c00ac30:	effff0ef          	jal	ra,1c00ab2e <tfp_putc.isra.9>
1c00ac34:	1c00c7b7          	lui	a5,0x1c00c
1c00ac38:	7807a783          	lw	a5,1920(a5) # 1c00c780 <__hal_debug_struct+0x10>
1c00ac3c:	e399                	bnez	a5,1c00ac42 <fputc+0x22>
1c00ac3e:	b81fd0ef          	jal	ra,1c0087be <__rt_bridge_printf_flush>
1c00ac42:	ba5ff0ef          	jal	ra,1c00a7e6 <__rt_io_unlock>
1c00ac46:	8522                	mv	a0,s0
1c00ac48:	40b2                	lw	ra,12(sp)
1c00ac4a:	4422                	lw	s0,8(sp)
1c00ac4c:	0141                	addi	sp,sp,16
1c00ac4e:	8082                	ret

1c00ac50 <putchar>:
1c00ac50:	4589                	li	a1,2
1c00ac52:	fcfff06f          	j	1c00ac20 <fputc>

1c00ac56 <_prf_locked>:
1c00ac56:	1101                	addi	sp,sp,-32
1c00ac58:	ce06                	sw	ra,28(sp)
1c00ac5a:	c02a                	sw	a0,0(sp)
1c00ac5c:	c62e                	sw	a1,12(sp)
1c00ac5e:	c432                	sw	a2,8(sp)
1c00ac60:	c236                	sw	a3,4(sp)
1c00ac62:	ae1ff0ef          	jal	ra,1c00a742 <__rt_io_lock>
1c00ac66:	4692                	lw	a3,4(sp)
1c00ac68:	4622                	lw	a2,8(sp)
1c00ac6a:	45b2                	lw	a1,12(sp)
1c00ac6c:	4502                	lw	a0,0(sp)
1c00ac6e:	2ca1                	jal	1c00aec6 <_prf>
1c00ac70:	c02a                	sw	a0,0(sp)
1c00ac72:	b75ff0ef          	jal	ra,1c00a7e6 <__rt_io_unlock>
1c00ac76:	40f2                	lw	ra,28(sp)
1c00ac78:	4502                	lw	a0,0(sp)
1c00ac7a:	6105                	addi	sp,sp,32
1c00ac7c:	8082                	ret

1c00ac7e <exit>:
1c00ac7e:	1101                	addi	sp,sp,-32
1c00ac80:	cc22                	sw	s0,24(sp)
1c00ac82:	c84a                	sw	s2,16(sp)
1c00ac84:	c62a                	sw	a0,12(sp)
1c00ac86:	ce06                	sw	ra,28(sp)
1c00ac88:	ca26                	sw	s1,20(sp)
1c00ac8a:	e90fd0ef          	jal	ra,1c00831a <__rt_deinit>
1c00ac8e:	4532                	lw	a0,12(sp)
1c00ac90:	1a104437          	lui	s0,0x1a104
1c00ac94:	0a040793          	addi	a5,s0,160 # 1a1040a0 <__l1_end+0xa10401c>
1c00ac98:	c1f54933          	p.bset	s2,a0,0,31
1c00ac9c:	0127a023          	sw	s2,0(a5)
1c00aca0:	1c00d7b7          	lui	a5,0x1c00d
1c00aca4:	8347a783          	lw	a5,-1996(a5) # 1c00c834 <__rt_iodev>
1c00aca8:	0027bf63          	p.bneimm	a5,2,1c00acc6 <exit+0x48>
1c00acac:	c901                	beqz	a0,1c00acbc <exit+0x3e>
1c00acae:	00020537          	lui	a0,0x20
1c00acb2:	02350513          	addi	a0,a0,35 # 20023 <__L1Cl+0x10023>
1c00acb6:	c7cfd0ef          	jal	ra,1c008132 <semihost_exit>
1c00acba:	a001                	j	1c00acba <exit+0x3c>
1c00acbc:	00020537          	lui	a0,0x20
1c00acc0:	02650513          	addi	a0,a0,38 # 20026 <__L1Cl+0x10026>
1c00acc4:	bfcd                	j	1c00acb6 <exit+0x38>
1c00acc6:	1c00c4b7          	lui	s1,0x1c00c
1c00acca:	77048493          	addi	s1,s1,1904 # 1c00c770 <__hal_debug_struct>
1c00acce:	af1fd0ef          	jal	ra,1c0087be <__rt_bridge_printf_flush>
1c00acd2:	0124a623          	sw	s2,12(s1)
1c00acd6:	aa5fd0ef          	jal	ra,1c00877a <__rt_bridge_send_notif>
1c00acda:	449c                	lw	a5,8(s1)
1c00acdc:	dff9                	beqz	a5,1c00acba <exit+0x3c>
1c00acde:	07440413          	addi	s0,s0,116
1c00ace2:	401c                	lw	a5,0(s0)
1c00ace4:	83a5                	srli	a5,a5,0x9
1c00ace6:	f837b7b3          	p.bclr	a5,a5,28,3
1c00acea:	fe77bce3          	p.bneimm	a5,7,1c00ace2 <exit+0x64>
1c00acee:	aaffd0ef          	jal	ra,1c00879c <__rt_bridge_clear_notif>
1c00acf2:	b7e1                	j	1c00acba <exit+0x3c>

1c00acf4 <abort>:
1c00acf4:	1141                	addi	sp,sp,-16
1c00acf6:	557d                	li	a0,-1
1c00acf8:	c606                	sw	ra,12(sp)
1c00acfa:	f85ff0ef          	jal	ra,1c00ac7e <exit>

1c00acfe <__rt_io_init>:
#endif
}

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_io_init()
{
  __rt_putc_host_buffer_index = 0;
1c00acfe:	1c00d7b7          	lui	a5,0x1c00d
1c00ad02:	bc07a423          	sw	zero,-1080(a5) # 1c00cbc8 <__rt_putc_host_buffer_index>
void __rt_fc_cluster_unlock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req);

static inline void __rt_fc_lock_init(rt_fc_lock_t *lock)
{
#if defined(ARCHI_HAS_FC)
  lock->waiting = NULL;
1c00ad06:	1b0017b7          	lui	a5,0x1b001
1c00ad0a:	bbc78793          	addi	a5,a5,-1092 # 1b000bbc <__rt_io_fc_lock>
1c00ad0e:	0007a223          	sw	zero,4(a5)
  lock->locked = 0;
1c00ad12:	0007a023          	sw	zero,0(a5)
  lock->fc_wait = NULL;
1c00ad16:	0007a623          	sw	zero,12(a5)
  __rt_fc_lock_init(&__rt_io_fc_lock);

#if defined(__RT_USE_UART)
  _rt_io_uart = NULL;
1c00ad1a:	1c00d7b7          	lui	a5,0x1c00d
1c00ad1e:	bc07a623          	sw	zero,-1076(a5) # 1c00cbcc <_rt_io_uart>
  __rt_io_event_current = NULL;
1c00ad22:	1c00d7b7          	lui	a5,0x1c00d
1c00ad26:	bc07a023          	sw	zero,-1088(a5) # 1c00cbc0 <__rt_io_event_current>
  return __rt_iodev;
1c00ad2a:	1c00d7b7          	lui	a5,0x1c00d

  if (rt_iodev() == RT_IODEV_UART)
1c00ad2e:	8347a783          	lw	a5,-1996(a5) # 1c00c834 <__rt_iodev>
1c00ad32:	0217be63          	p.bneimm	a5,1,1c00ad6e <__rt_io_init+0x70>
  {
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c00ad36:	1c00a5b7          	lui	a1,0x1c00a
{
1c00ad3a:	1141                	addi	sp,sp,-16
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c00ad3c:	4601                	li	a2,0
1c00ad3e:	6c858593          	addi	a1,a1,1736 # 1c00a6c8 <__rt_io_start>
1c00ad42:	4501                	li	a0,0
{
1c00ad44:	c606                	sw	ra,12(sp)
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c00ad46:	f6cfd0ef          	jal	ra,1c0084b2 <__rt_cbsys_add>
    __rt_cbsys_add(RT_CBSYS_STOP, __rt_io_stop, NULL);
1c00ad4a:	1c00b5b7          	lui	a1,0x1c00b
1c00ad4e:	9c258593          	addi	a1,a1,-1598 # 1c00a9c2 <__rt_io_stop>
1c00ad52:	4601                	li	a2,0
1c00ad54:	4505                	li	a0,1
1c00ad56:	f5cfd0ef          	jal	ra,1c0084b2 <__rt_cbsys_add>
    __rt_io_pending_flush = 0;
    rt_event_alloc(NULL, 1);
  }
#endif

}
1c00ad5a:	40b2                	lw	ra,12(sp)
    __rt_io_pending_flush = 0;
1c00ad5c:	1c00d7b7          	lui	a5,0x1c00d
1c00ad60:	bc07a223          	sw	zero,-1084(a5) # 1c00cbc4 <__rt_io_pending_flush>
    rt_event_alloc(NULL, 1);
1c00ad64:	4585                	li	a1,1
1c00ad66:	4501                	li	a0,0
}
1c00ad68:	0141                	addi	sp,sp,16
    rt_event_alloc(NULL, 1);
1c00ad6a:	b83fd06f          	j	1c0088ec <rt_event_alloc>
1c00ad6e:	8082                	ret

1c00ad70 <printf>:

	return r;
}

int printf(const char *format, ...)
{
1c00ad70:	7139                	addi	sp,sp,-64
1c00ad72:	d432                	sw	a2,40(sp)
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00ad74:	862a                	mv	a2,a0
1c00ad76:	1c00b537          	lui	a0,0x1c00b
{
1c00ad7a:	d22e                	sw	a1,36(sp)
1c00ad7c:	d636                	sw	a3,44(sp)
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00ad7e:	4589                	li	a1,2
	va_start(vargs, format);
1c00ad80:	1054                	addi	a3,sp,36
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00ad82:	c0650513          	addi	a0,a0,-1018 # 1c00ac06 <fputc_locked>
{
1c00ad86:	ce06                	sw	ra,28(sp)
1c00ad88:	d83a                	sw	a4,48(sp)
1c00ad8a:	da3e                	sw	a5,52(sp)
1c00ad8c:	dc42                	sw	a6,56(sp)
1c00ad8e:	de46                	sw	a7,60(sp)
	va_start(vargs, format);
1c00ad90:	c636                	sw	a3,12(sp)
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c00ad92:	ec5ff0ef          	jal	ra,1c00ac56 <_prf_locked>
	va_end(vargs);

	return r;
}
1c00ad96:	40f2                	lw	ra,28(sp)
1c00ad98:	6121                	addi	sp,sp,64
1c00ad9a:	8082                	ret

1c00ad9c <_to_x>:
 * Writes the specified number into the buffer in the given base,
 * using the digit characters 0-9a-z (i.e. base>36 will start writing
 * odd bytes).
 */
static int _to_x(char *buf, unsigned VALTYPE n, unsigned int base)
{
1c00ad9c:	7179                	addi	sp,sp,-48
1c00ad9e:	d422                	sw	s0,40(sp)
1c00ada0:	d226                	sw	s1,36(sp)
1c00ada2:	ce4e                	sw	s3,28(sp)
1c00ada4:	cc52                	sw	s4,24(sp)
1c00ada6:	ca56                	sw	s5,20(sp)
1c00ada8:	c85a                	sw	s6,16(sp)
1c00adaa:	d606                	sw	ra,44(sp)
1c00adac:	d04a                	sw	s2,32(sp)
1c00adae:	c65e                	sw	s7,12(sp)
1c00adb0:	84aa                	mv	s1,a0
1c00adb2:	89ae                	mv	s3,a1
1c00adb4:	8a32                	mv	s4,a2
1c00adb6:	8ab6                	mv	s5,a3
1c00adb8:	842a                	mv	s0,a0

	do {
		unsigned int d = n % base;

		n /= base;
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c00adba:	4b25                	li	s6,9
		unsigned int d = n % base;
1c00adbc:	8656                	mv	a2,s5
1c00adbe:	4681                	li	a3,0
1c00adc0:	854e                	mv	a0,s3
1c00adc2:	85d2                	mv	a1,s4
1c00adc4:	b6df50ef          	jal	ra,1c000930 <__umoddi3>
		n /= base;
1c00adc8:	85d2                	mv	a1,s4
		unsigned int d = n % base;
1c00adca:	892a                	mv	s2,a0
		n /= base;
1c00adcc:	8656                	mv	a2,s5
1c00adce:	854e                	mv	a0,s3
1c00add0:	4681                	li	a3,0
1c00add2:	823f50ef          	jal	ra,1c0005f4 <__udivdi3>
1c00add6:	89aa                	mv	s3,a0
1c00add8:	8a2e                	mv	s4,a1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c00adda:	02700713          	li	a4,39
1c00adde:	012b6363          	bltu	s6,s2,1c00ade4 <_to_x+0x48>
1c00ade2:	4701                	li	a4,0
1c00ade4:	03090913          	addi	s2,s2,48
1c00ade8:	974a                	add	a4,a4,s2
1c00adea:	00e40023          	sb	a4,0(s0)
	} while (n);
1c00adee:	8dc9                	or	a1,a1,a0
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c00adf0:	00140793          	addi	a5,s0,1
	} while (n);
1c00adf4:	e195                	bnez	a1,1c00ae18 <_to_x+0x7c>

	*buf = 0;
1c00adf6:	00078023          	sb	zero,0(a5)
	len = buf - start;
1c00adfa:	40978533          	sub	a0,a5,s1

	for (buf--; buf > start; buf--, start++) {
1c00adfe:	0084ef63          	bltu	s1,s0,1c00ae1c <_to_x+0x80>
		*buf = *start;
		*start = tmp;
	}

	return len;
}
1c00ae02:	50b2                	lw	ra,44(sp)
1c00ae04:	5422                	lw	s0,40(sp)
1c00ae06:	5492                	lw	s1,36(sp)
1c00ae08:	5902                	lw	s2,32(sp)
1c00ae0a:	49f2                	lw	s3,28(sp)
1c00ae0c:	4a62                	lw	s4,24(sp)
1c00ae0e:	4ad2                	lw	s5,20(sp)
1c00ae10:	4b42                	lw	s6,16(sp)
1c00ae12:	4bb2                	lw	s7,12(sp)
1c00ae14:	6145                	addi	sp,sp,48
1c00ae16:	8082                	ret
1c00ae18:	843e                	mv	s0,a5
1c00ae1a:	b74d                	j	1c00adbc <_to_x+0x20>
		*buf = *start;
1c00ae1c:	0004c703          	lbu	a4,0(s1)
		char tmp = *buf;
1c00ae20:	00044783          	lbu	a5,0(s0)
		*buf = *start;
1c00ae24:	fee40fab          	p.sb	a4,-1(s0!)
		*start = tmp;
1c00ae28:	00f480ab          	p.sb	a5,1(s1!)
1c00ae2c:	bfc9                	j	1c00adfe <_to_x+0x62>

1c00ae2e <_rlrshift>:
	return (buf + _to_udec(buf, value)) - start;
}

static	void _rlrshift(uint64_t *v)
{
	*v = (*v & 1) + (*v >> 1);
1c00ae2e:	411c                	lw	a5,0(a0)
1c00ae30:	4154                	lw	a3,4(a0)
1c00ae32:	fc17b733          	p.bclr	a4,a5,30,1
1c00ae36:	01f69613          	slli	a2,a3,0x1f
1c00ae3a:	8385                	srli	a5,a5,0x1
1c00ae3c:	8fd1                	or	a5,a5,a2
1c00ae3e:	97ba                	add	a5,a5,a4
1c00ae40:	8285                	srli	a3,a3,0x1
1c00ae42:	00e7b733          	sltu	a4,a5,a4
1c00ae46:	9736                	add	a4,a4,a3
1c00ae48:	c11c                	sw	a5,0(a0)
1c00ae4a:	c158                	sw	a4,4(a0)
}
1c00ae4c:	8082                	ret

1c00ae4e <_ldiv5>:
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
	uint32_t hi;
	uint64_t rem = *v, quot = 0U, q;
1c00ae4e:	4118                	lw	a4,0(a0)
1c00ae50:	4154                	lw	a3,4(a0)
	 */
	rem += 2U;

	for (i = 0; i < 3; i++) {
		hi = rem >> shifts[i];
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00ae52:	4615                	li	a2,5
	rem += 2U;
1c00ae54:	00270793          	addi	a5,a4,2
1c00ae58:	00e7b733          	sltu	a4,a5,a4
1c00ae5c:	9736                	add	a4,a4,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00ae5e:	02c755b3          	divu	a1,a4,a2
		rem -= q * 5U;
1c00ae62:	42b61733          	p.msu	a4,a2,a1
		hi = rem >> shifts[i];
1c00ae66:	01d71693          	slli	a3,a4,0x1d
1c00ae6a:	0037d713          	srli	a4,a5,0x3
1c00ae6e:	8f55                	or	a4,a4,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00ae70:	02c75733          	divu	a4,a4,a2
1c00ae74:	01d75693          	srli	a3,a4,0x1d
1c00ae78:	070e                	slli	a4,a4,0x3
		rem -= q * 5U;
1c00ae7a:	42e617b3          	p.msu	a5,a2,a4
		quot += q;
1c00ae7e:	95b6                	add	a1,a1,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c00ae80:	02c7d7b3          	divu	a5,a5,a2
		quot += q;
1c00ae84:	973e                	add	a4,a4,a5
1c00ae86:	00f737b3          	sltu	a5,a4,a5
1c00ae8a:	97ae                	add	a5,a5,a1
	}

	*v = quot;
1c00ae8c:	c118                	sw	a4,0(a0)
1c00ae8e:	c15c                	sw	a5,4(a0)
}
1c00ae90:	8082                	ret

1c00ae92 <_get_digit>:

static	char _get_digit(uint64_t *fr, int *digit_count)
{
	char rval;

	if (*digit_count > 0) {
1c00ae92:	419c                	lw	a5,0(a1)
		*digit_count -= 1;
		*fr = *fr * 10U;
		rval = ((*fr >> 60) & 0xF) + '0';
		*fr &= 0x0FFFFFFFFFFFFFFFull;
	} else {
		rval = '0';
1c00ae94:	03000713          	li	a4,48
	if (*digit_count > 0) {
1c00ae98:	02f05563          	blez	a5,1c00aec2 <_get_digit+0x30>
		*digit_count -= 1;
1c00ae9c:	17fd                	addi	a5,a5,-1
1c00ae9e:	c19c                	sw	a5,0(a1)
		*fr = *fr * 10U;
1c00aea0:	411c                	lw	a5,0(a0)
1c00aea2:	4729                	li	a4,10
1c00aea4:	4150                	lw	a2,4(a0)
1c00aea6:	02f706b3          	mul	a3,a4,a5
1c00aeaa:	02f737b3          	mulhu	a5,a4,a5
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c00aeae:	c114                	sw	a3,0(a0)
		*fr = *fr * 10U;
1c00aeb0:	42c707b3          	p.mac	a5,a4,a2
		rval = ((*fr >> 60) & 0xF) + '0';
1c00aeb4:	01c7d713          	srli	a4,a5,0x1c
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c00aeb8:	c7c7b7b3          	p.bclr	a5,a5,3,28
		rval = ((*fr >> 60) & 0xF) + '0';
1c00aebc:	03070713          	addi	a4,a4,48
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c00aec0:	c15c                	sw	a5,4(a0)
	}

	return rval;
}
1c00aec2:	853a                	mv	a0,a4
1c00aec4:	8082                	ret

1c00aec6 <_prf>:
	*sptr = p;
	return i;
}

int _prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
1c00aec6:	7135                	addi	sp,sp,-160
1c00aec8:	c94a                	sw	s2,144(sp)
1c00aeca:	c74e                	sw	s3,140(sp)
1c00aecc:	c15a                	sw	s6,128(sp)
1c00aece:	dede                	sw	s7,124(sp)
1c00aed0:	cf06                	sw	ra,156(sp)
1c00aed2:	cd22                	sw	s0,152(sp)
1c00aed4:	cb26                	sw	s1,148(sp)
1c00aed6:	c552                	sw	s4,136(sp)
1c00aed8:	c356                	sw	s5,132(sp)
1c00aeda:	dce2                	sw	s8,120(sp)
1c00aedc:	dae6                	sw	s9,116(sp)
1c00aede:	d8ea                	sw	s10,112(sp)
1c00aee0:	d6ee                	sw	s11,108(sp)
1c00aee2:	8b2a                	mv	s6,a0
1c00aee4:	8bae                	mv	s7,a1
1c00aee6:	8936                	mv	s2,a3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
1c00aee8:	4981                	li	s3,0

	while ((c = *format++)) {
1c00aeea:	00064503          	lbu	a0,0(a2)
1c00aeee:	00160c13          	addi	s8,a2,1
1c00aef2:	c911                	beqz	a0,1c00af06 <_prf+0x40>
		if (c != '%') {
1c00aef4:	02500793          	li	a5,37
1c00aef8:	14f50563          	beq	a0,a5,1c00b042 <_prf+0x17c>
			PUTC(c);
1c00aefc:	85de                	mv	a1,s7
1c00aefe:	9b02                	jalr	s6
1c00af00:	13f53fe3          	p.bneimm	a0,-1,1c00b83e <_prf+0x978>
1c00af04:	59fd                	li	s3,-1
		}
	}
	return count;

#undef PUTC
}
1c00af06:	40fa                	lw	ra,156(sp)
1c00af08:	446a                	lw	s0,152(sp)
1c00af0a:	854e                	mv	a0,s3
1c00af0c:	44da                	lw	s1,148(sp)
1c00af0e:	494a                	lw	s2,144(sp)
1c00af10:	49ba                	lw	s3,140(sp)
1c00af12:	4a2a                	lw	s4,136(sp)
1c00af14:	4a9a                	lw	s5,132(sp)
1c00af16:	4b0a                	lw	s6,128(sp)
1c00af18:	5bf6                	lw	s7,124(sp)
1c00af1a:	5c66                	lw	s8,120(sp)
1c00af1c:	5cd6                	lw	s9,116(sp)
1c00af1e:	5d46                	lw	s10,112(sp)
1c00af20:	5db6                	lw	s11,108(sp)
1c00af22:	610d                	addi	sp,sp,160
1c00af24:	8082                	ret
				switch (c) {
1c00af26:	108d8663          	beq	s11,s0,1c00b032 <_prf+0x16c>
1c00af2a:	0fb46863          	bltu	s0,s11,1c00b01a <_prf+0x154>
1c00af2e:	fc0d8ce3          	beqz	s11,1c00af06 <_prf+0x40>
1c00af32:	0ecd8d63          	beq	s11,a2,1c00b02c <_prf+0x166>
					fplus = true;
1c00af36:	8c52                	mv	s8,s4
			while (strchr("-+ #0", (c = *format++)) != NULL) {
1c00af38:	000c4d83          	lbu	s11,0(s8)
1c00af3c:	1c00c737          	lui	a4,0x1c00c
1c00af40:	5e070513          	addi	a0,a4,1504 # 1c00c5e0 <__hyper_pad+0x98>
1c00af44:	85ee                	mv	a1,s11
1c00af46:	c232                	sw	a2,4(sp)
1c00af48:	b33ff0ef          	jal	ra,1c00aa7a <strchr>
1c00af4c:	001c0a13          	addi	s4,s8,1
1c00af50:	4612                	lw	a2,4(sp)
1c00af52:	f971                	bnez	a0,1c00af26 <_prf+0x60>
			if (c == '*') {
1c00af54:	02a00713          	li	a4,42
1c00af58:	10ed9563          	bne	s11,a4,1c00b062 <_prf+0x19c>
				width = va_arg(vargs, int);
1c00af5c:	00092c83          	lw	s9,0(s2)
1c00af60:	00490713          	addi	a4,s2,4
				if (width < 0) {
1c00af64:	000cd663          	bgez	s9,1c00af70 <_prf+0xaa>
					fminus = true;
1c00af68:	4785                	li	a5,1
					width = -width;
1c00af6a:	41900cb3          	neg	s9,s9
					fminus = true;
1c00af6e:	cc3e                	sw	a5,24(sp)
				c = *format++;
1c00af70:	000a4d83          	lbu	s11,0(s4)
				width = va_arg(vargs, int);
1c00af74:	893a                	mv	s2,a4
				c = *format++;
1c00af76:	002c0a13          	addi	s4,s8,2
			if (c == '.') {
1c00af7a:	02e00713          	li	a4,46
			precision = -1;
1c00af7e:	547d                	li	s0,-1
			if (c == '.') {
1c00af80:	00ed9f63          	bne	s11,a4,1c00af9e <_prf+0xd8>
				if (c == '*') {
1c00af84:	000a4703          	lbu	a4,0(s4)
1c00af88:	02a00793          	li	a5,42
1c00af8c:	10f71e63          	bne	a4,a5,1c00b0a8 <_prf+0x1e2>
					precision = va_arg(vargs, int);
1c00af90:	00092403          	lw	s0,0(s2)
				c = *format++;
1c00af94:	0a05                	addi	s4,s4,1
					precision = va_arg(vargs, int);
1c00af96:	0911                	addi	s2,s2,4
				c = *format++;
1c00af98:	000a4d83          	lbu	s11,0(s4)
1c00af9c:	0a05                	addi	s4,s4,1
			if (strchr("hlz", c) != NULL) {
1c00af9e:	1c00c737          	lui	a4,0x1c00c
1c00afa2:	85ee                	mv	a1,s11
1c00afa4:	5e870513          	addi	a0,a4,1512 # 1c00c5e8 <__hyper_pad+0xa0>
1c00afa8:	84ee                	mv	s1,s11
1c00afaa:	ad1ff0ef          	jal	ra,1c00aa7a <strchr>
1c00afae:	10050e63          	beqz	a0,1c00b0ca <_prf+0x204>
				if (i == 'l' && c == 'l') {
1c00afb2:	06c00693          	li	a3,108
				c = *format++;
1c00afb6:	001a0c13          	addi	s8,s4,1
1c00afba:	000a4d83          	lbu	s11,0(s4)
				if (i == 'l' && c == 'l') {
1c00afbe:	0ed49963          	bne	s1,a3,1c00b0b0 <_prf+0x1ea>
1c00afc2:	009d9863          	bne	s11,s1,1c00afd2 <_prf+0x10c>
					c = *format++;
1c00afc6:	001a4d83          	lbu	s11,1(s4)
1c00afca:	002a0c13          	addi	s8,s4,2
					i = 'L';
1c00afce:	04c00493          	li	s1,76
			switch (c) {
1c00afd2:	06700693          	li	a3,103
1c00afd6:	17b6e263          	bltu	a3,s11,1c00b13a <_prf+0x274>
1c00afda:	06500693          	li	a3,101
1c00afde:	32ddfc63          	bleu	a3,s11,1c00b316 <_prf+0x450>
1c00afe2:	04700693          	li	a3,71
1c00afe6:	0fb6e563          	bltu	a3,s11,1c00b0d0 <_prf+0x20a>
1c00afea:	04500713          	li	a4,69
1c00afee:	32edf463          	bleu	a4,s11,1c00b316 <_prf+0x450>
1c00aff2:	f00d8ae3          	beqz	s11,1c00af06 <_prf+0x40>
1c00aff6:	02500713          	li	a4,37
1c00affa:	02ed8de3          	beq	s11,a4,1c00b834 <_prf+0x96e>
				PUTC('%');
1c00affe:	85de                	mv	a1,s7
1c00b000:	02500513          	li	a0,37
1c00b004:	9b02                	jalr	s6
1c00b006:	eff52fe3          	p.beqimm	a0,-1,1c00af04 <_prf+0x3e>
				PUTC(c);
1c00b00a:	85de                	mv	a1,s7
1c00b00c:	856e                	mv	a0,s11
1c00b00e:	9b02                	jalr	s6
1c00b010:	eff52ae3          	p.beqimm	a0,-1,1c00af04 <_prf+0x3e>
				count += 2;
1c00b014:	0989                	addi	s3,s3,2
1c00b016:	02b0006f          	j	1c00b840 <_prf+0x97a>
				switch (c) {
1c00b01a:	039d8163          	beq	s11,s9,1c00b03c <_prf+0x176>
1c00b01e:	009d8c63          	beq	s11,s1,1c00b036 <_prf+0x170>
1c00b022:	f1ad9ae3          	bne	s11,s10,1c00af36 <_prf+0x70>
					fplus = true;
1c00b026:	4705                	li	a4,1
1c00b028:	c63a                	sw	a4,12(sp)
					break;
1c00b02a:	b731                	j	1c00af36 <_prf+0x70>
					fspace = true;
1c00b02c:	4785                	li	a5,1
1c00b02e:	c83e                	sw	a5,16(sp)
					break;
1c00b030:	b719                	j	1c00af36 <_prf+0x70>
					falt = true;
1c00b032:	4a85                	li	s5,1
					break;
1c00b034:	b709                	j	1c00af36 <_prf+0x70>
					fzero = true;
1c00b036:	4705                	li	a4,1
1c00b038:	ce3a                	sw	a4,28(sp)
					break;
1c00b03a:	bdf5                	j	1c00af36 <_prf+0x70>
					fminus = true;
1c00b03c:	4785                	li	a5,1
1c00b03e:	cc3e                	sw	a5,24(sp)
1c00b040:	bddd                	j	1c00af36 <_prf+0x70>
			fminus = fplus = fspace = falt = fzero = false;
1c00b042:	ce02                	sw	zero,28(sp)
1c00b044:	c802                	sw	zero,16(sp)
1c00b046:	c602                	sw	zero,12(sp)
1c00b048:	cc02                	sw	zero,24(sp)
1c00b04a:	4a81                	li	s5,0
				switch (c) {
1c00b04c:	02300413          	li	s0,35
1c00b050:	02d00c93          	li	s9,45
1c00b054:	03000493          	li	s1,48
1c00b058:	02b00d13          	li	s10,43
1c00b05c:	02000613          	li	a2,32
1c00b060:	bde1                	j	1c00af38 <_prf+0x72>
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
1c00b062:	fd0d8713          	addi	a4,s11,-48
			} else if (!isdigit(c)) {
1c00b066:	46a5                	li	a3,9
				width = 0;
1c00b068:	4c81                	li	s9,0
			} else if (!isdigit(c)) {
1c00b06a:	f0e6e8e3          	bltu	a3,a4,1c00af7a <_prf+0xb4>
	while (isdigit(*p)) {
1c00b06e:	4725                	li	a4,9
		i = 10 * i + *p++ - '0';
1c00b070:	4629                	li	a2,10
	while (isdigit(*p)) {
1c00b072:	8a62                	mv	s4,s8
1c00b074:	001a4d8b          	p.lbu	s11,1(s4!)
1c00b078:	fd0d8693          	addi	a3,s11,-48
1c00b07c:	eed76fe3          	bltu	a4,a3,1c00af7a <_prf+0xb4>
		i = 10 * i + *p++ - '0';
1c00b080:	87ee                	mv	a5,s11
1c00b082:	42cc87b3          	p.mac	a5,s9,a2
1c00b086:	8c52                	mv	s8,s4
1c00b088:	fd078c93          	addi	s9,a5,-48
1c00b08c:	b7dd                	j	1c00b072 <_prf+0x1ac>
1c00b08e:	42b407b3          	p.mac	a5,s0,a1
1c00b092:	8a3a                	mv	s4,a4
1c00b094:	fd078413          	addi	s0,a5,-48
	while (isdigit(*p)) {
1c00b098:	8752                	mv	a4,s4
1c00b09a:	0017478b          	p.lbu	a5,1(a4!)
1c00b09e:	fd078613          	addi	a2,a5,-48
1c00b0a2:	fec6f6e3          	bleu	a2,a3,1c00b08e <_prf+0x1c8>
1c00b0a6:	bdcd                	j	1c00af98 <_prf+0xd2>
	int i = 0;
1c00b0a8:	4401                	li	s0,0
	while (isdigit(*p)) {
1c00b0aa:	46a5                	li	a3,9
		i = 10 * i + *p++ - '0';
1c00b0ac:	45a9                	li	a1,10
1c00b0ae:	b7ed                	j	1c00b098 <_prf+0x1d2>
				} else if (i == 'h' && c == 'h') {
1c00b0b0:	06800693          	li	a3,104
1c00b0b4:	f0d49fe3          	bne	s1,a3,1c00afd2 <_prf+0x10c>
1c00b0b8:	f09d9de3          	bne	s11,s1,1c00afd2 <_prf+0x10c>
					c = *format++;
1c00b0bc:	002a0c13          	addi	s8,s4,2
1c00b0c0:	001a4d83          	lbu	s11,1(s4)
					i = 'H';
1c00b0c4:	04800493          	li	s1,72
1c00b0c8:	b729                	j	1c00afd2 <_prf+0x10c>
1c00b0ca:	8c52                	mv	s8,s4
			i = 0;
1c00b0cc:	4481                	li	s1,0
1c00b0ce:	b711                	j	1c00afd2 <_prf+0x10c>
			switch (c) {
1c00b0d0:	06300693          	li	a3,99
1c00b0d4:	12dd8a63          	beq	s11,a3,1c00b208 <_prf+0x342>
1c00b0d8:	09b6e163          	bltu	a3,s11,1c00b15a <_prf+0x294>
1c00b0dc:	05800693          	li	a3,88
1c00b0e0:	f0dd9fe3          	bne	s11,a3,1c00affe <_prf+0x138>
				switch (i) {
1c00b0e4:	06c00693          	li	a3,108
1c00b0e8:	6cd48363          	beq	s1,a3,1c00b7ae <_prf+0x8e8>
1c00b0ec:	07a00693          	li	a3,122
1c00b0f0:	6ad48f63          	beq	s1,a3,1c00b7ae <_prf+0x8e8>
1c00b0f4:	04c00693          	li	a3,76
1c00b0f8:	6ad49b63          	bne	s1,a3,1c00b7ae <_prf+0x8e8>
					val = va_arg(vargs, unsigned long long);
1c00b0fc:	091d                	addi	s2,s2,7
1c00b0fe:	c4093933          	p.bclr	s2,s2,2,0
1c00b102:	00092583          	lw	a1,0(s2)
1c00b106:	00492603          	lw	a2,4(s2)
1c00b10a:	00890a13          	addi	s4,s2,8
				if (c == 'o') {
1c00b10e:	06f00713          	li	a4,111
1c00b112:	00c4                	addi	s1,sp,68
1c00b114:	6aed9d63          	bne	s11,a4,1c00b7ce <_prf+0x908>
	if (alt_form) {
1c00b118:	6a0a8163          	beqz	s5,1c00b7ba <_prf+0x8f4>
		*buf++ = '0';
1c00b11c:	03000793          	li	a5,48
1c00b120:	04f10223          	sb	a5,68(sp)
		if (!value) {
1c00b124:	00c5e7b3          	or	a5,a1,a2
		*buf++ = '0';
1c00b128:	04510513          	addi	a0,sp,69
		if (!value) {
1c00b12c:	68079863          	bnez	a5,1c00b7bc <_prf+0x8f6>
			*buf++ = 0;
1c00b130:	040102a3          	sb	zero,69(sp)
			prefix = 0;
1c00b134:	4901                	li	s2,0
			return 1;
1c00b136:	4d85                	li	s11,1
1c00b138:	a069                	j	1c00b1c2 <_prf+0x2fc>
			switch (c) {
1c00b13a:	07000693          	li	a3,112
1c00b13e:	62dd8f63          	beq	s11,a3,1c00b77c <_prf+0x8b6>
1c00b142:	09b6e663          	bltu	a3,s11,1c00b1ce <_prf+0x308>
1c00b146:	06e00693          	li	a3,110
1c00b14a:	5edd8463          	beq	s11,a3,1c00b732 <_prf+0x86c>
1c00b14e:	f9b6ebe3          	bltu	a3,s11,1c00b0e4 <_prf+0x21e>
1c00b152:	06900693          	li	a3,105
1c00b156:	eadd94e3          	bne	s11,a3,1c00affe <_prf+0x138>
				switch (i) {
1c00b15a:	06c00793          	li	a5,108
1c00b15e:	18f48563          	beq	s1,a5,1c00b2e8 <_prf+0x422>
1c00b162:	07a00793          	li	a5,122
1c00b166:	18f48163          	beq	s1,a5,1c00b2e8 <_prf+0x422>
1c00b16a:	04c00793          	li	a5,76
1c00b16e:	16f49d63          	bne	s1,a5,1c00b2e8 <_prf+0x422>
					val = va_arg(vargs, long long);
1c00b172:	091d                	addi	s2,s2,7
1c00b174:	c4093933          	p.bclr	s2,s2,2,0
1c00b178:	00092583          	lw	a1,0(s2)
1c00b17c:	00492a83          	lw	s5,4(s2)
1c00b180:	00890a13          	addi	s4,s2,8
1c00b184:	04410d93          	addi	s11,sp,68
	if (value < 0) {
1c00b188:	160ad763          	bgez	s5,1c00b2f6 <_prf+0x430>
		*buf++ = '-';
1c00b18c:	02d00793          	li	a5,45
		value = -value;
1c00b190:	40b005b3          	neg	a1,a1
		*buf++ = '-';
1c00b194:	04f10223          	sb	a5,68(sp)
		value = -value;
1c00b198:	41500633          	neg	a2,s5
1c00b19c:	00b037b3          	snez	a5,a1
1c00b1a0:	8e1d                	sub	a2,a2,a5
		*buf++ = ' ';
1c00b1a2:	04510913          	addi	s2,sp,69
	return _to_x(buf, value, 10);
1c00b1a6:	854a                	mv	a0,s2
1c00b1a8:	46a9                	li	a3,10
1c00b1aa:	bf3ff0ef          	jal	ra,1c00ad9c <_to_x>
				if (fplus || fspace || val < 0) {
1c00b1ae:	47b2                	lw	a5,12(sp)
	return (buf + _to_udec(buf, value)) - start;
1c00b1b0:	954a                	add	a0,a0,s2
1c00b1b2:	41b50db3          	sub	s11,a0,s11
					prefix = 1;
1c00b1b6:	4905                	li	s2,1
				if (fplus || fspace || val < 0) {
1c00b1b8:	e789                	bnez	a5,1c00b1c2 <_prf+0x2fc>
1c00b1ba:	4742                	lw	a4,16(sp)
1c00b1bc:	e319                	bnez	a4,1c00b1c2 <_prf+0x2fc>
1c00b1be:	01fad913          	srli	s2,s5,0x1f
			if (precision >= 0) {
1c00b1c2:	04045c63          	bgez	s0,1c00b21a <_prf+0x354>
			zero.predot = zero.postdot = zero.trail = 0;
1c00b1c6:	4401                	li	s0,0
1c00b1c8:	4a81                	li	s5,0
1c00b1ca:	4681                	li	a3,0
1c00b1cc:	a401                	j	1c00b3cc <_prf+0x506>
			switch (c) {
1c00b1ce:	07500693          	li	a3,117
1c00b1d2:	f0dd89e3          	beq	s11,a3,1c00b0e4 <_prf+0x21e>
1c00b1d6:	07800693          	li	a3,120
1c00b1da:	f0dd85e3          	beq	s11,a3,1c00b0e4 <_prf+0x21e>
1c00b1de:	07300713          	li	a4,115
1c00b1e2:	e0ed9ee3          	bne	s11,a4,1c00affe <_prf+0x138>
				cptr = va_arg(vargs, char *);
1c00b1e6:	00490a13          	addi	s4,s2,4
1c00b1ea:	00092783          	lw	a5,0(s2)
				if (precision < 0) {
1c00b1ee:	00045663          	bgez	s0,1c00b1fa <_prf+0x334>
					precision = INT_MAX;
1c00b1f2:	80000737          	lui	a4,0x80000
1c00b1f6:	fff74413          	not	s0,a4
1c00b1fa:	86be                	mv	a3,a5
				for (clen = 0; clen < precision; clen++) {
1c00b1fc:	4d81                	li	s11,0
1c00b1fe:	5bb41263          	bne	s0,s11,1c00b7a2 <_prf+0x8dc>
1c00b202:	4901                	li	s2,0
1c00b204:	4401                	li	s0,0
1c00b206:	a819                	j	1c00b21c <_prf+0x356>
				buf[0] = va_arg(vargs, int);
1c00b208:	00092783          	lw	a5,0(s2)
1c00b20c:	00490a13          	addi	s4,s2,4
				clen = 1;
1c00b210:	4d85                	li	s11,1
				buf[0] = va_arg(vargs, int);
1c00b212:	04f10223          	sb	a5,68(sp)
				break;
1c00b216:	4901                	li	s2,0
1c00b218:	4401                	li	s0,0
1c00b21a:	00dc                	addi	a5,sp,68
				zero_head = precision - clen + prefix;
1c00b21c:	41b40d33          	sub	s10,s0,s11
1c00b220:	9d4a                	add	s10,s10,s2
			zero.predot = zero.postdot = zero.trail = 0;
1c00b222:	4401                	li	s0,0
1c00b224:	4a81                	li	s5,0
1c00b226:	4681                	li	a3,0
1c00b228:	040d6d33          	p.max	s10,s10,zero
			if (!fminus && width > 0) {
1c00b22c:	4762                	lw	a4,24(sp)
			width -= clen + zero_head;
1c00b22e:	01bd0633          	add	a2,s10,s11
1c00b232:	40cc8cb3          	sub	s9,s9,a2
			if (!fminus && width > 0) {
1c00b236:	e701                	bnez	a4,1c00b23e <_prf+0x378>
1c00b238:	84e6                	mv	s1,s9
1c00b23a:	63904263          	bgtz	s9,1c00b85e <_prf+0x998>
1c00b23e:	012784b3          	add	s1,a5,s2
			while (prefix-- > 0) {
1c00b242:	62979463          	bne	a5,s1,1c00b86a <_prf+0x9a4>
1c00b246:	84ea                	mv	s1,s10
			while (zero_head-- > 0) {
1c00b248:	14fd                	addi	s1,s1,-1
1c00b24a:	63f4bc63          	p.bneimm	s1,-1,1c00b882 <_prf+0x9bc>
			clen -= prefix;
1c00b24e:	412d84b3          	sub	s1,s11,s2
1c00b252:	8726                	mv	a4,s1
			if (zero.predot) {
1c00b254:	c295                	beqz	a3,1c00b278 <_prf+0x3b2>
				c = *cptr;
1c00b256:	0007c503          	lbu	a0,0(a5)
				while (isdigit(c)) {
1c00b25a:	8dbe                	mv	s11,a5
1c00b25c:	00978833          	add	a6,a5,s1
1c00b260:	4625                	li	a2,9
1c00b262:	fd050593          	addi	a1,a0,-48
1c00b266:	41b80733          	sub	a4,a6,s11
1c00b26a:	62b67863          	bleu	a1,a2,1c00b89a <_prf+0x9d4>
1c00b26e:	8636                	mv	a2,a3
				while (zero.predot-- > 0) {
1c00b270:	64061363          	bnez	a2,1c00b8b6 <_prf+0x9f0>
				clen -= zero.predot;
1c00b274:	8f15                	sub	a4,a4,a3
1c00b276:	87ee                	mv	a5,s11
			if (zero.postdot) {
1c00b278:	020a8e63          	beqz	s5,1c00b2b4 <_prf+0x3ee>
1c00b27c:	8dbe                	mv	s11,a5
1c00b27e:	00e78833          	add	a6,a5,a4
				} while (c != '.');
1c00b282:	02e00613          	li	a2,46
					c = *cptr++;
1c00b286:	001dc68b          	p.lbu	a3,1(s11!)
					PUTC(c);
1c00b28a:	85de                	mv	a1,s7
1c00b28c:	c232                	sw	a2,4(sp)
1c00b28e:	8536                	mv	a0,a3
1c00b290:	c036                	sw	a3,0(sp)
1c00b292:	c442                	sw	a6,8(sp)
1c00b294:	9b02                	jalr	s6
1c00b296:	4612                	lw	a2,4(sp)
1c00b298:	4682                	lw	a3,0(sp)
1c00b29a:	4822                	lw	a6,8(sp)
1c00b29c:	c7f524e3          	p.beqimm	a0,-1,1c00af04 <_prf+0x3e>
1c00b2a0:	41b80733          	sub	a4,a6,s11
				} while (c != '.');
1c00b2a4:	fec691e3          	bne	a3,a2,1c00b286 <_prf+0x3c0>
1c00b2a8:	86d6                	mv	a3,s5
				while (zero.postdot-- > 0) {
1c00b2aa:	62d04563          	bgtz	a3,1c00b8d4 <_prf+0xa0e>
				clen -= zero.postdot;
1c00b2ae:	41570733          	sub	a4,a4,s5
					c = *cptr++;
1c00b2b2:	87ee                	mv	a5,s11
			if (zero.trail) {
1c00b2b4:	c415                	beqz	s0,1c00b2e0 <_prf+0x41a>
				c = *cptr;
1c00b2b6:	0007c503          	lbu	a0,0(a5)
				while (isdigit(c) || c == '.') {
1c00b2ba:	8dbe                	mv	s11,a5
1c00b2bc:	973e                	add	a4,a4,a5
1c00b2be:	4625                	li	a2,9
1c00b2c0:	02e00693          	li	a3,46
1c00b2c4:	fd050593          	addi	a1,a0,-48
1c00b2c8:	41b70ab3          	sub	s5,a4,s11
1c00b2cc:	62b67163          	bleu	a1,a2,1c00b8ee <_prf+0xa28>
1c00b2d0:	60d50f63          	beq	a0,a3,1c00b8ee <_prf+0xa28>
1c00b2d4:	8722                	mv	a4,s0
				while (zero.trail-- > 0) {
1c00b2d6:	62e04a63          	bgtz	a4,1c00b90a <_prf+0xa44>
				clen -= zero.trail;
1c00b2da:	408a8733          	sub	a4,s5,s0
1c00b2de:	87ee                	mv	a5,s11
1c00b2e0:	843e                	mv	s0,a5
1c00b2e2:	00e78ab3          	add	s5,a5,a4
1c00b2e6:	a599                	j	1c00b92c <_prf+0xa66>
					val = va_arg(vargs, int);
1c00b2e8:	00092583          	lw	a1,0(s2)
1c00b2ec:	00490a13          	addi	s4,s2,4
1c00b2f0:	41f5da93          	srai	s5,a1,0x1f
					break;
1c00b2f4:	bd41                	j	1c00b184 <_prf+0x2be>
	} else if (fplus) {
1c00b2f6:	47b2                	lw	a5,12(sp)
1c00b2f8:	c799                	beqz	a5,1c00b306 <_prf+0x440>
		*buf++ = '+';
1c00b2fa:	02b00793          	li	a5,43
		*buf++ = ' ';
1c00b2fe:	04f10223          	sb	a5,68(sp)
1c00b302:	8656                	mv	a2,s5
1c00b304:	bd79                	j	1c00b1a2 <_prf+0x2dc>
	} else if (fspace) {
1c00b306:	4742                	lw	a4,16(sp)
1c00b308:	c701                	beqz	a4,1c00b310 <_prf+0x44a>
		*buf++ = ' ';
1c00b30a:	02000793          	li	a5,32
1c00b30e:	bfc5                	j	1c00b2fe <_prf+0x438>
	} else if (fspace) {
1c00b310:	8656                	mv	a2,s5
1c00b312:	896e                	mv	s2,s11
1c00b314:	bd49                	j	1c00b1a6 <_prf+0x2e0>
				u.d = va_arg(vargs, double);
1c00b316:	091d                	addi	s2,s2,7
1c00b318:	c4093933          	p.bclr	s2,s2,2,0
				double_val = u.i;
1c00b31c:	00092583          	lw	a1,0(s2)
1c00b320:	00492683          	lw	a3,4(s2)
	fract = (double_temp << 11) & ~HIGHBIT64;
1c00b324:	800007b7          	lui	a5,0x80000
1c00b328:	0155d613          	srli	a2,a1,0x15
1c00b32c:	00b69713          	slli	a4,a3,0xb
1c00b330:	8f51                	or	a4,a4,a2
1c00b332:	fff7c793          	not	a5,a5
1c00b336:	05ae                	slli	a1,a1,0xb
1c00b338:	8f7d                	and	a4,a4,a5
				u.d = va_arg(vargs, double);
1c00b33a:	00890a13          	addi	s4,s2,8
	fract = (double_temp << 11) & ~HIGHBIT64;
1c00b33e:	d82e                	sw	a1,48(sp)
	exp = double_temp >> 52 & 0x7ff;
1c00b340:	0146d913          	srli	s2,a3,0x14
	fract = (double_temp << 11) & ~HIGHBIT64;
1c00b344:	da3a                	sw	a4,52(sp)
	exp = double_temp >> 52 & 0x7ff;
1c00b346:	e8b93933          	p.bclr	s2,s2,20,11
	if (sign) {
1c00b34a:	0806d863          	bgez	a3,1c00b3da <_prf+0x514>
		*buf++ = '-';
1c00b34e:	02d00693          	li	a3,45
		*buf++ = ' ';
1c00b352:	04d10223          	sb	a3,68(sp)
1c00b356:	04510493          	addi	s1,sp,69
	if (exp == 0x7ff) {
1c00b35a:	7ff00693          	li	a3,2047
1c00b35e:	0cd91363          	bne	s2,a3,1c00b424 <_prf+0x55e>
		if (!fract) {
1c00b362:	8f4d                	or	a4,a4,a1
1c00b364:	fbfd8793          	addi	a5,s11,-65
1c00b368:	00348513          	addi	a0,s1,3
1c00b36c:	eb49                	bnez	a4,1c00b3fe <_prf+0x538>
			if (isupper(c)) {
1c00b36e:	4765                	li	a4,25
1c00b370:	06f76f63          	bltu	a4,a5,1c00b3ee <_prf+0x528>
				*buf++ = 'I';
1c00b374:	6795                	lui	a5,0x5
1c00b376:	e4978793          	addi	a5,a5,-439 # 4e49 <__rt_stack_size+0x4649>
1c00b37a:	00f49023          	sh	a5,0(s1)
				*buf++ = 'N';
1c00b37e:	04600793          	li	a5,70
		return buf - start;
1c00b382:	04410913          	addi	s2,sp,68
				*buf++ = 'a';
1c00b386:	00f48123          	sb	a5,2(s1)
		*buf = 0;
1c00b38a:	000481a3          	sb	zero,3(s1)
		return buf - start;
1c00b38e:	41250533          	sub	a0,a0,s2
			zero.predot = zero.postdot = zero.trail = 0;
1c00b392:	4401                	li	s0,0
1c00b394:	4a81                	li	s5,0
1c00b396:	4681                	li	a3,0
				if (fplus || fspace || (buf[0] == '-')) {
1c00b398:	4732                	lw	a4,12(sp)
					prefix = 1;
1c00b39a:	4905                	li	s2,1
				if (fplus || fspace || (buf[0] == '-')) {
1c00b39c:	eb09                	bnez	a4,1c00b3ae <_prf+0x4e8>
1c00b39e:	47c2                	lw	a5,16(sp)
1c00b3a0:	e799                	bnez	a5,1c00b3ae <_prf+0x4e8>
1c00b3a2:	04414903          	lbu	s2,68(sp)
1c00b3a6:	fd390913          	addi	s2,s2,-45
1c00b3aa:	00193913          	seqz	s2,s2
				if (!isdigit(buf[prefix])) {
1c00b3ae:	1098                	addi	a4,sp,96
1c00b3b0:	012707b3          	add	a5,a4,s2
1c00b3b4:	fe47c783          	lbu	a5,-28(a5)
				clen += zero.predot + zero.postdot + zero.trail;
1c00b3b8:	015684b3          	add	s1,a3,s5
1c00b3bc:	94a2                	add	s1,s1,s0
1c00b3be:	fd078793          	addi	a5,a5,-48
				if (!isdigit(buf[prefix])) {
1c00b3c2:	4625                	li	a2,9
				clen += zero.predot + zero.postdot + zero.trail;
1c00b3c4:	00a48db3          	add	s11,s1,a0
				if (!isdigit(buf[prefix])) {
1c00b3c8:	46f66e63          	bltu	a2,a5,1c00b844 <_prf+0x97e>
			} else if (fzero) {
1c00b3cc:	47f2                	lw	a5,28(sp)
1c00b3ce:	46078b63          	beqz	a5,1c00b844 <_prf+0x97e>
				zero_head = width - clen;
1c00b3d2:	41bc8d33          	sub	s10,s9,s11
1c00b3d6:	00dc                	addi	a5,sp,68
1c00b3d8:	bd81                	j	1c00b228 <_prf+0x362>
	} else if (fplus) {
1c00b3da:	47b2                	lw	a5,12(sp)
		*buf++ = '+';
1c00b3dc:	02b00693          	li	a3,43
	} else if (fplus) {
1c00b3e0:	fbad                	bnez	a5,1c00b352 <_prf+0x48c>
	} else if (fspace) {
1c00b3e2:	47c2                	lw	a5,16(sp)
1c00b3e4:	00c4                	addi	s1,sp,68
1c00b3e6:	dbb5                	beqz	a5,1c00b35a <_prf+0x494>
		*buf++ = ' ';
1c00b3e8:	02000693          	li	a3,32
1c00b3ec:	b79d                	j	1c00b352 <_prf+0x48c>
				*buf++ = 'i';
1c00b3ee:	679d                	lui	a5,0x7
1c00b3f0:	e6978793          	addi	a5,a5,-407 # 6e69 <__rt_stack_size+0x6669>
1c00b3f4:	00f49023          	sh	a5,0(s1)
				*buf++ = 'n';
1c00b3f8:	06600793          	li	a5,102
1c00b3fc:	b759                	j	1c00b382 <_prf+0x4bc>
			if (isupper(c)) {
1c00b3fe:	4765                	li	a4,25
1c00b400:	00f76a63          	bltu	a4,a5,1c00b414 <_prf+0x54e>
				*buf++ = 'N';
1c00b404:	6791                	lui	a5,0x4
1c00b406:	14e78793          	addi	a5,a5,334 # 414e <__rt_stack_size+0x394e>
1c00b40a:	00f49023          	sh	a5,0(s1)
				*buf++ = 'A';
1c00b40e:	04e00793          	li	a5,78
1c00b412:	bf85                	j	1c00b382 <_prf+0x4bc>
				*buf++ = 'n';
1c00b414:	6799                	lui	a5,0x6
1c00b416:	16e78793          	addi	a5,a5,366 # 616e <__rt_stack_size+0x596e>
1c00b41a:	00f49023          	sh	a5,0(s1)
				*buf++ = 'a';
1c00b41e:	06e00793          	li	a5,110
1c00b422:	b785                	j	1c00b382 <_prf+0x4bc>
	if (c == 'F') {
1c00b424:	04600693          	li	a3,70
1c00b428:	00dd9463          	bne	s11,a3,1c00b430 <_prf+0x56a>
		c = 'f';
1c00b42c:	06600d93          	li	s11,102
	if ((exp | fract) != 0) {
1c00b430:	41f95613          	srai	a2,s2,0x1f
1c00b434:	00b966b3          	or	a3,s2,a1
1c00b438:	8e59                	or	a2,a2,a4
1c00b43a:	8ed1                	or	a3,a3,a2
1c00b43c:	1c068263          	beqz	a3,1c00b600 <_prf+0x73a>
		if (exp == 0) {
1c00b440:	10090d63          	beqz	s2,1c00b55a <_prf+0x694>
		fract |= HIGHBIT64;
1c00b444:	5752                	lw	a4,52(sp)
1c00b446:	800007b7          	lui	a5,0x80000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
1c00b44a:	c0290913          	addi	s2,s2,-1022
		fract |= HIGHBIT64;
1c00b44e:	8f5d                	or	a4,a4,a5
1c00b450:	da3a                	sw	a4,52(sp)
1c00b452:	4d01                	li	s10,0
	while (exp <= -3) {
1c00b454:	5779                	li	a4,-2
1c00b456:	10e94f63          	blt	s2,a4,1c00b574 <_prf+0x6ae>
	while (exp > 0) {
1c00b45a:	17204663          	bgtz	s2,1c00b5c6 <_prf+0x700>
		_rlrshift(&fract);
1c00b45e:	1808                	addi	a0,sp,48
		exp++;
1c00b460:	0905                	addi	s2,s2,1
		_rlrshift(&fract);
1c00b462:	9cdff0ef          	jal	ra,1c00ae2e <_rlrshift>
	while (exp < (0 + 4)) {
1c00b466:	fe493ce3          	p.bneimm	s2,4,1c00b45e <_prf+0x598>
	if (precision < 0) {
1c00b46a:	00045363          	bgez	s0,1c00b470 <_prf+0x5aa>
		precision = 6;		/* Default precision if none given */
1c00b46e:	4419                	li	s0,6
	if ((c == 'g') || (c == 'G')) {
1c00b470:	0dfdf713          	andi	a4,s11,223
1c00b474:	04700693          	li	a3,71
	prune_zero = false;		/* Assume trailing 0's allowed     */
1c00b478:	ca02                	sw	zero,20(sp)
	if ((c == 'g') || (c == 'G')) {
1c00b47a:	02d71563          	bne	a4,a3,1c00b4a4 <_prf+0x5de>
		if (decexp < (-4 + 1) || decexp > precision) {
1c00b47e:	5775                	li	a4,-3
1c00b480:	00ed4463          	blt	s10,a4,1c00b488 <_prf+0x5c2>
1c00b484:	19a45163          	ble	s10,s0,1c00b606 <_prf+0x740>
			c += 'e' - 'g';
1c00b488:	ffed8793          	addi	a5,s11,-2
1c00b48c:	0ff7fd93          	andi	s11,a5,255
			if (precision > 0) {
1c00b490:	4c040e63          	beqz	s0,1c00b96c <_prf+0xaa6>
				precision--;
1c00b494:	147d                	addi	s0,s0,-1
		if (!falt && (precision > 0)) {
1c00b496:	4c0a9b63          	bnez	s5,1c00b96c <_prf+0xaa6>
1c00b49a:	00802933          	sgtz	s2,s0
1c00b49e:	0ff97913          	andi	s2,s2,255
1c00b4a2:	ca4a                	sw	s2,20(sp)
	if (c == 'f') {
1c00b4a4:	06600713          	li	a4,102
1c00b4a8:	4ced9363          	bne	s11,a4,1c00b96e <_prf+0xaa8>
		exp = precision + decexp;
1c00b4ac:	008d0733          	add	a4,s10,s0
		if (exp < 0) {
1c00b4b0:	06600d93          	li	s11,102
1c00b4b4:	4a075f63          	bgez	a4,1c00b972 <_prf+0xaac>
	digit_count = 16;
1c00b4b8:	4741                	li	a4,16
1c00b4ba:	d63a                	sw	a4,44(sp)
			exp = 0;
1c00b4bc:	4901                	li	s2,0
	ltemp = 0x0800000000000000;
1c00b4be:	4601                	li	a2,0
1c00b4c0:	080006b7          	lui	a3,0x8000
1c00b4c4:	dc32                	sw	a2,56(sp)
1c00b4c6:	de36                	sw	a3,60(sp)
	while (exp--) {
1c00b4c8:	197d                	addi	s2,s2,-1
1c00b4ca:	15f93563          	p.bneimm	s2,-1,1c00b614 <_prf+0x74e>
	fract += ltemp;
1c00b4ce:	5742                	lw	a4,48(sp)
1c00b4d0:	56e2                	lw	a3,56(sp)
1c00b4d2:	5652                	lw	a2,52(sp)
1c00b4d4:	55f2                	lw	a1,60(sp)
1c00b4d6:	96ba                	add	a3,a3,a4
1c00b4d8:	00e6b733          	sltu	a4,a3,a4
1c00b4dc:	962e                	add	a2,a2,a1
1c00b4de:	9732                	add	a4,a4,a2
1c00b4e0:	da3a                	sw	a4,52(sp)
1c00b4e2:	d836                	sw	a3,48(sp)
	if ((fract >> 32) & 0xF0000000) {
1c00b4e4:	f6073733          	p.bclr	a4,a4,27,0
1c00b4e8:	cb01                	beqz	a4,1c00b4f8 <_prf+0x632>
		_ldiv5(&fract);
1c00b4ea:	1808                	addi	a0,sp,48
1c00b4ec:	963ff0ef          	jal	ra,1c00ae4e <_ldiv5>
		_rlrshift(&fract);
1c00b4f0:	1808                	addi	a0,sp,48
1c00b4f2:	93dff0ef          	jal	ra,1c00ae2e <_rlrshift>
		decexp++;
1c00b4f6:	0d05                	addi	s10,s10,1
	if (c == 'f') {
1c00b4f8:	06600713          	li	a4,102
1c00b4fc:	16ed9163          	bne	s11,a4,1c00b65e <_prf+0x798>
		if (decexp > 0) {
1c00b500:	8926                	mv	s2,s1
1c00b502:	13a04963          	bgtz	s10,1c00b634 <_prf+0x76e>
			*buf++ = '0';
1c00b506:	03000713          	li	a4,48
1c00b50a:	00e48023          	sb	a4,0(s1)
1c00b50e:	00148913          	addi	s2,s1,1
			zero.predot = zero.postdot = zero.trail = 0;
1c00b512:	4681                	li	a3,0
		if (falt || (precision > 0)) {
1c00b514:	120a8763          	beqz	s5,1c00b642 <_prf+0x77c>
			*buf++ = '.';
1c00b518:	02e00593          	li	a1,46
1c00b51c:	00b90023          	sb	a1,0(s2)
1c00b520:	00190713          	addi	a4,s2,1
		if (decexp < 0 && precision > 0) {
1c00b524:	440d0263          	beqz	s10,1c00b968 <_prf+0xaa2>
1c00b528:	12805863          	blez	s0,1c00b658 <_prf+0x792>
			zp->postdot = -decexp;
1c00b52c:	41a00ab3          	neg	s5,s10
1c00b530:	048acab3          	p.min	s5,s5,s0
			precision -= zp->postdot;
1c00b534:	41540433          	sub	s0,s0,s5
			zero.predot = zero.postdot = zero.trail = 0;
1c00b538:	893a                	mv	s2,a4
		while (precision > 0 && digit_count > 0) {
1c00b53a:	10805763          	blez	s0,1c00b648 <_prf+0x782>
1c00b53e:	5732                	lw	a4,44(sp)
1c00b540:	10e05463          	blez	a4,1c00b648 <_prf+0x782>
			*buf++ = _get_digit(&fract, &digit_count);
1c00b544:	106c                	addi	a1,sp,44
1c00b546:	1808                	addi	a0,sp,48
1c00b548:	c036                	sw	a3,0(sp)
1c00b54a:	949ff0ef          	jal	ra,1c00ae92 <_get_digit>
1c00b54e:	00a900ab          	p.sb	a0,1(s2!)
			precision--;
1c00b552:	147d                	addi	s0,s0,-1
1c00b554:	4682                	lw	a3,0(sp)
1c00b556:	b7d5                	j	1c00b53a <_prf+0x674>
				exp--;
1c00b558:	197d                	addi	s2,s2,-1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
1c00b55a:	01f5d693          	srli	a3,a1,0x1f
1c00b55e:	0706                	slli	a4,a4,0x1
1c00b560:	8f55                	or	a4,a4,a3
1c00b562:	0586                	slli	a1,a1,0x1
1c00b564:	fe075ae3          	bgez	a4,1c00b558 <_prf+0x692>
1c00b568:	d82e                	sw	a1,48(sp)
1c00b56a:	da3a                	sw	a4,52(sp)
1c00b56c:	bde1                	j	1c00b444 <_prf+0x57e>
			_rlrshift(&fract);
1c00b56e:	1808                	addi	a0,sp,48
1c00b570:	8bfff0ef          	jal	ra,1c00ae2e <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
1c00b574:	55d2                	lw	a1,52(sp)
1c00b576:	33333737          	lui	a4,0x33333
1c00b57a:	33270713          	addi	a4,a4,818 # 33333332 <__l2_end+0x1732669a>
1c00b57e:	5642                	lw	a2,48(sp)
1c00b580:	0905                	addi	s2,s2,1
1c00b582:	feb766e3          	bltu	a4,a1,1c00b56e <_prf+0x6a8>
		fract *= 5U;
1c00b586:	4695                	li	a3,5
1c00b588:	02c6b733          	mulhu	a4,a3,a2
		decexp--;
1c00b58c:	1d7d                	addi	s10,s10,-1
		fract *= 5U;
1c00b58e:	02c68633          	mul	a2,a3,a2
1c00b592:	42b68733          	p.mac	a4,a3,a1
1c00b596:	d832                	sw	a2,48(sp)
		decexp--;
1c00b598:	4681                	li	a3,0
		fract *= 5U;
1c00b59a:	da3a                	sw	a4,52(sp)
		while ((fract >> 32) <= (MAXFP1 / 2)) {
1c00b59c:	800007b7          	lui	a5,0x80000
1c00b5a0:	fff7c793          	not	a5,a5
1c00b5a4:	00e7f763          	bleu	a4,a5,1c00b5b2 <_prf+0x6ec>
1c00b5a8:	ea0686e3          	beqz	a3,1c00b454 <_prf+0x58e>
1c00b5ac:	d832                	sw	a2,48(sp)
1c00b5ae:	da3a                	sw	a4,52(sp)
1c00b5b0:	b555                	j	1c00b454 <_prf+0x58e>
			fract <<= 1;
1c00b5b2:	01f65593          	srli	a1,a2,0x1f
1c00b5b6:	00171693          	slli	a3,a4,0x1
1c00b5ba:	00d5e733          	or	a4,a1,a3
1c00b5be:	0606                	slli	a2,a2,0x1
			exp--;
1c00b5c0:	197d                	addi	s2,s2,-1
1c00b5c2:	4685                	li	a3,1
1c00b5c4:	bfe1                	j	1c00b59c <_prf+0x6d6>
		_ldiv5(&fract);
1c00b5c6:	1808                	addi	a0,sp,48
1c00b5c8:	887ff0ef          	jal	ra,1c00ae4e <_ldiv5>
1c00b5cc:	5642                	lw	a2,48(sp)
1c00b5ce:	5752                	lw	a4,52(sp)
		exp--;
1c00b5d0:	197d                	addi	s2,s2,-1
		decexp++;
1c00b5d2:	0d05                	addi	s10,s10,1
1c00b5d4:	4681                	li	a3,0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
1c00b5d6:	800007b7          	lui	a5,0x80000
1c00b5da:	fff7c793          	not	a5,a5
1c00b5de:	00e7f763          	bleu	a4,a5,1c00b5ec <_prf+0x726>
1c00b5e2:	e6068ce3          	beqz	a3,1c00b45a <_prf+0x594>
1c00b5e6:	d832                	sw	a2,48(sp)
1c00b5e8:	da3a                	sw	a4,52(sp)
1c00b5ea:	bd85                	j	1c00b45a <_prf+0x594>
			fract <<= 1;
1c00b5ec:	01f65593          	srli	a1,a2,0x1f
1c00b5f0:	00171693          	slli	a3,a4,0x1
1c00b5f4:	00d5e733          	or	a4,a1,a3
1c00b5f8:	0606                	slli	a2,a2,0x1
			exp--;
1c00b5fa:	197d                	addi	s2,s2,-1
1c00b5fc:	4685                	li	a3,1
1c00b5fe:	bfe1                	j	1c00b5d6 <_prf+0x710>
	if ((exp | fract) != 0) {
1c00b600:	4d01                	li	s10,0
1c00b602:	4901                	li	s2,0
1c00b604:	bda9                	j	1c00b45e <_prf+0x598>
			precision -= decexp;
1c00b606:	41a40433          	sub	s0,s0,s10
		if (!falt && (precision > 0)) {
1c00b60a:	ea0a91e3          	bnez	s5,1c00b4ac <_prf+0x5e6>
			c = 'f';
1c00b60e:	06600d93          	li	s11,102
1c00b612:	b561                	j	1c00b49a <_prf+0x5d4>
		_ldiv5(&ltemp);
1c00b614:	1828                	addi	a0,sp,56
1c00b616:	839ff0ef          	jal	ra,1c00ae4e <_ldiv5>
		_rlrshift(&ltemp);
1c00b61a:	1828                	addi	a0,sp,56
1c00b61c:	813ff0ef          	jal	ra,1c00ae2e <_rlrshift>
1c00b620:	b565                	j	1c00b4c8 <_prf+0x602>
				*buf++ = _get_digit(&fract, &digit_count);
1c00b622:	106c                	addi	a1,sp,44
1c00b624:	1808                	addi	a0,sp,48
1c00b626:	86dff0ef          	jal	ra,1c00ae92 <_get_digit>
1c00b62a:	00a900ab          	p.sb	a0,1(s2!)
				decexp--;
1c00b62e:	1d7d                	addi	s10,s10,-1
			while (decexp > 0 && digit_count > 0) {
1c00b630:	000d0563          	beqz	s10,1c00b63a <_prf+0x774>
1c00b634:	5732                	lw	a4,44(sp)
1c00b636:	fee046e3          	bgtz	a4,1c00b622 <_prf+0x75c>
		if (falt || (precision > 0)) {
1c00b63a:	300a9f63          	bnez	s5,1c00b958 <_prf+0xa92>
			zp->predot = decexp;
1c00b63e:	86ea                	mv	a3,s10
			decexp = 0;
1c00b640:	4d01                	li	s10,0
			zero.predot = zero.postdot = zero.trail = 0;
1c00b642:	4a81                	li	s5,0
		if (falt || (precision > 0)) {
1c00b644:	ec804ae3          	bgtz	s0,1c00b518 <_prf+0x652>
	if (prune_zero) {
1c00b648:	4752                	lw	a4,20(sp)
1c00b64a:	eb31                	bnez	a4,1c00b69e <_prf+0x7d8>
	return buf - start;
1c00b64c:	00c8                	addi	a0,sp,68
	*buf = 0;
1c00b64e:	00090023          	sb	zero,0(s2)
	return buf - start;
1c00b652:	40a90533          	sub	a0,s2,a0
1c00b656:	b389                	j	1c00b398 <_prf+0x4d2>
			*buf++ = '.';
1c00b658:	893a                	mv	s2,a4
			zero.predot = zero.postdot = zero.trail = 0;
1c00b65a:	4a81                	li	s5,0
1c00b65c:	b7f5                	j	1c00b648 <_prf+0x782>
		*buf = _get_digit(&fract, &digit_count);
1c00b65e:	106c                	addi	a1,sp,44
1c00b660:	1808                	addi	a0,sp,48
1c00b662:	831ff0ef          	jal	ra,1c00ae92 <_get_digit>
1c00b666:	00a48023          	sb	a0,0(s1)
		if (*buf++ != '0') {
1c00b66a:	03000713          	li	a4,48
1c00b66e:	00e50363          	beq	a0,a4,1c00b674 <_prf+0x7ae>
			decexp--;
1c00b672:	1d7d                	addi	s10,s10,-1
		if (falt || (precision > 0)) {
1c00b674:	000a9663          	bnez	s5,1c00b680 <_prf+0x7ba>
		if (*buf++ != '0') {
1c00b678:	00148913          	addi	s2,s1,1
		if (falt || (precision > 0)) {
1c00b67c:	00805d63          	blez	s0,1c00b696 <_prf+0x7d0>
			*buf++ = '.';
1c00b680:	02e00713          	li	a4,46
1c00b684:	00248913          	addi	s2,s1,2
1c00b688:	00e480a3          	sb	a4,1(s1)
		while (precision > 0 && digit_count > 0) {
1c00b68c:	00805563          	blez	s0,1c00b696 <_prf+0x7d0>
1c00b690:	5732                	lw	a4,44(sp)
1c00b692:	08e04663          	bgtz	a4,1c00b71e <_prf+0x858>
	if (prune_zero) {
1c00b696:	47d2                	lw	a5,20(sp)
			zero.predot = zero.postdot = zero.trail = 0;
1c00b698:	4a81                	li	s5,0
1c00b69a:	4681                	li	a3,0
	if (prune_zero) {
1c00b69c:	cf99                	beqz	a5,1c00b6ba <_prf+0x7f4>
		while (*--buf == '0')
1c00b69e:	03000513          	li	a0,48
1c00b6a2:	fff90713          	addi	a4,s2,-1
1c00b6a6:	00074583          	lbu	a1,0(a4)
1c00b6aa:	08a58263          	beq	a1,a0,1c00b72e <_prf+0x868>
		if (*buf != '.') {
1c00b6ae:	02e00513          	li	a0,46
		zp->trail = 0;
1c00b6b2:	4401                	li	s0,0
		if (*buf != '.') {
1c00b6b4:	00a59363          	bne	a1,a0,1c00b6ba <_prf+0x7f4>
		while (*--buf == '0')
1c00b6b8:	893a                	mv	s2,a4
	if ((c == 'e') || (c == 'E')) {
1c00b6ba:	0dfdf713          	andi	a4,s11,223
1c00b6be:	04500593          	li	a1,69
1c00b6c2:	f8b715e3          	bne	a4,a1,1c00b64c <_prf+0x786>
		*buf++ = c;
1c00b6c6:	85ca                	mv	a1,s2
1c00b6c8:	01b5812b          	p.sb	s11,2(a1!)
			*buf++ = '+';
1c00b6cc:	02b00793          	li	a5,43
		if (decexp < 0) {
1c00b6d0:	000d5663          	bgez	s10,1c00b6dc <_prf+0x816>
			decexp = -decexp;
1c00b6d4:	41a00d33          	neg	s10,s10
			*buf++ = '-';
1c00b6d8:	02d00793          	li	a5,45
			*buf++ = '+';
1c00b6dc:	00f900a3          	sb	a5,1(s2)
		if (decexp >= 100) {
1c00b6e0:	06300793          	li	a5,99
1c00b6e4:	01a7de63          	ble	s10,a5,1c00b700 <_prf+0x83a>
			*buf++ = (decexp / 100) + '0';
1c00b6e8:	06400713          	li	a4,100
1c00b6ec:	02ed47b3          	div	a5,s10,a4
1c00b6f0:	00390593          	addi	a1,s2,3
			decexp %= 100;
1c00b6f4:	02ed6d33          	rem	s10,s10,a4
			*buf++ = (decexp / 100) + '0';
1c00b6f8:	03078793          	addi	a5,a5,48 # 80000030 <pulp__FC+0x80000031>
1c00b6fc:	00f90123          	sb	a5,2(s2)
		*buf++ = (decexp / 10) + '0';
1c00b700:	47a9                	li	a5,10
1c00b702:	892e                	mv	s2,a1
1c00b704:	02fd4733          	div	a4,s10,a5
		decexp %= 10;
1c00b708:	02fd68b3          	rem	a7,s10,a5
		*buf++ = (decexp / 10) + '0';
1c00b70c:	03070713          	addi	a4,a4,48
1c00b710:	00e9012b          	p.sb	a4,2(s2!)
		*buf++ = decexp + '0';
1c00b714:	03088893          	addi	a7,a7,48
1c00b718:	011580a3          	sb	a7,1(a1)
1c00b71c:	bf05                	j	1c00b64c <_prf+0x786>
			*buf++ = _get_digit(&fract, &digit_count);
1c00b71e:	106c                	addi	a1,sp,44
1c00b720:	1808                	addi	a0,sp,48
1c00b722:	f70ff0ef          	jal	ra,1c00ae92 <_get_digit>
1c00b726:	00a900ab          	p.sb	a0,1(s2!)
			precision--;
1c00b72a:	147d                	addi	s0,s0,-1
1c00b72c:	b785                	j	1c00b68c <_prf+0x7c6>
		while (*--buf == '0')
1c00b72e:	893a                	mv	s2,a4
1c00b730:	bf8d                	j	1c00b6a2 <_prf+0x7dc>
1c00b732:	8a4a                	mv	s4,s2
				switch (i) {
1c00b734:	04c00693          	li	a3,76
1c00b738:	004a278b          	p.lw	a5,4(s4!)
1c00b73c:	02d48a63          	beq	s1,a3,1c00b770 <_prf+0x8aa>
1c00b740:	0096c963          	blt	a3,s1,1c00b752 <_prf+0x88c>
1c00b744:	04800693          	li	a3,72
1c00b748:	02d48063          	beq	s1,a3,1c00b768 <_prf+0x8a2>
					*va_arg(vargs, int *) = count;
1c00b74c:	0137a023          	sw	s3,0(a5)
					break;
1c00b750:	a801                	j	1c00b760 <_prf+0x89a>
				switch (i) {
1c00b752:	06800693          	li	a3,104
1c00b756:	fed49be3          	bne	s1,a3,1c00b74c <_prf+0x886>
					*va_arg(vargs, short *) = count;
1c00b75a:	874e                	mv	a4,s3
1c00b75c:	00e79023          	sh	a4,0(a5)
				continue;
1c00b760:	8952                	mv	s2,s4
1c00b762:	8662                	mv	a2,s8
1c00b764:	f86ff06f          	j	1c00aeea <_prf+0x24>
					*va_arg(vargs, char *) = count;
1c00b768:	874e                	mv	a4,s3
1c00b76a:	00e78023          	sb	a4,0(a5)
					break;
1c00b76e:	bfcd                	j	1c00b760 <_prf+0x89a>
					*va_arg(vargs, long long *) = count;
1c00b770:	41f9d713          	srai	a4,s3,0x1f
1c00b774:	0137a023          	sw	s3,0(a5)
1c00b778:	c3d8                	sw	a4,4(a5)
					break;
1c00b77a:	b7dd                	j	1c00b760 <_prf+0x89a>
				clen = _to_hex(buf, val, true, 'x');
1c00b77c:	00092583          	lw	a1,0(s2)
		*buf++ = '0';
1c00b780:	77e1                	lui	a5,0xffff8
1c00b782:	8307c793          	xori	a5,a5,-2000
	len = _to_x(buf, value, 16);
1c00b786:	46c1                	li	a3,16
1c00b788:	4601                	li	a2,0
1c00b78a:	04610513          	addi	a0,sp,70
		*buf++ = '0';
1c00b78e:	04f11223          	sh	a5,68(sp)
	len = _to_x(buf, value, 16);
1c00b792:	e0aff0ef          	jal	ra,1c00ad9c <_to_x>
				val = (uintptr_t) va_arg(vargs, void *);
1c00b796:	00490a13          	addi	s4,s2,4
	return len + (buf - buf0);
1c00b79a:	00250d93          	addi	s11,a0,2
				prefix = 2;
1c00b79e:	4909                	li	s2,2
				break;
1c00b7a0:	b40d                	j	1c00b1c2 <_prf+0x2fc>
					if (cptr[clen] == '\0') {
1c00b7a2:	0016c60b          	p.lbu	a2,1(a3!) # 8000001 <__L2+0x7f80001>
1c00b7a6:	a4060ee3          	beqz	a2,1c00b202 <_prf+0x33c>
				for (clen = 0; clen < precision; clen++) {
1c00b7aa:	0d85                	addi	s11,s11,1
1c00b7ac:	bc89                	j	1c00b1fe <_prf+0x338>
					val = va_arg(vargs, unsigned int);
1c00b7ae:	00490a13          	addi	s4,s2,4
1c00b7b2:	00092583          	lw	a1,0(s2)
1c00b7b6:	4601                	li	a2,0
					break;
1c00b7b8:	ba99                	j	1c00b10e <_prf+0x248>
	if (alt_form) {
1c00b7ba:	8526                	mv	a0,s1
	return (buf - buf0) + _to_x(buf, value, 8);
1c00b7bc:	46a1                	li	a3,8
1c00b7be:	409504b3          	sub	s1,a0,s1
1c00b7c2:	ddaff0ef          	jal	ra,1c00ad9c <_to_x>
1c00b7c6:	00a48db3          	add	s11,s1,a0
			prefix = 0;
1c00b7ca:	4901                	li	s2,0
1c00b7cc:	badd                	j	1c00b1c2 <_prf+0x2fc>
				} else if (c == 'u') {
1c00b7ce:	07500713          	li	a4,117
1c00b7d2:	00ed9863          	bne	s11,a4,1c00b7e2 <_prf+0x91c>
	return _to_x(buf, value, 10);
1c00b7d6:	46a9                	li	a3,10
1c00b7d8:	8526                	mv	a0,s1
1c00b7da:	dc2ff0ef          	jal	ra,1c00ad9c <_to_x>
1c00b7de:	8daa                	mv	s11,a0
1c00b7e0:	b7ed                	j	1c00b7ca <_prf+0x904>
	if (alt_form) {
1c00b7e2:	8d26                	mv	s10,s1
1c00b7e4:	000a8963          	beqz	s5,1c00b7f6 <_prf+0x930>
		*buf++ = '0';
1c00b7e8:	7761                	lui	a4,0xffff8
1c00b7ea:	83074713          	xori	a4,a4,-2000
1c00b7ee:	04e11223          	sh	a4,68(sp)
		*buf++ = 'x';
1c00b7f2:	04610d13          	addi	s10,sp,70
	len = _to_x(buf, value, 16);
1c00b7f6:	46c1                	li	a3,16
1c00b7f8:	856a                	mv	a0,s10
1c00b7fa:	da2ff0ef          	jal	ra,1c00ad9c <_to_x>
	if (prefix == 'X') {
1c00b7fe:	05800713          	li	a4,88
1c00b802:	02ed9263          	bne	s11,a4,1c00b826 <_prf+0x960>
1c00b806:	87a6                	mv	a5,s1
		if (*buf >= 'a' && *buf <= 'z') {
1c00b808:	45e5                	li	a1,25
1c00b80a:	0017c68b          	p.lbu	a3,1(a5!) # ffff8001 <pulp__FC+0xffff8002>
1c00b80e:	f9f68613          	addi	a2,a3,-97
1c00b812:	0ff67613          	andi	a2,a2,255
1c00b816:	00c5e563          	bltu	a1,a2,1c00b820 <_prf+0x95a>
			*buf += 'A' - 'a';
1c00b81a:	1681                	addi	a3,a3,-32
1c00b81c:	fed78fa3          	sb	a3,-1(a5)
	} while (*buf++);
1c00b820:	fff7c703          	lbu	a4,-1(a5)
1c00b824:	f37d                	bnez	a4,1c00b80a <_prf+0x944>
	return len + (buf - buf0);
1c00b826:	409d0733          	sub	a4,s10,s1
1c00b82a:	00a70db3          	add	s11,a4,a0
			prefix = 0;
1c00b82e:	001a9913          	slli	s2,s5,0x1
1c00b832:	ba41                	j	1c00b1c2 <_prf+0x2fc>
				PUTC('%');
1c00b834:	85de                	mv	a1,s7
1c00b836:	02500513          	li	a0,37
1c00b83a:	ec4ff06f          	j	1c00aefe <_prf+0x38>
				count++;
1c00b83e:	0985                	addi	s3,s3,1
				continue;
1c00b840:	8a4a                	mv	s4,s2
1c00b842:	bf39                	j	1c00b760 <_prf+0x89a>
1c00b844:	00dc                	addi	a5,sp,68
				zero_head = 0;
1c00b846:	4d01                	li	s10,0
1c00b848:	b2d5                	j	1c00b22c <_prf+0x366>
					PUTC(' ');
1c00b84a:	85de                	mv	a1,s7
1c00b84c:	02000513          	li	a0,32
1c00b850:	c036                	sw	a3,0(sp)
1c00b852:	c43e                	sw	a5,8(sp)
1c00b854:	9b02                	jalr	s6
1c00b856:	4682                	lw	a3,0(sp)
1c00b858:	47a2                	lw	a5,8(sp)
1c00b85a:	ebf52563          	p.beqimm	a0,-1,1c00af04 <_prf+0x3e>
				while (width-- > 0) {
1c00b85e:	14fd                	addi	s1,s1,-1
1c00b860:	fff4b5e3          	p.bneimm	s1,-1,1c00b84a <_prf+0x984>
				count += width;
1c00b864:	99e6                	add	s3,s3,s9
				while (width-- > 0) {
1c00b866:	5cfd                	li	s9,-1
1c00b868:	bad9                	j	1c00b23e <_prf+0x378>
				PUTC(*cptr++);
1c00b86a:	0017c50b          	p.lbu	a0,1(a5!)
1c00b86e:	85de                	mv	a1,s7
1c00b870:	c036                	sw	a3,0(sp)
1c00b872:	c43e                	sw	a5,8(sp)
1c00b874:	9b02                	jalr	s6
1c00b876:	4682                	lw	a3,0(sp)
1c00b878:	47a2                	lw	a5,8(sp)
1c00b87a:	9df534e3          	p.bneimm	a0,-1,1c00b242 <_prf+0x37c>
1c00b87e:	e86ff06f          	j	1c00af04 <_prf+0x3e>
				PUTC('0');
1c00b882:	85de                	mv	a1,s7
1c00b884:	03000513          	li	a0,48
1c00b888:	c036                	sw	a3,0(sp)
1c00b88a:	c43e                	sw	a5,8(sp)
1c00b88c:	9b02                	jalr	s6
1c00b88e:	4682                	lw	a3,0(sp)
1c00b890:	47a2                	lw	a5,8(sp)
1c00b892:	9bf53be3          	p.bneimm	a0,-1,1c00b248 <_prf+0x382>
1c00b896:	e6eff06f          	j	1c00af04 <_prf+0x3e>
					PUTC(c);
1c00b89a:	85de                	mv	a1,s7
1c00b89c:	c232                	sw	a2,4(sp)
1c00b89e:	c036                	sw	a3,0(sp)
1c00b8a0:	c442                	sw	a6,8(sp)
1c00b8a2:	9b02                	jalr	s6
1c00b8a4:	4612                	lw	a2,4(sp)
1c00b8a6:	4682                	lw	a3,0(sp)
1c00b8a8:	4822                	lw	a6,8(sp)
1c00b8aa:	e5f52d63          	p.beqimm	a0,-1,1c00af04 <_prf+0x3e>
					c = *++cptr;
1c00b8ae:	0d85                	addi	s11,s11,1
1c00b8b0:	000dc503          	lbu	a0,0(s11)
1c00b8b4:	b27d                	j	1c00b262 <_prf+0x39c>
					PUTC('0');
1c00b8b6:	85de                	mv	a1,s7
1c00b8b8:	03000513          	li	a0,48
1c00b8bc:	c232                	sw	a2,4(sp)
1c00b8be:	c036                	sw	a3,0(sp)
1c00b8c0:	c43a                	sw	a4,8(sp)
1c00b8c2:	9b02                	jalr	s6
1c00b8c4:	4612                	lw	a2,4(sp)
1c00b8c6:	4682                	lw	a3,0(sp)
1c00b8c8:	4722                	lw	a4,8(sp)
1c00b8ca:	167d                	addi	a2,a2,-1
1c00b8cc:	9bf532e3          	p.bneimm	a0,-1,1c00b270 <_prf+0x3aa>
1c00b8d0:	e34ff06f          	j	1c00af04 <_prf+0x3e>
					PUTC('0');
1c00b8d4:	85de                	mv	a1,s7
1c00b8d6:	03000513          	li	a0,48
1c00b8da:	c036                	sw	a3,0(sp)
1c00b8dc:	c43a                	sw	a4,8(sp)
1c00b8de:	9b02                	jalr	s6
1c00b8e0:	4682                	lw	a3,0(sp)
1c00b8e2:	4722                	lw	a4,8(sp)
1c00b8e4:	16fd                	addi	a3,a3,-1
1c00b8e6:	9df532e3          	p.bneimm	a0,-1,1c00b2aa <_prf+0x3e4>
1c00b8ea:	e1aff06f          	j	1c00af04 <_prf+0x3e>
					PUTC(c);
1c00b8ee:	85de                	mv	a1,s7
1c00b8f0:	c232                	sw	a2,4(sp)
1c00b8f2:	c036                	sw	a3,0(sp)
1c00b8f4:	c43a                	sw	a4,8(sp)
1c00b8f6:	9b02                	jalr	s6
1c00b8f8:	4612                	lw	a2,4(sp)
1c00b8fa:	4682                	lw	a3,0(sp)
1c00b8fc:	4722                	lw	a4,8(sp)
1c00b8fe:	e1f52363          	p.beqimm	a0,-1,1c00af04 <_prf+0x3e>
					c = *++cptr;
1c00b902:	0d85                	addi	s11,s11,1
1c00b904:	000dc503          	lbu	a0,0(s11)
1c00b908:	ba75                	j	1c00b2c4 <_prf+0x3fe>
					PUTC('0');
1c00b90a:	85de                	mv	a1,s7
1c00b90c:	03000513          	li	a0,48
1c00b910:	c43a                	sw	a4,8(sp)
1c00b912:	9b02                	jalr	s6
1c00b914:	4722                	lw	a4,8(sp)
1c00b916:	177d                	addi	a4,a4,-1
1c00b918:	9bf53fe3          	p.bneimm	a0,-1,1c00b2d6 <_prf+0x410>
1c00b91c:	de8ff06f          	j	1c00af04 <_prf+0x3e>
				PUTC(*cptr++);
1c00b920:	0014450b          	p.lbu	a0,1(s0!)
1c00b924:	85de                	mv	a1,s7
1c00b926:	9b02                	jalr	s6
1c00b928:	ddf52e63          	p.beqimm	a0,-1,1c00af04 <_prf+0x3e>
1c00b92c:	408a87b3          	sub	a5,s5,s0
			while (clen-- > 0) {
1c00b930:	fef048e3          	bgtz	a5,1c00b920 <_prf+0xa5a>
			count += prefix;
1c00b934:	994e                	add	s2,s2,s3
			count += zero_head;
1c00b936:	012d09b3          	add	s3,s10,s2
			count += clen;
1c00b93a:	99a6                	add	s3,s3,s1
			if (width > 0) {
1c00b93c:	e39052e3          	blez	s9,1c00b760 <_prf+0x89a>
				count += width;
1c00b940:	99e6                	add	s3,s3,s9
				while (width-- > 0) {
1c00b942:	1cfd                	addi	s9,s9,-1
1c00b944:	e1fcaee3          	p.beqimm	s9,-1,1c00b760 <_prf+0x89a>
					PUTC(' ');
1c00b948:	85de                	mv	a1,s7
1c00b94a:	02000513          	li	a0,32
1c00b94e:	9b02                	jalr	s6
1c00b950:	fff539e3          	p.bneimm	a0,-1,1c00b942 <_prf+0xa7c>
1c00b954:	db0ff06f          	j	1c00af04 <_prf+0x3e>
			*buf++ = '.';
1c00b958:	02e00693          	li	a3,46
1c00b95c:	00d90023          	sb	a3,0(s2)
1c00b960:	00190713          	addi	a4,s2,1
			zp->predot = decexp;
1c00b964:	86ea                	mv	a3,s10
			decexp = 0;
1c00b966:	4d01                	li	s10,0
			zero.predot = zero.postdot = zero.trail = 0;
1c00b968:	4a81                	li	s5,0
1c00b96a:	b6f9                	j	1c00b538 <_prf+0x672>
	prune_zero = false;		/* Assume trailing 0's allowed     */
1c00b96c:	ca02                	sw	zero,20(sp)
		exp = precision + 1;
1c00b96e:	00140713          	addi	a4,s0,1
	digit_count = 16;
1c00b972:	46c1                	li	a3,16
1c00b974:	d636                	sw	a3,44(sp)
1c00b976:	04d74933          	p.min	s2,a4,a3
1c00b97a:	b691                	j	1c00b4be <_prf+0x5f8>

1c00b97c <__rt_uart_cluster_req_done>:
  }

  return __rt_uart_open(channel, conf, event, dev_name);
  
error:
  rt_warning("[UART] Failed to open uart device\n");
1c00b97c:	300476f3          	csrrci	a3,mstatus,8
1c00b980:	4785                	li	a5,1
1c00b982:	08f50623          	sb	a5,140(a0)
1c00b986:	08d54783          	lbu	a5,141(a0)
1c00b98a:	00201737          	lui	a4,0x201
1c00b98e:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c00b992:	04078793          	addi	a5,a5,64
1c00b996:	07da                	slli	a5,a5,0x16
1c00b998:	0007e723          	p.sw	zero,a4(a5)
1c00b99c:	30069073          	csrw	mstatus,a3
1c00b9a0:	8082                	ret

1c00b9a2 <__rt_uart_setup.isra.5>:
1c00b9a2:	1c00d737          	lui	a4,0x1c00d
1c00b9a6:	be072703          	lw	a4,-1056(a4) # 1c00cbe0 <__rt_freq_domains>
1c00b9aa:	00155793          	srli	a5,a0,0x1
1c00b9ae:	97ba                	add	a5,a5,a4
1c00b9b0:	02a7d7b3          	divu	a5,a5,a0
1c00b9b4:	1a102737          	lui	a4,0x1a102
1c00b9b8:	17fd                	addi	a5,a5,-1
1c00b9ba:	07c2                	slli	a5,a5,0x10
1c00b9bc:	3067e793          	ori	a5,a5,774
1c00b9c0:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa1021a0>
1c00b9c4:	8082                	ret

1c00b9c6 <__rt_uart_setfreq_after>:
1c00b9c6:	1c00d7b7          	lui	a5,0x1c00d
1c00b9ca:	b7c78793          	addi	a5,a5,-1156 # 1c00cb7c <__rt_uart>
1c00b9ce:	4398                	lw	a4,0(a5)
1c00b9d0:	cb11                	beqz	a4,1c00b9e4 <__rt_uart_setfreq_after+0x1e>
1c00b9d2:	4788                	lw	a0,8(a5)
1c00b9d4:	1141                	addi	sp,sp,-16
1c00b9d6:	c606                	sw	ra,12(sp)
1c00b9d8:	fcbff0ef          	jal	ra,1c00b9a2 <__rt_uart_setup.isra.5>
1c00b9dc:	40b2                	lw	ra,12(sp)
1c00b9de:	4501                	li	a0,0
1c00b9e0:	0141                	addi	sp,sp,16
1c00b9e2:	8082                	ret
1c00b9e4:	4501                	li	a0,0
1c00b9e6:	8082                	ret

1c00b9e8 <__rt_uart_wait_tx_done.isra.6>:
1c00b9e8:	1a102737          	lui	a4,0x1a102
1c00b9ec:	1141                	addi	sp,sp,-16
1c00b9ee:	21870713          	addi	a4,a4,536 # 1a102218 <__l1_end+0xa102194>
1c00b9f2:	002046b7          	lui	a3,0x204
1c00b9f6:	431c                	lw	a5,0(a4)
1c00b9f8:	8bc1                	andi	a5,a5,16
1c00b9fa:	e38d                	bnez	a5,1c00ba1c <__rt_uart_wait_tx_done.isra.6+0x34>
1c00b9fc:	1a102737          	lui	a4,0x1a102
1c00ba00:	22070713          	addi	a4,a4,544 # 1a102220 <__l1_end+0xa10219c>
1c00ba04:	431c                	lw	a5,0(a4)
1c00ba06:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00ba0a:	ffed                	bnez	a5,1c00ba04 <__rt_uart_wait_tx_done.isra.6+0x1c>
1c00ba0c:	c602                	sw	zero,12(sp)
1c00ba0e:	7cf00713          	li	a4,1999
1c00ba12:	47b2                	lw	a5,12(sp)
1c00ba14:	00f75763          	ble	a5,a4,1c00ba22 <__rt_uart_wait_tx_done.isra.6+0x3a>
1c00ba18:	0141                	addi	sp,sp,16
1c00ba1a:	8082                	ret
1c00ba1c:	0386e783          	p.elw	a5,56(a3) # 204038 <__L2+0x184038>
1c00ba20:	bfd9                	j	1c00b9f6 <__rt_uart_wait_tx_done.isra.6+0xe>
1c00ba22:	47b2                	lw	a5,12(sp)
1c00ba24:	0785                	addi	a5,a5,1
1c00ba26:	c63e                	sw	a5,12(sp)
1c00ba28:	b7ed                	j	1c00ba12 <__rt_uart_wait_tx_done.isra.6+0x2a>

1c00ba2a <__rt_uart_setfreq_before>:
1c00ba2a:	1c00d7b7          	lui	a5,0x1c00d
1c00ba2e:	b7c7a783          	lw	a5,-1156(a5) # 1c00cb7c <__rt_uart>
1c00ba32:	c385                	beqz	a5,1c00ba52 <__rt_uart_setfreq_before+0x28>
1c00ba34:	1141                	addi	sp,sp,-16
1c00ba36:	c606                	sw	ra,12(sp)
1c00ba38:	fb1ff0ef          	jal	ra,1c00b9e8 <__rt_uart_wait_tx_done.isra.6>
1c00ba3c:	40b2                	lw	ra,12(sp)
1c00ba3e:	005007b7          	lui	a5,0x500
1c00ba42:	1a102737          	lui	a4,0x1a102
1c00ba46:	0799                	addi	a5,a5,6
1c00ba48:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa1021a0>
1c00ba4c:	4501                	li	a0,0
1c00ba4e:	0141                	addi	sp,sp,16
1c00ba50:	8082                	ret
1c00ba52:	4501                	li	a0,0
1c00ba54:	8082                	ret

1c00ba56 <__rt_uart_cluster_req>:
1c00ba56:	1141                	addi	sp,sp,-16
1c00ba58:	c606                	sw	ra,12(sp)
1c00ba5a:	c422                	sw	s0,8(sp)
1c00ba5c:	30047473          	csrrci	s0,mstatus,8
1c00ba60:	1c00c7b7          	lui	a5,0x1c00c
1c00ba64:	97c78793          	addi	a5,a5,-1668 # 1c00b97c <__rt_uart_cluster_req_done>
1c00ba68:	c91c                	sw	a5,16(a0)
1c00ba6a:	4785                	li	a5,1
1c00ba6c:	d91c                	sw	a5,48(a0)
1c00ba6e:	411c                	lw	a5,0(a0)
1c00ba70:	02052a23          	sw	zero,52(a0)
1c00ba74:	c948                	sw	a0,20(a0)
1c00ba76:	43cc                	lw	a1,4(a5)
1c00ba78:	4514                	lw	a3,8(a0)
1c00ba7a:	4150                	lw	a2,4(a0)
1c00ba7c:	0586                	slli	a1,a1,0x1
1c00ba7e:	00c50793          	addi	a5,a0,12
1c00ba82:	4701                	li	a4,0
1c00ba84:	0585                	addi	a1,a1,1
1c00ba86:	4501                	li	a0,0
1c00ba88:	c48fd0ef          	jal	ra,1c008ed0 <rt_periph_copy>
1c00ba8c:	30041073          	csrw	mstatus,s0
1c00ba90:	40b2                	lw	ra,12(sp)
1c00ba92:	4422                	lw	s0,8(sp)
1c00ba94:	0141                	addi	sp,sp,16
1c00ba96:	8082                	ret

1c00ba98 <soc_eu_fcEventMask_setEvent>:
1c00ba98:	47fd                	li	a5,31
1c00ba9a:	4721                	li	a4,8
1c00ba9c:	00a7d463          	ble	a0,a5,1c00baa4 <soc_eu_fcEventMask_setEvent+0xc>
1c00baa0:	1501                	addi	a0,a0,-32
1c00baa2:	4711                	li	a4,4
1c00baa4:	1a1066b7          	lui	a3,0x1a106
1c00baa8:	20e6f603          	p.lw	a2,a4(a3)
1c00baac:	4785                	li	a5,1
1c00baae:	00a79533          	sll	a0,a5,a0
1c00bab2:	fff54513          	not	a0,a0
1c00bab6:	8d71                	and	a0,a0,a2
1c00bab8:	00a6e723          	p.sw	a0,a4(a3)
1c00babc:	8082                	ret

1c00babe <rt_uart_conf_init>:
1c00babe:	000997b7          	lui	a5,0x99
1c00bac2:	96878793          	addi	a5,a5,-1688 # 98968 <__L2+0x18968>
1c00bac6:	c11c                	sw	a5,0(a0)
1c00bac8:	57fd                	li	a5,-1
1c00baca:	c15c                	sw	a5,4(a0)
1c00bacc:	8082                	ret

1c00bace <__rt_uart_open>:
1c00bace:	1141                	addi	sp,sp,-16
1c00bad0:	c606                	sw	ra,12(sp)
1c00bad2:	c422                	sw	s0,8(sp)
1c00bad4:	c226                	sw	s1,4(sp)
1c00bad6:	c04a                	sw	s2,0(sp)
1c00bad8:	30047973          	csrrci	s2,mstatus,8
1c00badc:	cd8d                	beqz	a1,1c00bb16 <__rt_uart_open+0x48>
1c00bade:	4198                	lw	a4,0(a1)
1c00bae0:	1c00d6b7          	lui	a3,0x1c00d
1c00bae4:	ffc50793          	addi	a5,a0,-4
1c00bae8:	b7c68413          	addi	s0,a3,-1156 # 1c00cb7c <__rt_uart>
1c00baec:	0792                	slli	a5,a5,0x4
1c00baee:	943e                	add	s0,s0,a5
1c00baf0:	4010                	lw	a2,0(s0)
1c00baf2:	b7c68693          	addi	a3,a3,-1156
1c00baf6:	c60d                	beqz	a2,1c00bb20 <__rt_uart_open+0x52>
1c00baf8:	c589                	beqz	a1,1c00bb02 <__rt_uart_open+0x34>
1c00bafa:	418c                	lw	a1,0(a1)
1c00bafc:	4418                	lw	a4,8(s0)
1c00bafe:	04e59d63          	bne	a1,a4,1c00bb58 <__rt_uart_open+0x8a>
1c00bb02:	0605                	addi	a2,a2,1
1c00bb04:	00c6e7a3          	p.sw	a2,a5(a3)
1c00bb08:	8522                	mv	a0,s0
1c00bb0a:	40b2                	lw	ra,12(sp)
1c00bb0c:	4422                	lw	s0,8(sp)
1c00bb0e:	4492                	lw	s1,4(sp)
1c00bb10:	4902                	lw	s2,0(sp)
1c00bb12:	0141                	addi	sp,sp,16
1c00bb14:	8082                	ret
1c00bb16:	00099737          	lui	a4,0x99
1c00bb1a:	96870713          	addi	a4,a4,-1688 # 98968 <__L2+0x18968>
1c00bb1e:	b7c9                	j	1c00bae0 <__rt_uart_open+0x12>
1c00bb20:	c418                	sw	a4,8(s0)
1c00bb22:	4785                	li	a5,1
1c00bb24:	1a102737          	lui	a4,0x1a102
1c00bb28:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa1026fc>
1c00bb2c:	c01c                	sw	a5,0(s0)
1c00bb2e:	c048                	sw	a0,4(s0)
1c00bb30:	4314                	lw	a3,0(a4)
1c00bb32:	00a797b3          	sll	a5,a5,a0
1c00bb36:	00151493          	slli	s1,a0,0x1
1c00bb3a:	8fd5                	or	a5,a5,a3
1c00bb3c:	c31c                	sw	a5,0(a4)
1c00bb3e:	8526                	mv	a0,s1
1c00bb40:	f59ff0ef          	jal	ra,1c00ba98 <soc_eu_fcEventMask_setEvent>
1c00bb44:	00148513          	addi	a0,s1,1
1c00bb48:	f51ff0ef          	jal	ra,1c00ba98 <soc_eu_fcEventMask_setEvent>
1c00bb4c:	4408                	lw	a0,8(s0)
1c00bb4e:	e55ff0ef          	jal	ra,1c00b9a2 <__rt_uart_setup.isra.5>
1c00bb52:	30091073          	csrw	mstatus,s2
1c00bb56:	bf4d                	j	1c00bb08 <__rt_uart_open+0x3a>
1c00bb58:	4401                	li	s0,0
1c00bb5a:	b77d                	j	1c00bb08 <__rt_uart_open+0x3a>

1c00bb5c <rt_uart_close>:
}



void rt_uart_close(rt_uart_t *uart, rt_event_t *event)
{
1c00bb5c:	1141                	addi	sp,sp,-16
1c00bb5e:	c606                	sw	ra,12(sp)
1c00bb60:	c422                	sw	s0,8(sp)
1c00bb62:	c226                	sw	s1,4(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00bb64:	300474f3          	csrrci	s1,mstatus,8
  int irq = rt_irq_disable();

  rt_trace(RT_TRACE_DEV_CTRL, "[UART] Closing uart device (handle: %p)\n", uart);

  uart->open_count--;
1c00bb68:	411c                	lw	a5,0(a0)
1c00bb6a:	17fd                	addi	a5,a5,-1
1c00bb6c:	c11c                	sw	a5,0(a0)

  if (uart->open_count == 0)
1c00bb6e:	e79d                	bnez	a5,1c00bb9c <rt_uart_close+0x40>
1c00bb70:	842a                	mv	s0,a0
  {
      // First wait for pending transfers to finish before stoppping uart in case
      // some printf are still pending
      __rt_uart_wait_tx_done(uart);
1c00bb72:	e77ff0ef          	jal	ra,1c00b9e8 <__rt_uart_wait_tx_done.isra.6>

  pulp_write32(ARCHI_UDMA_ADDR + UDMA_UART_OFFSET(channel) + UDMA_CHANNEL_CUSTOM_OFFSET + UART_SETUP_OFFSET, val);
}

static inline void plp_uart_disable(int channel) {
  pulp_write32(ARCHI_UDMA_ADDR + UDMA_UART_OFFSET(channel) + UDMA_CHANNEL_CUSTOM_OFFSET + UART_SETUP_OFFSET, 0x00500006);
1c00bb76:	1a102737          	lui	a4,0x1a102
1c00bb7a:	005007b7          	lui	a5,0x500
1c00bb7e:	22470693          	addi	a3,a4,548 # 1a102224 <__l1_end+0xa1021a0>
1c00bb82:	0799                	addi	a5,a5,6
1c00bb84:	c29c                	sw	a5,0(a3)
      // Set enable bits for uart channel back to 0 
      // This is needed to be able to propagate new configs when re-opening
      plp_uart_disable(uart->channel - ARCHI_UDMA_UART_ID(0));      

      // Then stop the uart
      plp_udma_cg_set(plp_udma_cg_get() & ~(1<<uart->channel));
1c00bb86:	4050                	lw	a2,4(s0)
  return pulp_read32(ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_CONF_OFFSET + UDMA_CONF_CG_OFFSET);
1c00bb88:	78070713          	addi	a4,a4,1920
1c00bb8c:	4314                	lw	a3,0(a4)
1c00bb8e:	4785                	li	a5,1
1c00bb90:	00c797b3          	sll	a5,a5,a2
1c00bb94:	fff7c793          	not	a5,a5
1c00bb98:	8ff5                	and	a5,a5,a3
  pulp_write32(ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_CONF_OFFSET + UDMA_CONF_CG_OFFSET, value);
1c00bb9a:	c31c                	sw	a5,0(a4)
  __builtin_pulp_spr_write(reg, val);
1c00bb9c:	30049073          	csrw	mstatus,s1
  }

  rt_irq_restore(irq);
}
1c00bba0:	40b2                	lw	ra,12(sp)
1c00bba2:	4422                	lw	s0,8(sp)
1c00bba4:	4492                	lw	s1,4(sp)
1c00bba6:	0141                	addi	sp,sp,16
1c00bba8:	8082                	ret

1c00bbaa <rt_uart_cluster_write>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00bbaa:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c00bbae:	8795                	srai	a5,a5,0x5
1c00bbb0:	f267b7b3          	p.bclr	a5,a5,25,6
void rt_uart_cluster_write(rt_uart_t *handle, void *buffer, size_t size, rt_uart_req_t *req)
{
  req->uart = handle;
  req->buffer = buffer;
  req->size = size;
  req->cid = rt_cluster_id();
1c00bbb4:	08f686a3          	sb	a5,141(a3)
  event->arg[0] = (uintptr_t)callback;
1c00bbb8:	1c00c7b7          	lui	a5,0x1c00c
1c00bbbc:	a5678793          	addi	a5,a5,-1450 # 1c00ba56 <__rt_uart_cluster_req>
1c00bbc0:	ca9c                	sw	a5,16(a3)
  event->implem.pending = 1;  
1c00bbc2:	4785                	li	a5,1
  req->uart = handle;
1c00bbc4:	c288                	sw	a0,0(a3)
  req->buffer = buffer;
1c00bbc6:	c2cc                	sw	a1,4(a3)
  req->size = size;
1c00bbc8:	c690                	sw	a2,8(a3)
  req->done = 0;
1c00bbca:	08068623          	sb	zero,140(a3)
  event->implem.keep = 0;
1c00bbce:	0206aa23          	sw	zero,52(a3)
  event->arg[1] = (uintptr_t)arg;
1c00bbd2:	cad4                	sw	a3,20(a3)
  event->implem.pending = 1;  
1c00bbd4:	da9c                	sw	a5,48(a3)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_uart_cluster_req, (void *)req);
  __rt_event_set_pending(&req->event);
  __rt_cluster_push_fc_event(&req->event);
1c00bbd6:	00c68513          	addi	a0,a3,12
1c00bbda:	cb3fd06f          	j	1c00988c <__rt_cluster_push_fc_event>

1c00bbde <__rt_uart_init>:
{
  // In case the peripheral clock can dynamically change, we need to be notified
  // when this happens so that we flush pending transfers before updating the frequency
  int err = 0;

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00bbde:	1c00c5b7          	lui	a1,0x1c00c
{
1c00bbe2:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00bbe4:	4601                	li	a2,0
1c00bbe6:	a2a58593          	addi	a1,a1,-1494 # 1c00ba2a <__rt_uart_setfreq_before>
1c00bbea:	4511                	li	a0,4
{
1c00bbec:	c606                	sw	ra,12(sp)
1c00bbee:	c422                	sw	s0,8(sp)
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00bbf0:	8c3fc0ef          	jal	ra,1c0084b2 <__rt_cbsys_add>

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00bbf4:	1c00c5b7          	lui	a1,0x1c00c
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c00bbf8:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00bbfa:	4601                	li	a2,0
1c00bbfc:	9c658593          	addi	a1,a1,-1594 # 1c00b9c6 <__rt_uart_setfreq_after>
1c00bc00:	4515                	li	a0,5
1c00bc02:	8b1fc0ef          	jal	ra,1c0084b2 <__rt_cbsys_add>


  for (int i=0; i<ARCHI_UDMA_NB_UART; i++)
  {
    __rt_uart[i].open_count = 0;
1c00bc06:	1c00d7b7          	lui	a5,0x1c00d
1c00bc0a:	b607ae23          	sw	zero,-1156(a5) # 1c00cb7c <__rt_uart>
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c00bc0e:	8d41                	or	a0,a0,s0
  }

  if (err) rt_fatal("Unable to initialize uart driver\n");
1c00bc10:	c10d                	beqz	a0,1c00bc32 <__rt_uart_init+0x54>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c00bc12:	01402673          	csrr	a2,uhartid
1c00bc16:	1c00c537          	lui	a0,0x1c00c
  return (hart_id >> 5) & 0x3f;
1c00bc1a:	40565593          	srai	a1,a2,0x5
1c00bc1e:	f265b5b3          	p.bclr	a1,a1,25,6
1c00bc22:	f4563633          	p.bclr	a2,a2,26,5
1c00bc26:	5ec50513          	addi	a0,a0,1516 # 1c00c5ec <__hyper_pad+0xa4>
1c00bc2a:	946ff0ef          	jal	ra,1c00ad70 <printf>
1c00bc2e:	8c6ff0ef          	jal	ra,1c00acf4 <abort>
}
1c00bc32:	40b2                	lw	ra,12(sp)
1c00bc34:	4422                	lw	s0,8(sp)
1c00bc36:	0141                	addi	sp,sp,16
1c00bc38:	8082                	ret
	...

1c00bc3c <__cluster_text_start>:
  .global __rt_pe_start
__rt_pe_start:

#endif

    csrr    a0, 0xF14
1c00bc3c:	f1402573          	csrr	a0,mhartid
    andi    a1, a0, 0x1f
1c00bc40:	01f57593          	andi	a1,a0,31
    srli    a0, a0, 5
1c00bc44:	8115                	srli	a0,a0,0x5
    
    // Activate a few events
    li      t0, (1<<PULP_DISPATCH_EVENT) | (1<<PULP_HW_BAR_EVENT) | (1<<PULP_MUTEX_EVENT)
1c00bc46:	000702b7          	lui	t0,0x70
    li      t1, ARCHI_EU_DEMUX_ADDR
1c00bc4a:	00204337          	lui	t1,0x204
    sw      t0, EU_CORE_MASK(t1)
1c00bc4e:	00532023          	sw	t0,0(t1) # 204000 <__L2+0x184000>

#ifndef ARCHI_NO_L1_TINY
    sw      x0, %tiny(__rt_dma_first_pending)(x0)
1c00bc52:	00002a23          	sw	zero,20(zero) # 14 <__rt_bridge_eeprom_handle>

#ifdef ARCHI_HAS_CC
    li      t2, ARCHI_CC_CORE_ID
    bne     a1, t2, __rt_slave_start
#else
    bne     a1, x0, __rt_slave_start
1c00bc56:	10059063          	bnez	a1,1c00bd56 <__rt_slave_start>
#endif

    li      t0, (1<<ARCHI_CL_EVT_DMA1)
1c00bc5a:	20000293          	li	t0,512
    li      t1, ARCHI_EU_DEMUX_ADDR
1c00bc5e:	00204337          	lui	t1,0x204
    sw      t0, EU_CORE_MASK_IRQ_OR(t1)
1c00bc62:	00532a23          	sw	t0,20(t1) # 204014 <__L2+0x184014>



    // Prepare few values that will be kept in saved registers to optimize the loop
    la      s0, __rt_cluster_pool
1c00bc66:	e3ff4417          	auipc	s0,0xe3ff4
1c00bc6a:	39e40413          	addi	s0,s0,926 # 4 <__rt_bridge_flash_handle>
    li      s3, ARCHI_EU_DEMUX_ADDR
1c00bc6e:	002049b7          	lui	s3,0x204
    li      s4, 1<<RT_CLUSTER_CALL_EVT
1c00bc72:	4a09                	li	s4,2
    la      s5, __rt_master_event
1c00bc74:	00000a97          	auipc	s5,0x0
1c00bc78:	038a8a93          	addi	s5,s5,56 # 1c00bcac <__rt_master_event>
    la      s7, __rt_fc_cluster_data
1c00bc7c:	00001b97          	auipc	s7,0x1
1c00bc80:	f74b8b93          	addi	s7,s7,-140 # 1c00cbf0 <__rt_fc_cluster_data>
    li      t2, RT_FC_CLUSTER_DATA_T_SIZEOF
1c00bc84:	02800393          	li	t2,40
    mul     t2, t2, a0
1c00bc88:	02a383b3          	mul	t2,t2,a0
    add     s7, s7, t2
1c00bc8c:	9b9e                	add	s7,s7,t2
    addi    s7, s7, RT_FC_CLUSTER_DATA_T_EVENTS
1c00bc8e:	0b91                	addi	s7,s7,4
#if defined(ARCHI_HAS_FC)
#if defined(ITC_VERSION)
    li      s9, ARCHI_FC_ITC_ADDR + ITC_STATUS_SET_OFFSET
    li      s8, 1<<RT_FC_ENQUEUE_EVENT
#else
    li      s9, ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_FC_ENQUEUE_EVENT << 2)
1c00bc90:	1b201cb7          	lui	s9,0x1b201
1c00bc94:	e04c8c93          	addi	s9,s9,-508 # 1b200e04 <__fc_tcdm_end+0x1ffa34>
    li      s8, 1
1c00bc98:	4c05                	li	s8,1
    // In case there is no FC, the event must be sent to cluster 0 event unit
    li      s9, ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(0) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_FC_ENQUEUE_EVENT << 2)
    li      s8, 1    
#endif
#ifndef ARCHI_HAS_NO_DISPATCH
    la      s10, __rt_set_slave_stack
1c00bc9a:	00000d17          	auipc	s10,0x0
1c00bc9e:	0fad0d13          	addi	s10,s10,250 # 1c00bd94 <__rt_set_slave_stack>
    ori     s10, s10, 1
1c00bca2:	001d6d13          	ori	s10,s10,1
#endif

    csrwi   0x300, 0x8
1c00bca6:	30045073          	csrwi	mstatus,8

    j       __rt_master_loop
1c00bcaa:	a819                	j	1c00bcc0 <__rt_master_loop>

1c00bcac <__rt_master_event>:



__rt_master_event:
    beq     s6, x0, __rt_master_loop
1c00bcac:	000b0a63          	beqz	s6,1c00bcc0 <__rt_master_loop>

1c00bcb0 <__rt_push_event_to_fc_retry>:

__rt_push_event_to_fc_retry:
    // Now we have to push the termination event to FC side
    // First wait until the slot for posting events is free
    lw      t0, 0(s7)
1c00bcb0:	000ba283          	lw	t0,0(s7)
    bne     t0, x0, __rt_push_event_to_fc_wait
1c00bcb4:	08029a63          	bnez	t0,1c00bd48 <__rt_push_event_to_fc_wait>

    // Push it
    sw      s6, 0(s7)
1c00bcb8:	016ba023          	sw	s6,0(s7)

    // And notify the FC side with a HW event in case it is sleeping
    sw      s8, 0(s9)
1c00bcbc:	018ca023          	sw	s8,0(s9)

1c00bcc0 <__rt_master_loop>:


__rt_master_loop:
    // Check if a task is ready in the pool
    lw      t3, 0(s0)
1c00bcc0:	00042e03          	lw	t3,0(s0)
    // Check if a call is ready, e.g. if nb_pe is not zero
    // otherwise go to sleep
    beq     t3, x0, __rt_master_sleep
1c00bcc4:	060e0b63          	beqz	t3,1c00bd3a <__rt_master_sleep>

1c00bcc8 <__rt_master_loop_update_next>:

__rt_master_loop_update_next:
    lw      t4, RT_CLUSTER_TASK_NEXT(t3)
1c00bcc8:	020e2e83          	lw	t4,32(t3)
    sw      x0, RT_CLUSTER_TASK_PENDING(t3)
1c00bccc:	020e2223          	sw	zero,36(t3)
    sw      t4, 0(s0)
1c00bcd0:	01d42023          	sw	t4,0(s0)

    // Check again next pointer in case it was updated by the FC.
    // If so, do it it again as this will ensure that either we see the new
    // value or the FC sees our write
    lw      t5, RT_CLUSTER_TASK_NEXT(t3)
1c00bcd4:	020e2f03          	lw	t5,32(t3)
    bne     t4, t5, __rt_master_loop_update_next
1c00bcd8:	ffee98e3          	bne	t4,t5,1c00bcc8 <__rt_master_loop_update_next>
    li      a4, 0
    ebreak
#endif

#ifdef __RT_USE_ASSERT
    csrwi   0x7D0, 0
1c00bcdc:	7d005073          	csrwi	0x7d0,0
#endif

    // Reads entry point information
    lw      a0, RT_CLUSTER_TASK_ARG(t3)
1c00bce0:	004e2503          	lw	a0,4(t3)
    lw      t0, RT_CLUSTER_TASK_ENTRY(t3)
1c00bce4:	000e2283          	lw	t0,0(t3)
    lw      sp, RT_CLUSTER_TASK_STACKS(t3)
1c00bce8:	008e2103          	lw	sp,8(t3)
    lw      t1, RT_CLUSTER_TASK_STACK_SIZE(t3)
1c00bcec:	00ce2303          	lw	t1,12(t3)
    lw      t2, RT_CLUSTER_TASK_SLAVE_STACK_SIZE(t3)
1c00bcf0:	010e2383          	lw	t2,16(t3)
    lw      t5, RT_CLUSTER_TASK_CORE_MASK(t3)
1c00bcf4:	028e2f03          	lw	t5,40(t3)
    lw      s6, RT_CLUSTER_TASK_COMPLETION_CALLBACK(t3)
1c00bcf8:	018e2b03          	lw	s6,24(t3)
    lw      t6, RT_CLUSTER_TASK_NB_CORES(t3)
1c00bcfc:	014e2f83          	lw	t6,20(t3)
    mv      ra, s5
1c00bd00:	80d6                	mv	ra,s5

    add     sp, sp, t1
1c00bd02:	911a                	add	sp,sp,t1

#ifdef ARCHI_NO_L1_TINY
    la      t4, __rt_cluster_nb_active_pe
    sw      t6, 0(t4)
#else
    sw      t6, %tiny(__rt_cluster_nb_active_pe)(x0)
1c00bd04:	01f02c23          	sw	t6,24(zero) # 18 <__rt_first_free>
#endif

#ifdef __RT_USE_ASSERT
    // Update stack checking information
    beqz    t1, __rt_no_stack_check
1c00bd08:	00030a63          	beqz	t1,1c00bd1c <__rt_no_stack_check>
    sub     t4, sp, t1
1c00bd0c:	40610eb3          	sub	t4,sp,t1
    csrw    0x7D1, t4
1c00bd10:	7d1e9073          	csrw	0x7d1,t4
    csrw    0x7D2, sp
1c00bd14:	7d211073          	csrw	0x7d2,sp
    csrwi   0x7D0, 1
1c00bd18:	7d00d073          	csrwi	0x7d0,1

1c00bd1c <__rt_no_stack_check>:
#endif

__rt_no_stack_check:
    // Whatever the number of cores, we need to setup the barrier as the master code is compiled to use it
    sw      t5, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG(s3)
1c00bd1c:	09e9a223          	sw	t5,132(s3) # 204084 <__L2+0x184084>
#ifdef ARCHI_HAS_CC
    // When we have a cluster controller, don't configure the slave barrier
    // if we don't have have any slave
    beqz    t5, __rt_master_no_slave_barrier
#endif
    sw      t5, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_MASK(s3)
1c00bd20:	21e9a023          	sw	t5,512(s3)
    sw      t5, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TARGET_MASK(s3)
1c00bd24:	21e9a623          	sw	t5,524(s3)

1c00bd28 <__rt_master_no_slave_barrier>:
    sw      t6, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TARGET_MASK + EU_BARRIER_SIZE(s3)
#endif

    // Set stack on slaves
    // For that we push first the function for setting stack, then the stack size and the base
    p.beqimm t5, 0, __rt_master_loop_no_slave
1c00bd28:	000f2863          	p.beqimm	t5,0,1c00bd38 <__rt_master_loop_no_slave>
    sw      s10, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c00bd2c:	09a9a023          	sw	s10,128(s3)
    sw      t2, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c00bd30:	0879a023          	sw	t2,128(s3)
    sw      sp, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c00bd34:	0829a023          	sw	sp,128(s3)

1c00bd38 <__rt_master_loop_no_slave>:

__rt_master_loop_no_slave:

    // Call the entry point, this will directly come back to the master loop
    jr      t0
1c00bd38:	8282                	jr	t0

1c00bd3a <__rt_master_sleep>:
    lw      a1, %tiny(__rt_pe_trace)(x0)
    li      a2, 1
    ebreak
#endif

    sw      s4, EU_CORE_MASK_OR(s3)
1c00bd3a:	0149a423          	sw	s4,8(s3)
    p.elw   x0, EU_CORE_EVENT_WAIT_CLEAR(s3)
1c00bd3e:	03c9e003          	p.elw	zero,60(s3)
    sw      s4, EU_CORE_MASK_AND(s3)
1c00bd42:	0149a223          	sw	s4,4(s3)
    j       __rt_master_loop
1c00bd46:	bfad                	j	1c00bcc0 <__rt_master_loop>

1c00bd48 <__rt_push_event_to_fc_wait>:




__rt_push_event_to_fc_wait:
    sw      s4, EU_CORE_MASK_OR(s3)
1c00bd48:	0149a423          	sw	s4,8(s3)
    p.elw   x0, EU_CORE_EVENT_WAIT_CLEAR(s3)
1c00bd4c:	03c9e003          	p.elw	zero,60(s3)
    sw      s4, EU_CORE_MASK_AND(s3)
1c00bd50:	0149a223          	sw	s4,4(s3)
    j       __rt_push_event_to_fc_retry
1c00bd54:	bfb1                	j	1c00bcb0 <__rt_push_event_to_fc_retry>

1c00bd56 <__rt_slave_start>:
__rt_slave_start:


#ifndef ARCHI_HAS_NO_DISPATCH

    li      s2, ARCHI_EU_DEMUX_ADDR
1c00bd56:	00204937          	lui	s2,0x204
    csrr    s3, 0xF14
1c00bd5a:	f14029f3          	csrr	s3,mhartid
    and     s3, s3, 0x1f
1c00bd5e:	01f9f993          	andi	s3,s3,31
    la      s4, __rt_fork_return
1c00bd62:	00000a17          	auipc	s4,0x0
1c00bd66:	012a0a13          	addi	s4,s4,18 # 1c00bd74 <__rt_fork_return>
    la      s5, __rt_wait_for_dispatch
1c00bd6a:	00000a97          	auipc	s5,0x0
1c00bd6e:	00ea8a93          	addi	s5,s5,14 # 1c00bd78 <__rt_wait_for_dispatch>
    j       __rt_wait_for_dispatch
1c00bd72:	a019                	j	1c00bd78 <__rt_wait_for_dispatch>

1c00bd74 <__rt_fork_return>:
    // When the cluster has a controller barrier 0 is used for normal team barrier
    // and barrier 1 is used for end of offload
    p.elw   t0, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_WAIT_CLEAR + EU_BARRIER_SIZE(s2)
#else
#ifndef ARCHI_HAS_NO_BARRIER
    p.elw   t0, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_WAIT_CLEAR(s2)
1c00bd74:	21c96283          	p.elw	t0,540(s2) # 20421c <__L2+0x18421c>

1c00bd78 <__rt_wait_for_dispatch>:
    li      a2, 1
    ebreak
#endif

    // Wait for PC + arg information from dispatcher
    p.elw   t0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c00bd78:	08096283          	p.elw	t0,128(s2)
    p.elw   a0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c00bd7c:	08096503          	p.elw	a0,128(s2)
    ebreak
    mv      a0, t1
#endif

    // Check if this is an entry with a barrier at the end (fork entry)
    andi    t1, t0, 1
1c00bd80:	0012f313          	andi	t1,t0,1
    bne     t1, zero, __rt_other_entry
1c00bd84:	00031563          	bnez	t1,1c00bd8e <__rt_other_entry>

1c00bd88 <__rt_fork_entry>:

__rt_fork_entry:

    // Jump to the handler and prepare r9 to jump back just before the main loop
    add     ra, s4, x0
1c00bd88:	000a00b3          	add	ra,s4,zero
    jr      t0
1c00bd8c:	8282                	jr	t0

1c00bd8e <__rt_other_entry>:

__rt_other_entry:

  // Jump to the handler and prepare r9 to jump back directly to the main loop
    add     ra, s5, x0
1c00bd8e:	000a80b3          	add	ra,s5,zero
    jr      t0
1c00bd92:	8282                	jr	t0

1c00bd94 <__rt_set_slave_stack>:

  .global __rt_set_slave_stack
__rt_set_slave_stack:

#ifdef __RT_USE_ASSERT
    csrwi   0x7D0, 0
1c00bd94:	7d005073          	csrwi	0x7d0,0
#endif

    // Multiply the stack size by the core ID and add the stack base to get our stack
    p.elw   t0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c00bd98:	08096283          	p.elw	t0,128(s2)
    // If the cluster has a cluster controller, the first slave has core ID 0
    // and thus we need to take the next stack
    addi     t5, s3, 1
    p.mul   t4, t5, a0
#else
    p.mul   t4, s3, a0
1c00bd9c:	02a98eb3          	mul	t4,s3,a0
#endif
    add     sp, t4, t0
1c00bda0:	005e8133          	add	sp,t4,t0

#ifdef __RT_USE_ASSERT
    beqz    a0, __rt_no_stack_check_end
1c00bda4:	c909                	beqz	a0,1c00bdb6 <__rt_no_stack_check_end>
    sub     t4, sp, a0
1c00bda6:	40a10eb3          	sub	t4,sp,a0
    csrw    0x7D1, t4
1c00bdaa:	7d1e9073          	csrw	0x7d1,t4
    csrw    0x7D2, sp
1c00bdae:	7d211073          	csrw	0x7d2,sp
    csrwi   0x7D0, 1
1c00bdb2:	7d00d073          	csrwi	0x7d0,1

1c00bdb6 <__rt_no_stack_check_end>:
#endif
__rt_no_stack_check_end:
    ret
1c00bdb6:	8082                	ret

1c00bdb8 <__rt_dma_2d>:
#if defined(ARCHI_HAS_CLUSTER)
#ifndef ARCHI_NO_L1_TINY
    .global __rt_dma_2d
__rt_dma_2d:

    sw  x8, -4(sp)
1c00bdb8:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c00bdbc:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c00bdc0:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c00bdc4:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c00bdc8:	fec12623          	sw	a2,-20(sp)

    li  a2, ARCHI_MCHAN_DEMUX_ADDR
1c00bdcc:	00204637          	lui	a2,0x204
1c00bdd0:	40060613          	addi	a2,a2,1024 # 204400 <__L2+0x184400>

    lw  x8, %tiny(__rt_dma_first_pending)(x0)
1c00bdd4:	01402403          	lw	s0,20(zero) # 14 <__rt_bridge_eeprom_handle>

    lw  a1, CL_DMA_CMD_T_ID(x8)
1c00bdd8:	400c                	lw	a1,0(s0)
    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00bdda:	4408                	lw	a0,8(s0)
    p.bsetr a1, x0, a1
1c00bddc:	80b045b3          	p.bsetr	a1,zero,a1
    sw  a1, MCHAN_STATUS_OFFSET(a2)
1c00bde0:	c24c                	sw	a1,4(a2)
    lw  a1, CL_DMA_CMD_T_LENGTH(x8)
1c00bde2:	480c                	lw	a1,16(s0)

    beqz a0, __rt_dma_2d_done
1c00bde4:	c131                	beqz	a0,1c00be28 <__rt_dma_2d_done>

1c00bde6 <__rt_dma_2d_redo>:

__rt_dma_2d_redo:
    lw  x9, CL_DMA_CMD_T_CMD(x8)
1c00bde6:	4044                	lw	s1,4(s0)
    
    bgt a0, a1, __rt_dma_2d_not_last
1c00bde8:	00a5c363          	blt	a1,a0,1c00bdee <__rt_dma_2d_not_last>
    mv  a1, a0
1c00bdec:	85aa                	mv	a1,a0

1c00bdee <__rt_dma_2d_not_last>:

__rt_dma_2d_not_last:
    lw  a0, MCHAN_CMD_OFFSET(a2)
1c00bdee:	4208                	lw	a0,0(a2)
    sw  a0, CL_DMA_CMD_T_ID(x8)
1c00bdf0:	c008                	sw	a0,0(s0)

    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00bdf2:	4408                	lw	a0,8(s0)

    p.inserti x9, a1, MCHAN_CMD_CMD_LEN_WIDTH-1, MCHAN_CMD_CMD_LEN_BIT
1c00bdf4:	de05a4b3          	p.insert	s1,a1,15,0

    sw  x9, MCHAN_CMD_OFFSET(a2)   // cmd
1c00bdf8:	c204                	sw	s1,0(a2)

    sub a0, a0, a1
1c00bdfa:	8d0d                	sub	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00bdfc:	c408                	sw	a0,8(s0)

    lw  a0, CL_DMA_CMD_T_LOC_ADDR(x8)
1c00bdfe:	4848                	lw	a0,20(s0)

    sw  a0, MCHAN_CMD_OFFSET(a2)   // local address
1c00be00:	c208                	sw	a0,0(a2)
    add a0, a0, a1
1c00be02:	952e                	add	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_LOC_ADDR(x8)
1c00be04:	c848                	sw	a0,20(s0)


    lw  a0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c00be06:	4c08                	lw	a0,24(s0)
    lw  a1, CL_DMA_CMD_T_STRIDE(x8)
1c00be08:	444c                	lw	a1,12(s0)

    sw  a0, MCHAN_CMD_OFFSET(a2)   // external address
1c00be0a:	c208                	sw	a0,0(a2)
    add a0, a0, a1
1c00be0c:	952e                	add	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c00be0e:	cc08                	sw	a0,24(s0)

1c00be10 <__rt_dma_2d_exit>:

__rt_dma_2d_exit:
    lw  x8, -4(sp)
1c00be10:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c00be14:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c00be18:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c00be1c:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c00be20:	fec12603          	lw	a2,-20(sp)

    mret
1c00be24:	30200073          	mret

1c00be28 <__rt_dma_2d_done>:

__rt_dma_2d_done:
    sw  x0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c00be28:	00042c23          	sw	zero,24(s0)

    lw  x9, CL_DMA_CMD_T_NEXT(x8)
1c00be2c:	4c44                	lw	s1,28(s0)
    sw  x9, %tiny(__rt_dma_first_pending)(x0)
1c00be2e:	00902a23          	sw	s1,20(zero) # 14 <__rt_bridge_eeprom_handle>

    li  x8, ARCHI_EU_DEMUX_ADDR + EU_SW_EVENTS_DEMUX_OFFSET + (RT_DMA_EVENT<<2)
1c00be32:	00204437          	lui	s0,0x204
1c00be36:	11440413          	addi	s0,s0,276 # 204114 <__L2+0x184114>
    sw  x0, EU_CORE_TRIGG_SW_EVENT(x8)
1c00be3a:	00042023          	sw	zero,0(s0)

    beqz x9, __rt_dma_2d_exit
1c00be3e:	d8e9                	beqz	s1,1c00be10 <__rt_dma_2d_exit>

    mv  x8, x9
1c00be40:	8426                	mv	s0,s1

    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c00be42:	4408                	lw	a0,8(s0)
    lw  a1, CL_DMA_CMD_T_LENGTH(x8)
1c00be44:	480c                	lw	a1,16(s0)

    j   __rt_dma_2d_redo
1c00be46:	b745                	j	1c00bde6 <__rt_dma_2d_redo>
